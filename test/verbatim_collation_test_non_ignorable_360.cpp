// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_360_000)
{
    // 40D9 003F;	
    // (䃙) CJK UNIFIED IDEOGRAPH-40D9	[FB80 C0D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_001)
{
    // 40D9 0061;	
    // (䃙) CJK UNIFIED IDEOGRAPH-40D9	[FB80 C0D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_002)
{
    // 40D9 0041;	
    // (䃙) CJK UNIFIED IDEOGRAPH-40D9	[FB80 C0D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_003)
{
    // 40D9 0062;	
    // (䃙) CJK UNIFIED IDEOGRAPH-40D9	[FB80 C0D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_004)
{
    // 40DA 0021;	
    // (䃚) CJK UNIFIED IDEOGRAPH-40DA	[FB80 C0DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_005)
{
    // 40DA 003F;	
    // (䃚) CJK UNIFIED IDEOGRAPH-40DA	[FB80 C0DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_006)
{
    // 40DA 0061;	
    // (䃚) CJK UNIFIED IDEOGRAPH-40DA	[FB80 C0DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_007)
{
    // 40DA 0041;	
    // (䃚) CJK UNIFIED IDEOGRAPH-40DA	[FB80 C0DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_008)
{
    // 40DA 0062;	
    // (䃚) CJK UNIFIED IDEOGRAPH-40DA	[FB80 C0DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_009)
{
    // 40DB 0021;	
    // (䃛) CJK UNIFIED IDEOGRAPH-40DB	[FB80 C0DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_010)
{
    // 40DB 003F;	
    // (䃛) CJK UNIFIED IDEOGRAPH-40DB	[FB80 C0DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_011)
{
    // 40DB 0061;	
    // (䃛) CJK UNIFIED IDEOGRAPH-40DB	[FB80 C0DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_012)
{
    // 40DB 0041;	
    // (䃛) CJK UNIFIED IDEOGRAPH-40DB	[FB80 C0DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_013)
{
    // 40DB 0062;	
    // (䃛) CJK UNIFIED IDEOGRAPH-40DB	[FB80 C0DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_014)
{
    // 40DC 0021;	
    // (䃜) CJK UNIFIED IDEOGRAPH-40DC	[FB80 C0DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_015)
{
    // 40DC 003F;	
    // (䃜) CJK UNIFIED IDEOGRAPH-40DC	[FB80 C0DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_016)
{
    // 40DC 0061;	
    // (䃜) CJK UNIFIED IDEOGRAPH-40DC	[FB80 C0DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_017)
{
    // 40DC 0041;	
    // (䃜) CJK UNIFIED IDEOGRAPH-40DC	[FB80 C0DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_018)
{
    // 40DC 0062;	
    // (䃜) CJK UNIFIED IDEOGRAPH-40DC	[FB80 C0DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_019)
{
    // 40DD 0021;	
    // (䃝) CJK UNIFIED IDEOGRAPH-40DD	[FB80 C0DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_020)
{
    // 40DD 003F;	
    // (䃝) CJK UNIFIED IDEOGRAPH-40DD	[FB80 C0DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_021)
{
    // 40DD 0061;	
    // (䃝) CJK UNIFIED IDEOGRAPH-40DD	[FB80 C0DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_022)
{
    // 40DD 0041;	
    // (䃝) CJK UNIFIED IDEOGRAPH-40DD	[FB80 C0DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_023)
{
    // 40DD 0062;	
    // (䃝) CJK UNIFIED IDEOGRAPH-40DD	[FB80 C0DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_024)
{
    // 40DE 0021;	
    // (䃞) CJK UNIFIED IDEOGRAPH-40DE	[FB80 C0DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_025)
{
    // 40DE 003F;	
    // (䃞) CJK UNIFIED IDEOGRAPH-40DE	[FB80 C0DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_026)
{
    // 40DE 0061;	
    // (䃞) CJK UNIFIED IDEOGRAPH-40DE	[FB80 C0DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_027)
{
    // 40DE 0041;	
    // (䃞) CJK UNIFIED IDEOGRAPH-40DE	[FB80 C0DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_028)
{
    // 40DE 0062;	
    // (䃞) CJK UNIFIED IDEOGRAPH-40DE	[FB80 C0DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_029)
{
    // 40DF 0021;	
    // (䃟) CJK UNIFIED IDEOGRAPH-40DF	[FB80 C0DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_030)
{
    // 40DF 003F;	
    // (䃟) CJK UNIFIED IDEOGRAPH-40DF	[FB80 C0DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_031)
{
    // 40DF 0061;	
    // (䃟) CJK UNIFIED IDEOGRAPH-40DF	[FB80 C0DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_032)
{
    // 40DF 0041;	
    // (䃟) CJK UNIFIED IDEOGRAPH-40DF	[FB80 C0DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_033)
{
    // 40DF 0062;	
    // (䃟) CJK UNIFIED IDEOGRAPH-40DF	[FB80 C0DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_034)
{
    // 40E0 0021;	
    // (䃠) CJK UNIFIED IDEOGRAPH-40E0	[FB80 C0E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_035)
{
    // 40E0 003F;	
    // (䃠) CJK UNIFIED IDEOGRAPH-40E0	[FB80 C0E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_036)
{
    // 40E0 0061;	
    // (䃠) CJK UNIFIED IDEOGRAPH-40E0	[FB80 C0E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_037)
{
    // 40E0 0041;	
    // (䃠) CJK UNIFIED IDEOGRAPH-40E0	[FB80 C0E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_038)
{
    // 40E0 0062;	
    // (䃠) CJK UNIFIED IDEOGRAPH-40E0	[FB80 C0E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_039)
{
    // 40E1 0021;	
    // (䃡) CJK UNIFIED IDEOGRAPH-40E1	[FB80 C0E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_040)
{
    // 40E1 003F;	
    // (䃡) CJK UNIFIED IDEOGRAPH-40E1	[FB80 C0E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_041)
{
    // 40E1 0061;	
    // (䃡) CJK UNIFIED IDEOGRAPH-40E1	[FB80 C0E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_042)
{
    // 40E1 0041;	
    // (䃡) CJK UNIFIED IDEOGRAPH-40E1	[FB80 C0E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_043)
{
    // 40E1 0062;	
    // (䃡) CJK UNIFIED IDEOGRAPH-40E1	[FB80 C0E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_044)
{
    // 40E2 0021;	
    // (䃢) CJK UNIFIED IDEOGRAPH-40E2	[FB80 C0E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_045)
{
    // 40E2 003F;	
    // (䃢) CJK UNIFIED IDEOGRAPH-40E2	[FB80 C0E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_046)
{
    // 40E2 0061;	
    // (䃢) CJK UNIFIED IDEOGRAPH-40E2	[FB80 C0E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_047)
{
    // 40E2 0041;	
    // (䃢) CJK UNIFIED IDEOGRAPH-40E2	[FB80 C0E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_048)
{
    // 40E2 0062;	
    // (䃢) CJK UNIFIED IDEOGRAPH-40E2	[FB80 C0E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_049)
{
    // 40E3 0021;	
    // (䃣) CJK UNIFIED IDEOGRAPH-40E3	[FB80 C0E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_050)
{
    // 2F951 0021;	
    // (䃣) CJK COMPATIBILITY IDEOGRAPH-2F951	[FB80 C0E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F951, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_051)
{
    // 40E3 003F;	
    // (䃣) CJK UNIFIED IDEOGRAPH-40E3	[FB80 C0E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_052)
{
    // 2F951 003F;	
    // (䃣) CJK COMPATIBILITY IDEOGRAPH-2F951	[FB80 C0E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F951, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_053)
{
    // 40E3 0061;	
    // (䃣) CJK UNIFIED IDEOGRAPH-40E3	[FB80 C0E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_054)
{
    // 2F951 0061;	
    // (䃣) CJK COMPATIBILITY IDEOGRAPH-2F951	[FB80 C0E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F951, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_055)
{
    // 40E3 0041;	
    // (䃣) CJK UNIFIED IDEOGRAPH-40E3	[FB80 C0E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_056)
{
    // 2F951 0041;	
    // (䃣) CJK COMPATIBILITY IDEOGRAPH-2F951	[FB80 C0E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F951, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_057)
{
    // 40E3 0062;	
    // (䃣) CJK UNIFIED IDEOGRAPH-40E3	[FB80 C0E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_058)
{
    // 2F951 0062;	
    // (䃣) CJK COMPATIBILITY IDEOGRAPH-2F951	[FB80 C0E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F951, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_059)
{
    // 40E4 0021;	
    // (䃤) CJK UNIFIED IDEOGRAPH-40E4	[FB80 C0E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_060)
{
    // 40E4 003F;	
    // (䃤) CJK UNIFIED IDEOGRAPH-40E4	[FB80 C0E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_061)
{
    // 40E4 0061;	
    // (䃤) CJK UNIFIED IDEOGRAPH-40E4	[FB80 C0E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_062)
{
    // 40E4 0041;	
    // (䃤) CJK UNIFIED IDEOGRAPH-40E4	[FB80 C0E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_063)
{
    // 40E4 0062;	
    // (䃤) CJK UNIFIED IDEOGRAPH-40E4	[FB80 C0E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_064)
{
    // 40E5 0021;	
    // (䃥) CJK UNIFIED IDEOGRAPH-40E5	[FB80 C0E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_065)
{
    // 40E5 003F;	
    // (䃥) CJK UNIFIED IDEOGRAPH-40E5	[FB80 C0E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_066)
{
    // 40E5 0061;	
    // (䃥) CJK UNIFIED IDEOGRAPH-40E5	[FB80 C0E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_067)
{
    // 40E5 0041;	
    // (䃥) CJK UNIFIED IDEOGRAPH-40E5	[FB80 C0E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_068)
{
    // 40E5 0062;	
    // (䃥) CJK UNIFIED IDEOGRAPH-40E5	[FB80 C0E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_069)
{
    // 40E6 0021;	
    // (䃦) CJK UNIFIED IDEOGRAPH-40E6	[FB80 C0E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_070)
{
    // 40E6 003F;	
    // (䃦) CJK UNIFIED IDEOGRAPH-40E6	[FB80 C0E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_071)
{
    // 40E6 0061;	
    // (䃦) CJK UNIFIED IDEOGRAPH-40E6	[FB80 C0E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_072)
{
    // 40E6 0041;	
    // (䃦) CJK UNIFIED IDEOGRAPH-40E6	[FB80 C0E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_073)
{
    // 40E6 0062;	
    // (䃦) CJK UNIFIED IDEOGRAPH-40E6	[FB80 C0E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_074)
{
    // 40E7 0021;	
    // (䃧) CJK UNIFIED IDEOGRAPH-40E7	[FB80 C0E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_075)
{
    // 40E7 003F;	
    // (䃧) CJK UNIFIED IDEOGRAPH-40E7	[FB80 C0E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_076)
{
    // 40E7 0061;	
    // (䃧) CJK UNIFIED IDEOGRAPH-40E7	[FB80 C0E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_077)
{
    // 40E7 0041;	
    // (䃧) CJK UNIFIED IDEOGRAPH-40E7	[FB80 C0E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_078)
{
    // 40E7 0062;	
    // (䃧) CJK UNIFIED IDEOGRAPH-40E7	[FB80 C0E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_079)
{
    // 40E8 0021;	
    // (䃨) CJK UNIFIED IDEOGRAPH-40E8	[FB80 C0E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_080)
{
    // 40E8 003F;	
    // (䃨) CJK UNIFIED IDEOGRAPH-40E8	[FB80 C0E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_081)
{
    // 40E8 0061;	
    // (䃨) CJK UNIFIED IDEOGRAPH-40E8	[FB80 C0E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_082)
{
    // 40E8 0041;	
    // (䃨) CJK UNIFIED IDEOGRAPH-40E8	[FB80 C0E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_083)
{
    // 40E8 0062;	
    // (䃨) CJK UNIFIED IDEOGRAPH-40E8	[FB80 C0E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_084)
{
    // 40E9 0021;	
    // (䃩) CJK UNIFIED IDEOGRAPH-40E9	[FB80 C0E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_085)
{
    // 40E9 003F;	
    // (䃩) CJK UNIFIED IDEOGRAPH-40E9	[FB80 C0E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_086)
{
    // 40E9 0061;	
    // (䃩) CJK UNIFIED IDEOGRAPH-40E9	[FB80 C0E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_087)
{
    // 40E9 0041;	
    // (䃩) CJK UNIFIED IDEOGRAPH-40E9	[FB80 C0E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_088)
{
    // 40E9 0062;	
    // (䃩) CJK UNIFIED IDEOGRAPH-40E9	[FB80 C0E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_089)
{
    // 40EA 0021;	
    // (䃪) CJK UNIFIED IDEOGRAPH-40EA	[FB80 C0EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_090)
{
    // 40EA 003F;	
    // (䃪) CJK UNIFIED IDEOGRAPH-40EA	[FB80 C0EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_091)
{
    // 40EA 0061;	
    // (䃪) CJK UNIFIED IDEOGRAPH-40EA	[FB80 C0EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_092)
{
    // 40EA 0041;	
    // (䃪) CJK UNIFIED IDEOGRAPH-40EA	[FB80 C0EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_093)
{
    // 40EA 0062;	
    // (䃪) CJK UNIFIED IDEOGRAPH-40EA	[FB80 C0EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_094)
{
    // 40EB 0021;	
    // (䃫) CJK UNIFIED IDEOGRAPH-40EB	[FB80 C0EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_095)
{
    // 40EB 003F;	
    // (䃫) CJK UNIFIED IDEOGRAPH-40EB	[FB80 C0EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_096)
{
    // 40EB 0061;	
    // (䃫) CJK UNIFIED IDEOGRAPH-40EB	[FB80 C0EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_097)
{
    // 40EB 0041;	
    // (䃫) CJK UNIFIED IDEOGRAPH-40EB	[FB80 C0EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_098)
{
    // 40EB 0062;	
    // (䃫) CJK UNIFIED IDEOGRAPH-40EB	[FB80 C0EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_099)
{
    // 40EC 0021;	
    // (䃬) CJK UNIFIED IDEOGRAPH-40EC	[FB80 C0EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_100)
{
    // 40EC 003F;	
    // (䃬) CJK UNIFIED IDEOGRAPH-40EC	[FB80 C0EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_101)
{
    // 40EC 0061;	
    // (䃬) CJK UNIFIED IDEOGRAPH-40EC	[FB80 C0EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_102)
{
    // 40EC 0041;	
    // (䃬) CJK UNIFIED IDEOGRAPH-40EC	[FB80 C0EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_103)
{
    // 40EC 0062;	
    // (䃬) CJK UNIFIED IDEOGRAPH-40EC	[FB80 C0EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_104)
{
    // 40ED 0021;	
    // (䃭) CJK UNIFIED IDEOGRAPH-40ED	[FB80 C0ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_105)
{
    // 40ED 003F;	
    // (䃭) CJK UNIFIED IDEOGRAPH-40ED	[FB80 C0ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_106)
{
    // 40ED 0061;	
    // (䃭) CJK UNIFIED IDEOGRAPH-40ED	[FB80 C0ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_107)
{
    // 40ED 0041;	
    // (䃭) CJK UNIFIED IDEOGRAPH-40ED	[FB80 C0ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_108)
{
    // 40ED 0062;	
    // (䃭) CJK UNIFIED IDEOGRAPH-40ED	[FB80 C0ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_109)
{
    // 40EE 0021;	
    // (䃮) CJK UNIFIED IDEOGRAPH-40EE	[FB80 C0EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_110)
{
    // 40EE 003F;	
    // (䃮) CJK UNIFIED IDEOGRAPH-40EE	[FB80 C0EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_111)
{
    // 40EE 0061;	
    // (䃮) CJK UNIFIED IDEOGRAPH-40EE	[FB80 C0EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_112)
{
    // 40EE 0041;	
    // (䃮) CJK UNIFIED IDEOGRAPH-40EE	[FB80 C0EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_113)
{
    // 40EE 0062;	
    // (䃮) CJK UNIFIED IDEOGRAPH-40EE	[FB80 C0EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_114)
{
    // 40EF 0021;	
    // (䃯) CJK UNIFIED IDEOGRAPH-40EF	[FB80 C0EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_115)
{
    // 40EF 003F;	
    // (䃯) CJK UNIFIED IDEOGRAPH-40EF	[FB80 C0EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_116)
{
    // 40EF 0061;	
    // (䃯) CJK UNIFIED IDEOGRAPH-40EF	[FB80 C0EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_117)
{
    // 40EF 0041;	
    // (䃯) CJK UNIFIED IDEOGRAPH-40EF	[FB80 C0EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_118)
{
    // 40EF 0062;	
    // (䃯) CJK UNIFIED IDEOGRAPH-40EF	[FB80 C0EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_119)
{
    // 40F0 0021;	
    // (䃰) CJK UNIFIED IDEOGRAPH-40F0	[FB80 C0F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_120)
{
    // 40F0 003F;	
    // (䃰) CJK UNIFIED IDEOGRAPH-40F0	[FB80 C0F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_121)
{
    // 40F0 0061;	
    // (䃰) CJK UNIFIED IDEOGRAPH-40F0	[FB80 C0F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_122)
{
    // 40F0 0041;	
    // (䃰) CJK UNIFIED IDEOGRAPH-40F0	[FB80 C0F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_123)
{
    // 40F0 0062;	
    // (䃰) CJK UNIFIED IDEOGRAPH-40F0	[FB80 C0F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_124)
{
    // 40F1 0021;	
    // (䃱) CJK UNIFIED IDEOGRAPH-40F1	[FB80 C0F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_125)
{
    // 40F1 003F;	
    // (䃱) CJK UNIFIED IDEOGRAPH-40F1	[FB80 C0F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_126)
{
    // 40F1 0061;	
    // (䃱) CJK UNIFIED IDEOGRAPH-40F1	[FB80 C0F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_127)
{
    // 40F1 0041;	
    // (䃱) CJK UNIFIED IDEOGRAPH-40F1	[FB80 C0F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_128)
{
    // 40F1 0062;	
    // (䃱) CJK UNIFIED IDEOGRAPH-40F1	[FB80 C0F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_129)
{
    // 40F2 0021;	
    // (䃲) CJK UNIFIED IDEOGRAPH-40F2	[FB80 C0F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_130)
{
    // 40F2 003F;	
    // (䃲) CJK UNIFIED IDEOGRAPH-40F2	[FB80 C0F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_131)
{
    // 40F2 0061;	
    // (䃲) CJK UNIFIED IDEOGRAPH-40F2	[FB80 C0F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_132)
{
    // 40F2 0041;	
    // (䃲) CJK UNIFIED IDEOGRAPH-40F2	[FB80 C0F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_133)
{
    // 40F2 0062;	
    // (䃲) CJK UNIFIED IDEOGRAPH-40F2	[FB80 C0F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_134)
{
    // 40F3 0021;	
    // (䃳) CJK UNIFIED IDEOGRAPH-40F3	[FB80 C0F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_135)
{
    // 40F3 003F;	
    // (䃳) CJK UNIFIED IDEOGRAPH-40F3	[FB80 C0F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_136)
{
    // 40F3 0061;	
    // (䃳) CJK UNIFIED IDEOGRAPH-40F3	[FB80 C0F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_137)
{
    // 40F3 0041;	
    // (䃳) CJK UNIFIED IDEOGRAPH-40F3	[FB80 C0F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_138)
{
    // 40F3 0062;	
    // (䃳) CJK UNIFIED IDEOGRAPH-40F3	[FB80 C0F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_139)
{
    // 40F4 0021;	
    // (䃴) CJK UNIFIED IDEOGRAPH-40F4	[FB80 C0F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_140)
{
    // 40F4 003F;	
    // (䃴) CJK UNIFIED IDEOGRAPH-40F4	[FB80 C0F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_141)
{
    // 40F4 0061;	
    // (䃴) CJK UNIFIED IDEOGRAPH-40F4	[FB80 C0F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_142)
{
    // 40F4 0041;	
    // (䃴) CJK UNIFIED IDEOGRAPH-40F4	[FB80 C0F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_143)
{
    // 40F4 0062;	
    // (䃴) CJK UNIFIED IDEOGRAPH-40F4	[FB80 C0F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_144)
{
    // 40F5 0021;	
    // (䃵) CJK UNIFIED IDEOGRAPH-40F5	[FB80 C0F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_145)
{
    // 40F5 003F;	
    // (䃵) CJK UNIFIED IDEOGRAPH-40F5	[FB80 C0F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_146)
{
    // 40F5 0061;	
    // (䃵) CJK UNIFIED IDEOGRAPH-40F5	[FB80 C0F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_147)
{
    // 40F5 0041;	
    // (䃵) CJK UNIFIED IDEOGRAPH-40F5	[FB80 C0F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_148)
{
    // 40F5 0062;	
    // (䃵) CJK UNIFIED IDEOGRAPH-40F5	[FB80 C0F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_149)
{
    // 40F6 0021;	
    // (䃶) CJK UNIFIED IDEOGRAPH-40F6	[FB80 C0F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_150)
{
    // 40F6 003F;	
    // (䃶) CJK UNIFIED IDEOGRAPH-40F6	[FB80 C0F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_151)
{
    // 40F6 0061;	
    // (䃶) CJK UNIFIED IDEOGRAPH-40F6	[FB80 C0F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_152)
{
    // 40F6 0041;	
    // (䃶) CJK UNIFIED IDEOGRAPH-40F6	[FB80 C0F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_153)
{
    // 40F6 0062;	
    // (䃶) CJK UNIFIED IDEOGRAPH-40F6	[FB80 C0F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_154)
{
    // 40F7 0021;	
    // (䃷) CJK UNIFIED IDEOGRAPH-40F7	[FB80 C0F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_155)
{
    // 40F7 003F;	
    // (䃷) CJK UNIFIED IDEOGRAPH-40F7	[FB80 C0F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_156)
{
    // 40F7 0061;	
    // (䃷) CJK UNIFIED IDEOGRAPH-40F7	[FB80 C0F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_157)
{
    // 40F7 0041;	
    // (䃷) CJK UNIFIED IDEOGRAPH-40F7	[FB80 C0F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_158)
{
    // 40F7 0062;	
    // (䃷) CJK UNIFIED IDEOGRAPH-40F7	[FB80 C0F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_159)
{
    // 40F8 0021;	
    // (䃸) CJK UNIFIED IDEOGRAPH-40F8	[FB80 C0F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_160)
{
    // 40F8 003F;	
    // (䃸) CJK UNIFIED IDEOGRAPH-40F8	[FB80 C0F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_161)
{
    // 40F8 0061;	
    // (䃸) CJK UNIFIED IDEOGRAPH-40F8	[FB80 C0F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_162)
{
    // 40F8 0041;	
    // (䃸) CJK UNIFIED IDEOGRAPH-40F8	[FB80 C0F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_163)
{
    // 40F8 0062;	
    // (䃸) CJK UNIFIED IDEOGRAPH-40F8	[FB80 C0F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_164)
{
    // 40F9 0021;	
    // (䃹) CJK UNIFIED IDEOGRAPH-40F9	[FB80 C0F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_165)
{
    // 40F9 003F;	
    // (䃹) CJK UNIFIED IDEOGRAPH-40F9	[FB80 C0F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_166)
{
    // 40F9 0061;	
    // (䃹) CJK UNIFIED IDEOGRAPH-40F9	[FB80 C0F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_167)
{
    // 40F9 0041;	
    // (䃹) CJK UNIFIED IDEOGRAPH-40F9	[FB80 C0F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_168)
{
    // 40F9 0062;	
    // (䃹) CJK UNIFIED IDEOGRAPH-40F9	[FB80 C0F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_169)
{
    // 40FA 0021;	
    // (䃺) CJK UNIFIED IDEOGRAPH-40FA	[FB80 C0FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_170)
{
    // 40FA 003F;	
    // (䃺) CJK UNIFIED IDEOGRAPH-40FA	[FB80 C0FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_171)
{
    // 40FA 0061;	
    // (䃺) CJK UNIFIED IDEOGRAPH-40FA	[FB80 C0FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_172)
{
    // 40FA 0041;	
    // (䃺) CJK UNIFIED IDEOGRAPH-40FA	[FB80 C0FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_173)
{
    // 40FA 0062;	
    // (䃺) CJK UNIFIED IDEOGRAPH-40FA	[FB80 C0FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_174)
{
    // 40FB 0021;	
    // (䃻) CJK UNIFIED IDEOGRAPH-40FB	[FB80 C0FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_175)
{
    // 40FB 003F;	
    // (䃻) CJK UNIFIED IDEOGRAPH-40FB	[FB80 C0FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_176)
{
    // 40FB 0061;	
    // (䃻) CJK UNIFIED IDEOGRAPH-40FB	[FB80 C0FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_177)
{
    // 40FB 0041;	
    // (䃻) CJK UNIFIED IDEOGRAPH-40FB	[FB80 C0FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_178)
{
    // 40FB 0062;	
    // (䃻) CJK UNIFIED IDEOGRAPH-40FB	[FB80 C0FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_179)
{
    // 40FC 0021;	
    // (䃼) CJK UNIFIED IDEOGRAPH-40FC	[FB80 C0FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_180)
{
    // 40FC 003F;	
    // (䃼) CJK UNIFIED IDEOGRAPH-40FC	[FB80 C0FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_181)
{
    // 40FC 0061;	
    // (䃼) CJK UNIFIED IDEOGRAPH-40FC	[FB80 C0FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_182)
{
    // 40FC 0041;	
    // (䃼) CJK UNIFIED IDEOGRAPH-40FC	[FB80 C0FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_183)
{
    // 40FC 0062;	
    // (䃼) CJK UNIFIED IDEOGRAPH-40FC	[FB80 C0FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_184)
{
    // 40FD 0021;	
    // (䃽) CJK UNIFIED IDEOGRAPH-40FD	[FB80 C0FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_185)
{
    // 40FD 003F;	
    // (䃽) CJK UNIFIED IDEOGRAPH-40FD	[FB80 C0FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_186)
{
    // 40FD 0061;	
    // (䃽) CJK UNIFIED IDEOGRAPH-40FD	[FB80 C0FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_187)
{
    // 40FD 0041;	
    // (䃽) CJK UNIFIED IDEOGRAPH-40FD	[FB80 C0FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_188)
{
    // 40FD 0062;	
    // (䃽) CJK UNIFIED IDEOGRAPH-40FD	[FB80 C0FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_189)
{
    // 40FE 0021;	
    // (䃾) CJK UNIFIED IDEOGRAPH-40FE	[FB80 C0FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_190)
{
    // 40FE 003F;	
    // (䃾) CJK UNIFIED IDEOGRAPH-40FE	[FB80 C0FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_191)
{
    // 40FE 0061;	
    // (䃾) CJK UNIFIED IDEOGRAPH-40FE	[FB80 C0FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_192)
{
    // 40FE 0041;	
    // (䃾) CJK UNIFIED IDEOGRAPH-40FE	[FB80 C0FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_193)
{
    // 40FE 0062;	
    // (䃾) CJK UNIFIED IDEOGRAPH-40FE	[FB80 C0FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_194)
{
    // 40FF 0021;	
    // (䃿) CJK UNIFIED IDEOGRAPH-40FF	[FB80 C0FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_195)
{
    // 40FF 003F;	
    // (䃿) CJK UNIFIED IDEOGRAPH-40FF	[FB80 C0FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_196)
{
    // 40FF 0061;	
    // (䃿) CJK UNIFIED IDEOGRAPH-40FF	[FB80 C0FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_197)
{
    // 40FF 0041;	
    // (䃿) CJK UNIFIED IDEOGRAPH-40FF	[FB80 C0FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_198)
{
    // 40FF 0062;	
    // (䃿) CJK UNIFIED IDEOGRAPH-40FF	[FB80 C0FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_199)
{
    // 4100 0021;	
    // (䄀) CJK UNIFIED IDEOGRAPH-4100	[FB80 C100 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4100, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC100, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_200)
{
    // 4100 003F;	
    // (䄀) CJK UNIFIED IDEOGRAPH-4100	[FB80 C100 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4100, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC100, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_201)
{
    // 4100 0061;	
    // (䄀) CJK UNIFIED IDEOGRAPH-4100	[FB80 C100 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4100, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_202)
{
    // 4100 0041;	
    // (䄀) CJK UNIFIED IDEOGRAPH-4100	[FB80 C100 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4100, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_203)
{
    // 4100 0062;	
    // (䄀) CJK UNIFIED IDEOGRAPH-4100	[FB80 C100 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4100, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC100, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_204)
{
    // 4101 0021;	
    // (䄁) CJK UNIFIED IDEOGRAPH-4101	[FB80 C101 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4101, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC101, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_205)
{
    // 4101 003F;	
    // (䄁) CJK UNIFIED IDEOGRAPH-4101	[FB80 C101 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4101, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC101, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_206)
{
    // 4101 0061;	
    // (䄁) CJK UNIFIED IDEOGRAPH-4101	[FB80 C101 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4101, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_207)
{
    // 4101 0041;	
    // (䄁) CJK UNIFIED IDEOGRAPH-4101	[FB80 C101 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4101, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_208)
{
    // 4101 0062;	
    // (䄁) CJK UNIFIED IDEOGRAPH-4101	[FB80 C101 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4101, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC101, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_209)
{
    // 4102 0021;	
    // (䄂) CJK UNIFIED IDEOGRAPH-4102	[FB80 C102 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4102, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC102, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_210)
{
    // 4102 003F;	
    // (䄂) CJK UNIFIED IDEOGRAPH-4102	[FB80 C102 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4102, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC102, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_211)
{
    // 4102 0061;	
    // (䄂) CJK UNIFIED IDEOGRAPH-4102	[FB80 C102 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4102, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_212)
{
    // 4102 0041;	
    // (䄂) CJK UNIFIED IDEOGRAPH-4102	[FB80 C102 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4102, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_213)
{
    // 4102 0062;	
    // (䄂) CJK UNIFIED IDEOGRAPH-4102	[FB80 C102 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4102, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC102, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_214)
{
    // 4103 0021;	
    // (䄃) CJK UNIFIED IDEOGRAPH-4103	[FB80 C103 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4103, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC103, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_215)
{
    // 4103 003F;	
    // (䄃) CJK UNIFIED IDEOGRAPH-4103	[FB80 C103 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4103, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC103, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_216)
{
    // 4103 0061;	
    // (䄃) CJK UNIFIED IDEOGRAPH-4103	[FB80 C103 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4103, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_217)
{
    // 4103 0041;	
    // (䄃) CJK UNIFIED IDEOGRAPH-4103	[FB80 C103 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4103, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_218)
{
    // 4103 0062;	
    // (䄃) CJK UNIFIED IDEOGRAPH-4103	[FB80 C103 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4103, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC103, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_219)
{
    // 4104 0021;	
    // (䄄) CJK UNIFIED IDEOGRAPH-4104	[FB80 C104 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4104, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC104, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_220)
{
    // 4104 003F;	
    // (䄄) CJK UNIFIED IDEOGRAPH-4104	[FB80 C104 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4104, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC104, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_221)
{
    // 4104 0061;	
    // (䄄) CJK UNIFIED IDEOGRAPH-4104	[FB80 C104 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4104, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_222)
{
    // 4104 0041;	
    // (䄄) CJK UNIFIED IDEOGRAPH-4104	[FB80 C104 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4104, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_223)
{
    // 4104 0062;	
    // (䄄) CJK UNIFIED IDEOGRAPH-4104	[FB80 C104 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4104, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC104, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_224)
{
    // 4105 0021;	
    // (䄅) CJK UNIFIED IDEOGRAPH-4105	[FB80 C105 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4105, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC105, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_225)
{
    // 4105 003F;	
    // (䄅) CJK UNIFIED IDEOGRAPH-4105	[FB80 C105 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4105, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC105, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_226)
{
    // 4105 0061;	
    // (䄅) CJK UNIFIED IDEOGRAPH-4105	[FB80 C105 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4105, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_227)
{
    // 4105 0041;	
    // (䄅) CJK UNIFIED IDEOGRAPH-4105	[FB80 C105 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4105, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_228)
{
    // 4105 0062;	
    // (䄅) CJK UNIFIED IDEOGRAPH-4105	[FB80 C105 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4105, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC105, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_229)
{
    // 4106 0021;	
    // (䄆) CJK UNIFIED IDEOGRAPH-4106	[FB80 C106 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4106, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC106, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_230)
{
    // 4106 003F;	
    // (䄆) CJK UNIFIED IDEOGRAPH-4106	[FB80 C106 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4106, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC106, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_231)
{
    // 4106 0061;	
    // (䄆) CJK UNIFIED IDEOGRAPH-4106	[FB80 C106 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4106, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_232)
{
    // 4106 0041;	
    // (䄆) CJK UNIFIED IDEOGRAPH-4106	[FB80 C106 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4106, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_233)
{
    // 4106 0062;	
    // (䄆) CJK UNIFIED IDEOGRAPH-4106	[FB80 C106 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4106, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC106, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_234)
{
    // 4107 0021;	
    // (䄇) CJK UNIFIED IDEOGRAPH-4107	[FB80 C107 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4107, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC107, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_235)
{
    // 4107 003F;	
    // (䄇) CJK UNIFIED IDEOGRAPH-4107	[FB80 C107 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4107, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC107, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_236)
{
    // 4107 0061;	
    // (䄇) CJK UNIFIED IDEOGRAPH-4107	[FB80 C107 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4107, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_237)
{
    // 4107 0041;	
    // (䄇) CJK UNIFIED IDEOGRAPH-4107	[FB80 C107 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4107, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_238)
{
    // 4107 0062;	
    // (䄇) CJK UNIFIED IDEOGRAPH-4107	[FB80 C107 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4107, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC107, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_239)
{
    // 4108 0021;	
    // (䄈) CJK UNIFIED IDEOGRAPH-4108	[FB80 C108 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4108, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_240)
{
    // 4108 003F;	
    // (䄈) CJK UNIFIED IDEOGRAPH-4108	[FB80 C108 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4108, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_241)
{
    // 4108 0061;	
    // (䄈) CJK UNIFIED IDEOGRAPH-4108	[FB80 C108 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4108, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_242)
{
    // 4108 0041;	
    // (䄈) CJK UNIFIED IDEOGRAPH-4108	[FB80 C108 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4108, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_243)
{
    // 4108 0062;	
    // (䄈) CJK UNIFIED IDEOGRAPH-4108	[FB80 C108 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4108, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_244)
{
    // 4109 0021;	
    // (䄉) CJK UNIFIED IDEOGRAPH-4109	[FB80 C109 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4109, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC109, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_245)
{
    // 4109 003F;	
    // (䄉) CJK UNIFIED IDEOGRAPH-4109	[FB80 C109 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4109, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC109, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_246)
{
    // 4109 0061;	
    // (䄉) CJK UNIFIED IDEOGRAPH-4109	[FB80 C109 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4109, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_247)
{
    // 4109 0041;	
    // (䄉) CJK UNIFIED IDEOGRAPH-4109	[FB80 C109 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4109, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_248)
{
    // 4109 0062;	
    // (䄉) CJK UNIFIED IDEOGRAPH-4109	[FB80 C109 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4109, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC109, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_249)
{
    // 410A 0021;	
    // (䄊) CJK UNIFIED IDEOGRAPH-410A	[FB80 C10A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_250)
{
    // 410A 003F;	
    // (䄊) CJK UNIFIED IDEOGRAPH-410A	[FB80 C10A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_251)
{
    // 410A 0061;	
    // (䄊) CJK UNIFIED IDEOGRAPH-410A	[FB80 C10A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_252)
{
    // 410A 0041;	
    // (䄊) CJK UNIFIED IDEOGRAPH-410A	[FB80 C10A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_253)
{
    // 410A 0062;	
    // (䄊) CJK UNIFIED IDEOGRAPH-410A	[FB80 C10A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_254)
{
    // 410B 0021;	
    // (䄋) CJK UNIFIED IDEOGRAPH-410B	[FB80 C10B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_255)
{
    // 410B 003F;	
    // (䄋) CJK UNIFIED IDEOGRAPH-410B	[FB80 C10B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_256)
{
    // 410B 0061;	
    // (䄋) CJK UNIFIED IDEOGRAPH-410B	[FB80 C10B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_257)
{
    // 410B 0041;	
    // (䄋) CJK UNIFIED IDEOGRAPH-410B	[FB80 C10B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_258)
{
    // 410B 0062;	
    // (䄋) CJK UNIFIED IDEOGRAPH-410B	[FB80 C10B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_259)
{
    // 410C 0021;	
    // (䄌) CJK UNIFIED IDEOGRAPH-410C	[FB80 C10C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_260)
{
    // 410C 003F;	
    // (䄌) CJK UNIFIED IDEOGRAPH-410C	[FB80 C10C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_261)
{
    // 410C 0061;	
    // (䄌) CJK UNIFIED IDEOGRAPH-410C	[FB80 C10C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_262)
{
    // 410C 0041;	
    // (䄌) CJK UNIFIED IDEOGRAPH-410C	[FB80 C10C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_263)
{
    // 410C 0062;	
    // (䄌) CJK UNIFIED IDEOGRAPH-410C	[FB80 C10C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_264)
{
    // 410D 0021;	
    // (䄍) CJK UNIFIED IDEOGRAPH-410D	[FB80 C10D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_265)
{
    // 410D 003F;	
    // (䄍) CJK UNIFIED IDEOGRAPH-410D	[FB80 C10D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_266)
{
    // 410D 0061;	
    // (䄍) CJK UNIFIED IDEOGRAPH-410D	[FB80 C10D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_267)
{
    // 410D 0041;	
    // (䄍) CJK UNIFIED IDEOGRAPH-410D	[FB80 C10D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_268)
{
    // 410D 0062;	
    // (䄍) CJK UNIFIED IDEOGRAPH-410D	[FB80 C10D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_269)
{
    // 410E 0021;	
    // (䄎) CJK UNIFIED IDEOGRAPH-410E	[FB80 C10E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_270)
{
    // 410E 003F;	
    // (䄎) CJK UNIFIED IDEOGRAPH-410E	[FB80 C10E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_271)
{
    // 410E 0061;	
    // (䄎) CJK UNIFIED IDEOGRAPH-410E	[FB80 C10E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_272)
{
    // 410E 0041;	
    // (䄎) CJK UNIFIED IDEOGRAPH-410E	[FB80 C10E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_273)
{
    // 410E 0062;	
    // (䄎) CJK UNIFIED IDEOGRAPH-410E	[FB80 C10E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_274)
{
    // 410F 0021;	
    // (䄏) CJK UNIFIED IDEOGRAPH-410F	[FB80 C10F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC10F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_275)
{
    // 410F 003F;	
    // (䄏) CJK UNIFIED IDEOGRAPH-410F	[FB80 C10F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC10F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_276)
{
    // 410F 0061;	
    // (䄏) CJK UNIFIED IDEOGRAPH-410F	[FB80 C10F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC10F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_277)
{
    // 410F 0041;	
    // (䄏) CJK UNIFIED IDEOGRAPH-410F	[FB80 C10F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x410F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC10F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_278)
{
    // 410F 0062;	
    // (䄏) CJK UNIFIED IDEOGRAPH-410F	[FB80 C10F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x410F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC10F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_279)
{
    // 4110 0021;	
    // (䄐) CJK UNIFIED IDEOGRAPH-4110	[FB80 C110 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4110, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC110, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_280)
{
    // 4110 003F;	
    // (䄐) CJK UNIFIED IDEOGRAPH-4110	[FB80 C110 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4110, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC110, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_281)
{
    // 4110 0061;	
    // (䄐) CJK UNIFIED IDEOGRAPH-4110	[FB80 C110 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4110, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_282)
{
    // 4110 0041;	
    // (䄐) CJK UNIFIED IDEOGRAPH-4110	[FB80 C110 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4110, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_283)
{
    // 4110 0062;	
    // (䄐) CJK UNIFIED IDEOGRAPH-4110	[FB80 C110 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4110, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC110, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_284)
{
    // 4111 0021;	
    // (䄑) CJK UNIFIED IDEOGRAPH-4111	[FB80 C111 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4111, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC111, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_285)
{
    // 4111 003F;	
    // (䄑) CJK UNIFIED IDEOGRAPH-4111	[FB80 C111 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4111, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC111, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_286)
{
    // 4111 0061;	
    // (䄑) CJK UNIFIED IDEOGRAPH-4111	[FB80 C111 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4111, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_287)
{
    // 4111 0041;	
    // (䄑) CJK UNIFIED IDEOGRAPH-4111	[FB80 C111 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4111, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_288)
{
    // 4111 0062;	
    // (䄑) CJK UNIFIED IDEOGRAPH-4111	[FB80 C111 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4111, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC111, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_289)
{
    // 4112 0021;	
    // (䄒) CJK UNIFIED IDEOGRAPH-4112	[FB80 C112 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4112, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC112, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_290)
{
    // 4112 003F;	
    // (䄒) CJK UNIFIED IDEOGRAPH-4112	[FB80 C112 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4112, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC112, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_291)
{
    // 4112 0061;	
    // (䄒) CJK UNIFIED IDEOGRAPH-4112	[FB80 C112 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4112, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_292)
{
    // 4112 0041;	
    // (䄒) CJK UNIFIED IDEOGRAPH-4112	[FB80 C112 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4112, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_293)
{
    // 4112 0062;	
    // (䄒) CJK UNIFIED IDEOGRAPH-4112	[FB80 C112 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4112, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC112, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_294)
{
    // 4113 0021;	
    // (䄓) CJK UNIFIED IDEOGRAPH-4113	[FB80 C113 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4113, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC113, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_295)
{
    // 4113 003F;	
    // (䄓) CJK UNIFIED IDEOGRAPH-4113	[FB80 C113 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4113, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC113, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_296)
{
    // 4113 0061;	
    // (䄓) CJK UNIFIED IDEOGRAPH-4113	[FB80 C113 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4113, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_297)
{
    // 4113 0041;	
    // (䄓) CJK UNIFIED IDEOGRAPH-4113	[FB80 C113 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4113, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_298)
{
    // 4113 0062;	
    // (䄓) CJK UNIFIED IDEOGRAPH-4113	[FB80 C113 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4113, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC113, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_299)
{
    // 4114 0021;	
    // (䄔) CJK UNIFIED IDEOGRAPH-4114	[FB80 C114 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4114, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC114, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_300)
{
    // 4114 003F;	
    // (䄔) CJK UNIFIED IDEOGRAPH-4114	[FB80 C114 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4114, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC114, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_301)
{
    // 4114 0061;	
    // (䄔) CJK UNIFIED IDEOGRAPH-4114	[FB80 C114 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4114, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_302)
{
    // 4114 0041;	
    // (䄔) CJK UNIFIED IDEOGRAPH-4114	[FB80 C114 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4114, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_303)
{
    // 4114 0062;	
    // (䄔) CJK UNIFIED IDEOGRAPH-4114	[FB80 C114 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4114, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC114, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_304)
{
    // 4115 0021;	
    // (䄕) CJK UNIFIED IDEOGRAPH-4115	[FB80 C115 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4115, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC115, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_305)
{
    // 4115 003F;	
    // (䄕) CJK UNIFIED IDEOGRAPH-4115	[FB80 C115 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4115, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC115, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_306)
{
    // 4115 0061;	
    // (䄕) CJK UNIFIED IDEOGRAPH-4115	[FB80 C115 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4115, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_307)
{
    // 4115 0041;	
    // (䄕) CJK UNIFIED IDEOGRAPH-4115	[FB80 C115 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4115, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_308)
{
    // 4115 0062;	
    // (䄕) CJK UNIFIED IDEOGRAPH-4115	[FB80 C115 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4115, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC115, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_309)
{
    // 4116 0021;	
    // (䄖) CJK UNIFIED IDEOGRAPH-4116	[FB80 C116 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4116, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_310)
{
    // 4116 003F;	
    // (䄖) CJK UNIFIED IDEOGRAPH-4116	[FB80 C116 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4116, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_311)
{
    // 4116 0061;	
    // (䄖) CJK UNIFIED IDEOGRAPH-4116	[FB80 C116 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4116, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_312)
{
    // 4116 0041;	
    // (䄖) CJK UNIFIED IDEOGRAPH-4116	[FB80 C116 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4116, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_313)
{
    // 4116 0062;	
    // (䄖) CJK UNIFIED IDEOGRAPH-4116	[FB80 C116 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4116, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_314)
{
    // 4117 0021;	
    // (䄗) CJK UNIFIED IDEOGRAPH-4117	[FB80 C117 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4117, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC117, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_315)
{
    // 4117 003F;	
    // (䄗) CJK UNIFIED IDEOGRAPH-4117	[FB80 C117 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4117, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC117, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_316)
{
    // 4117 0061;	
    // (䄗) CJK UNIFIED IDEOGRAPH-4117	[FB80 C117 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4117, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_317)
{
    // 4117 0041;	
    // (䄗) CJK UNIFIED IDEOGRAPH-4117	[FB80 C117 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4117, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_318)
{
    // 4117 0062;	
    // (䄗) CJK UNIFIED IDEOGRAPH-4117	[FB80 C117 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4117, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC117, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_319)
{
    // 4118 0021;	
    // (䄘) CJK UNIFIED IDEOGRAPH-4118	[FB80 C118 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4118, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC118, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_320)
{
    // 4118 003F;	
    // (䄘) CJK UNIFIED IDEOGRAPH-4118	[FB80 C118 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4118, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC118, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_321)
{
    // 4118 0061;	
    // (䄘) CJK UNIFIED IDEOGRAPH-4118	[FB80 C118 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4118, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_322)
{
    // 4118 0041;	
    // (䄘) CJK UNIFIED IDEOGRAPH-4118	[FB80 C118 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4118, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_323)
{
    // 4118 0062;	
    // (䄘) CJK UNIFIED IDEOGRAPH-4118	[FB80 C118 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4118, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC118, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_324)
{
    // 4119 0021;	
    // (䄙) CJK UNIFIED IDEOGRAPH-4119	[FB80 C119 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4119, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC119, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_325)
{
    // 4119 003F;	
    // (䄙) CJK UNIFIED IDEOGRAPH-4119	[FB80 C119 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4119, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC119, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_326)
{
    // 4119 0061;	
    // (䄙) CJK UNIFIED IDEOGRAPH-4119	[FB80 C119 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4119, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_327)
{
    // 4119 0041;	
    // (䄙) CJK UNIFIED IDEOGRAPH-4119	[FB80 C119 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4119, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_328)
{
    // 4119 0062;	
    // (䄙) CJK UNIFIED IDEOGRAPH-4119	[FB80 C119 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4119, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC119, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_329)
{
    // 411A 0021;	
    // (䄚) CJK UNIFIED IDEOGRAPH-411A	[FB80 C11A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_330)
{
    // 411A 003F;	
    // (䄚) CJK UNIFIED IDEOGRAPH-411A	[FB80 C11A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_331)
{
    // 411A 0061;	
    // (䄚) CJK UNIFIED IDEOGRAPH-411A	[FB80 C11A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_332)
{
    // 411A 0041;	
    // (䄚) CJK UNIFIED IDEOGRAPH-411A	[FB80 C11A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_333)
{
    // 411A 0062;	
    // (䄚) CJK UNIFIED IDEOGRAPH-411A	[FB80 C11A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_334)
{
    // 411B 0021;	
    // (䄛) CJK UNIFIED IDEOGRAPH-411B	[FB80 C11B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_335)
{
    // 411B 003F;	
    // (䄛) CJK UNIFIED IDEOGRAPH-411B	[FB80 C11B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_336)
{
    // 411B 0061;	
    // (䄛) CJK UNIFIED IDEOGRAPH-411B	[FB80 C11B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_337)
{
    // 411B 0041;	
    // (䄛) CJK UNIFIED IDEOGRAPH-411B	[FB80 C11B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_338)
{
    // 411B 0062;	
    // (䄛) CJK UNIFIED IDEOGRAPH-411B	[FB80 C11B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_339)
{
    // 411C 0021;	
    // (䄜) CJK UNIFIED IDEOGRAPH-411C	[FB80 C11C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_340)
{
    // 411C 003F;	
    // (䄜) CJK UNIFIED IDEOGRAPH-411C	[FB80 C11C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_341)
{
    // 411C 0061;	
    // (䄜) CJK UNIFIED IDEOGRAPH-411C	[FB80 C11C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_342)
{
    // 411C 0041;	
    // (䄜) CJK UNIFIED IDEOGRAPH-411C	[FB80 C11C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_343)
{
    // 411C 0062;	
    // (䄜) CJK UNIFIED IDEOGRAPH-411C	[FB80 C11C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_344)
{
    // 411D 0021;	
    // (䄝) CJK UNIFIED IDEOGRAPH-411D	[FB80 C11D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_345)
{
    // 411D 003F;	
    // (䄝) CJK UNIFIED IDEOGRAPH-411D	[FB80 C11D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_346)
{
    // 411D 0061;	
    // (䄝) CJK UNIFIED IDEOGRAPH-411D	[FB80 C11D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_347)
{
    // 411D 0041;	
    // (䄝) CJK UNIFIED IDEOGRAPH-411D	[FB80 C11D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_348)
{
    // 411D 0062;	
    // (䄝) CJK UNIFIED IDEOGRAPH-411D	[FB80 C11D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_349)
{
    // 411E 0021;	
    // (䄞) CJK UNIFIED IDEOGRAPH-411E	[FB80 C11E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_350)
{
    // 411E 003F;	
    // (䄞) CJK UNIFIED IDEOGRAPH-411E	[FB80 C11E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_351)
{
    // 411E 0061;	
    // (䄞) CJK UNIFIED IDEOGRAPH-411E	[FB80 C11E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_352)
{
    // 411E 0041;	
    // (䄞) CJK UNIFIED IDEOGRAPH-411E	[FB80 C11E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_353)
{
    // 411E 0062;	
    // (䄞) CJK UNIFIED IDEOGRAPH-411E	[FB80 C11E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_354)
{
    // 411F 0021;	
    // (䄟) CJK UNIFIED IDEOGRAPH-411F	[FB80 C11F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC11F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_355)
{
    // 411F 003F;	
    // (䄟) CJK UNIFIED IDEOGRAPH-411F	[FB80 C11F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC11F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_356)
{
    // 411F 0061;	
    // (䄟) CJK UNIFIED IDEOGRAPH-411F	[FB80 C11F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC11F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_357)
{
    // 411F 0041;	
    // (䄟) CJK UNIFIED IDEOGRAPH-411F	[FB80 C11F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x411F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC11F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_358)
{
    // 411F 0062;	
    // (䄟) CJK UNIFIED IDEOGRAPH-411F	[FB80 C11F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x411F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC11F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_359)
{
    // 4120 0021;	
    // (䄠) CJK UNIFIED IDEOGRAPH-4120	[FB80 C120 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4120, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC120, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_360)
{
    // 4120 003F;	
    // (䄠) CJK UNIFIED IDEOGRAPH-4120	[FB80 C120 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4120, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC120, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_361)
{
    // 4120 0061;	
    // (䄠) CJK UNIFIED IDEOGRAPH-4120	[FB80 C120 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4120, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_362)
{
    // 4120 0041;	
    // (䄠) CJK UNIFIED IDEOGRAPH-4120	[FB80 C120 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4120, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_363)
{
    // 4120 0062;	
    // (䄠) CJK UNIFIED IDEOGRAPH-4120	[FB80 C120 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4120, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC120, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_364)
{
    // 4121 0021;	
    // (䄡) CJK UNIFIED IDEOGRAPH-4121	[FB80 C121 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4121, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_365)
{
    // 4121 003F;	
    // (䄡) CJK UNIFIED IDEOGRAPH-4121	[FB80 C121 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4121, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_366)
{
    // 4121 0061;	
    // (䄡) CJK UNIFIED IDEOGRAPH-4121	[FB80 C121 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4121, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_367)
{
    // 4121 0041;	
    // (䄡) CJK UNIFIED IDEOGRAPH-4121	[FB80 C121 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4121, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_368)
{
    // 4121 0062;	
    // (䄡) CJK UNIFIED IDEOGRAPH-4121	[FB80 C121 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4121, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_369)
{
    // 4122 0021;	
    // (䄢) CJK UNIFIED IDEOGRAPH-4122	[FB80 C122 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4122, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_370)
{
    // 4122 003F;	
    // (䄢) CJK UNIFIED IDEOGRAPH-4122	[FB80 C122 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4122, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_371)
{
    // 4122 0061;	
    // (䄢) CJK UNIFIED IDEOGRAPH-4122	[FB80 C122 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4122, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_372)
{
    // 4122 0041;	
    // (䄢) CJK UNIFIED IDEOGRAPH-4122	[FB80 C122 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4122, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_373)
{
    // 4122 0062;	
    // (䄢) CJK UNIFIED IDEOGRAPH-4122	[FB80 C122 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4122, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_374)
{
    // 4123 0021;	
    // (䄣) CJK UNIFIED IDEOGRAPH-4123	[FB80 C123 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4123, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC123, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_375)
{
    // 4123 003F;	
    // (䄣) CJK UNIFIED IDEOGRAPH-4123	[FB80 C123 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4123, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC123, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_376)
{
    // 4123 0061;	
    // (䄣) CJK UNIFIED IDEOGRAPH-4123	[FB80 C123 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4123, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_377)
{
    // 4123 0041;	
    // (䄣) CJK UNIFIED IDEOGRAPH-4123	[FB80 C123 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4123, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_378)
{
    // 4123 0062;	
    // (䄣) CJK UNIFIED IDEOGRAPH-4123	[FB80 C123 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4123, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC123, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_379)
{
    // 4124 0021;	
    // (䄤) CJK UNIFIED IDEOGRAPH-4124	[FB80 C124 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4124, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC124, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_380)
{
    // 4124 003F;	
    // (䄤) CJK UNIFIED IDEOGRAPH-4124	[FB80 C124 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4124, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC124, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_381)
{
    // 4124 0061;	
    // (䄤) CJK UNIFIED IDEOGRAPH-4124	[FB80 C124 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4124, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_382)
{
    // 4124 0041;	
    // (䄤) CJK UNIFIED IDEOGRAPH-4124	[FB80 C124 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4124, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_383)
{
    // 4124 0062;	
    // (䄤) CJK UNIFIED IDEOGRAPH-4124	[FB80 C124 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4124, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC124, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_384)
{
    // 4125 0021;	
    // (䄥) CJK UNIFIED IDEOGRAPH-4125	[FB80 C125 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4125, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC125, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_385)
{
    // 4125 003F;	
    // (䄥) CJK UNIFIED IDEOGRAPH-4125	[FB80 C125 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4125, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC125, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_386)
{
    // 4125 0061;	
    // (䄥) CJK UNIFIED IDEOGRAPH-4125	[FB80 C125 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4125, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_387)
{
    // 4125 0041;	
    // (䄥) CJK UNIFIED IDEOGRAPH-4125	[FB80 C125 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4125, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_388)
{
    // 4125 0062;	
    // (䄥) CJK UNIFIED IDEOGRAPH-4125	[FB80 C125 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4125, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC125, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_389)
{
    // 4126 0021;	
    // (䄦) CJK UNIFIED IDEOGRAPH-4126	[FB80 C126 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4126, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC126, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_390)
{
    // 4126 003F;	
    // (䄦) CJK UNIFIED IDEOGRAPH-4126	[FB80 C126 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4126, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC126, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_391)
{
    // 4126 0061;	
    // (䄦) CJK UNIFIED IDEOGRAPH-4126	[FB80 C126 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4126, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_392)
{
    // 4126 0041;	
    // (䄦) CJK UNIFIED IDEOGRAPH-4126	[FB80 C126 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4126, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_393)
{
    // 4126 0062;	
    // (䄦) CJK UNIFIED IDEOGRAPH-4126	[FB80 C126 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4126, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC126, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_394)
{
    // 4127 0021;	
    // (䄧) CJK UNIFIED IDEOGRAPH-4127	[FB80 C127 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4127, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC127, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_395)
{
    // 4127 003F;	
    // (䄧) CJK UNIFIED IDEOGRAPH-4127	[FB80 C127 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4127, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC127, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_396)
{
    // 4127 0061;	
    // (䄧) CJK UNIFIED IDEOGRAPH-4127	[FB80 C127 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4127, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_397)
{
    // 4127 0041;	
    // (䄧) CJK UNIFIED IDEOGRAPH-4127	[FB80 C127 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4127, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_398)
{
    // 4127 0062;	
    // (䄧) CJK UNIFIED IDEOGRAPH-4127	[FB80 C127 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4127, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC127, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_399)
{
    // 4128 0021;	
    // (䄨) CJK UNIFIED IDEOGRAPH-4128	[FB80 C128 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4128, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC128, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_400)
{
    // 4128 003F;	
    // (䄨) CJK UNIFIED IDEOGRAPH-4128	[FB80 C128 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4128, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC128, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_401)
{
    // 4128 0061;	
    // (䄨) CJK UNIFIED IDEOGRAPH-4128	[FB80 C128 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4128, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_402)
{
    // 4128 0041;	
    // (䄨) CJK UNIFIED IDEOGRAPH-4128	[FB80 C128 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4128, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_403)
{
    // 4128 0062;	
    // (䄨) CJK UNIFIED IDEOGRAPH-4128	[FB80 C128 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4128, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC128, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_404)
{
    // 4129 0021;	
    // (䄩) CJK UNIFIED IDEOGRAPH-4129	[FB80 C129 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4129, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_405)
{
    // 4129 003F;	
    // (䄩) CJK UNIFIED IDEOGRAPH-4129	[FB80 C129 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4129, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_406)
{
    // 4129 0061;	
    // (䄩) CJK UNIFIED IDEOGRAPH-4129	[FB80 C129 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4129, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_407)
{
    // 4129 0041;	
    // (䄩) CJK UNIFIED IDEOGRAPH-4129	[FB80 C129 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4129, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_408)
{
    // 4129 0062;	
    // (䄩) CJK UNIFIED IDEOGRAPH-4129	[FB80 C129 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4129, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_409)
{
    // 412A 0021;	
    // (䄪) CJK UNIFIED IDEOGRAPH-412A	[FB80 C12A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_410)
{
    // 412A 003F;	
    // (䄪) CJK UNIFIED IDEOGRAPH-412A	[FB80 C12A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_411)
{
    // 412A 0061;	
    // (䄪) CJK UNIFIED IDEOGRAPH-412A	[FB80 C12A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_412)
{
    // 412A 0041;	
    // (䄪) CJK UNIFIED IDEOGRAPH-412A	[FB80 C12A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_413)
{
    // 412A 0062;	
    // (䄪) CJK UNIFIED IDEOGRAPH-412A	[FB80 C12A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_414)
{
    // 412B 0021;	
    // (䄫) CJK UNIFIED IDEOGRAPH-412B	[FB80 C12B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_415)
{
    // 412B 003F;	
    // (䄫) CJK UNIFIED IDEOGRAPH-412B	[FB80 C12B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_416)
{
    // 412B 0061;	
    // (䄫) CJK UNIFIED IDEOGRAPH-412B	[FB80 C12B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_417)
{
    // 412B 0041;	
    // (䄫) CJK UNIFIED IDEOGRAPH-412B	[FB80 C12B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_418)
{
    // 412B 0062;	
    // (䄫) CJK UNIFIED IDEOGRAPH-412B	[FB80 C12B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_419)
{
    // 412C 0021;	
    // (䄬) CJK UNIFIED IDEOGRAPH-412C	[FB80 C12C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_420)
{
    // 412C 003F;	
    // (䄬) CJK UNIFIED IDEOGRAPH-412C	[FB80 C12C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_421)
{
    // 412C 0061;	
    // (䄬) CJK UNIFIED IDEOGRAPH-412C	[FB80 C12C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_422)
{
    // 412C 0041;	
    // (䄬) CJK UNIFIED IDEOGRAPH-412C	[FB80 C12C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_423)
{
    // 412C 0062;	
    // (䄬) CJK UNIFIED IDEOGRAPH-412C	[FB80 C12C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_424)
{
    // 412D 0021;	
    // (䄭) CJK UNIFIED IDEOGRAPH-412D	[FB80 C12D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_425)
{
    // 412D 003F;	
    // (䄭) CJK UNIFIED IDEOGRAPH-412D	[FB80 C12D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_426)
{
    // 412D 0061;	
    // (䄭) CJK UNIFIED IDEOGRAPH-412D	[FB80 C12D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_427)
{
    // 412D 0041;	
    // (䄭) CJK UNIFIED IDEOGRAPH-412D	[FB80 C12D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_428)
{
    // 412D 0062;	
    // (䄭) CJK UNIFIED IDEOGRAPH-412D	[FB80 C12D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_429)
{
    // 412E 0021;	
    // (䄮) CJK UNIFIED IDEOGRAPH-412E	[FB80 C12E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_430)
{
    // 412E 003F;	
    // (䄮) CJK UNIFIED IDEOGRAPH-412E	[FB80 C12E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_431)
{
    // 412E 0061;	
    // (䄮) CJK UNIFIED IDEOGRAPH-412E	[FB80 C12E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_432)
{
    // 412E 0041;	
    // (䄮) CJK UNIFIED IDEOGRAPH-412E	[FB80 C12E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_433)
{
    // 412E 0062;	
    // (䄮) CJK UNIFIED IDEOGRAPH-412E	[FB80 C12E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_434)
{
    // 412F 0021;	
    // (䄯) CJK UNIFIED IDEOGRAPH-412F	[FB80 C12F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_435)
{
    // 2F958 0021;	
    // (䄯) CJK COMPATIBILITY IDEOGRAPH-2F958	[FB80 C12F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F958, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_436)
{
    // 412F 003F;	
    // (䄯) CJK UNIFIED IDEOGRAPH-412F	[FB80 C12F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_437)
{
    // 2F958 003F;	
    // (䄯) CJK COMPATIBILITY IDEOGRAPH-2F958	[FB80 C12F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F958, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_438)
{
    // 412F 0061;	
    // (䄯) CJK UNIFIED IDEOGRAPH-412F	[FB80 C12F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_439)
{
    // 2F958 0061;	
    // (䄯) CJK COMPATIBILITY IDEOGRAPH-2F958	[FB80 C12F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F958, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_440)
{
    // 412F 0041;	
    // (䄯) CJK UNIFIED IDEOGRAPH-412F	[FB80 C12F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x412F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_441)
{
    // 2F958 0041;	
    // (䄯) CJK COMPATIBILITY IDEOGRAPH-2F958	[FB80 C12F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F958, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_442)
{
    // 412F 0062;	
    // (䄯) CJK UNIFIED IDEOGRAPH-412F	[FB80 C12F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x412F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_443)
{
    // 2F958 0062;	
    // (䄯) CJK COMPATIBILITY IDEOGRAPH-2F958	[FB80 C12F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F958, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC12F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_444)
{
    // 4130 0021;	
    // (䄰) CJK UNIFIED IDEOGRAPH-4130	[FB80 C130 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4130, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC130, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_445)
{
    // 4130 003F;	
    // (䄰) CJK UNIFIED IDEOGRAPH-4130	[FB80 C130 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4130, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC130, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_446)
{
    // 4130 0061;	
    // (䄰) CJK UNIFIED IDEOGRAPH-4130	[FB80 C130 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4130, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_447)
{
    // 4130 0041;	
    // (䄰) CJK UNIFIED IDEOGRAPH-4130	[FB80 C130 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4130, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_448)
{
    // 4130 0062;	
    // (䄰) CJK UNIFIED IDEOGRAPH-4130	[FB80 C130 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4130, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC130, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_449)
{
    // 4131 0021;	
    // (䄱) CJK UNIFIED IDEOGRAPH-4131	[FB80 C131 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4131, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC131, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_450)
{
    // 4131 003F;	
    // (䄱) CJK UNIFIED IDEOGRAPH-4131	[FB80 C131 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4131, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC131, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_451)
{
    // 4131 0061;	
    // (䄱) CJK UNIFIED IDEOGRAPH-4131	[FB80 C131 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4131, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_452)
{
    // 4131 0041;	
    // (䄱) CJK UNIFIED IDEOGRAPH-4131	[FB80 C131 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4131, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_453)
{
    // 4131 0062;	
    // (䄱) CJK UNIFIED IDEOGRAPH-4131	[FB80 C131 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4131, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC131, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_454)
{
    // 4132 0021;	
    // (䄲) CJK UNIFIED IDEOGRAPH-4132	[FB80 C132 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4132, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_455)
{
    // 4132 003F;	
    // (䄲) CJK UNIFIED IDEOGRAPH-4132	[FB80 C132 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4132, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_456)
{
    // 4132 0061;	
    // (䄲) CJK UNIFIED IDEOGRAPH-4132	[FB80 C132 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4132, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_457)
{
    // 4132 0041;	
    // (䄲) CJK UNIFIED IDEOGRAPH-4132	[FB80 C132 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4132, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_458)
{
    // 4132 0062;	
    // (䄲) CJK UNIFIED IDEOGRAPH-4132	[FB80 C132 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4132, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC132, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_459)
{
    // 4133 0021;	
    // (䄳) CJK UNIFIED IDEOGRAPH-4133	[FB80 C133 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4133, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC133, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_460)
{
    // 4133 003F;	
    // (䄳) CJK UNIFIED IDEOGRAPH-4133	[FB80 C133 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4133, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC133, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_461)
{
    // 4133 0061;	
    // (䄳) CJK UNIFIED IDEOGRAPH-4133	[FB80 C133 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4133, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_462)
{
    // 4133 0041;	
    // (䄳) CJK UNIFIED IDEOGRAPH-4133	[FB80 C133 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4133, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_463)
{
    // 4133 0062;	
    // (䄳) CJK UNIFIED IDEOGRAPH-4133	[FB80 C133 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4133, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC133, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_464)
{
    // 4134 0021;	
    // (䄴) CJK UNIFIED IDEOGRAPH-4134	[FB80 C134 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4134, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC134, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_465)
{
    // 4134 003F;	
    // (䄴) CJK UNIFIED IDEOGRAPH-4134	[FB80 C134 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4134, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC134, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_466)
{
    // 4134 0061;	
    // (䄴) CJK UNIFIED IDEOGRAPH-4134	[FB80 C134 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4134, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_467)
{
    // 4134 0041;	
    // (䄴) CJK UNIFIED IDEOGRAPH-4134	[FB80 C134 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4134, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_468)
{
    // 4134 0062;	
    // (䄴) CJK UNIFIED IDEOGRAPH-4134	[FB80 C134 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4134, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC134, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_469)
{
    // 4135 0021;	
    // (䄵) CJK UNIFIED IDEOGRAPH-4135	[FB80 C135 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4135, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC135, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_470)
{
    // 4135 003F;	
    // (䄵) CJK UNIFIED IDEOGRAPH-4135	[FB80 C135 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4135, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC135, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_471)
{
    // 4135 0061;	
    // (䄵) CJK UNIFIED IDEOGRAPH-4135	[FB80 C135 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4135, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_472)
{
    // 4135 0041;	
    // (䄵) CJK UNIFIED IDEOGRAPH-4135	[FB80 C135 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4135, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_473)
{
    // 4135 0062;	
    // (䄵) CJK UNIFIED IDEOGRAPH-4135	[FB80 C135 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4135, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC135, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_474)
{
    // 4136 0021;	
    // (䄶) CJK UNIFIED IDEOGRAPH-4136	[FB80 C136 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4136, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC136, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_475)
{
    // 4136 003F;	
    // (䄶) CJK UNIFIED IDEOGRAPH-4136	[FB80 C136 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4136, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC136, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_476)
{
    // 4136 0061;	
    // (䄶) CJK UNIFIED IDEOGRAPH-4136	[FB80 C136 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4136, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_477)
{
    // 4136 0041;	
    // (䄶) CJK UNIFIED IDEOGRAPH-4136	[FB80 C136 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4136, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_478)
{
    // 4136 0062;	
    // (䄶) CJK UNIFIED IDEOGRAPH-4136	[FB80 C136 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4136, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC136, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_479)
{
    // 4137 0021;	
    // (䄷) CJK UNIFIED IDEOGRAPH-4137	[FB80 C137 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4137, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC137, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_480)
{
    // 4137 003F;	
    // (䄷) CJK UNIFIED IDEOGRAPH-4137	[FB80 C137 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4137, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC137, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_481)
{
    // 4137 0061;	
    // (䄷) CJK UNIFIED IDEOGRAPH-4137	[FB80 C137 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4137, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_482)
{
    // 4137 0041;	
    // (䄷) CJK UNIFIED IDEOGRAPH-4137	[FB80 C137 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4137, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_483)
{
    // 4137 0062;	
    // (䄷) CJK UNIFIED IDEOGRAPH-4137	[FB80 C137 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4137, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC137, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_484)
{
    // 4138 0021;	
    // (䄸) CJK UNIFIED IDEOGRAPH-4138	[FB80 C138 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4138, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC138, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_485)
{
    // 4138 003F;	
    // (䄸) CJK UNIFIED IDEOGRAPH-4138	[FB80 C138 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4138, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC138, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_486)
{
    // 4138 0061;	
    // (䄸) CJK UNIFIED IDEOGRAPH-4138	[FB80 C138 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4138, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_487)
{
    // 4138 0041;	
    // (䄸) CJK UNIFIED IDEOGRAPH-4138	[FB80 C138 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4138, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_488)
{
    // 4138 0062;	
    // (䄸) CJK UNIFIED IDEOGRAPH-4138	[FB80 C138 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4138, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC138, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_489)
{
    // 4139 0021;	
    // (䄹) CJK UNIFIED IDEOGRAPH-4139	[FB80 C139 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4139, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC139, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_490)
{
    // 4139 003F;	
    // (䄹) CJK UNIFIED IDEOGRAPH-4139	[FB80 C139 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4139, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC139, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_491)
{
    // 4139 0061;	
    // (䄹) CJK UNIFIED IDEOGRAPH-4139	[FB80 C139 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4139, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_492)
{
    // 4139 0041;	
    // (䄹) CJK UNIFIED IDEOGRAPH-4139	[FB80 C139 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4139, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_493)
{
    // 4139 0062;	
    // (䄹) CJK UNIFIED IDEOGRAPH-4139	[FB80 C139 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4139, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC139, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_494)
{
    // 413A 0021;	
    // (䄺) CJK UNIFIED IDEOGRAPH-413A	[FB80 C13A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_495)
{
    // 413A 003F;	
    // (䄺) CJK UNIFIED IDEOGRAPH-413A	[FB80 C13A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_496)
{
    // 413A 0061;	
    // (䄺) CJK UNIFIED IDEOGRAPH-413A	[FB80 C13A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_497)
{
    // 413A 0041;	
    // (䄺) CJK UNIFIED IDEOGRAPH-413A	[FB80 C13A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_498)
{
    // 413A 0062;	
    // (䄺) CJK UNIFIED IDEOGRAPH-413A	[FB80 C13A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_360_499)
{
    // 413B 0021;	
    // (䄻) CJK UNIFIED IDEOGRAPH-413B	[FB80 C13B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

