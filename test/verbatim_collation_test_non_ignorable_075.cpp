// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_075_000)
{
    // 1D9DB 0041;	
    // (ùßõ) SIGNWRITING MOVEMENT-FLOORPLANE LOOP SMALL	[1A7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9DB, 0x0041 };
    uint32_t const ces[9] = { 0x1A7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_001)
{
    // 1D9DB 0062;	
    // (ùßõ) SIGNWRITING MOVEMENT-FLOORPLANE LOOP SMALL	[1A7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DB, 0x0062 };
    uint32_t const ces[9] = { 0x1A7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_002)
{
    // 1D9DC 0021;	
    // (ùßú) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE	[1A7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DC, 0x0021 };
    uint32_t const ces[9] = { 0x1A7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_003)
{
    // 1D9DC 003F;	
    // (ùßú) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE	[1A7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DC, 0x003F };
    uint32_t const ces[9] = { 0x1A7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_004)
{
    // 1D9DC 0061;	
    // (ùßú) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE	[1A7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DC, 0x0061 };
    uint32_t const ces[9] = { 0x1A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_005)
{
    // 1D9DC 0041;	
    // (ùßú) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE	[1A7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9DC, 0x0041 };
    uint32_t const ces[9] = { 0x1A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_006)
{
    // 1D9DC 0062;	
    // (ùßú) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE	[1A7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DC, 0x0062 };
    uint32_t const ces[9] = { 0x1A7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_007)
{
    // 1D9DD 0021;	
    // (ùßù) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL	[1A80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DD, 0x0021 };
    uint32_t const ces[9] = { 0x1A80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_008)
{
    // 1D9DD 003F;	
    // (ùßù) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL	[1A80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DD, 0x003F };
    uint32_t const ces[9] = { 0x1A80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_009)
{
    // 1D9DD 0061;	
    // (ùßù) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL	[1A80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DD, 0x0061 };
    uint32_t const ces[9] = { 0x1A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_010)
{
    // 1D9DD 0041;	
    // (ùßù) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL	[1A80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9DD, 0x0041 };
    uint32_t const ces[9] = { 0x1A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_011)
{
    // 1D9DD 0062;	
    // (ùßù) SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL	[1A80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DD, 0x0062 };
    uint32_t const ces[9] = { 0x1A80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_012)
{
    // 1D9DE 0021;	
    // (ùßû) SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE	[1A81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DE, 0x0021 };
    uint32_t const ces[9] = { 0x1A81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_013)
{
    // 1D9DE 003F;	
    // (ùßû) SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE	[1A81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DE, 0x003F };
    uint32_t const ces[9] = { 0x1A81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_014)
{
    // 1D9DE 0061;	
    // (ùßû) SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE	[1A81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DE, 0x0061 };
    uint32_t const ces[9] = { 0x1A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_015)
{
    // 1D9DE 0041;	
    // (ùßû) SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE	[1A81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9DE, 0x0041 };
    uint32_t const ces[9] = { 0x1A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_016)
{
    // 1D9DE 0062;	
    // (ùßû) SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE	[1A81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DE, 0x0062 };
    uint32_t const ces[9] = { 0x1A81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_017)
{
    // 1D9DF 0021;	
    // (ùßü) SIGNWRITING ROTATION-FLOORPLANE SINGLE	[1A82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DF, 0x0021 };
    uint32_t const ces[9] = { 0x1A82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_018)
{
    // 1D9DF 003F;	
    // (ùßü) SIGNWRITING ROTATION-FLOORPLANE SINGLE	[1A82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DF, 0x003F };
    uint32_t const ces[9] = { 0x1A82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_019)
{
    // 1D9DF 0061;	
    // (ùßü) SIGNWRITING ROTATION-FLOORPLANE SINGLE	[1A82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DF, 0x0061 };
    uint32_t const ces[9] = { 0x1A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_020)
{
    // 1D9DF 0041;	
    // (ùßü) SIGNWRITING ROTATION-FLOORPLANE SINGLE	[1A82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9DF, 0x0041 };
    uint32_t const ces[9] = { 0x1A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_021)
{
    // 1D9DF 0062;	
    // (ùßü) SIGNWRITING ROTATION-FLOORPLANE SINGLE	[1A82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9DF, 0x0062 };
    uint32_t const ces[9] = { 0x1A82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_022)
{
    // 1D9E0 0021;	
    // (ùß†) SIGNWRITING ROTATION-FLOORPLANE DOUBLE	[1A83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E0, 0x0021 };
    uint32_t const ces[9] = { 0x1A83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_023)
{
    // 1D9E0 003F;	
    // (ùß†) SIGNWRITING ROTATION-FLOORPLANE DOUBLE	[1A83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E0, 0x003F };
    uint32_t const ces[9] = { 0x1A83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_024)
{
    // 1D9E0 0061;	
    // (ùß†) SIGNWRITING ROTATION-FLOORPLANE DOUBLE	[1A83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E0, 0x0061 };
    uint32_t const ces[9] = { 0x1A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_025)
{
    // 1D9E0 0041;	
    // (ùß†) SIGNWRITING ROTATION-FLOORPLANE DOUBLE	[1A83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E0, 0x0041 };
    uint32_t const ces[9] = { 0x1A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_026)
{
    // 1D9E0 0062;	
    // (ùß†) SIGNWRITING ROTATION-FLOORPLANE DOUBLE	[1A83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E0, 0x0062 };
    uint32_t const ces[9] = { 0x1A83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_027)
{
    // 1D9E1 0021;	
    // (ùß°) SIGNWRITING ROTATION-FLOORPLANE ALTERNATING	[1A84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E1, 0x0021 };
    uint32_t const ces[9] = { 0x1A84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_028)
{
    // 1D9E1 003F;	
    // (ùß°) SIGNWRITING ROTATION-FLOORPLANE ALTERNATING	[1A84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E1, 0x003F };
    uint32_t const ces[9] = { 0x1A84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_029)
{
    // 1D9E1 0061;	
    // (ùß°) SIGNWRITING ROTATION-FLOORPLANE ALTERNATING	[1A84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E1, 0x0061 };
    uint32_t const ces[9] = { 0x1A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_030)
{
    // 1D9E1 0041;	
    // (ùß°) SIGNWRITING ROTATION-FLOORPLANE ALTERNATING	[1A84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E1, 0x0041 };
    uint32_t const ces[9] = { 0x1A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_031)
{
    // 1D9E1 0062;	
    // (ùß°) SIGNWRITING ROTATION-FLOORPLANE ALTERNATING	[1A84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E1, 0x0062 };
    uint32_t const ces[9] = { 0x1A84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_032)
{
    // 1D9E2 0021;	
    // (ùß¢) SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL	[1A85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E2, 0x0021 };
    uint32_t const ces[9] = { 0x1A85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_033)
{
    // 1D9E2 003F;	
    // (ùß¢) SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL	[1A85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E2, 0x003F };
    uint32_t const ces[9] = { 0x1A85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_034)
{
    // 1D9E2 0061;	
    // (ùß¢) SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL	[1A85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E2, 0x0061 };
    uint32_t const ces[9] = { 0x1A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_035)
{
    // 1D9E2 0041;	
    // (ùß¢) SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL	[1A85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E2, 0x0041 };
    uint32_t const ces[9] = { 0x1A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_036)
{
    // 1D9E2 0062;	
    // (ùß¢) SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL	[1A85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E2, 0x0062 };
    uint32_t const ces[9] = { 0x1A85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_037)
{
    // 1D9E3 0021;	
    // (ùß£) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE	[1A86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E3, 0x0021 };
    uint32_t const ces[9] = { 0x1A86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_038)
{
    // 1D9E3 003F;	
    // (ùß£) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE	[1A86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E3, 0x003F };
    uint32_t const ces[9] = { 0x1A86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_039)
{
    // 1D9E3 0061;	
    // (ùß£) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE	[1A86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E3, 0x0061 };
    uint32_t const ces[9] = { 0x1A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_040)
{
    // 1D9E3 0041;	
    // (ùß£) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE	[1A86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E3, 0x0041 };
    uint32_t const ces[9] = { 0x1A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_041)
{
    // 1D9E3 0062;	
    // (ùß£) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE	[1A86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E3, 0x0062 };
    uint32_t const ces[9] = { 0x1A86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_042)
{
    // 1D9E4 0021;	
    // (ùß§) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE	[1A87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E4, 0x0021 };
    uint32_t const ces[9] = { 0x1A87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_043)
{
    // 1D9E4 003F;	
    // (ùß§) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE	[1A87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E4, 0x003F };
    uint32_t const ces[9] = { 0x1A87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_044)
{
    // 1D9E4 0061;	
    // (ùß§) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE	[1A87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E4, 0x0061 };
    uint32_t const ces[9] = { 0x1A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_045)
{
    // 1D9E4 0041;	
    // (ùß§) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE	[1A87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E4, 0x0041 };
    uint32_t const ces[9] = { 0x1A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_046)
{
    // 1D9E4 0062;	
    // (ùß§) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE	[1A87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E4, 0x0062 };
    uint32_t const ces[9] = { 0x1A87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_047)
{
    // 1D9E5 0021;	
    // (ùß•) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE	[1A88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E5, 0x0021 };
    uint32_t const ces[9] = { 0x1A88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_048)
{
    // 1D9E5 003F;	
    // (ùß•) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE	[1A88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E5, 0x003F };
    uint32_t const ces[9] = { 0x1A88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_049)
{
    // 1D9E5 0061;	
    // (ùß•) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE	[1A88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E5, 0x0061 };
    uint32_t const ces[9] = { 0x1A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_050)
{
    // 1D9E5 0041;	
    // (ùß•) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE	[1A88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E5, 0x0041 };
    uint32_t const ces[9] = { 0x1A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_051)
{
    // 1D9E5 0062;	
    // (ùß•) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE	[1A88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E5, 0x0062 };
    uint32_t const ces[9] = { 0x1A88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_052)
{
    // 1D9E6 0021;	
    // (ùß¶) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE	[1A89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E6, 0x0021 };
    uint32_t const ces[9] = { 0x1A89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_053)
{
    // 1D9E6 003F;	
    // (ùß¶) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE	[1A89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E6, 0x003F };
    uint32_t const ces[9] = { 0x1A89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_054)
{
    // 1D9E6 0061;	
    // (ùß¶) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE	[1A89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E6, 0x0061 };
    uint32_t const ces[9] = { 0x1A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_055)
{
    // 1D9E6 0041;	
    // (ùß¶) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE	[1A89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E6, 0x0041 };
    uint32_t const ces[9] = { 0x1A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_056)
{
    // 1D9E6 0062;	
    // (ùß¶) SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE	[1A89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E6, 0x0062 };
    uint32_t const ces[9] = { 0x1A89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_057)
{
    // 1D9E7 0021;	
    // (ùßß) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE	[1A8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E7, 0x0021 };
    uint32_t const ces[9] = { 0x1A8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_058)
{
    // 1D9E7 003F;	
    // (ùßß) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE	[1A8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E7, 0x003F };
    uint32_t const ces[9] = { 0x1A8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_059)
{
    // 1D9E7 0061;	
    // (ùßß) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE	[1A8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E7, 0x0061 };
    uint32_t const ces[9] = { 0x1A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_060)
{
    // 1D9E7 0041;	
    // (ùßß) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE	[1A8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E7, 0x0041 };
    uint32_t const ces[9] = { 0x1A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_061)
{
    // 1D9E7 0062;	
    // (ùßß) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE	[1A8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E7, 0x0062 };
    uint32_t const ces[9] = { 0x1A8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_062)
{
    // 1D9E8 0021;	
    // (ùß®) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE	[1A8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E8, 0x0021 };
    uint32_t const ces[9] = { 0x1A8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_063)
{
    // 1D9E8 003F;	
    // (ùß®) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE	[1A8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E8, 0x003F };
    uint32_t const ces[9] = { 0x1A8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_064)
{
    // 1D9E8 0061;	
    // (ùß®) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE	[1A8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E8, 0x0061 };
    uint32_t const ces[9] = { 0x1A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_065)
{
    // 1D9E8 0041;	
    // (ùß®) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE	[1A8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E8, 0x0041 };
    uint32_t const ces[9] = { 0x1A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_066)
{
    // 1D9E8 0062;	
    // (ùß®) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE	[1A8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E8, 0x0062 };
    uint32_t const ces[9] = { 0x1A8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_067)
{
    // 1D9E9 0021;	
    // (ùß©) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE	[1A8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E9, 0x0021 };
    uint32_t const ces[9] = { 0x1A8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_068)
{
    // 1D9E9 003F;	
    // (ùß©) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE	[1A8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E9, 0x003F };
    uint32_t const ces[9] = { 0x1A8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_069)
{
    // 1D9E9 0061;	
    // (ùß©) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE	[1A8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E9, 0x0061 };
    uint32_t const ces[9] = { 0x1A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_070)
{
    // 1D9E9 0041;	
    // (ùß©) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE	[1A8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9E9, 0x0041 };
    uint32_t const ces[9] = { 0x1A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_071)
{
    // 1D9E9 0062;	
    // (ùß©) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE	[1A8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9E9, 0x0062 };
    uint32_t const ces[9] = { 0x1A8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_072)
{
    // 1D9EA 0021;	
    // (ùß™) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE	[1A8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EA, 0x0021 };
    uint32_t const ces[9] = { 0x1A8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_073)
{
    // 1D9EA 003F;	
    // (ùß™) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE	[1A8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EA, 0x003F };
    uint32_t const ces[9] = { 0x1A8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_074)
{
    // 1D9EA 0061;	
    // (ùß™) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE	[1A8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EA, 0x0061 };
    uint32_t const ces[9] = { 0x1A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_075)
{
    // 1D9EA 0041;	
    // (ùß™) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE	[1A8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9EA, 0x0041 };
    uint32_t const ces[9] = { 0x1A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_076)
{
    // 1D9EA 0062;	
    // (ùß™) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE	[1A8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EA, 0x0062 };
    uint32_t const ces[9] = { 0x1A8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_077)
{
    // 1D9EB 0021;	
    // (ùß´) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE	[1A8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EB, 0x0021 };
    uint32_t const ces[9] = { 0x1A8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_078)
{
    // 1D9EB 003F;	
    // (ùß´) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE	[1A8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EB, 0x003F };
    uint32_t const ces[9] = { 0x1A8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_079)
{
    // 1D9EB 0061;	
    // (ùß´) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE	[1A8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EB, 0x0061 };
    uint32_t const ces[9] = { 0x1A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_080)
{
    // 1D9EB 0041;	
    // (ùß´) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE	[1A8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9EB, 0x0041 };
    uint32_t const ces[9] = { 0x1A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_081)
{
    // 1D9EB 0062;	
    // (ùß´) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE	[1A8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EB, 0x0062 };
    uint32_t const ces[9] = { 0x1A8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_082)
{
    // 1D9EC 0021;	
    // (ùß¨) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE	[1A8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EC, 0x0021 };
    uint32_t const ces[9] = { 0x1A8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_083)
{
    // 1D9EC 003F;	
    // (ùß¨) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE	[1A8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EC, 0x003F };
    uint32_t const ces[9] = { 0x1A8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_084)
{
    // 1D9EC 0061;	
    // (ùß¨) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE	[1A8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EC, 0x0061 };
    uint32_t const ces[9] = { 0x1A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_085)
{
    // 1D9EC 0041;	
    // (ùß¨) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE	[1A8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9EC, 0x0041 };
    uint32_t const ces[9] = { 0x1A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_086)
{
    // 1D9EC 0062;	
    // (ùß¨) SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE	[1A8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EC, 0x0062 };
    uint32_t const ces[9] = { 0x1A8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_087)
{
    // 1D9ED 0021;	
    // (ùß≠) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE	[1A90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9ED, 0x0021 };
    uint32_t const ces[9] = { 0x1A90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_088)
{
    // 1D9ED 003F;	
    // (ùß≠) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE	[1A90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9ED, 0x003F };
    uint32_t const ces[9] = { 0x1A90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_089)
{
    // 1D9ED 0061;	
    // (ùß≠) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE	[1A90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9ED, 0x0061 };
    uint32_t const ces[9] = { 0x1A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_090)
{
    // 1D9ED 0041;	
    // (ùß≠) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE	[1A90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9ED, 0x0041 };
    uint32_t const ces[9] = { 0x1A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_091)
{
    // 1D9ED 0062;	
    // (ùß≠) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE	[1A90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9ED, 0x0062 };
    uint32_t const ces[9] = { 0x1A90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_092)
{
    // 1D9EE 0021;	
    // (ùßÆ) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE	[1A91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EE, 0x0021 };
    uint32_t const ces[9] = { 0x1A91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_093)
{
    // 1D9EE 003F;	
    // (ùßÆ) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE	[1A91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EE, 0x003F };
    uint32_t const ces[9] = { 0x1A91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_094)
{
    // 1D9EE 0061;	
    // (ùßÆ) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE	[1A91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EE, 0x0061 };
    uint32_t const ces[9] = { 0x1A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_095)
{
    // 1D9EE 0041;	
    // (ùßÆ) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE	[1A91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9EE, 0x0041 };
    uint32_t const ces[9] = { 0x1A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_096)
{
    // 1D9EE 0062;	
    // (ùßÆ) SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE	[1A91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EE, 0x0062 };
    uint32_t const ces[9] = { 0x1A91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_097)
{
    // 1D9EF 0021;	
    // (ùßØ) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE	[1A92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EF, 0x0021 };
    uint32_t const ces[9] = { 0x1A92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_098)
{
    // 1D9EF 003F;	
    // (ùßØ) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE	[1A92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EF, 0x003F };
    uint32_t const ces[9] = { 0x1A92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_099)
{
    // 1D9EF 0061;	
    // (ùßØ) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE	[1A92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EF, 0x0061 };
    uint32_t const ces[9] = { 0x1A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_100)
{
    // 1D9EF 0041;	
    // (ùßØ) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE	[1A92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9EF, 0x0041 };
    uint32_t const ces[9] = { 0x1A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_101)
{
    // 1D9EF 0062;	
    // (ùßØ) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE	[1A92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9EF, 0x0062 };
    uint32_t const ces[9] = { 0x1A92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_102)
{
    // 1D9F0 0021;	
    // (ùß∞) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE	[1A93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F0, 0x0021 };
    uint32_t const ces[9] = { 0x1A93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_103)
{
    // 1D9F0 003F;	
    // (ùß∞) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE	[1A93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F0, 0x003F };
    uint32_t const ces[9] = { 0x1A93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_104)
{
    // 1D9F0 0061;	
    // (ùß∞) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE	[1A93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F0, 0x0061 };
    uint32_t const ces[9] = { 0x1A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_105)
{
    // 1D9F0 0041;	
    // (ùß∞) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE	[1A93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F0, 0x0041 };
    uint32_t const ces[9] = { 0x1A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_106)
{
    // 1D9F0 0062;	
    // (ùß∞) SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE	[1A93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F0, 0x0062 };
    uint32_t const ces[9] = { 0x1A93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_107)
{
    // 1D9F1 0021;	
    // (ùß±) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE	[1A94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F1, 0x0021 };
    uint32_t const ces[9] = { 0x1A94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_108)
{
    // 1D9F1 003F;	
    // (ùß±) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE	[1A94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F1, 0x003F };
    uint32_t const ces[9] = { 0x1A94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_109)
{
    // 1D9F1 0061;	
    // (ùß±) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE	[1A94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F1, 0x0061 };
    uint32_t const ces[9] = { 0x1A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_110)
{
    // 1D9F1 0041;	
    // (ùß±) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE	[1A94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F1, 0x0041 };
    uint32_t const ces[9] = { 0x1A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_111)
{
    // 1D9F1 0062;	
    // (ùß±) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE	[1A94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F1, 0x0062 };
    uint32_t const ces[9] = { 0x1A94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_112)
{
    // 1D9F2 0021;	
    // (ùß≤) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE	[1A95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F2, 0x0021 };
    uint32_t const ces[9] = { 0x1A95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_113)
{
    // 1D9F2 003F;	
    // (ùß≤) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE	[1A95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F2, 0x003F };
    uint32_t const ces[9] = { 0x1A95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_114)
{
    // 1D9F2 0061;	
    // (ùß≤) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE	[1A95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F2, 0x0061 };
    uint32_t const ces[9] = { 0x1A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_115)
{
    // 1D9F2 0041;	
    // (ùß≤) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE	[1A95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F2, 0x0041 };
    uint32_t const ces[9] = { 0x1A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_116)
{
    // 1D9F2 0062;	
    // (ùß≤) SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE	[1A95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F2, 0x0062 };
    uint32_t const ces[9] = { 0x1A95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_117)
{
    // 1D9F3 0021;	
    // (ùß≥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE	[1A96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F3, 0x0021 };
    uint32_t const ces[9] = { 0x1A96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_118)
{
    // 1D9F3 003F;	
    // (ùß≥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE	[1A96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F3, 0x003F };
    uint32_t const ces[9] = { 0x1A96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_119)
{
    // 1D9F3 0061;	
    // (ùß≥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE	[1A96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F3, 0x0061 };
    uint32_t const ces[9] = { 0x1A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_120)
{
    // 1D9F3 0041;	
    // (ùß≥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE	[1A96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F3, 0x0041 };
    uint32_t const ces[9] = { 0x1A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_121)
{
    // 1D9F3 0062;	
    // (ùß≥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE	[1A96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F3, 0x0062 };
    uint32_t const ces[9] = { 0x1A96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_122)
{
    // 1D9F4 0021;	
    // (ùß¥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE	[1A97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F4, 0x0021 };
    uint32_t const ces[9] = { 0x1A97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_123)
{
    // 1D9F4 003F;	
    // (ùß¥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE	[1A97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F4, 0x003F };
    uint32_t const ces[9] = { 0x1A97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_124)
{
    // 1D9F4 0061;	
    // (ùß¥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE	[1A97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F4, 0x0061 };
    uint32_t const ces[9] = { 0x1A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_125)
{
    // 1D9F4 0041;	
    // (ùß¥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE	[1A97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F4, 0x0041 };
    uint32_t const ces[9] = { 0x1A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_126)
{
    // 1D9F4 0062;	
    // (ùß¥) SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE	[1A97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F4, 0x0062 };
    uint32_t const ces[9] = { 0x1A97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_127)
{
    // 1D9F5 0021;	
    // (ùßµ) SIGNWRITING DYNAMIC ARROWHEAD SMALL	[1A98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F5, 0x0021 };
    uint32_t const ces[9] = { 0x1A98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_128)
{
    // 1D9F5 003F;	
    // (ùßµ) SIGNWRITING DYNAMIC ARROWHEAD SMALL	[1A98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F5, 0x003F };
    uint32_t const ces[9] = { 0x1A98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_129)
{
    // 1D9F5 0061;	
    // (ùßµ) SIGNWRITING DYNAMIC ARROWHEAD SMALL	[1A98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F5, 0x0061 };
    uint32_t const ces[9] = { 0x1A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_130)
{
    // 1D9F5 0041;	
    // (ùßµ) SIGNWRITING DYNAMIC ARROWHEAD SMALL	[1A98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F5, 0x0041 };
    uint32_t const ces[9] = { 0x1A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_131)
{
    // 1D9F5 0062;	
    // (ùßµ) SIGNWRITING DYNAMIC ARROWHEAD SMALL	[1A98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F5, 0x0062 };
    uint32_t const ces[9] = { 0x1A98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_132)
{
    // 1D9F6 0021;	
    // (ùß∂) SIGNWRITING DYNAMIC ARROWHEAD LARGE	[1A99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F6, 0x0021 };
    uint32_t const ces[9] = { 0x1A99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_133)
{
    // 1D9F6 003F;	
    // (ùß∂) SIGNWRITING DYNAMIC ARROWHEAD LARGE	[1A99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F6, 0x003F };
    uint32_t const ces[9] = { 0x1A99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_134)
{
    // 1D9F6 0061;	
    // (ùß∂) SIGNWRITING DYNAMIC ARROWHEAD LARGE	[1A99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F6, 0x0061 };
    uint32_t const ces[9] = { 0x1A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_135)
{
    // 1D9F6 0041;	
    // (ùß∂) SIGNWRITING DYNAMIC ARROWHEAD LARGE	[1A99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F6, 0x0041 };
    uint32_t const ces[9] = { 0x1A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_136)
{
    // 1D9F6 0062;	
    // (ùß∂) SIGNWRITING DYNAMIC ARROWHEAD LARGE	[1A99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F6, 0x0062 };
    uint32_t const ces[9] = { 0x1A99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_137)
{
    // 1D9F7 0021;	
    // (ùß∑) SIGNWRITING DYNAMIC FAST	[1A9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F7, 0x0021 };
    uint32_t const ces[9] = { 0x1A9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_138)
{
    // 1D9F7 003F;	
    // (ùß∑) SIGNWRITING DYNAMIC FAST	[1A9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F7, 0x003F };
    uint32_t const ces[9] = { 0x1A9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_139)
{
    // 1D9F7 0061;	
    // (ùß∑) SIGNWRITING DYNAMIC FAST	[1A9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F7, 0x0061 };
    uint32_t const ces[9] = { 0x1A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_140)
{
    // 1D9F7 0041;	
    // (ùß∑) SIGNWRITING DYNAMIC FAST	[1A9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F7, 0x0041 };
    uint32_t const ces[9] = { 0x1A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_141)
{
    // 1D9F7 0062;	
    // (ùß∑) SIGNWRITING DYNAMIC FAST	[1A9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F7, 0x0062 };
    uint32_t const ces[9] = { 0x1A9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_142)
{
    // 1D9F8 0021;	
    // (ùß∏) SIGNWRITING DYNAMIC SLOW	[1A9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F8, 0x0021 };
    uint32_t const ces[9] = { 0x1A9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_143)
{
    // 1D9F8 003F;	
    // (ùß∏) SIGNWRITING DYNAMIC SLOW	[1A9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F8, 0x003F };
    uint32_t const ces[9] = { 0x1A9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_144)
{
    // 1D9F8 0061;	
    // (ùß∏) SIGNWRITING DYNAMIC SLOW	[1A9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F8, 0x0061 };
    uint32_t const ces[9] = { 0x1A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_145)
{
    // 1D9F8 0041;	
    // (ùß∏) SIGNWRITING DYNAMIC SLOW	[1A9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F8, 0x0041 };
    uint32_t const ces[9] = { 0x1A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_146)
{
    // 1D9F8 0062;	
    // (ùß∏) SIGNWRITING DYNAMIC SLOW	[1A9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F8, 0x0062 };
    uint32_t const ces[9] = { 0x1A9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_147)
{
    // 1D9F9 0021;	
    // (ùßπ) SIGNWRITING DYNAMIC TENSE	[1A9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F9, 0x0021 };
    uint32_t const ces[9] = { 0x1A9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_148)
{
    // 1D9F9 003F;	
    // (ùßπ) SIGNWRITING DYNAMIC TENSE	[1A9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F9, 0x003F };
    uint32_t const ces[9] = { 0x1A9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_149)
{
    // 1D9F9 0061;	
    // (ùßπ) SIGNWRITING DYNAMIC TENSE	[1A9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F9, 0x0061 };
    uint32_t const ces[9] = { 0x1A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_150)
{
    // 1D9F9 0041;	
    // (ùßπ) SIGNWRITING DYNAMIC TENSE	[1A9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9F9, 0x0041 };
    uint32_t const ces[9] = { 0x1A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_151)
{
    // 1D9F9 0062;	
    // (ùßπ) SIGNWRITING DYNAMIC TENSE	[1A9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9F9, 0x0062 };
    uint32_t const ces[9] = { 0x1A9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_152)
{
    // 1D9FA 0021;	
    // (ùß∫) SIGNWRITING DYNAMIC RELAXED	[1A9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FA, 0x0021 };
    uint32_t const ces[9] = { 0x1A9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_153)
{
    // 1D9FA 003F;	
    // (ùß∫) SIGNWRITING DYNAMIC RELAXED	[1A9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FA, 0x003F };
    uint32_t const ces[9] = { 0x1A9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_154)
{
    // 1D9FA 0061;	
    // (ùß∫) SIGNWRITING DYNAMIC RELAXED	[1A9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FA, 0x0061 };
    uint32_t const ces[9] = { 0x1A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_155)
{
    // 1D9FA 0041;	
    // (ùß∫) SIGNWRITING DYNAMIC RELAXED	[1A9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FA, 0x0041 };
    uint32_t const ces[9] = { 0x1A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_156)
{
    // 1D9FA 0062;	
    // (ùß∫) SIGNWRITING DYNAMIC RELAXED	[1A9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FA, 0x0062 };
    uint32_t const ces[9] = { 0x1A9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_157)
{
    // 1D9FB 0021;	
    // (ùßª) SIGNWRITING DYNAMIC SIMULTANEOUS	[1A9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FB, 0x0021 };
    uint32_t const ces[9] = { 0x1A9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_158)
{
    // 1D9FB 003F;	
    // (ùßª) SIGNWRITING DYNAMIC SIMULTANEOUS	[1A9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FB, 0x003F };
    uint32_t const ces[9] = { 0x1A9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_159)
{
    // 1D9FB 0061;	
    // (ùßª) SIGNWRITING DYNAMIC SIMULTANEOUS	[1A9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FB, 0x0061 };
    uint32_t const ces[9] = { 0x1A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_160)
{
    // 1D9FB 0041;	
    // (ùßª) SIGNWRITING DYNAMIC SIMULTANEOUS	[1A9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FB, 0x0041 };
    uint32_t const ces[9] = { 0x1A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_161)
{
    // 1D9FB 0062;	
    // (ùßª) SIGNWRITING DYNAMIC SIMULTANEOUS	[1A9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FB, 0x0062 };
    uint32_t const ces[9] = { 0x1A9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_162)
{
    // 1D9FC 0021;	
    // (ùßº) SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING	[1A9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FC, 0x0021 };
    uint32_t const ces[9] = { 0x1A9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_163)
{
    // 1D9FC 003F;	
    // (ùßº) SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING	[1A9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FC, 0x003F };
    uint32_t const ces[9] = { 0x1A9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_164)
{
    // 1D9FC 0061;	
    // (ùßº) SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING	[1A9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FC, 0x0061 };
    uint32_t const ces[9] = { 0x1A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_165)
{
    // 1D9FC 0041;	
    // (ùßº) SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING	[1A9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FC, 0x0041 };
    uint32_t const ces[9] = { 0x1A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_166)
{
    // 1D9FC 0062;	
    // (ùßº) SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING	[1A9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FC, 0x0062 };
    uint32_t const ces[9] = { 0x1A9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_167)
{
    // 1D9FD 0021;	
    // (ùßΩ) SIGNWRITING DYNAMIC EVERY OTHER TIME	[1AA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FD, 0x0021 };
    uint32_t const ces[9] = { 0x1AA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_168)
{
    // 1D9FD 003F;	
    // (ùßΩ) SIGNWRITING DYNAMIC EVERY OTHER TIME	[1AA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FD, 0x003F };
    uint32_t const ces[9] = { 0x1AA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_169)
{
    // 1D9FD 0061;	
    // (ùßΩ) SIGNWRITING DYNAMIC EVERY OTHER TIME	[1AA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FD, 0x0061 };
    uint32_t const ces[9] = { 0x1AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_170)
{
    // 1D9FD 0041;	
    // (ùßΩ) SIGNWRITING DYNAMIC EVERY OTHER TIME	[1AA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FD, 0x0041 };
    uint32_t const ces[9] = { 0x1AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_171)
{
    // 1D9FD 0062;	
    // (ùßΩ) SIGNWRITING DYNAMIC EVERY OTHER TIME	[1AA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FD, 0x0062 };
    uint32_t const ces[9] = { 0x1AA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_172)
{
    // 1D9FE 0021;	
    // (ùßæ) SIGNWRITING DYNAMIC GRADUAL	[1AA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FE, 0x0021 };
    uint32_t const ces[9] = { 0x1AA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_173)
{
    // 1D9FE 003F;	
    // (ùßæ) SIGNWRITING DYNAMIC GRADUAL	[1AA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FE, 0x003F };
    uint32_t const ces[9] = { 0x1AA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_174)
{
    // 1D9FE 0061;	
    // (ùßæ) SIGNWRITING DYNAMIC GRADUAL	[1AA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FE, 0x0061 };
    uint32_t const ces[9] = { 0x1AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_175)
{
    // 1D9FE 0041;	
    // (ùßæ) SIGNWRITING DYNAMIC GRADUAL	[1AA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FE, 0x0041 };
    uint32_t const ces[9] = { 0x1AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_176)
{
    // 1D9FE 0062;	
    // (ùßæ) SIGNWRITING DYNAMIC GRADUAL	[1AA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FE, 0x0062 };
    uint32_t const ces[9] = { 0x1AA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_177)
{
    // 1D9FF 0021;	
    // (ùßø) SIGNWRITING HEAD	[1AA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FF, 0x0021 };
    uint32_t const ces[9] = { 0x1AA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_178)
{
    // 1D9FF 003F;	
    // (ùßø) SIGNWRITING HEAD	[1AA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FF, 0x003F };
    uint32_t const ces[9] = { 0x1AA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_179)
{
    // 1D9FF 0061;	
    // (ùßø) SIGNWRITING HEAD	[1AA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FF, 0x0061 };
    uint32_t const ces[9] = { 0x1AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_180)
{
    // 1D9FF 0041;	
    // (ùßø) SIGNWRITING HEAD	[1AA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9FF, 0x0041 };
    uint32_t const ces[9] = { 0x1AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_181)
{
    // 1D9FF 0062;	
    // (ùßø) SIGNWRITING HEAD	[1AA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9FF, 0x0062 };
    uint32_t const ces[9] = { 0x1AA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_182)
{
    // 1DA37 0021;	
    // (ù®∑) SIGNWRITING AIR BLOW SMALL ROTATIONS	[1AA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA37, 0x0021 };
    uint32_t const ces[9] = { 0x1AA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_183)
{
    // 1DA37 003F;	
    // (ù®∑) SIGNWRITING AIR BLOW SMALL ROTATIONS	[1AA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA37, 0x003F };
    uint32_t const ces[9] = { 0x1AA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_184)
{
    // 1DA37 0061;	
    // (ù®∑) SIGNWRITING AIR BLOW SMALL ROTATIONS	[1AA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA37, 0x0061 };
    uint32_t const ces[9] = { 0x1AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_185)
{
    // 1DA37 0041;	
    // (ù®∑) SIGNWRITING AIR BLOW SMALL ROTATIONS	[1AA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA37, 0x0041 };
    uint32_t const ces[9] = { 0x1AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_186)
{
    // 1DA37 0062;	
    // (ù®∑) SIGNWRITING AIR BLOW SMALL ROTATIONS	[1AA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA37, 0x0062 };
    uint32_t const ces[9] = { 0x1AA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_187)
{
    // 1DA38 0021;	
    // (ù®∏) SIGNWRITING AIR SUCK SMALL ROTATIONS	[1AA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA38, 0x0021 };
    uint32_t const ces[9] = { 0x1AA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_188)
{
    // 1DA38 003F;	
    // (ù®∏) SIGNWRITING AIR SUCK SMALL ROTATIONS	[1AA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA38, 0x003F };
    uint32_t const ces[9] = { 0x1AA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_189)
{
    // 1DA38 0061;	
    // (ù®∏) SIGNWRITING AIR SUCK SMALL ROTATIONS	[1AA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA38, 0x0061 };
    uint32_t const ces[9] = { 0x1AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_190)
{
    // 1DA38 0041;	
    // (ù®∏) SIGNWRITING AIR SUCK SMALL ROTATIONS	[1AA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA38, 0x0041 };
    uint32_t const ces[9] = { 0x1AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_191)
{
    // 1DA38 0062;	
    // (ù®∏) SIGNWRITING AIR SUCK SMALL ROTATIONS	[1AA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA38, 0x0062 };
    uint32_t const ces[9] = { 0x1AA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_192)
{
    // 1DA39 0021;	
    // (ù®π) SIGNWRITING BREATH INHALE	[1AA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA39, 0x0021 };
    uint32_t const ces[9] = { 0x1AA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_193)
{
    // 1DA39 003F;	
    // (ù®π) SIGNWRITING BREATH INHALE	[1AA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA39, 0x003F };
    uint32_t const ces[9] = { 0x1AA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_194)
{
    // 1DA39 0061;	
    // (ù®π) SIGNWRITING BREATH INHALE	[1AA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA39, 0x0061 };
    uint32_t const ces[9] = { 0x1AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_195)
{
    // 1DA39 0041;	
    // (ù®π) SIGNWRITING BREATH INHALE	[1AA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA39, 0x0041 };
    uint32_t const ces[9] = { 0x1AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_196)
{
    // 1DA39 0062;	
    // (ù®π) SIGNWRITING BREATH INHALE	[1AA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA39, 0x0062 };
    uint32_t const ces[9] = { 0x1AA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_197)
{
    // 1DA3A 0021;	
    // (ù®∫) SIGNWRITING BREATH EXHALE	[1AA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA3A, 0x0021 };
    uint32_t const ces[9] = { 0x1AA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_198)
{
    // 1DA3A 003F;	
    // (ù®∫) SIGNWRITING BREATH EXHALE	[1AA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA3A, 0x003F };
    uint32_t const ces[9] = { 0x1AA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_199)
{
    // 1DA3A 0061;	
    // (ù®∫) SIGNWRITING BREATH EXHALE	[1AA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA3A, 0x0061 };
    uint32_t const ces[9] = { 0x1AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_200)
{
    // 1DA3A 0041;	
    // (ù®∫) SIGNWRITING BREATH EXHALE	[1AA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA3A, 0x0041 };
    uint32_t const ces[9] = { 0x1AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_201)
{
    // 1DA3A 0062;	
    // (ù®∫) SIGNWRITING BREATH EXHALE	[1AA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA3A, 0x0062 };
    uint32_t const ces[9] = { 0x1AA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_202)
{
    // 1DA6D 0021;	
    // (ù©≠) SIGNWRITING SHOULDER HIP SPINE	[1AA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6D, 0x0021 };
    uint32_t const ces[9] = { 0x1AA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_203)
{
    // 1DA6D 003F;	
    // (ù©≠) SIGNWRITING SHOULDER HIP SPINE	[1AA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6D, 0x003F };
    uint32_t const ces[9] = { 0x1AA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_204)
{
    // 1DA6D 0061;	
    // (ù©≠) SIGNWRITING SHOULDER HIP SPINE	[1AA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6D, 0x0061 };
    uint32_t const ces[9] = { 0x1AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_205)
{
    // 1DA6D 0041;	
    // (ù©≠) SIGNWRITING SHOULDER HIP SPINE	[1AA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA6D, 0x0041 };
    uint32_t const ces[9] = { 0x1AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_206)
{
    // 1DA6D 0062;	
    // (ù©≠) SIGNWRITING SHOULDER HIP SPINE	[1AA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6D, 0x0062 };
    uint32_t const ces[9] = { 0x1AA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_207)
{
    // 1DA6E 0021;	
    // (ù©Æ) SIGNWRITING SHOULDER HIP POSITIONS	[1AA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6E, 0x0021 };
    uint32_t const ces[9] = { 0x1AA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_208)
{
    // 1DA6E 003F;	
    // (ù©Æ) SIGNWRITING SHOULDER HIP POSITIONS	[1AA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6E, 0x003F };
    uint32_t const ces[9] = { 0x1AA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_209)
{
    // 1DA6E 0061;	
    // (ù©Æ) SIGNWRITING SHOULDER HIP POSITIONS	[1AA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6E, 0x0061 };
    uint32_t const ces[9] = { 0x1AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_210)
{
    // 1DA6E 0041;	
    // (ù©Æ) SIGNWRITING SHOULDER HIP POSITIONS	[1AA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA6E, 0x0041 };
    uint32_t const ces[9] = { 0x1AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_211)
{
    // 1DA6E 0062;	
    // (ù©Æ) SIGNWRITING SHOULDER HIP POSITIONS	[1AA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6E, 0x0062 };
    uint32_t const ces[9] = { 0x1AA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_212)
{
    // 1DA6F 0021;	
    // (ù©Ø) SIGNWRITING WALLPLANE SHOULDER HIP MOVE	[1AA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6F, 0x0021 };
    uint32_t const ces[9] = { 0x1AA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_213)
{
    // 1DA6F 003F;	
    // (ù©Ø) SIGNWRITING WALLPLANE SHOULDER HIP MOVE	[1AA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6F, 0x003F };
    uint32_t const ces[9] = { 0x1AA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_214)
{
    // 1DA6F 0061;	
    // (ù©Ø) SIGNWRITING WALLPLANE SHOULDER HIP MOVE	[1AA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6F, 0x0061 };
    uint32_t const ces[9] = { 0x1AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_215)
{
    // 1DA6F 0041;	
    // (ù©Ø) SIGNWRITING WALLPLANE SHOULDER HIP MOVE	[1AA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA6F, 0x0041 };
    uint32_t const ces[9] = { 0x1AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_216)
{
    // 1DA6F 0062;	
    // (ù©Ø) SIGNWRITING WALLPLANE SHOULDER HIP MOVE	[1AA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA6F, 0x0062 };
    uint32_t const ces[9] = { 0x1AA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_217)
{
    // 1DA70 0021;	
    // (ù©∞) SIGNWRITING FLOORPLANE SHOULDER HIP MOVE	[1AAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA70, 0x0021 };
    uint32_t const ces[9] = { 0x1AAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_218)
{
    // 1DA70 003F;	
    // (ù©∞) SIGNWRITING FLOORPLANE SHOULDER HIP MOVE	[1AAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA70, 0x003F };
    uint32_t const ces[9] = { 0x1AAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_219)
{
    // 1DA70 0061;	
    // (ù©∞) SIGNWRITING FLOORPLANE SHOULDER HIP MOVE	[1AAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA70, 0x0061 };
    uint32_t const ces[9] = { 0x1AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_220)
{
    // 1DA70 0041;	
    // (ù©∞) SIGNWRITING FLOORPLANE SHOULDER HIP MOVE	[1AAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA70, 0x0041 };
    uint32_t const ces[9] = { 0x1AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_221)
{
    // 1DA70 0062;	
    // (ù©∞) SIGNWRITING FLOORPLANE SHOULDER HIP MOVE	[1AAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA70, 0x0062 };
    uint32_t const ces[9] = { 0x1AAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_222)
{
    // 1DA71 0021;	
    // (ù©±) SIGNWRITING SHOULDER TILTING FROM WAIST	[1AAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA71, 0x0021 };
    uint32_t const ces[9] = { 0x1AAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_223)
{
    // 1DA71 003F;	
    // (ù©±) SIGNWRITING SHOULDER TILTING FROM WAIST	[1AAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA71, 0x003F };
    uint32_t const ces[9] = { 0x1AAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_224)
{
    // 1DA71 0061;	
    // (ù©±) SIGNWRITING SHOULDER TILTING FROM WAIST	[1AAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA71, 0x0061 };
    uint32_t const ces[9] = { 0x1AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_225)
{
    // 1DA71 0041;	
    // (ù©±) SIGNWRITING SHOULDER TILTING FROM WAIST	[1AAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA71, 0x0041 };
    uint32_t const ces[9] = { 0x1AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_226)
{
    // 1DA71 0062;	
    // (ù©±) SIGNWRITING SHOULDER TILTING FROM WAIST	[1AAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA71, 0x0062 };
    uint32_t const ces[9] = { 0x1AAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_227)
{
    // 1DA72 0021;	
    // (ù©≤) SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH	[1AAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA72, 0x0021 };
    uint32_t const ces[9] = { 0x1AAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_228)
{
    // 1DA72 003F;	
    // (ù©≤) SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH	[1AAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA72, 0x003F };
    uint32_t const ces[9] = { 0x1AAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_229)
{
    // 1DA72 0061;	
    // (ù©≤) SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH	[1AAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA72, 0x0061 };
    uint32_t const ces[9] = { 0x1AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_230)
{
    // 1DA72 0041;	
    // (ù©≤) SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH	[1AAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA72, 0x0041 };
    uint32_t const ces[9] = { 0x1AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_231)
{
    // 1DA72 0062;	
    // (ù©≤) SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH	[1AAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA72, 0x0062 };
    uint32_t const ces[9] = { 0x1AAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_232)
{
    // 1DA73 0021;	
    // (ù©≥) SIGNWRITING TORSO-WALLPLANE CURVED BEND	[1AAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA73, 0x0021 };
    uint32_t const ces[9] = { 0x1AAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_233)
{
    // 1DA73 003F;	
    // (ù©≥) SIGNWRITING TORSO-WALLPLANE CURVED BEND	[1AAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA73, 0x003F };
    uint32_t const ces[9] = { 0x1AAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_234)
{
    // 1DA73 0061;	
    // (ù©≥) SIGNWRITING TORSO-WALLPLANE CURVED BEND	[1AAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA73, 0x0061 };
    uint32_t const ces[9] = { 0x1AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_235)
{
    // 1DA73 0041;	
    // (ù©≥) SIGNWRITING TORSO-WALLPLANE CURVED BEND	[1AAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA73, 0x0041 };
    uint32_t const ces[9] = { 0x1AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_236)
{
    // 1DA73 0062;	
    // (ù©≥) SIGNWRITING TORSO-WALLPLANE CURVED BEND	[1AAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA73, 0x0062 };
    uint32_t const ces[9] = { 0x1AAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_237)
{
    // 1DA74 0021;	
    // (ù©¥) SIGNWRITING TORSO-FLOORPLANE TWISTING	[1AAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA74, 0x0021 };
    uint32_t const ces[9] = { 0x1AAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_238)
{
    // 1DA74 003F;	
    // (ù©¥) SIGNWRITING TORSO-FLOORPLANE TWISTING	[1AAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA74, 0x003F };
    uint32_t const ces[9] = { 0x1AAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_239)
{
    // 1DA74 0061;	
    // (ù©¥) SIGNWRITING TORSO-FLOORPLANE TWISTING	[1AAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA74, 0x0061 };
    uint32_t const ces[9] = { 0x1AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_240)
{
    // 1DA74 0041;	
    // (ù©¥) SIGNWRITING TORSO-FLOORPLANE TWISTING	[1AAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA74, 0x0041 };
    uint32_t const ces[9] = { 0x1AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_241)
{
    // 1DA74 0062;	
    // (ù©¥) SIGNWRITING TORSO-FLOORPLANE TWISTING	[1AAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA74, 0x0062 };
    uint32_t const ces[9] = { 0x1AAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_242)
{
    // 1DA76 0021;	
    // (ù©∂) SIGNWRITING LIMB COMBINATION	[1AAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA76, 0x0021 };
    uint32_t const ces[9] = { 0x1AAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_243)
{
    // 1DA76 003F;	
    // (ù©∂) SIGNWRITING LIMB COMBINATION	[1AAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA76, 0x003F };
    uint32_t const ces[9] = { 0x1AAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_244)
{
    // 1DA76 0061;	
    // (ù©∂) SIGNWRITING LIMB COMBINATION	[1AAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA76, 0x0061 };
    uint32_t const ces[9] = { 0x1AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_245)
{
    // 1DA76 0041;	
    // (ù©∂) SIGNWRITING LIMB COMBINATION	[1AAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA76, 0x0041 };
    uint32_t const ces[9] = { 0x1AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_246)
{
    // 1DA76 0062;	
    // (ù©∂) SIGNWRITING LIMB COMBINATION	[1AAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA76, 0x0062 };
    uint32_t const ces[9] = { 0x1AAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_247)
{
    // 1DA77 0021;	
    // (ù©∑) SIGNWRITING LIMB LENGTH-1	[1AB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA77, 0x0021 };
    uint32_t const ces[9] = { 0x1AB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_248)
{
    // 1DA77 003F;	
    // (ù©∑) SIGNWRITING LIMB LENGTH-1	[1AB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA77, 0x003F };
    uint32_t const ces[9] = { 0x1AB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_249)
{
    // 1DA77 0061;	
    // (ù©∑) SIGNWRITING LIMB LENGTH-1	[1AB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA77, 0x0061 };
    uint32_t const ces[9] = { 0x1AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_250)
{
    // 1DA77 0041;	
    // (ù©∑) SIGNWRITING LIMB LENGTH-1	[1AB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA77, 0x0041 };
    uint32_t const ces[9] = { 0x1AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_251)
{
    // 1DA77 0062;	
    // (ù©∑) SIGNWRITING LIMB LENGTH-1	[1AB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA77, 0x0062 };
    uint32_t const ces[9] = { 0x1AB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_252)
{
    // 1DA78 0021;	
    // (ù©∏) SIGNWRITING LIMB LENGTH-2	[1AB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA78, 0x0021 };
    uint32_t const ces[9] = { 0x1AB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_253)
{
    // 1DA78 003F;	
    // (ù©∏) SIGNWRITING LIMB LENGTH-2	[1AB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA78, 0x003F };
    uint32_t const ces[9] = { 0x1AB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_254)
{
    // 1DA78 0061;	
    // (ù©∏) SIGNWRITING LIMB LENGTH-2	[1AB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA78, 0x0061 };
    uint32_t const ces[9] = { 0x1AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_255)
{
    // 1DA78 0041;	
    // (ù©∏) SIGNWRITING LIMB LENGTH-2	[1AB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA78, 0x0041 };
    uint32_t const ces[9] = { 0x1AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_256)
{
    // 1DA78 0062;	
    // (ù©∏) SIGNWRITING LIMB LENGTH-2	[1AB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA78, 0x0062 };
    uint32_t const ces[9] = { 0x1AB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_257)
{
    // 1DA79 0021;	
    // (ù©π) SIGNWRITING LIMB LENGTH-3	[1AB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA79, 0x0021 };
    uint32_t const ces[9] = { 0x1AB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_258)
{
    // 1DA79 003F;	
    // (ù©π) SIGNWRITING LIMB LENGTH-3	[1AB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA79, 0x003F };
    uint32_t const ces[9] = { 0x1AB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_259)
{
    // 1DA79 0061;	
    // (ù©π) SIGNWRITING LIMB LENGTH-3	[1AB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA79, 0x0061 };
    uint32_t const ces[9] = { 0x1AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_260)
{
    // 1DA79 0041;	
    // (ù©π) SIGNWRITING LIMB LENGTH-3	[1AB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA79, 0x0041 };
    uint32_t const ces[9] = { 0x1AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_261)
{
    // 1DA79 0062;	
    // (ù©π) SIGNWRITING LIMB LENGTH-3	[1AB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA79, 0x0062 };
    uint32_t const ces[9] = { 0x1AB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_262)
{
    // 1DA7A 0021;	
    // (ù©∫) SIGNWRITING LIMB LENGTH-4	[1AB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7A, 0x0021 };
    uint32_t const ces[9] = { 0x1AB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_263)
{
    // 1DA7A 003F;	
    // (ù©∫) SIGNWRITING LIMB LENGTH-4	[1AB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7A, 0x003F };
    uint32_t const ces[9] = { 0x1AB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_264)
{
    // 1DA7A 0061;	
    // (ù©∫) SIGNWRITING LIMB LENGTH-4	[1AB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7A, 0x0061 };
    uint32_t const ces[9] = { 0x1AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_265)
{
    // 1DA7A 0041;	
    // (ù©∫) SIGNWRITING LIMB LENGTH-4	[1AB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7A, 0x0041 };
    uint32_t const ces[9] = { 0x1AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_266)
{
    // 1DA7A 0062;	
    // (ù©∫) SIGNWRITING LIMB LENGTH-4	[1AB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7A, 0x0062 };
    uint32_t const ces[9] = { 0x1AB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_267)
{
    // 1DA7B 0021;	
    // (ù©ª) SIGNWRITING LIMB LENGTH-5	[1AB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7B, 0x0021 };
    uint32_t const ces[9] = { 0x1AB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_268)
{
    // 1DA7B 003F;	
    // (ù©ª) SIGNWRITING LIMB LENGTH-5	[1AB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7B, 0x003F };
    uint32_t const ces[9] = { 0x1AB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_269)
{
    // 1DA7B 0061;	
    // (ù©ª) SIGNWRITING LIMB LENGTH-5	[1AB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7B, 0x0061 };
    uint32_t const ces[9] = { 0x1AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_270)
{
    // 1DA7B 0041;	
    // (ù©ª) SIGNWRITING LIMB LENGTH-5	[1AB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7B, 0x0041 };
    uint32_t const ces[9] = { 0x1AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_271)
{
    // 1DA7B 0062;	
    // (ù©ª) SIGNWRITING LIMB LENGTH-5	[1AB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7B, 0x0062 };
    uint32_t const ces[9] = { 0x1AB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_272)
{
    // 1DA7C 0021;	
    // (ù©º) SIGNWRITING LIMB LENGTH-6	[1AB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7C, 0x0021 };
    uint32_t const ces[9] = { 0x1AB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_273)
{
    // 1DA7C 003F;	
    // (ù©º) SIGNWRITING LIMB LENGTH-6	[1AB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7C, 0x003F };
    uint32_t const ces[9] = { 0x1AB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_274)
{
    // 1DA7C 0061;	
    // (ù©º) SIGNWRITING LIMB LENGTH-6	[1AB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7C, 0x0061 };
    uint32_t const ces[9] = { 0x1AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_275)
{
    // 1DA7C 0041;	
    // (ù©º) SIGNWRITING LIMB LENGTH-6	[1AB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7C, 0x0041 };
    uint32_t const ces[9] = { 0x1AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_276)
{
    // 1DA7C 0062;	
    // (ù©º) SIGNWRITING LIMB LENGTH-6	[1AB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7C, 0x0062 };
    uint32_t const ces[9] = { 0x1AB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_277)
{
    // 1DA7D 0021;	
    // (ù©Ω) SIGNWRITING LIMB LENGTH-7	[1AB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7D, 0x0021 };
    uint32_t const ces[9] = { 0x1AB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_278)
{
    // 1DA7D 003F;	
    // (ù©Ω) SIGNWRITING LIMB LENGTH-7	[1AB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7D, 0x003F };
    uint32_t const ces[9] = { 0x1AB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_279)
{
    // 1DA7D 0061;	
    // (ù©Ω) SIGNWRITING LIMB LENGTH-7	[1AB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7D, 0x0061 };
    uint32_t const ces[9] = { 0x1AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_280)
{
    // 1DA7D 0041;	
    // (ù©Ω) SIGNWRITING LIMB LENGTH-7	[1AB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7D, 0x0041 };
    uint32_t const ces[9] = { 0x1AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_281)
{
    // 1DA7D 0062;	
    // (ù©Ω) SIGNWRITING LIMB LENGTH-7	[1AB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7D, 0x0062 };
    uint32_t const ces[9] = { 0x1AB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_282)
{
    // 1DA7E 0021;	
    // (ù©æ) SIGNWRITING FINGER	[1AB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7E, 0x0021 };
    uint32_t const ces[9] = { 0x1AB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_283)
{
    // 1DA7E 003F;	
    // (ù©æ) SIGNWRITING FINGER	[1AB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7E, 0x003F };
    uint32_t const ces[9] = { 0x1AB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_284)
{
    // 1DA7E 0061;	
    // (ù©æ) SIGNWRITING FINGER	[1AB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7E, 0x0061 };
    uint32_t const ces[9] = { 0x1AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_285)
{
    // 1DA7E 0041;	
    // (ù©æ) SIGNWRITING FINGER	[1AB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7E, 0x0041 };
    uint32_t const ces[9] = { 0x1AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_286)
{
    // 1DA7E 0062;	
    // (ù©æ) SIGNWRITING FINGER	[1AB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7E, 0x0062 };
    uint32_t const ces[9] = { 0x1AB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_287)
{
    // 1DA7F 0021;	
    // (ù©ø) SIGNWRITING LOCATION-WALLPLANE SPACE	[1AB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7F, 0x0021 };
    uint32_t const ces[9] = { 0x1AB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_288)
{
    // 1DA7F 003F;	
    // (ù©ø) SIGNWRITING LOCATION-WALLPLANE SPACE	[1AB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7F, 0x003F };
    uint32_t const ces[9] = { 0x1AB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_289)
{
    // 1DA7F 0061;	
    // (ù©ø) SIGNWRITING LOCATION-WALLPLANE SPACE	[1AB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7F, 0x0061 };
    uint32_t const ces[9] = { 0x1AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_290)
{
    // 1DA7F 0041;	
    // (ù©ø) SIGNWRITING LOCATION-WALLPLANE SPACE	[1AB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA7F, 0x0041 };
    uint32_t const ces[9] = { 0x1AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_291)
{
    // 1DA7F 0062;	
    // (ù©ø) SIGNWRITING LOCATION-WALLPLANE SPACE	[1AB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA7F, 0x0062 };
    uint32_t const ces[9] = { 0x1AB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_292)
{
    // 1DA80 0021;	
    // (ù™Ä) SIGNWRITING LOCATION-FLOORPLANE SPACE	[1AB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA80, 0x0021 };
    uint32_t const ces[9] = { 0x1AB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_293)
{
    // 1DA80 003F;	
    // (ù™Ä) SIGNWRITING LOCATION-FLOORPLANE SPACE	[1AB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA80, 0x003F };
    uint32_t const ces[9] = { 0x1AB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_294)
{
    // 1DA80 0061;	
    // (ù™Ä) SIGNWRITING LOCATION-FLOORPLANE SPACE	[1AB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA80, 0x0061 };
    uint32_t const ces[9] = { 0x1AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_295)
{
    // 1DA80 0041;	
    // (ù™Ä) SIGNWRITING LOCATION-FLOORPLANE SPACE	[1AB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA80, 0x0041 };
    uint32_t const ces[9] = { 0x1AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_296)
{
    // 1DA80 0062;	
    // (ù™Ä) SIGNWRITING LOCATION-FLOORPLANE SPACE	[1AB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA80, 0x0062 };
    uint32_t const ces[9] = { 0x1AB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_297)
{
    // 1DA81 0021;	
    // (ù™Å) SIGNWRITING LOCATION HEIGHT	[1ABA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA81, 0x0021 };
    uint32_t const ces[9] = { 0x1ABA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_298)
{
    // 1DA81 003F;	
    // (ù™Å) SIGNWRITING LOCATION HEIGHT	[1ABA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA81, 0x003F };
    uint32_t const ces[9] = { 0x1ABA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_299)
{
    // 1DA81 0061;	
    // (ù™Å) SIGNWRITING LOCATION HEIGHT	[1ABA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA81, 0x0061 };
    uint32_t const ces[9] = { 0x1ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_300)
{
    // 1DA81 0041;	
    // (ù™Å) SIGNWRITING LOCATION HEIGHT	[1ABA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA81, 0x0041 };
    uint32_t const ces[9] = { 0x1ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_301)
{
    // 1DA81 0062;	
    // (ù™Å) SIGNWRITING LOCATION HEIGHT	[1ABA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA81, 0x0062 };
    uint32_t const ces[9] = { 0x1ABA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_302)
{
    // 1DA82 0021;	
    // (ù™Ç) SIGNWRITING LOCATION WIDTH	[1ABB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA82, 0x0021 };
    uint32_t const ces[9] = { 0x1ABB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_303)
{
    // 1DA82 003F;	
    // (ù™Ç) SIGNWRITING LOCATION WIDTH	[1ABB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA82, 0x003F };
    uint32_t const ces[9] = { 0x1ABB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_304)
{
    // 1DA82 0061;	
    // (ù™Ç) SIGNWRITING LOCATION WIDTH	[1ABB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA82, 0x0061 };
    uint32_t const ces[9] = { 0x1ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_305)
{
    // 1DA82 0041;	
    // (ù™Ç) SIGNWRITING LOCATION WIDTH	[1ABB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA82, 0x0041 };
    uint32_t const ces[9] = { 0x1ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_306)
{
    // 1DA82 0062;	
    // (ù™Ç) SIGNWRITING LOCATION WIDTH	[1ABB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA82, 0x0062 };
    uint32_t const ces[9] = { 0x1ABB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_307)
{
    // 1DA83 0021;	
    // (ù™É) SIGNWRITING LOCATION DEPTH	[1ABC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA83, 0x0021 };
    uint32_t const ces[9] = { 0x1ABC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_308)
{
    // 1DA83 003F;	
    // (ù™É) SIGNWRITING LOCATION DEPTH	[1ABC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA83, 0x003F };
    uint32_t const ces[9] = { 0x1ABC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_309)
{
    // 1DA83 0061;	
    // (ù™É) SIGNWRITING LOCATION DEPTH	[1ABC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA83, 0x0061 };
    uint32_t const ces[9] = { 0x1ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_310)
{
    // 1DA83 0041;	
    // (ù™É) SIGNWRITING LOCATION DEPTH	[1ABC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA83, 0x0041 };
    uint32_t const ces[9] = { 0x1ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_311)
{
    // 1DA83 0062;	
    // (ù™É) SIGNWRITING LOCATION DEPTH	[1ABC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA83, 0x0062 };
    uint32_t const ces[9] = { 0x1ABC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_312)
{
    // 1DA85 0021;	
    // (ù™Ö) SIGNWRITING LOCATION TORSO	[1ABD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA85, 0x0021 };
    uint32_t const ces[9] = { 0x1ABD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_313)
{
    // 1DA85 003F;	
    // (ù™Ö) SIGNWRITING LOCATION TORSO	[1ABD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA85, 0x003F };
    uint32_t const ces[9] = { 0x1ABD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_314)
{
    // 1DA85 0061;	
    // (ù™Ö) SIGNWRITING LOCATION TORSO	[1ABD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA85, 0x0061 };
    uint32_t const ces[9] = { 0x1ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_315)
{
    // 1DA85 0041;	
    // (ù™Ö) SIGNWRITING LOCATION TORSO	[1ABD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA85, 0x0041 };
    uint32_t const ces[9] = { 0x1ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_316)
{
    // 1DA85 0062;	
    // (ù™Ö) SIGNWRITING LOCATION TORSO	[1ABD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA85, 0x0062 };
    uint32_t const ces[9] = { 0x1ABD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_317)
{
    // 1DA86 0021;	
    // (ù™Ü) SIGNWRITING LOCATION LIMBS DIGITS	[1ABE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA86, 0x0021 };
    uint32_t const ces[9] = { 0x1ABE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_318)
{
    // 1DA86 003F;	
    // (ù™Ü) SIGNWRITING LOCATION LIMBS DIGITS	[1ABE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA86, 0x003F };
    uint32_t const ces[9] = { 0x1ABE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_319)
{
    // 1DA86 0061;	
    // (ù™Ü) SIGNWRITING LOCATION LIMBS DIGITS	[1ABE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA86, 0x0061 };
    uint32_t const ces[9] = { 0x1ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_320)
{
    // 1DA86 0041;	
    // (ù™Ü) SIGNWRITING LOCATION LIMBS DIGITS	[1ABE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA86, 0x0041 };
    uint32_t const ces[9] = { 0x1ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_321)
{
    // 1DA86 0062;	
    // (ù™Ü) SIGNWRITING LOCATION LIMBS DIGITS	[1ABE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA86, 0x0062 };
    uint32_t const ces[9] = { 0x1ABE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_322)
{
    // 2FF0 0021;	
    // (‚ø∞) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT	[1ABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF0, 0x0021 };
    uint32_t const ces[9] = { 0x1ABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_323)
{
    // 2FF0 003F;	
    // (‚ø∞) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT	[1ABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF0, 0x003F };
    uint32_t const ces[9] = { 0x1ABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_324)
{
    // 2FF0 0061;	
    // (‚ø∞) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT	[1ABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF0, 0x0061 };
    uint32_t const ces[9] = { 0x1ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_325)
{
    // 2FF0 0041;	
    // (‚ø∞) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT	[1ABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF0, 0x0041 };
    uint32_t const ces[9] = { 0x1ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_326)
{
    // 2FF0 0062;	
    // (‚ø∞) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT	[1ABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF0, 0x0062 };
    uint32_t const ces[9] = { 0x1ABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_327)
{
    // 2FF1 0021;	
    // (‚ø±) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW	[1AC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF1, 0x0021 };
    uint32_t const ces[9] = { 0x1AC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_328)
{
    // 2FF1 003F;	
    // (‚ø±) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW	[1AC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF1, 0x003F };
    uint32_t const ces[9] = { 0x1AC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_329)
{
    // 2FF1 0061;	
    // (‚ø±) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW	[1AC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF1, 0x0061 };
    uint32_t const ces[9] = { 0x1AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_330)
{
    // 2FF1 0041;	
    // (‚ø±) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW	[1AC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF1, 0x0041 };
    uint32_t const ces[9] = { 0x1AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_331)
{
    // 2FF1 0062;	
    // (‚ø±) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW	[1AC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF1, 0x0062 };
    uint32_t const ces[9] = { 0x1AC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_332)
{
    // 2FF2 0021;	
    // (‚ø≤) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT	[1AC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF2, 0x0021 };
    uint32_t const ces[9] = { 0x1AC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_333)
{
    // 2FF2 003F;	
    // (‚ø≤) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT	[1AC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF2, 0x003F };
    uint32_t const ces[9] = { 0x1AC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_334)
{
    // 2FF2 0061;	
    // (‚ø≤) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT	[1AC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF2, 0x0061 };
    uint32_t const ces[9] = { 0x1AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_335)
{
    // 2FF2 0041;	
    // (‚ø≤) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT	[1AC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF2, 0x0041 };
    uint32_t const ces[9] = { 0x1AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_336)
{
    // 2FF2 0062;	
    // (‚ø≤) IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT	[1AC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF2, 0x0062 };
    uint32_t const ces[9] = { 0x1AC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_337)
{
    // 2FF3 0021;	
    // (‚ø≥) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW	[1AC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF3, 0x0021 };
    uint32_t const ces[9] = { 0x1AC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_338)
{
    // 2FF3 003F;	
    // (‚ø≥) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW	[1AC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF3, 0x003F };
    uint32_t const ces[9] = { 0x1AC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_339)
{
    // 2FF3 0061;	
    // (‚ø≥) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW	[1AC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF3, 0x0061 };
    uint32_t const ces[9] = { 0x1AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_340)
{
    // 2FF3 0041;	
    // (‚ø≥) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW	[1AC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF3, 0x0041 };
    uint32_t const ces[9] = { 0x1AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_341)
{
    // 2FF3 0062;	
    // (‚ø≥) IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW	[1AC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF3, 0x0062 };
    uint32_t const ces[9] = { 0x1AC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_342)
{
    // 2FF4 0021;	
    // (‚ø¥) IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND	[1AC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF4, 0x0021 };
    uint32_t const ces[9] = { 0x1AC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_343)
{
    // 2FF4 003F;	
    // (‚ø¥) IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND	[1AC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF4, 0x003F };
    uint32_t const ces[9] = { 0x1AC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_344)
{
    // 2FF4 0061;	
    // (‚ø¥) IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND	[1AC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF4, 0x0061 };
    uint32_t const ces[9] = { 0x1AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_345)
{
    // 2FF4 0041;	
    // (‚ø¥) IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND	[1AC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF4, 0x0041 };
    uint32_t const ces[9] = { 0x1AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_346)
{
    // 2FF4 0062;	
    // (‚ø¥) IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND	[1AC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF4, 0x0062 };
    uint32_t const ces[9] = { 0x1AC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_347)
{
    // 2FF5 0021;	
    // (‚øµ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE	[1AC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF5, 0x0021 };
    uint32_t const ces[9] = { 0x1AC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_348)
{
    // 2FF5 003F;	
    // (‚øµ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE	[1AC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF5, 0x003F };
    uint32_t const ces[9] = { 0x1AC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_349)
{
    // 2FF5 0061;	
    // (‚øµ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE	[1AC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF5, 0x0061 };
    uint32_t const ces[9] = { 0x1AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_350)
{
    // 2FF5 0041;	
    // (‚øµ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE	[1AC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF5, 0x0041 };
    uint32_t const ces[9] = { 0x1AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_351)
{
    // 2FF5 0062;	
    // (‚øµ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE	[1AC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF5, 0x0062 };
    uint32_t const ces[9] = { 0x1AC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_352)
{
    // 2FF6 0021;	
    // (‚ø∂) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW	[1AC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF6, 0x0021 };
    uint32_t const ces[9] = { 0x1AC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_353)
{
    // 2FF6 003F;	
    // (‚ø∂) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW	[1AC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF6, 0x003F };
    uint32_t const ces[9] = { 0x1AC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_354)
{
    // 2FF6 0061;	
    // (‚ø∂) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW	[1AC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF6, 0x0061 };
    uint32_t const ces[9] = { 0x1AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_355)
{
    // 2FF6 0041;	
    // (‚ø∂) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW	[1AC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF6, 0x0041 };
    uint32_t const ces[9] = { 0x1AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_356)
{
    // 2FF6 0062;	
    // (‚ø∂) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW	[1AC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF6, 0x0062 };
    uint32_t const ces[9] = { 0x1AC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_357)
{
    // 2FF7 0021;	
    // (‚ø∑) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT	[1AC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF7, 0x0021 };
    uint32_t const ces[9] = { 0x1AC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_358)
{
    // 2FF7 003F;	
    // (‚ø∑) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT	[1AC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF7, 0x003F };
    uint32_t const ces[9] = { 0x1AC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_359)
{
    // 2FF7 0061;	
    // (‚ø∑) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT	[1AC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF7, 0x0061 };
    uint32_t const ces[9] = { 0x1AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_360)
{
    // 2FF7 0041;	
    // (‚ø∑) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT	[1AC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF7, 0x0041 };
    uint32_t const ces[9] = { 0x1AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_361)
{
    // 2FF7 0062;	
    // (‚ø∑) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT	[1AC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF7, 0x0062 };
    uint32_t const ces[9] = { 0x1AC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_362)
{
    // 2FF8 0021;	
    // (‚ø∏) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT	[1AC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF8, 0x0021 };
    uint32_t const ces[9] = { 0x1AC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_363)
{
    // 2FF8 003F;	
    // (‚ø∏) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT	[1AC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF8, 0x003F };
    uint32_t const ces[9] = { 0x1AC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_364)
{
    // 2FF8 0061;	
    // (‚ø∏) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT	[1AC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF8, 0x0061 };
    uint32_t const ces[9] = { 0x1AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_365)
{
    // 2FF8 0041;	
    // (‚ø∏) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT	[1AC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF8, 0x0041 };
    uint32_t const ces[9] = { 0x1AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_366)
{
    // 2FF8 0062;	
    // (‚ø∏) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT	[1AC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF8, 0x0062 };
    uint32_t const ces[9] = { 0x1AC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_367)
{
    // 2FF9 0021;	
    // (‚øπ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT	[1AC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF9, 0x0021 };
    uint32_t const ces[9] = { 0x1AC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_368)
{
    // 2FF9 003F;	
    // (‚øπ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT	[1AC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF9, 0x003F };
    uint32_t const ces[9] = { 0x1AC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_369)
{
    // 2FF9 0061;	
    // (‚øπ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT	[1AC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF9, 0x0061 };
    uint32_t const ces[9] = { 0x1AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_370)
{
    // 2FF9 0041;	
    // (‚øπ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT	[1AC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FF9, 0x0041 };
    uint32_t const ces[9] = { 0x1AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_371)
{
    // 2FF9 0062;	
    // (‚øπ) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT	[1AC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FF9, 0x0062 };
    uint32_t const ces[9] = { 0x1AC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_372)
{
    // 2FFA 0021;	
    // (‚ø∫) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT	[1AC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFA, 0x0021 };
    uint32_t const ces[9] = { 0x1AC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_373)
{
    // 2FFA 003F;	
    // (‚ø∫) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT	[1AC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFA, 0x003F };
    uint32_t const ces[9] = { 0x1AC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_374)
{
    // 2FFA 0061;	
    // (‚ø∫) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT	[1AC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFA, 0x0061 };
    uint32_t const ces[9] = { 0x1AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_375)
{
    // 2FFA 0041;	
    // (‚ø∫) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT	[1AC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FFA, 0x0041 };
    uint32_t const ces[9] = { 0x1AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_376)
{
    // 2FFA 0062;	
    // (‚ø∫) IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT	[1AC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFA, 0x0062 };
    uint32_t const ces[9] = { 0x1AC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_377)
{
    // 2FFB 0021;	
    // (‚øª) IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID	[1ACA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFB, 0x0021 };
    uint32_t const ces[9] = { 0x1ACA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_378)
{
    // 2FFB 003F;	
    // (‚øª) IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID	[1ACA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFB, 0x003F };
    uint32_t const ces[9] = { 0x1ACA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_379)
{
    // 2FFB 0061;	
    // (‚øª) IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID	[1ACA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFB, 0x0061 };
    uint32_t const ces[9] = { 0x1ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_380)
{
    // 2FFB 0041;	
    // (‚øª) IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID	[1ACA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FFB, 0x0041 };
    uint32_t const ces[9] = { 0x1ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_381)
{
    // 2FFB 0062;	
    // (‚øª) IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID	[1ACA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFB, 0x0062 };
    uint32_t const ces[9] = { 0x1ACA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_382)
{
    // 31C0 0021;	
    // („áÄ) CJK STROKE T	[1ACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C0, 0x0021 };
    uint32_t const ces[9] = { 0x1ACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_383)
{
    // 31C0 003F;	
    // („áÄ) CJK STROKE T	[1ACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C0, 0x003F };
    uint32_t const ces[9] = { 0x1ACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_384)
{
    // 31C0 0061;	
    // („áÄ) CJK STROKE T	[1ACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C0, 0x0061 };
    uint32_t const ces[9] = { 0x1ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_385)
{
    // 31C0 0041;	
    // („áÄ) CJK STROKE T	[1ACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C0, 0x0041 };
    uint32_t const ces[9] = { 0x1ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_386)
{
    // 31C0 0062;	
    // („áÄ) CJK STROKE T	[1ACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C0, 0x0062 };
    uint32_t const ces[9] = { 0x1ACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_387)
{
    // 31C1 0021;	
    // („áÅ) CJK STROKE WG	[1ACC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C1, 0x0021 };
    uint32_t const ces[9] = { 0x1ACC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_388)
{
    // 31C1 003F;	
    // („áÅ) CJK STROKE WG	[1ACC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C1, 0x003F };
    uint32_t const ces[9] = { 0x1ACC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_389)
{
    // 31C1 0061;	
    // („áÅ) CJK STROKE WG	[1ACC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C1, 0x0061 };
    uint32_t const ces[9] = { 0x1ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_390)
{
    // 31C1 0041;	
    // („áÅ) CJK STROKE WG	[1ACC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C1, 0x0041 };
    uint32_t const ces[9] = { 0x1ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_391)
{
    // 31C1 0062;	
    // („áÅ) CJK STROKE WG	[1ACC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C1, 0x0062 };
    uint32_t const ces[9] = { 0x1ACC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_392)
{
    // 31C2 0021;	
    // („áÇ) CJK STROKE XG	[1ACD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C2, 0x0021 };
    uint32_t const ces[9] = { 0x1ACD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_393)
{
    // 31C2 003F;	
    // („áÇ) CJK STROKE XG	[1ACD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C2, 0x003F };
    uint32_t const ces[9] = { 0x1ACD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_394)
{
    // 31C2 0061;	
    // („áÇ) CJK STROKE XG	[1ACD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C2, 0x0061 };
    uint32_t const ces[9] = { 0x1ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_395)
{
    // 31C2 0041;	
    // („áÇ) CJK STROKE XG	[1ACD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C2, 0x0041 };
    uint32_t const ces[9] = { 0x1ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_396)
{
    // 31C2 0062;	
    // („áÇ) CJK STROKE XG	[1ACD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C2, 0x0062 };
    uint32_t const ces[9] = { 0x1ACD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_397)
{
    // 31C3 0021;	
    // („áÉ) CJK STROKE BXG	[1ACE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C3, 0x0021 };
    uint32_t const ces[9] = { 0x1ACE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_398)
{
    // 31C3 003F;	
    // („áÉ) CJK STROKE BXG	[1ACE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C3, 0x003F };
    uint32_t const ces[9] = { 0x1ACE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_399)
{
    // 31C3 0061;	
    // („áÉ) CJK STROKE BXG	[1ACE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C3, 0x0061 };
    uint32_t const ces[9] = { 0x1ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_400)
{
    // 31C3 0041;	
    // („áÉ) CJK STROKE BXG	[1ACE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C3, 0x0041 };
    uint32_t const ces[9] = { 0x1ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_401)
{
    // 31C3 0062;	
    // („áÉ) CJK STROKE BXG	[1ACE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C3, 0x0062 };
    uint32_t const ces[9] = { 0x1ACE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_402)
{
    // 31C4 0021;	
    // („áÑ) CJK STROKE SW	[1ACF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C4, 0x0021 };
    uint32_t const ces[9] = { 0x1ACF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_403)
{
    // 31C4 003F;	
    // („áÑ) CJK STROKE SW	[1ACF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C4, 0x003F };
    uint32_t const ces[9] = { 0x1ACF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_404)
{
    // 31C4 0061;	
    // („áÑ) CJK STROKE SW	[1ACF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C4, 0x0061 };
    uint32_t const ces[9] = { 0x1ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_405)
{
    // 31C4 0041;	
    // („áÑ) CJK STROKE SW	[1ACF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C4, 0x0041 };
    uint32_t const ces[9] = { 0x1ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_406)
{
    // 31C4 0062;	
    // („áÑ) CJK STROKE SW	[1ACF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C4, 0x0062 };
    uint32_t const ces[9] = { 0x1ACF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_407)
{
    // 31C5 0021;	
    // („áÖ) CJK STROKE HZZ	[1AD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C5, 0x0021 };
    uint32_t const ces[9] = { 0x1AD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_408)
{
    // 31C5 003F;	
    // („áÖ) CJK STROKE HZZ	[1AD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C5, 0x003F };
    uint32_t const ces[9] = { 0x1AD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_409)
{
    // 31C5 0061;	
    // („áÖ) CJK STROKE HZZ	[1AD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C5, 0x0061 };
    uint32_t const ces[9] = { 0x1AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_410)
{
    // 31C5 0041;	
    // („áÖ) CJK STROKE HZZ	[1AD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C5, 0x0041 };
    uint32_t const ces[9] = { 0x1AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_411)
{
    // 31C5 0062;	
    // („áÖ) CJK STROKE HZZ	[1AD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C5, 0x0062 };
    uint32_t const ces[9] = { 0x1AD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_412)
{
    // 31C6 0021;	
    // („áÜ) CJK STROKE HZG	[1AD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C6, 0x0021 };
    uint32_t const ces[9] = { 0x1AD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_413)
{
    // 31C6 003F;	
    // („áÜ) CJK STROKE HZG	[1AD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C6, 0x003F };
    uint32_t const ces[9] = { 0x1AD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_414)
{
    // 31C6 0061;	
    // („áÜ) CJK STROKE HZG	[1AD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C6, 0x0061 };
    uint32_t const ces[9] = { 0x1AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_415)
{
    // 31C6 0041;	
    // („áÜ) CJK STROKE HZG	[1AD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C6, 0x0041 };
    uint32_t const ces[9] = { 0x1AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_416)
{
    // 31C6 0062;	
    // („áÜ) CJK STROKE HZG	[1AD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C6, 0x0062 };
    uint32_t const ces[9] = { 0x1AD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_417)
{
    // 31C7 0021;	
    // („áá) CJK STROKE HP	[1AD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C7, 0x0021 };
    uint32_t const ces[9] = { 0x1AD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_418)
{
    // 31C7 003F;	
    // („áá) CJK STROKE HP	[1AD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C7, 0x003F };
    uint32_t const ces[9] = { 0x1AD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_419)
{
    // 31C7 0061;	
    // („áá) CJK STROKE HP	[1AD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C7, 0x0061 };
    uint32_t const ces[9] = { 0x1AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_420)
{
    // 31C7 0041;	
    // („áá) CJK STROKE HP	[1AD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C7, 0x0041 };
    uint32_t const ces[9] = { 0x1AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_421)
{
    // 31C7 0062;	
    // („áá) CJK STROKE HP	[1AD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C7, 0x0062 };
    uint32_t const ces[9] = { 0x1AD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_422)
{
    // 31C8 0021;	
    // („áà) CJK STROKE HZWG	[1AD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C8, 0x0021 };
    uint32_t const ces[9] = { 0x1AD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_423)
{
    // 31C8 003F;	
    // („áà) CJK STROKE HZWG	[1AD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C8, 0x003F };
    uint32_t const ces[9] = { 0x1AD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_424)
{
    // 31C8 0061;	
    // („áà) CJK STROKE HZWG	[1AD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C8, 0x0061 };
    uint32_t const ces[9] = { 0x1AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_425)
{
    // 31C8 0041;	
    // („áà) CJK STROKE HZWG	[1AD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C8, 0x0041 };
    uint32_t const ces[9] = { 0x1AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_426)
{
    // 31C8 0062;	
    // („áà) CJK STROKE HZWG	[1AD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C8, 0x0062 };
    uint32_t const ces[9] = { 0x1AD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_427)
{
    // 31C9 0021;	
    // („áâ) CJK STROKE SZWG	[1AD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C9, 0x0021 };
    uint32_t const ces[9] = { 0x1AD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_428)
{
    // 31C9 003F;	
    // („áâ) CJK STROKE SZWG	[1AD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C9, 0x003F };
    uint32_t const ces[9] = { 0x1AD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_429)
{
    // 31C9 0061;	
    // („áâ) CJK STROKE SZWG	[1AD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C9, 0x0061 };
    uint32_t const ces[9] = { 0x1AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_430)
{
    // 31C9 0041;	
    // („áâ) CJK STROKE SZWG	[1AD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31C9, 0x0041 };
    uint32_t const ces[9] = { 0x1AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_431)
{
    // 31C9 0062;	
    // („áâ) CJK STROKE SZWG	[1AD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31C9, 0x0062 };
    uint32_t const ces[9] = { 0x1AD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_432)
{
    // 31CA 0021;	
    // („áä) CJK STROKE HZT	[1AD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CA, 0x0021 };
    uint32_t const ces[9] = { 0x1AD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_433)
{
    // 31CA 003F;	
    // („áä) CJK STROKE HZT	[1AD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CA, 0x003F };
    uint32_t const ces[9] = { 0x1AD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_434)
{
    // 31CA 0061;	
    // („áä) CJK STROKE HZT	[1AD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CA, 0x0061 };
    uint32_t const ces[9] = { 0x1AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_435)
{
    // 31CA 0041;	
    // („áä) CJK STROKE HZT	[1AD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CA, 0x0041 };
    uint32_t const ces[9] = { 0x1AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_436)
{
    // 31CA 0062;	
    // („áä) CJK STROKE HZT	[1AD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CA, 0x0062 };
    uint32_t const ces[9] = { 0x1AD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_437)
{
    // 31CB 0021;	
    // („áã) CJK STROKE HZZP	[1AD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CB, 0x0021 };
    uint32_t const ces[9] = { 0x1AD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_438)
{
    // 31CB 003F;	
    // („áã) CJK STROKE HZZP	[1AD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CB, 0x003F };
    uint32_t const ces[9] = { 0x1AD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_439)
{
    // 31CB 0061;	
    // („áã) CJK STROKE HZZP	[1AD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CB, 0x0061 };
    uint32_t const ces[9] = { 0x1AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_440)
{
    // 31CB 0041;	
    // („áã) CJK STROKE HZZP	[1AD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CB, 0x0041 };
    uint32_t const ces[9] = { 0x1AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_441)
{
    // 31CB 0062;	
    // („áã) CJK STROKE HZZP	[1AD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CB, 0x0062 };
    uint32_t const ces[9] = { 0x1AD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_442)
{
    // 31CC 0021;	
    // („áå) CJK STROKE HPWG	[1AD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CC, 0x0021 };
    uint32_t const ces[9] = { 0x1AD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_443)
{
    // 31CC 003F;	
    // („áå) CJK STROKE HPWG	[1AD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CC, 0x003F };
    uint32_t const ces[9] = { 0x1AD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_444)
{
    // 31CC 0061;	
    // („áå) CJK STROKE HPWG	[1AD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CC, 0x0061 };
    uint32_t const ces[9] = { 0x1AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_445)
{
    // 31CC 0041;	
    // („áå) CJK STROKE HPWG	[1AD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CC, 0x0041 };
    uint32_t const ces[9] = { 0x1AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_446)
{
    // 31CC 0062;	
    // („áå) CJK STROKE HPWG	[1AD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CC, 0x0062 };
    uint32_t const ces[9] = { 0x1AD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_447)
{
    // 31CD 0021;	
    // („áç) CJK STROKE HZW	[1AD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CD, 0x0021 };
    uint32_t const ces[9] = { 0x1AD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_448)
{
    // 31CD 003F;	
    // („áç) CJK STROKE HZW	[1AD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CD, 0x003F };
    uint32_t const ces[9] = { 0x1AD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_449)
{
    // 31CD 0061;	
    // („áç) CJK STROKE HZW	[1AD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CD, 0x0061 };
    uint32_t const ces[9] = { 0x1AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_450)
{
    // 31CD 0041;	
    // („áç) CJK STROKE HZW	[1AD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CD, 0x0041 };
    uint32_t const ces[9] = { 0x1AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_451)
{
    // 31CD 0062;	
    // („áç) CJK STROKE HZW	[1AD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CD, 0x0062 };
    uint32_t const ces[9] = { 0x1AD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_452)
{
    // 31CE 0021;	
    // („áé) CJK STROKE HZZZ	[1AD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CE, 0x0021 };
    uint32_t const ces[9] = { 0x1AD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_453)
{
    // 31CE 003F;	
    // („áé) CJK STROKE HZZZ	[1AD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CE, 0x003F };
    uint32_t const ces[9] = { 0x1AD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_454)
{
    // 31CE 0061;	
    // („áé) CJK STROKE HZZZ	[1AD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CE, 0x0061 };
    uint32_t const ces[9] = { 0x1AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_455)
{
    // 31CE 0041;	
    // („áé) CJK STROKE HZZZ	[1AD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CE, 0x0041 };
    uint32_t const ces[9] = { 0x1AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_456)
{
    // 31CE 0062;	
    // („áé) CJK STROKE HZZZ	[1AD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CE, 0x0062 };
    uint32_t const ces[9] = { 0x1AD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_457)
{
    // 31CF 0021;	
    // („áè) CJK STROKE N	[1ADA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CF, 0x0021 };
    uint32_t const ces[9] = { 0x1ADA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_458)
{
    // 31CF 003F;	
    // („áè) CJK STROKE N	[1ADA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CF, 0x003F };
    uint32_t const ces[9] = { 0x1ADA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_459)
{
    // 31CF 0061;	
    // („áè) CJK STROKE N	[1ADA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CF, 0x0061 };
    uint32_t const ces[9] = { 0x1ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_460)
{
    // 31CF 0041;	
    // („áè) CJK STROKE N	[1ADA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31CF, 0x0041 };
    uint32_t const ces[9] = { 0x1ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_461)
{
    // 31CF 0062;	
    // („áè) CJK STROKE N	[1ADA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31CF, 0x0062 };
    uint32_t const ces[9] = { 0x1ADA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_462)
{
    // 31D0 0021;	
    // („áê) CJK STROKE H	[1ADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D0, 0x0021 };
    uint32_t const ces[9] = { 0x1ADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_463)
{
    // 31D0 003F;	
    // („áê) CJK STROKE H	[1ADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D0, 0x003F };
    uint32_t const ces[9] = { 0x1ADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_464)
{
    // 31D0 0061;	
    // („áê) CJK STROKE H	[1ADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D0, 0x0061 };
    uint32_t const ces[9] = { 0x1ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_465)
{
    // 31D0 0041;	
    // („áê) CJK STROKE H	[1ADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D0, 0x0041 };
    uint32_t const ces[9] = { 0x1ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_466)
{
    // 31D0 0062;	
    // („áê) CJK STROKE H	[1ADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D0, 0x0062 };
    uint32_t const ces[9] = { 0x1ADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_467)
{
    // 31D1 0021;	
    // („áë) CJK STROKE S	[1ADC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D1, 0x0021 };
    uint32_t const ces[9] = { 0x1ADC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_468)
{
    // 31D1 003F;	
    // („áë) CJK STROKE S	[1ADC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D1, 0x003F };
    uint32_t const ces[9] = { 0x1ADC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_469)
{
    // 31D1 0061;	
    // („áë) CJK STROKE S	[1ADC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D1, 0x0061 };
    uint32_t const ces[9] = { 0x1ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_470)
{
    // 31D1 0041;	
    // („áë) CJK STROKE S	[1ADC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D1, 0x0041 };
    uint32_t const ces[9] = { 0x1ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_471)
{
    // 31D1 0062;	
    // („áë) CJK STROKE S	[1ADC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D1, 0x0062 };
    uint32_t const ces[9] = { 0x1ADC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_472)
{
    // 31D2 0021;	
    // („áí) CJK STROKE P	[1ADD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D2, 0x0021 };
    uint32_t const ces[9] = { 0x1ADD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_473)
{
    // 31D2 003F;	
    // („áí) CJK STROKE P	[1ADD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D2, 0x003F };
    uint32_t const ces[9] = { 0x1ADD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_474)
{
    // 31D2 0061;	
    // („áí) CJK STROKE P	[1ADD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D2, 0x0061 };
    uint32_t const ces[9] = { 0x1ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_475)
{
    // 31D2 0041;	
    // („áí) CJK STROKE P	[1ADD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D2, 0x0041 };
    uint32_t const ces[9] = { 0x1ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_476)
{
    // 31D2 0062;	
    // („áí) CJK STROKE P	[1ADD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D2, 0x0062 };
    uint32_t const ces[9] = { 0x1ADD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_477)
{
    // 31D3 0021;	
    // („áì) CJK STROKE SP	[1ADE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D3, 0x0021 };
    uint32_t const ces[9] = { 0x1ADE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_478)
{
    // 31D3 003F;	
    // („áì) CJK STROKE SP	[1ADE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D3, 0x003F };
    uint32_t const ces[9] = { 0x1ADE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_479)
{
    // 31D3 0061;	
    // („áì) CJK STROKE SP	[1ADE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D3, 0x0061 };
    uint32_t const ces[9] = { 0x1ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_480)
{
    // 31D3 0041;	
    // („áì) CJK STROKE SP	[1ADE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D3, 0x0041 };
    uint32_t const ces[9] = { 0x1ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_481)
{
    // 31D3 0062;	
    // („áì) CJK STROKE SP	[1ADE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D3, 0x0062 };
    uint32_t const ces[9] = { 0x1ADE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_482)
{
    // 31D4 0021;	
    // („áî) CJK STROKE D	[1ADF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D4, 0x0021 };
    uint32_t const ces[9] = { 0x1ADF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_483)
{
    // 31D4 003F;	
    // („áî) CJK STROKE D	[1ADF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D4, 0x003F };
    uint32_t const ces[9] = { 0x1ADF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_484)
{
    // 31D4 0061;	
    // („áî) CJK STROKE D	[1ADF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D4, 0x0061 };
    uint32_t const ces[9] = { 0x1ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_485)
{
    // 31D4 0041;	
    // („áî) CJK STROKE D	[1ADF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D4, 0x0041 };
    uint32_t const ces[9] = { 0x1ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_486)
{
    // 31D4 0062;	
    // („áî) CJK STROKE D	[1ADF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D4, 0x0062 };
    uint32_t const ces[9] = { 0x1ADF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_487)
{
    // 31D5 0021;	
    // („áï) CJK STROKE HZ	[1AE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D5, 0x0021 };
    uint32_t const ces[9] = { 0x1AE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_488)
{
    // 31D5 003F;	
    // („áï) CJK STROKE HZ	[1AE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D5, 0x003F };
    uint32_t const ces[9] = { 0x1AE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_489)
{
    // 31D5 0061;	
    // („áï) CJK STROKE HZ	[1AE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D5, 0x0061 };
    uint32_t const ces[9] = { 0x1AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_490)
{
    // 31D5 0041;	
    // („áï) CJK STROKE HZ	[1AE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D5, 0x0041 };
    uint32_t const ces[9] = { 0x1AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_491)
{
    // 31D5 0062;	
    // („áï) CJK STROKE HZ	[1AE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D5, 0x0062 };
    uint32_t const ces[9] = { 0x1AE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_492)
{
    // 31D6 0021;	
    // („áñ) CJK STROKE HG	[1AE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D6, 0x0021 };
    uint32_t const ces[9] = { 0x1AE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_493)
{
    // 31D6 003F;	
    // („áñ) CJK STROKE HG	[1AE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D6, 0x003F };
    uint32_t const ces[9] = { 0x1AE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_494)
{
    // 31D6 0061;	
    // („áñ) CJK STROKE HG	[1AE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D6, 0x0061 };
    uint32_t const ces[9] = { 0x1AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_495)
{
    // 31D6 0041;	
    // („áñ) CJK STROKE HG	[1AE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D6, 0x0041 };
    uint32_t const ces[9] = { 0x1AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_496)
{
    // 31D6 0062;	
    // („áñ) CJK STROKE HG	[1AE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D6, 0x0062 };
    uint32_t const ces[9] = { 0x1AE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_497)
{
    // 31D7 0021;	
    // („áó) CJK STROKE SZ	[1AE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D7, 0x0021 };
    uint32_t const ces[9] = { 0x1AE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_498)
{
    // 31D7 003F;	
    // („áó) CJK STROKE SZ	[1AE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D7, 0x003F };
    uint32_t const ces[9] = { 0x1AE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_075_499)
{
    // 31D7 0061;	
    // („áó) CJK STROKE SZ	[1AE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D7, 0x0061 };
    uint32_t const ces[9] = { 0x1AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

