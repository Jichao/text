// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_034_000)
{
    // 275A 0041;	
    // (❚) HEAVY VERTICAL BAR	[0A92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275A, 0x0041 };
    uint32_t const ces[9] = { 0x0A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_001)
{
    // 275A 0062;	
    // (❚) HEAVY VERTICAL BAR	[0A92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275A, 0x0062 };
    uint32_t const ces[9] = { 0x0A92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_002)
{
    // 275B 0021;	
    // (❛) HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275B, 0x0021 };
    uint32_t const ces[9] = { 0x0A93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_003)
{
    // 275B 003F;	
    // (❛) HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275B, 0x003F };
    uint32_t const ces[9] = { 0x0A93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_004)
{
    // 275B 0061;	
    // (❛) HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275B, 0x0061 };
    uint32_t const ces[9] = { 0x0A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_005)
{
    // 275B 0041;	
    // (❛) HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275B, 0x0041 };
    uint32_t const ces[9] = { 0x0A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_006)
{
    // 275B 0062;	
    // (❛) HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275B, 0x0062 };
    uint32_t const ces[9] = { 0x0A93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_007)
{
    // 275C 0021;	
    // (❜) HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT	[0A94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275C, 0x0021 };
    uint32_t const ces[9] = { 0x0A94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_008)
{
    // 275C 003F;	
    // (❜) HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT	[0A94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275C, 0x003F };
    uint32_t const ces[9] = { 0x0A94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_009)
{
    // 275C 0061;	
    // (❜) HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT	[0A94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275C, 0x0061 };
    uint32_t const ces[9] = { 0x0A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_010)
{
    // 275C 0041;	
    // (❜) HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT	[0A94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275C, 0x0041 };
    uint32_t const ces[9] = { 0x0A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_011)
{
    // 275C 0062;	
    // (❜) HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT	[0A94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275C, 0x0062 };
    uint32_t const ces[9] = { 0x0A94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_012)
{
    // 275D 0021;	
    // (❝) HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275D, 0x0021 };
    uint32_t const ces[9] = { 0x0A95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_013)
{
    // 275D 003F;	
    // (❝) HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275D, 0x003F };
    uint32_t const ces[9] = { 0x0A95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_014)
{
    // 275D 0061;	
    // (❝) HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275D, 0x0061 };
    uint32_t const ces[9] = { 0x0A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_015)
{
    // 275D 0041;	
    // (❝) HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275D, 0x0041 };
    uint32_t const ces[9] = { 0x0A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_016)
{
    // 275D 0062;	
    // (❝) HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[0A95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275D, 0x0062 };
    uint32_t const ces[9] = { 0x0A95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_017)
{
    // 275E 0021;	
    // (❞) HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275E, 0x0021 };
    uint32_t const ces[9] = { 0x0A96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_018)
{
    // 275E 003F;	
    // (❞) HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275E, 0x003F };
    uint32_t const ces[9] = { 0x0A96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_019)
{
    // 275E 0061;	
    // (❞) HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275E, 0x0061 };
    uint32_t const ces[9] = { 0x0A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_020)
{
    // 275E 0041;	
    // (❞) HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275E, 0x0041 };
    uint32_t const ces[9] = { 0x0A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_021)
{
    // 275E 0062;	
    // (❞) HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275E, 0x0062 };
    uint32_t const ces[9] = { 0x0A96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_022)
{
    // 275F 0021;	
    // (❟) HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT	[0A97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275F, 0x0021 };
    uint32_t const ces[9] = { 0x0A97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_023)
{
    // 275F 003F;	
    // (❟) HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT	[0A97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275F, 0x003F };
    uint32_t const ces[9] = { 0x0A97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_024)
{
    // 275F 0061;	
    // (❟) HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT	[0A97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275F, 0x0061 };
    uint32_t const ces[9] = { 0x0A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_025)
{
    // 275F 0041;	
    // (❟) HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT	[0A97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x275F, 0x0041 };
    uint32_t const ces[9] = { 0x0A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_026)
{
    // 275F 0062;	
    // (❟) HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT	[0A97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275F, 0x0062 };
    uint32_t const ces[9] = { 0x0A97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_027)
{
    // 2760 0021;	
    // (❠) HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2760, 0x0021 };
    uint32_t const ces[9] = { 0x0A98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_028)
{
    // 2760 003F;	
    // (❠) HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2760, 0x003F };
    uint32_t const ces[9] = { 0x0A98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_029)
{
    // 2760 0061;	
    // (❠) HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2760, 0x0061 };
    uint32_t const ces[9] = { 0x0A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_030)
{
    // 2760 0041;	
    // (❠) HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2760, 0x0041 };
    uint32_t const ces[9] = { 0x0A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_031)
{
    // 2760 0062;	
    // (❠) HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[0A98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2760, 0x0062 };
    uint32_t const ces[9] = { 0x0A98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_032)
{
    // 2761 0021;	
    // (❡) CURVED STEM PARAGRAPH SIGN ORNAMENT	[0A99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2761, 0x0021 };
    uint32_t const ces[9] = { 0x0A99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_033)
{
    // 2761 003F;	
    // (❡) CURVED STEM PARAGRAPH SIGN ORNAMENT	[0A99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2761, 0x003F };
    uint32_t const ces[9] = { 0x0A99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_034)
{
    // 2761 0061;	
    // (❡) CURVED STEM PARAGRAPH SIGN ORNAMENT	[0A99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2761, 0x0061 };
    uint32_t const ces[9] = { 0x0A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_035)
{
    // 2761 0041;	
    // (❡) CURVED STEM PARAGRAPH SIGN ORNAMENT	[0A99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2761, 0x0041 };
    uint32_t const ces[9] = { 0x0A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_036)
{
    // 2761 0062;	
    // (❡) CURVED STEM PARAGRAPH SIGN ORNAMENT	[0A99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2761, 0x0062 };
    uint32_t const ces[9] = { 0x0A99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_037)
{
    // 2762 0021;	
    // (❢) HEAVY EXCLAMATION MARK ORNAMENT	[0A9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2762, 0x0021 };
    uint32_t const ces[9] = { 0x0A9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_038)
{
    // 2762 003F;	
    // (❢) HEAVY EXCLAMATION MARK ORNAMENT	[0A9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2762, 0x003F };
    uint32_t const ces[9] = { 0x0A9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_039)
{
    // 2762 0061;	
    // (❢) HEAVY EXCLAMATION MARK ORNAMENT	[0A9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2762, 0x0061 };
    uint32_t const ces[9] = { 0x0A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_040)
{
    // 2762 0041;	
    // (❢) HEAVY EXCLAMATION MARK ORNAMENT	[0A9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2762, 0x0041 };
    uint32_t const ces[9] = { 0x0A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_041)
{
    // 2762 0062;	
    // (❢) HEAVY EXCLAMATION MARK ORNAMENT	[0A9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2762, 0x0062 };
    uint32_t const ces[9] = { 0x0A9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_042)
{
    // 2763 0021;	
    // (❣) HEAVY HEART EXCLAMATION MARK ORNAMENT	[0A9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2763, 0x0021 };
    uint32_t const ces[9] = { 0x0A9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_043)
{
    // 2763 003F;	
    // (❣) HEAVY HEART EXCLAMATION MARK ORNAMENT	[0A9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2763, 0x003F };
    uint32_t const ces[9] = { 0x0A9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_044)
{
    // 2763 0061;	
    // (❣) HEAVY HEART EXCLAMATION MARK ORNAMENT	[0A9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2763, 0x0061 };
    uint32_t const ces[9] = { 0x0A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_045)
{
    // 2763 0041;	
    // (❣) HEAVY HEART EXCLAMATION MARK ORNAMENT	[0A9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2763, 0x0041 };
    uint32_t const ces[9] = { 0x0A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_046)
{
    // 2763 0062;	
    // (❣) HEAVY HEART EXCLAMATION MARK ORNAMENT	[0A9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2763, 0x0062 };
    uint32_t const ces[9] = { 0x0A9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_047)
{
    // 2764 0021;	
    // (❤) HEAVY BLACK HEART	[0A9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2764, 0x0021 };
    uint32_t const ces[9] = { 0x0A9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_048)
{
    // 2764 003F;	
    // (❤) HEAVY BLACK HEART	[0A9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2764, 0x003F };
    uint32_t const ces[9] = { 0x0A9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_049)
{
    // 2764 0061;	
    // (❤) HEAVY BLACK HEART	[0A9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2764, 0x0061 };
    uint32_t const ces[9] = { 0x0A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_050)
{
    // 2764 0041;	
    // (❤) HEAVY BLACK HEART	[0A9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2764, 0x0041 };
    uint32_t const ces[9] = { 0x0A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_051)
{
    // 2764 0062;	
    // (❤) HEAVY BLACK HEART	[0A9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2764, 0x0062 };
    uint32_t const ces[9] = { 0x0A9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_052)
{
    // 2765 0021;	
    // (❥) ROTATED HEAVY BLACK HEART BULLET	[0A9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2765, 0x0021 };
    uint32_t const ces[9] = { 0x0A9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_053)
{
    // 2765 003F;	
    // (❥) ROTATED HEAVY BLACK HEART BULLET	[0A9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2765, 0x003F };
    uint32_t const ces[9] = { 0x0A9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_054)
{
    // 2765 0061;	
    // (❥) ROTATED HEAVY BLACK HEART BULLET	[0A9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2765, 0x0061 };
    uint32_t const ces[9] = { 0x0A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_055)
{
    // 2765 0041;	
    // (❥) ROTATED HEAVY BLACK HEART BULLET	[0A9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2765, 0x0041 };
    uint32_t const ces[9] = { 0x0A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_056)
{
    // 2765 0062;	
    // (❥) ROTATED HEAVY BLACK HEART BULLET	[0A9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2765, 0x0062 };
    uint32_t const ces[9] = { 0x0A9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_057)
{
    // 2766 0021;	
    // (❦) FLORAL HEART	[0A9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2766, 0x0021 };
    uint32_t const ces[9] = { 0x0A9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_058)
{
    // 2766 003F;	
    // (❦) FLORAL HEART	[0A9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2766, 0x003F };
    uint32_t const ces[9] = { 0x0A9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_059)
{
    // 2766 0061;	
    // (❦) FLORAL HEART	[0A9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2766, 0x0061 };
    uint32_t const ces[9] = { 0x0A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_060)
{
    // 2766 0041;	
    // (❦) FLORAL HEART	[0A9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2766, 0x0041 };
    uint32_t const ces[9] = { 0x0A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_061)
{
    // 2766 0062;	
    // (❦) FLORAL HEART	[0A9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2766, 0x0062 };
    uint32_t const ces[9] = { 0x0A9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_062)
{
    // 2767 0021;	
    // (❧) ROTATED FLORAL HEART BULLET	[0A9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2767, 0x0021 };
    uint32_t const ces[9] = { 0x0A9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_063)
{
    // 2767 003F;	
    // (❧) ROTATED FLORAL HEART BULLET	[0A9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2767, 0x003F };
    uint32_t const ces[9] = { 0x0A9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_064)
{
    // 2767 0061;	
    // (❧) ROTATED FLORAL HEART BULLET	[0A9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2767, 0x0061 };
    uint32_t const ces[9] = { 0x0A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_065)
{
    // 2767 0041;	
    // (❧) ROTATED FLORAL HEART BULLET	[0A9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2767, 0x0041 };
    uint32_t const ces[9] = { 0x0A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_066)
{
    // 2767 0062;	
    // (❧) ROTATED FLORAL HEART BULLET	[0A9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2767, 0x0062 };
    uint32_t const ces[9] = { 0x0A9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_067)
{
    // 2794 0021;	
    // (➔) HEAVY WIDE-HEADED RIGHTWARDS ARROW	[0AA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2794, 0x0021 };
    uint32_t const ces[9] = { 0x0AA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_068)
{
    // 2794 003F;	
    // (➔) HEAVY WIDE-HEADED RIGHTWARDS ARROW	[0AA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2794, 0x003F };
    uint32_t const ces[9] = { 0x0AA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_069)
{
    // 2794 0061;	
    // (➔) HEAVY WIDE-HEADED RIGHTWARDS ARROW	[0AA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2794, 0x0061 };
    uint32_t const ces[9] = { 0x0AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_070)
{
    // 2794 0041;	
    // (➔) HEAVY WIDE-HEADED RIGHTWARDS ARROW	[0AA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2794, 0x0041 };
    uint32_t const ces[9] = { 0x0AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_071)
{
    // 2794 0062;	
    // (➔) HEAVY WIDE-HEADED RIGHTWARDS ARROW	[0AA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2794, 0x0062 };
    uint32_t const ces[9] = { 0x0AA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_072)
{
    // 2795 0021;	
    // (➕) HEAVY PLUS SIGN	[0AA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2795, 0x0021 };
    uint32_t const ces[9] = { 0x0AA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_073)
{
    // 2795 003F;	
    // (➕) HEAVY PLUS SIGN	[0AA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2795, 0x003F };
    uint32_t const ces[9] = { 0x0AA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_074)
{
    // 2795 0061;	
    // (➕) HEAVY PLUS SIGN	[0AA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2795, 0x0061 };
    uint32_t const ces[9] = { 0x0AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_075)
{
    // 2795 0041;	
    // (➕) HEAVY PLUS SIGN	[0AA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2795, 0x0041 };
    uint32_t const ces[9] = { 0x0AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_076)
{
    // 2795 0062;	
    // (➕) HEAVY PLUS SIGN	[0AA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2795, 0x0062 };
    uint32_t const ces[9] = { 0x0AA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_077)
{
    // 2796 0021;	
    // (➖) HEAVY MINUS SIGN	[0AA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2796, 0x0021 };
    uint32_t const ces[9] = { 0x0AA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_078)
{
    // 2796 003F;	
    // (➖) HEAVY MINUS SIGN	[0AA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2796, 0x003F };
    uint32_t const ces[9] = { 0x0AA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_079)
{
    // 2796 0061;	
    // (➖) HEAVY MINUS SIGN	[0AA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2796, 0x0061 };
    uint32_t const ces[9] = { 0x0AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_080)
{
    // 2796 0041;	
    // (➖) HEAVY MINUS SIGN	[0AA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2796, 0x0041 };
    uint32_t const ces[9] = { 0x0AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_081)
{
    // 2796 0062;	
    // (➖) HEAVY MINUS SIGN	[0AA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2796, 0x0062 };
    uint32_t const ces[9] = { 0x0AA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_082)
{
    // 2797 0021;	
    // (➗) HEAVY DIVISION SIGN	[0AA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2797, 0x0021 };
    uint32_t const ces[9] = { 0x0AA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_083)
{
    // 2797 003F;	
    // (➗) HEAVY DIVISION SIGN	[0AA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2797, 0x003F };
    uint32_t const ces[9] = { 0x0AA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_084)
{
    // 2797 0061;	
    // (➗) HEAVY DIVISION SIGN	[0AA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2797, 0x0061 };
    uint32_t const ces[9] = { 0x0AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_085)
{
    // 2797 0041;	
    // (➗) HEAVY DIVISION SIGN	[0AA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2797, 0x0041 };
    uint32_t const ces[9] = { 0x0AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_086)
{
    // 2797 0062;	
    // (➗) HEAVY DIVISION SIGN	[0AA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2797, 0x0062 };
    uint32_t const ces[9] = { 0x0AA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_087)
{
    // 2798 0021;	
    // (➘) HEAVY SOUTH EAST ARROW	[0AA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2798, 0x0021 };
    uint32_t const ces[9] = { 0x0AA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_088)
{
    // 2798 003F;	
    // (➘) HEAVY SOUTH EAST ARROW	[0AA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2798, 0x003F };
    uint32_t const ces[9] = { 0x0AA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_089)
{
    // 2798 0061;	
    // (➘) HEAVY SOUTH EAST ARROW	[0AA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2798, 0x0061 };
    uint32_t const ces[9] = { 0x0AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_090)
{
    // 2798 0041;	
    // (➘) HEAVY SOUTH EAST ARROW	[0AA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2798, 0x0041 };
    uint32_t const ces[9] = { 0x0AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_091)
{
    // 2798 0062;	
    // (➘) HEAVY SOUTH EAST ARROW	[0AA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2798, 0x0062 };
    uint32_t const ces[9] = { 0x0AA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_092)
{
    // 2799 0021;	
    // (➙) HEAVY RIGHTWARDS ARROW	[0AA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2799, 0x0021 };
    uint32_t const ces[9] = { 0x0AA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_093)
{
    // 2799 003F;	
    // (➙) HEAVY RIGHTWARDS ARROW	[0AA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2799, 0x003F };
    uint32_t const ces[9] = { 0x0AA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_094)
{
    // 2799 0061;	
    // (➙) HEAVY RIGHTWARDS ARROW	[0AA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2799, 0x0061 };
    uint32_t const ces[9] = { 0x0AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_095)
{
    // 2799 0041;	
    // (➙) HEAVY RIGHTWARDS ARROW	[0AA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2799, 0x0041 };
    uint32_t const ces[9] = { 0x0AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_096)
{
    // 2799 0062;	
    // (➙) HEAVY RIGHTWARDS ARROW	[0AA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2799, 0x0062 };
    uint32_t const ces[9] = { 0x0AA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_097)
{
    // 279A 0021;	
    // (➚) HEAVY NORTH EAST ARROW	[0AA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279A, 0x0021 };
    uint32_t const ces[9] = { 0x0AA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_098)
{
    // 279A 003F;	
    // (➚) HEAVY NORTH EAST ARROW	[0AA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279A, 0x003F };
    uint32_t const ces[9] = { 0x0AA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_099)
{
    // 279A 0061;	
    // (➚) HEAVY NORTH EAST ARROW	[0AA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279A, 0x0061 };
    uint32_t const ces[9] = { 0x0AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_100)
{
    // 279A 0041;	
    // (➚) HEAVY NORTH EAST ARROW	[0AA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279A, 0x0041 };
    uint32_t const ces[9] = { 0x0AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_101)
{
    // 279A 0062;	
    // (➚) HEAVY NORTH EAST ARROW	[0AA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279A, 0x0062 };
    uint32_t const ces[9] = { 0x0AA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_102)
{
    // 279B 0021;	
    // (➛) DRAFTING POINT RIGHTWARDS ARROW	[0AA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279B, 0x0021 };
    uint32_t const ces[9] = { 0x0AA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_103)
{
    // 279B 003F;	
    // (➛) DRAFTING POINT RIGHTWARDS ARROW	[0AA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279B, 0x003F };
    uint32_t const ces[9] = { 0x0AA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_104)
{
    // 279B 0061;	
    // (➛) DRAFTING POINT RIGHTWARDS ARROW	[0AA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279B, 0x0061 };
    uint32_t const ces[9] = { 0x0AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_105)
{
    // 279B 0041;	
    // (➛) DRAFTING POINT RIGHTWARDS ARROW	[0AA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279B, 0x0041 };
    uint32_t const ces[9] = { 0x0AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_106)
{
    // 279B 0062;	
    // (➛) DRAFTING POINT RIGHTWARDS ARROW	[0AA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279B, 0x0062 };
    uint32_t const ces[9] = { 0x0AA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_107)
{
    // 279C 0021;	
    // (➜) HEAVY ROUND-TIPPED RIGHTWARDS ARROW	[0AA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279C, 0x0021 };
    uint32_t const ces[9] = { 0x0AA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_108)
{
    // 279C 003F;	
    // (➜) HEAVY ROUND-TIPPED RIGHTWARDS ARROW	[0AA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279C, 0x003F };
    uint32_t const ces[9] = { 0x0AA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_109)
{
    // 279C 0061;	
    // (➜) HEAVY ROUND-TIPPED RIGHTWARDS ARROW	[0AA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279C, 0x0061 };
    uint32_t const ces[9] = { 0x0AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_110)
{
    // 279C 0041;	
    // (➜) HEAVY ROUND-TIPPED RIGHTWARDS ARROW	[0AA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279C, 0x0041 };
    uint32_t const ces[9] = { 0x0AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_111)
{
    // 279C 0062;	
    // (➜) HEAVY ROUND-TIPPED RIGHTWARDS ARROW	[0AA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279C, 0x0062 };
    uint32_t const ces[9] = { 0x0AA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_112)
{
    // 279D 0021;	
    // (➝) TRIANGLE-HEADED RIGHTWARDS ARROW	[0AA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279D, 0x0021 };
    uint32_t const ces[9] = { 0x0AA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_113)
{
    // 279D 003F;	
    // (➝) TRIANGLE-HEADED RIGHTWARDS ARROW	[0AA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279D, 0x003F };
    uint32_t const ces[9] = { 0x0AA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_114)
{
    // 279D 0061;	
    // (➝) TRIANGLE-HEADED RIGHTWARDS ARROW	[0AA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279D, 0x0061 };
    uint32_t const ces[9] = { 0x0AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_115)
{
    // 279D 0041;	
    // (➝) TRIANGLE-HEADED RIGHTWARDS ARROW	[0AA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279D, 0x0041 };
    uint32_t const ces[9] = { 0x0AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_116)
{
    // 279D 0062;	
    // (➝) TRIANGLE-HEADED RIGHTWARDS ARROW	[0AA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279D, 0x0062 };
    uint32_t const ces[9] = { 0x0AA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_117)
{
    // 279E 0021;	
    // (➞) HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279E, 0x0021 };
    uint32_t const ces[9] = { 0x0AAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_118)
{
    // 279E 003F;	
    // (➞) HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279E, 0x003F };
    uint32_t const ces[9] = { 0x0AAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_119)
{
    // 279E 0061;	
    // (➞) HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279E, 0x0061 };
    uint32_t const ces[9] = { 0x0AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_120)
{
    // 279E 0041;	
    // (➞) HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279E, 0x0041 };
    uint32_t const ces[9] = { 0x0AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_121)
{
    // 279E 0062;	
    // (➞) HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279E, 0x0062 };
    uint32_t const ces[9] = { 0x0AAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_122)
{
    // 279F 0021;	
    // (➟) DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279F, 0x0021 };
    uint32_t const ces[9] = { 0x0AAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_123)
{
    // 279F 003F;	
    // (➟) DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279F, 0x003F };
    uint32_t const ces[9] = { 0x0AAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_124)
{
    // 279F 0061;	
    // (➟) DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279F, 0x0061 };
    uint32_t const ces[9] = { 0x0AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_125)
{
    // 279F 0041;	
    // (➟) DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x279F, 0x0041 };
    uint32_t const ces[9] = { 0x0AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_126)
{
    // 279F 0062;	
    // (➟) DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x279F, 0x0062 };
    uint32_t const ces[9] = { 0x0AAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_127)
{
    // 27A0 0021;	
    // (➠) HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A0, 0x0021 };
    uint32_t const ces[9] = { 0x0AAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_128)
{
    // 27A0 003F;	
    // (➠) HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A0, 0x003F };
    uint32_t const ces[9] = { 0x0AAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_129)
{
    // 27A0 0061;	
    // (➠) HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A0, 0x0061 };
    uint32_t const ces[9] = { 0x0AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_130)
{
    // 27A0 0041;	
    // (➠) HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A0, 0x0041 };
    uint32_t const ces[9] = { 0x0AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_131)
{
    // 27A0 0062;	
    // (➠) HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW	[0AAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A0, 0x0062 };
    uint32_t const ces[9] = { 0x0AAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_132)
{
    // 27A1 0021;	
    // (➡) BLACK RIGHTWARDS ARROW	[0AAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A1, 0x0021 };
    uint32_t const ces[9] = { 0x0AAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_133)
{
    // 27A1 003F;	
    // (➡) BLACK RIGHTWARDS ARROW	[0AAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A1, 0x003F };
    uint32_t const ces[9] = { 0x0AAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_134)
{
    // 27A1 0061;	
    // (➡) BLACK RIGHTWARDS ARROW	[0AAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A1, 0x0061 };
    uint32_t const ces[9] = { 0x0AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_135)
{
    // 27A1 0041;	
    // (➡) BLACK RIGHTWARDS ARROW	[0AAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A1, 0x0041 };
    uint32_t const ces[9] = { 0x0AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_136)
{
    // 27A1 0062;	
    // (➡) BLACK RIGHTWARDS ARROW	[0AAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A1, 0x0062 };
    uint32_t const ces[9] = { 0x0AAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_137)
{
    // 27A2 0021;	
    // (➢) THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD	[0AAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A2, 0x0021 };
    uint32_t const ces[9] = { 0x0AAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_138)
{
    // 27A2 003F;	
    // (➢) THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD	[0AAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A2, 0x003F };
    uint32_t const ces[9] = { 0x0AAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_139)
{
    // 27A2 0061;	
    // (➢) THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD	[0AAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A2, 0x0061 };
    uint32_t const ces[9] = { 0x0AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_140)
{
    // 27A2 0041;	
    // (➢) THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD	[0AAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A2, 0x0041 };
    uint32_t const ces[9] = { 0x0AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_141)
{
    // 27A2 0062;	
    // (➢) THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD	[0AAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A2, 0x0062 };
    uint32_t const ces[9] = { 0x0AAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_142)
{
    // 27A3 0021;	
    // (➣) THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD	[0AAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A3, 0x0021 };
    uint32_t const ces[9] = { 0x0AAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_143)
{
    // 27A3 003F;	
    // (➣) THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD	[0AAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A3, 0x003F };
    uint32_t const ces[9] = { 0x0AAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_144)
{
    // 27A3 0061;	
    // (➣) THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD	[0AAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A3, 0x0061 };
    uint32_t const ces[9] = { 0x0AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_145)
{
    // 27A3 0041;	
    // (➣) THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD	[0AAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A3, 0x0041 };
    uint32_t const ces[9] = { 0x0AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_146)
{
    // 27A3 0062;	
    // (➣) THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD	[0AAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A3, 0x0062 };
    uint32_t const ces[9] = { 0x0AAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_147)
{
    // 27A4 0021;	
    // (➤) BLACK RIGHTWARDS ARROWHEAD	[0AB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A4, 0x0021 };
    uint32_t const ces[9] = { 0x0AB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_148)
{
    // 27A4 003F;	
    // (➤) BLACK RIGHTWARDS ARROWHEAD	[0AB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A4, 0x003F };
    uint32_t const ces[9] = { 0x0AB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_149)
{
    // 27A4 0061;	
    // (➤) BLACK RIGHTWARDS ARROWHEAD	[0AB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A4, 0x0061 };
    uint32_t const ces[9] = { 0x0AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_150)
{
    // 27A4 0041;	
    // (➤) BLACK RIGHTWARDS ARROWHEAD	[0AB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A4, 0x0041 };
    uint32_t const ces[9] = { 0x0AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_151)
{
    // 27A4 0062;	
    // (➤) BLACK RIGHTWARDS ARROWHEAD	[0AB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A4, 0x0062 };
    uint32_t const ces[9] = { 0x0AB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_152)
{
    // 27A5 0021;	
    // (➥) HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0AB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A5, 0x0021 };
    uint32_t const ces[9] = { 0x0AB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_153)
{
    // 27A5 003F;	
    // (➥) HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0AB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A5, 0x003F };
    uint32_t const ces[9] = { 0x0AB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_154)
{
    // 27A5 0061;	
    // (➥) HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0AB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A5, 0x0061 };
    uint32_t const ces[9] = { 0x0AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_155)
{
    // 27A5 0041;	
    // (➥) HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0AB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A5, 0x0041 };
    uint32_t const ces[9] = { 0x0AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_156)
{
    // 27A5 0062;	
    // (➥) HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0AB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A5, 0x0062 };
    uint32_t const ces[9] = { 0x0AB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_157)
{
    // 27A6 0021;	
    // (➦) HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0AB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A6, 0x0021 };
    uint32_t const ces[9] = { 0x0AB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_158)
{
    // 27A6 003F;	
    // (➦) HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0AB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A6, 0x003F };
    uint32_t const ces[9] = { 0x0AB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_159)
{
    // 27A6 0061;	
    // (➦) HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0AB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A6, 0x0061 };
    uint32_t const ces[9] = { 0x0AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_160)
{
    // 27A6 0041;	
    // (➦) HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0AB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A6, 0x0041 };
    uint32_t const ces[9] = { 0x0AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_161)
{
    // 27A6 0062;	
    // (➦) HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0AB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A6, 0x0062 };
    uint32_t const ces[9] = { 0x0AB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_162)
{
    // 27A7 0021;	
    // (➧) SQUAT BLACK RIGHTWARDS ARROW	[0AB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A7, 0x0021 };
    uint32_t const ces[9] = { 0x0AB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_163)
{
    // 27A7 003F;	
    // (➧) SQUAT BLACK RIGHTWARDS ARROW	[0AB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A7, 0x003F };
    uint32_t const ces[9] = { 0x0AB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_164)
{
    // 27A7 0061;	
    // (➧) SQUAT BLACK RIGHTWARDS ARROW	[0AB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A7, 0x0061 };
    uint32_t const ces[9] = { 0x0AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_165)
{
    // 27A7 0041;	
    // (➧) SQUAT BLACK RIGHTWARDS ARROW	[0AB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A7, 0x0041 };
    uint32_t const ces[9] = { 0x0AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_166)
{
    // 27A7 0062;	
    // (➧) SQUAT BLACK RIGHTWARDS ARROW	[0AB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A7, 0x0062 };
    uint32_t const ces[9] = { 0x0AB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_167)
{
    // 27A8 0021;	
    // (➨) HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW	[0AB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A8, 0x0021 };
    uint32_t const ces[9] = { 0x0AB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_168)
{
    // 27A8 003F;	
    // (➨) HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW	[0AB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A8, 0x003F };
    uint32_t const ces[9] = { 0x0AB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_169)
{
    // 27A8 0061;	
    // (➨) HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW	[0AB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A8, 0x0061 };
    uint32_t const ces[9] = { 0x0AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_170)
{
    // 27A8 0041;	
    // (➨) HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW	[0AB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A8, 0x0041 };
    uint32_t const ces[9] = { 0x0AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_171)
{
    // 27A8 0062;	
    // (➨) HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW	[0AB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A8, 0x0062 };
    uint32_t const ces[9] = { 0x0AB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_172)
{
    // 27A9 0021;	
    // (➩) RIGHT-SHADED WHITE RIGHTWARDS ARROW	[0AB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A9, 0x0021 };
    uint32_t const ces[9] = { 0x0AB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_173)
{
    // 27A9 003F;	
    // (➩) RIGHT-SHADED WHITE RIGHTWARDS ARROW	[0AB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A9, 0x003F };
    uint32_t const ces[9] = { 0x0AB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_174)
{
    // 27A9 0061;	
    // (➩) RIGHT-SHADED WHITE RIGHTWARDS ARROW	[0AB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A9, 0x0061 };
    uint32_t const ces[9] = { 0x0AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_175)
{
    // 27A9 0041;	
    // (➩) RIGHT-SHADED WHITE RIGHTWARDS ARROW	[0AB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27A9, 0x0041 };
    uint32_t const ces[9] = { 0x0AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_176)
{
    // 27A9 0062;	
    // (➩) RIGHT-SHADED WHITE RIGHTWARDS ARROW	[0AB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27A9, 0x0062 };
    uint32_t const ces[9] = { 0x0AB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_177)
{
    // 27AA 0021;	
    // (➪) LEFT-SHADED WHITE RIGHTWARDS ARROW	[0AB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AA, 0x0021 };
    uint32_t const ces[9] = { 0x0AB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_178)
{
    // 27AA 003F;	
    // (➪) LEFT-SHADED WHITE RIGHTWARDS ARROW	[0AB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AA, 0x003F };
    uint32_t const ces[9] = { 0x0AB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_179)
{
    // 27AA 0061;	
    // (➪) LEFT-SHADED WHITE RIGHTWARDS ARROW	[0AB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AA, 0x0061 };
    uint32_t const ces[9] = { 0x0AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_180)
{
    // 27AA 0041;	
    // (➪) LEFT-SHADED WHITE RIGHTWARDS ARROW	[0AB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AA, 0x0041 };
    uint32_t const ces[9] = { 0x0AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_181)
{
    // 27AA 0062;	
    // (➪) LEFT-SHADED WHITE RIGHTWARDS ARROW	[0AB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AA, 0x0062 };
    uint32_t const ces[9] = { 0x0AB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_182)
{
    // 27AB 0021;	
    // (➫) BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AB, 0x0021 };
    uint32_t const ces[9] = { 0x0AB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_183)
{
    // 27AB 003F;	
    // (➫) BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AB, 0x003F };
    uint32_t const ces[9] = { 0x0AB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_184)
{
    // 27AB 0061;	
    // (➫) BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AB, 0x0061 };
    uint32_t const ces[9] = { 0x0AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_185)
{
    // 27AB 0041;	
    // (➫) BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AB, 0x0041 };
    uint32_t const ces[9] = { 0x0AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_186)
{
    // 27AB 0062;	
    // (➫) BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AB, 0x0062 };
    uint32_t const ces[9] = { 0x0AB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_187)
{
    // 27AC 0021;	
    // (➬) FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AC, 0x0021 };
    uint32_t const ces[9] = { 0x0AB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_188)
{
    // 27AC 003F;	
    // (➬) FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AC, 0x003F };
    uint32_t const ces[9] = { 0x0AB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_189)
{
    // 27AC 0061;	
    // (➬) FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AC, 0x0061 };
    uint32_t const ces[9] = { 0x0AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_190)
{
    // 27AC 0041;	
    // (➬) FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AC, 0x0041 };
    uint32_t const ces[9] = { 0x0AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_191)
{
    // 27AC 0062;	
    // (➬) FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW	[0AB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AC, 0x0062 };
    uint32_t const ces[9] = { 0x0AB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_192)
{
    // 27AD 0021;	
    // (➭) HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0AB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AD, 0x0021 };
    uint32_t const ces[9] = { 0x0AB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_193)
{
    // 27AD 003F;	
    // (➭) HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0AB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AD, 0x003F };
    uint32_t const ces[9] = { 0x0AB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_194)
{
    // 27AD 0061;	
    // (➭) HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0AB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AD, 0x0061 };
    uint32_t const ces[9] = { 0x0AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_195)
{
    // 27AD 0041;	
    // (➭) HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0AB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AD, 0x0041 };
    uint32_t const ces[9] = { 0x0AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_196)
{
    // 27AD 0062;	
    // (➭) HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0AB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AD, 0x0062 };
    uint32_t const ces[9] = { 0x0AB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_197)
{
    // 27AE 0021;	
    // (➮) HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AE, 0x0021 };
    uint32_t const ces[9] = { 0x0ABA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_198)
{
    // 27AE 003F;	
    // (➮) HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AE, 0x003F };
    uint32_t const ces[9] = { 0x0ABA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_199)
{
    // 27AE 0061;	
    // (➮) HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AE, 0x0061 };
    uint32_t const ces[9] = { 0x0ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_200)
{
    // 27AE 0041;	
    // (➮) HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AE, 0x0041 };
    uint32_t const ces[9] = { 0x0ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_201)
{
    // 27AE 0062;	
    // (➮) HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AE, 0x0062 };
    uint32_t const ces[9] = { 0x0ABA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_202)
{
    // 27AF 0021;	
    // (➯) NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AF, 0x0021 };
    uint32_t const ces[9] = { 0x0ABB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_203)
{
    // 27AF 003F;	
    // (➯) NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AF, 0x003F };
    uint32_t const ces[9] = { 0x0ABB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_204)
{
    // 27AF 0061;	
    // (➯) NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AF, 0x0061 };
    uint32_t const ces[9] = { 0x0ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_205)
{
    // 27AF 0041;	
    // (➯) NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27AF, 0x0041 };
    uint32_t const ces[9] = { 0x0ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_206)
{
    // 27AF 0062;	
    // (➯) NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27AF, 0x0062 };
    uint32_t const ces[9] = { 0x0ABB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_207)
{
    // 27B0 0021;	
    // (➰) CURLY LOOP	[0ABC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B0, 0x0021 };
    uint32_t const ces[9] = { 0x0ABC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_208)
{
    // 27B0 003F;	
    // (➰) CURLY LOOP	[0ABC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B0, 0x003F };
    uint32_t const ces[9] = { 0x0ABC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_209)
{
    // 27B0 0061;	
    // (➰) CURLY LOOP	[0ABC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B0, 0x0061 };
    uint32_t const ces[9] = { 0x0ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_210)
{
    // 27B0 0041;	
    // (➰) CURLY LOOP	[0ABC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B0, 0x0041 };
    uint32_t const ces[9] = { 0x0ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_211)
{
    // 27B0 0062;	
    // (➰) CURLY LOOP	[0ABC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B0, 0x0062 };
    uint32_t const ces[9] = { 0x0ABC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_212)
{
    // 27B1 0021;	
    // (➱) NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B1, 0x0021 };
    uint32_t const ces[9] = { 0x0ABD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_213)
{
    // 27B1 003F;	
    // (➱) NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B1, 0x003F };
    uint32_t const ces[9] = { 0x0ABD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_214)
{
    // 27B1 0061;	
    // (➱) NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B1, 0x0061 };
    uint32_t const ces[9] = { 0x0ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_215)
{
    // 27B1 0041;	
    // (➱) NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B1, 0x0041 };
    uint32_t const ces[9] = { 0x0ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_216)
{
    // 27B1 0062;	
    // (➱) NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW	[0ABD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B1, 0x0062 };
    uint32_t const ces[9] = { 0x0ABD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_217)
{
    // 27B2 0021;	
    // (➲) CIRCLED HEAVY WHITE RIGHTWARDS ARROW	[0ABE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B2, 0x0021 };
    uint32_t const ces[9] = { 0x0ABE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_218)
{
    // 27B2 003F;	
    // (➲) CIRCLED HEAVY WHITE RIGHTWARDS ARROW	[0ABE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B2, 0x003F };
    uint32_t const ces[9] = { 0x0ABE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_219)
{
    // 27B2 0061;	
    // (➲) CIRCLED HEAVY WHITE RIGHTWARDS ARROW	[0ABE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B2, 0x0061 };
    uint32_t const ces[9] = { 0x0ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_220)
{
    // 27B2 0041;	
    // (➲) CIRCLED HEAVY WHITE RIGHTWARDS ARROW	[0ABE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B2, 0x0041 };
    uint32_t const ces[9] = { 0x0ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_221)
{
    // 27B2 0062;	
    // (➲) CIRCLED HEAVY WHITE RIGHTWARDS ARROW	[0ABE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B2, 0x0062 };
    uint32_t const ces[9] = { 0x0ABE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_222)
{
    // 27B3 0021;	
    // (➳) WHITE-FEATHERED RIGHTWARDS ARROW	[0ABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B3, 0x0021 };
    uint32_t const ces[9] = { 0x0ABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_223)
{
    // 27B3 003F;	
    // (➳) WHITE-FEATHERED RIGHTWARDS ARROW	[0ABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B3, 0x003F };
    uint32_t const ces[9] = { 0x0ABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_224)
{
    // 27B3 0061;	
    // (➳) WHITE-FEATHERED RIGHTWARDS ARROW	[0ABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B3, 0x0061 };
    uint32_t const ces[9] = { 0x0ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_225)
{
    // 27B3 0041;	
    // (➳) WHITE-FEATHERED RIGHTWARDS ARROW	[0ABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B3, 0x0041 };
    uint32_t const ces[9] = { 0x0ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_226)
{
    // 27B3 0062;	
    // (➳) WHITE-FEATHERED RIGHTWARDS ARROW	[0ABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B3, 0x0062 };
    uint32_t const ces[9] = { 0x0ABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_227)
{
    // 27B4 0021;	
    // (➴) BLACK-FEATHERED SOUTH EAST ARROW	[0AC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B4, 0x0021 };
    uint32_t const ces[9] = { 0x0AC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_228)
{
    // 27B4 003F;	
    // (➴) BLACK-FEATHERED SOUTH EAST ARROW	[0AC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B4, 0x003F };
    uint32_t const ces[9] = { 0x0AC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_229)
{
    // 27B4 0061;	
    // (➴) BLACK-FEATHERED SOUTH EAST ARROW	[0AC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B4, 0x0061 };
    uint32_t const ces[9] = { 0x0AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_230)
{
    // 27B4 0041;	
    // (➴) BLACK-FEATHERED SOUTH EAST ARROW	[0AC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B4, 0x0041 };
    uint32_t const ces[9] = { 0x0AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_231)
{
    // 27B4 0062;	
    // (➴) BLACK-FEATHERED SOUTH EAST ARROW	[0AC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B4, 0x0062 };
    uint32_t const ces[9] = { 0x0AC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_232)
{
    // 27B5 0021;	
    // (➵) BLACK-FEATHERED RIGHTWARDS ARROW	[0AC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B5, 0x0021 };
    uint32_t const ces[9] = { 0x0AC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_233)
{
    // 27B5 003F;	
    // (➵) BLACK-FEATHERED RIGHTWARDS ARROW	[0AC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B5, 0x003F };
    uint32_t const ces[9] = { 0x0AC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_234)
{
    // 27B5 0061;	
    // (➵) BLACK-FEATHERED RIGHTWARDS ARROW	[0AC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B5, 0x0061 };
    uint32_t const ces[9] = { 0x0AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_235)
{
    // 27B5 0041;	
    // (➵) BLACK-FEATHERED RIGHTWARDS ARROW	[0AC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B5, 0x0041 };
    uint32_t const ces[9] = { 0x0AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_236)
{
    // 27B5 0062;	
    // (➵) BLACK-FEATHERED RIGHTWARDS ARROW	[0AC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B5, 0x0062 };
    uint32_t const ces[9] = { 0x0AC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_237)
{
    // 27B6 0021;	
    // (➶) BLACK-FEATHERED NORTH EAST ARROW	[0AC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B6, 0x0021 };
    uint32_t const ces[9] = { 0x0AC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_238)
{
    // 27B6 003F;	
    // (➶) BLACK-FEATHERED NORTH EAST ARROW	[0AC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B6, 0x003F };
    uint32_t const ces[9] = { 0x0AC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_239)
{
    // 27B6 0061;	
    // (➶) BLACK-FEATHERED NORTH EAST ARROW	[0AC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B6, 0x0061 };
    uint32_t const ces[9] = { 0x0AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_240)
{
    // 27B6 0041;	
    // (➶) BLACK-FEATHERED NORTH EAST ARROW	[0AC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B6, 0x0041 };
    uint32_t const ces[9] = { 0x0AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_241)
{
    // 27B6 0062;	
    // (➶) BLACK-FEATHERED NORTH EAST ARROW	[0AC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B6, 0x0062 };
    uint32_t const ces[9] = { 0x0AC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_242)
{
    // 27B7 0021;	
    // (➷) HEAVY BLACK-FEATHERED SOUTH EAST ARROW	[0AC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B7, 0x0021 };
    uint32_t const ces[9] = { 0x0AC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_243)
{
    // 27B7 003F;	
    // (➷) HEAVY BLACK-FEATHERED SOUTH EAST ARROW	[0AC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B7, 0x003F };
    uint32_t const ces[9] = { 0x0AC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_244)
{
    // 27B7 0061;	
    // (➷) HEAVY BLACK-FEATHERED SOUTH EAST ARROW	[0AC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B7, 0x0061 };
    uint32_t const ces[9] = { 0x0AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_245)
{
    // 27B7 0041;	
    // (➷) HEAVY BLACK-FEATHERED SOUTH EAST ARROW	[0AC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B7, 0x0041 };
    uint32_t const ces[9] = { 0x0AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_246)
{
    // 27B7 0062;	
    // (➷) HEAVY BLACK-FEATHERED SOUTH EAST ARROW	[0AC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B7, 0x0062 };
    uint32_t const ces[9] = { 0x0AC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_247)
{
    // 27B8 0021;	
    // (➸) HEAVY BLACK-FEATHERED RIGHTWARDS ARROW	[0AC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B8, 0x0021 };
    uint32_t const ces[9] = { 0x0AC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_248)
{
    // 27B8 003F;	
    // (➸) HEAVY BLACK-FEATHERED RIGHTWARDS ARROW	[0AC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B8, 0x003F };
    uint32_t const ces[9] = { 0x0AC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_249)
{
    // 27B8 0061;	
    // (➸) HEAVY BLACK-FEATHERED RIGHTWARDS ARROW	[0AC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B8, 0x0061 };
    uint32_t const ces[9] = { 0x0AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_250)
{
    // 27B8 0041;	
    // (➸) HEAVY BLACK-FEATHERED RIGHTWARDS ARROW	[0AC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B8, 0x0041 };
    uint32_t const ces[9] = { 0x0AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_251)
{
    // 27B8 0062;	
    // (➸) HEAVY BLACK-FEATHERED RIGHTWARDS ARROW	[0AC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B8, 0x0062 };
    uint32_t const ces[9] = { 0x0AC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_252)
{
    // 27B9 0021;	
    // (➹) HEAVY BLACK-FEATHERED NORTH EAST ARROW	[0AC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B9, 0x0021 };
    uint32_t const ces[9] = { 0x0AC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_253)
{
    // 27B9 003F;	
    // (➹) HEAVY BLACK-FEATHERED NORTH EAST ARROW	[0AC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B9, 0x003F };
    uint32_t const ces[9] = { 0x0AC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_254)
{
    // 27B9 0061;	
    // (➹) HEAVY BLACK-FEATHERED NORTH EAST ARROW	[0AC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B9, 0x0061 };
    uint32_t const ces[9] = { 0x0AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_255)
{
    // 27B9 0041;	
    // (➹) HEAVY BLACK-FEATHERED NORTH EAST ARROW	[0AC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27B9, 0x0041 };
    uint32_t const ces[9] = { 0x0AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_256)
{
    // 27B9 0062;	
    // (➹) HEAVY BLACK-FEATHERED NORTH EAST ARROW	[0AC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27B9, 0x0062 };
    uint32_t const ces[9] = { 0x0AC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_257)
{
    // 27BA 0021;	
    // (➺) TEARDROP-BARBED RIGHTWARDS ARROW	[0AC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BA, 0x0021 };
    uint32_t const ces[9] = { 0x0AC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_258)
{
    // 27BA 003F;	
    // (➺) TEARDROP-BARBED RIGHTWARDS ARROW	[0AC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BA, 0x003F };
    uint32_t const ces[9] = { 0x0AC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_259)
{
    // 27BA 0061;	
    // (➺) TEARDROP-BARBED RIGHTWARDS ARROW	[0AC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BA, 0x0061 };
    uint32_t const ces[9] = { 0x0AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_260)
{
    // 27BA 0041;	
    // (➺) TEARDROP-BARBED RIGHTWARDS ARROW	[0AC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BA, 0x0041 };
    uint32_t const ces[9] = { 0x0AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_261)
{
    // 27BA 0062;	
    // (➺) TEARDROP-BARBED RIGHTWARDS ARROW	[0AC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BA, 0x0062 };
    uint32_t const ces[9] = { 0x0AC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_262)
{
    // 27BB 0021;	
    // (➻) HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW	[0AC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BB, 0x0021 };
    uint32_t const ces[9] = { 0x0AC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_263)
{
    // 27BB 003F;	
    // (➻) HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW	[0AC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BB, 0x003F };
    uint32_t const ces[9] = { 0x0AC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_264)
{
    // 27BB 0061;	
    // (➻) HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW	[0AC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BB, 0x0061 };
    uint32_t const ces[9] = { 0x0AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_265)
{
    // 27BB 0041;	
    // (➻) HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW	[0AC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BB, 0x0041 };
    uint32_t const ces[9] = { 0x0AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_266)
{
    // 27BB 0062;	
    // (➻) HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW	[0AC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BB, 0x0062 };
    uint32_t const ces[9] = { 0x0AC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_267)
{
    // 27BC 0021;	
    // (➼) WEDGE-TAILED RIGHTWARDS ARROW	[0AC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BC, 0x0021 };
    uint32_t const ces[9] = { 0x0AC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_268)
{
    // 27BC 003F;	
    // (➼) WEDGE-TAILED RIGHTWARDS ARROW	[0AC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BC, 0x003F };
    uint32_t const ces[9] = { 0x0AC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_269)
{
    // 27BC 0061;	
    // (➼) WEDGE-TAILED RIGHTWARDS ARROW	[0AC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BC, 0x0061 };
    uint32_t const ces[9] = { 0x0AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_270)
{
    // 27BC 0041;	
    // (➼) WEDGE-TAILED RIGHTWARDS ARROW	[0AC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BC, 0x0041 };
    uint32_t const ces[9] = { 0x0AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_271)
{
    // 27BC 0062;	
    // (➼) WEDGE-TAILED RIGHTWARDS ARROW	[0AC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BC, 0x0062 };
    uint32_t const ces[9] = { 0x0AC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_272)
{
    // 27BD 0021;	
    // (➽) HEAVY WEDGE-TAILED RIGHTWARDS ARROW	[0AC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BD, 0x0021 };
    uint32_t const ces[9] = { 0x0AC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_273)
{
    // 27BD 003F;	
    // (➽) HEAVY WEDGE-TAILED RIGHTWARDS ARROW	[0AC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BD, 0x003F };
    uint32_t const ces[9] = { 0x0AC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_274)
{
    // 27BD 0061;	
    // (➽) HEAVY WEDGE-TAILED RIGHTWARDS ARROW	[0AC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BD, 0x0061 };
    uint32_t const ces[9] = { 0x0AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_275)
{
    // 27BD 0041;	
    // (➽) HEAVY WEDGE-TAILED RIGHTWARDS ARROW	[0AC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BD, 0x0041 };
    uint32_t const ces[9] = { 0x0AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_276)
{
    // 27BD 0062;	
    // (➽) HEAVY WEDGE-TAILED RIGHTWARDS ARROW	[0AC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BD, 0x0062 };
    uint32_t const ces[9] = { 0x0AC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_277)
{
    // 27BE 0021;	
    // (➾) OPEN-OUTLINED RIGHTWARDS ARROW	[0ACA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BE, 0x0021 };
    uint32_t const ces[9] = { 0x0ACA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_278)
{
    // 27BE 003F;	
    // (➾) OPEN-OUTLINED RIGHTWARDS ARROW	[0ACA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BE, 0x003F };
    uint32_t const ces[9] = { 0x0ACA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_279)
{
    // 27BE 0061;	
    // (➾) OPEN-OUTLINED RIGHTWARDS ARROW	[0ACA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BE, 0x0061 };
    uint32_t const ces[9] = { 0x0ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_280)
{
    // 27BE 0041;	
    // (➾) OPEN-OUTLINED RIGHTWARDS ARROW	[0ACA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BE, 0x0041 };
    uint32_t const ces[9] = { 0x0ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_281)
{
    // 27BE 0062;	
    // (➾) OPEN-OUTLINED RIGHTWARDS ARROW	[0ACA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BE, 0x0062 };
    uint32_t const ces[9] = { 0x0ACA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_282)
{
    // 27BF 0021;	
    // (➿) DOUBLE CURLY LOOP	[0ACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BF, 0x0021 };
    uint32_t const ces[9] = { 0x0ACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_283)
{
    // 27BF 003F;	
    // (➿) DOUBLE CURLY LOOP	[0ACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BF, 0x003F };
    uint32_t const ces[9] = { 0x0ACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_284)
{
    // 27BF 0061;	
    // (➿) DOUBLE CURLY LOOP	[0ACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BF, 0x0061 };
    uint32_t const ces[9] = { 0x0ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_285)
{
    // 27BF 0041;	
    // (➿) DOUBLE CURLY LOOP	[0ACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27BF, 0x0041 };
    uint32_t const ces[9] = { 0x0ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_286)
{
    // 27BF 0062;	
    // (➿) DOUBLE CURLY LOOP	[0ACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27BF, 0x0062 };
    uint32_t const ces[9] = { 0x0ACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_287)
{
    // 27C0 0021;	
    // (⟀) THREE DIMENSIONAL ANGLE	[0ACC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C0, 0x0021 };
    uint32_t const ces[9] = { 0x0ACC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_288)
{
    // 27C0 003F;	
    // (⟀) THREE DIMENSIONAL ANGLE	[0ACC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C0, 0x003F };
    uint32_t const ces[9] = { 0x0ACC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_289)
{
    // 27C0 0061;	
    // (⟀) THREE DIMENSIONAL ANGLE	[0ACC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C0, 0x0061 };
    uint32_t const ces[9] = { 0x0ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_290)
{
    // 27C0 0041;	
    // (⟀) THREE DIMENSIONAL ANGLE	[0ACC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C0, 0x0041 };
    uint32_t const ces[9] = { 0x0ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_291)
{
    // 27C0 0062;	
    // (⟀) THREE DIMENSIONAL ANGLE	[0ACC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C0, 0x0062 };
    uint32_t const ces[9] = { 0x0ACC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_292)
{
    // 27C1 0021;	
    // (⟁) WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE	[0ACD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C1, 0x0021 };
    uint32_t const ces[9] = { 0x0ACD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_293)
{
    // 27C1 003F;	
    // (⟁) WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE	[0ACD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C1, 0x003F };
    uint32_t const ces[9] = { 0x0ACD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_294)
{
    // 27C1 0061;	
    // (⟁) WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE	[0ACD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C1, 0x0061 };
    uint32_t const ces[9] = { 0x0ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_295)
{
    // 27C1 0041;	
    // (⟁) WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE	[0ACD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C1, 0x0041 };
    uint32_t const ces[9] = { 0x0ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_296)
{
    // 27C1 0062;	
    // (⟁) WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE	[0ACD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C1, 0x0062 };
    uint32_t const ces[9] = { 0x0ACD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_297)
{
    // 27C2 0021;	
    // (⟂) PERPENDICULAR	[0ACE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C2, 0x0021 };
    uint32_t const ces[9] = { 0x0ACE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_298)
{
    // 27C2 003F;	
    // (⟂) PERPENDICULAR	[0ACE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C2, 0x003F };
    uint32_t const ces[9] = { 0x0ACE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_299)
{
    // 27C2 0061;	
    // (⟂) PERPENDICULAR	[0ACE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C2, 0x0061 };
    uint32_t const ces[9] = { 0x0ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_300)
{
    // 27C2 0041;	
    // (⟂) PERPENDICULAR	[0ACE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C2, 0x0041 };
    uint32_t const ces[9] = { 0x0ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_301)
{
    // 27C2 0062;	
    // (⟂) PERPENDICULAR	[0ACE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C2, 0x0062 };
    uint32_t const ces[9] = { 0x0ACE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_302)
{
    // 27C3 0021;	
    // (⟃) OPEN SUBSET	[0ACF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C3, 0x0021 };
    uint32_t const ces[9] = { 0x0ACF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_303)
{
    // 27C3 003F;	
    // (⟃) OPEN SUBSET	[0ACF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C3, 0x003F };
    uint32_t const ces[9] = { 0x0ACF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_304)
{
    // 27C3 0061;	
    // (⟃) OPEN SUBSET	[0ACF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C3, 0x0061 };
    uint32_t const ces[9] = { 0x0ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_305)
{
    // 27C3 0041;	
    // (⟃) OPEN SUBSET	[0ACF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C3, 0x0041 };
    uint32_t const ces[9] = { 0x0ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_306)
{
    // 27C3 0062;	
    // (⟃) OPEN SUBSET	[0ACF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C3, 0x0062 };
    uint32_t const ces[9] = { 0x0ACF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_307)
{
    // 27C4 0021;	
    // (⟄) OPEN SUPERSET	[0AD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C4, 0x0021 };
    uint32_t const ces[9] = { 0x0AD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_308)
{
    // 27C4 003F;	
    // (⟄) OPEN SUPERSET	[0AD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C4, 0x003F };
    uint32_t const ces[9] = { 0x0AD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_309)
{
    // 27C4 0061;	
    // (⟄) OPEN SUPERSET	[0AD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C4, 0x0061 };
    uint32_t const ces[9] = { 0x0AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_310)
{
    // 27C4 0041;	
    // (⟄) OPEN SUPERSET	[0AD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C4, 0x0041 };
    uint32_t const ces[9] = { 0x0AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_311)
{
    // 27C4 0062;	
    // (⟄) OPEN SUPERSET	[0AD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C4, 0x0062 };
    uint32_t const ces[9] = { 0x0AD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_312)
{
    // 27C7 0021;	
    // (⟇) OR WITH DOT INSIDE	[0AD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C7, 0x0021 };
    uint32_t const ces[9] = { 0x0AD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_313)
{
    // 27C7 003F;	
    // (⟇) OR WITH DOT INSIDE	[0AD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C7, 0x003F };
    uint32_t const ces[9] = { 0x0AD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_314)
{
    // 27C7 0061;	
    // (⟇) OR WITH DOT INSIDE	[0AD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C7, 0x0061 };
    uint32_t const ces[9] = { 0x0AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_315)
{
    // 27C7 0041;	
    // (⟇) OR WITH DOT INSIDE	[0AD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C7, 0x0041 };
    uint32_t const ces[9] = { 0x0AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_316)
{
    // 27C7 0062;	
    // (⟇) OR WITH DOT INSIDE	[0AD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C7, 0x0062 };
    uint32_t const ces[9] = { 0x0AD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_317)
{
    // 27C8 0021;	
    // (⟈) REVERSE SOLIDUS PRECEDING SUBSET	[0AD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C8, 0x0021 };
    uint32_t const ces[9] = { 0x0AD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_318)
{
    // 27C8 003F;	
    // (⟈) REVERSE SOLIDUS PRECEDING SUBSET	[0AD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C8, 0x003F };
    uint32_t const ces[9] = { 0x0AD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_319)
{
    // 27C8 0061;	
    // (⟈) REVERSE SOLIDUS PRECEDING SUBSET	[0AD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C8, 0x0061 };
    uint32_t const ces[9] = { 0x0AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_320)
{
    // 27C8 0041;	
    // (⟈) REVERSE SOLIDUS PRECEDING SUBSET	[0AD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C8, 0x0041 };
    uint32_t const ces[9] = { 0x0AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_321)
{
    // 27C8 0062;	
    // (⟈) REVERSE SOLIDUS PRECEDING SUBSET	[0AD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C8, 0x0062 };
    uint32_t const ces[9] = { 0x0AD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_322)
{
    // 27C9 0021;	
    // (⟉) SUPERSET PRECEDING SOLIDUS	[0AD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C9, 0x0021 };
    uint32_t const ces[9] = { 0x0AD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_323)
{
    // 27C9 003F;	
    // (⟉) SUPERSET PRECEDING SOLIDUS	[0AD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C9, 0x003F };
    uint32_t const ces[9] = { 0x0AD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_324)
{
    // 27C9 0061;	
    // (⟉) SUPERSET PRECEDING SOLIDUS	[0AD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C9, 0x0061 };
    uint32_t const ces[9] = { 0x0AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_325)
{
    // 27C9 0041;	
    // (⟉) SUPERSET PRECEDING SOLIDUS	[0AD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C9, 0x0041 };
    uint32_t const ces[9] = { 0x0AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_326)
{
    // 27C9 0062;	
    // (⟉) SUPERSET PRECEDING SOLIDUS	[0AD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C9, 0x0062 };
    uint32_t const ces[9] = { 0x0AD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_327)
{
    // 27CA 0021;	
    // (⟊) VERTICAL BAR WITH HORIZONTAL STROKE	[0AD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CA, 0x0021 };
    uint32_t const ces[9] = { 0x0AD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_328)
{
    // 27CA 003F;	
    // (⟊) VERTICAL BAR WITH HORIZONTAL STROKE	[0AD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CA, 0x003F };
    uint32_t const ces[9] = { 0x0AD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_329)
{
    // 27CA 0061;	
    // (⟊) VERTICAL BAR WITH HORIZONTAL STROKE	[0AD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CA, 0x0061 };
    uint32_t const ces[9] = { 0x0AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_330)
{
    // 27CA 0041;	
    // (⟊) VERTICAL BAR WITH HORIZONTAL STROKE	[0AD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CA, 0x0041 };
    uint32_t const ces[9] = { 0x0AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_331)
{
    // 27CA 0062;	
    // (⟊) VERTICAL BAR WITH HORIZONTAL STROKE	[0AD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CA, 0x0062 };
    uint32_t const ces[9] = { 0x0AD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_332)
{
    // 27CB 0021;	
    // (⟋) MATHEMATICAL RISING DIAGONAL	[0AD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CB, 0x0021 };
    uint32_t const ces[9] = { 0x0AD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_333)
{
    // 27CB 003F;	
    // (⟋) MATHEMATICAL RISING DIAGONAL	[0AD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CB, 0x003F };
    uint32_t const ces[9] = { 0x0AD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_334)
{
    // 27CB 0061;	
    // (⟋) MATHEMATICAL RISING DIAGONAL	[0AD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CB, 0x0061 };
    uint32_t const ces[9] = { 0x0AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_335)
{
    // 27CB 0041;	
    // (⟋) MATHEMATICAL RISING DIAGONAL	[0AD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CB, 0x0041 };
    uint32_t const ces[9] = { 0x0AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_336)
{
    // 27CB 0062;	
    // (⟋) MATHEMATICAL RISING DIAGONAL	[0AD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CB, 0x0062 };
    uint32_t const ces[9] = { 0x0AD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_337)
{
    // 27CC 0021;	
    // (⟌) LONG DIVISION	[0AD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CC, 0x0021 };
    uint32_t const ces[9] = { 0x0AD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_338)
{
    // 27CC 003F;	
    // (⟌) LONG DIVISION	[0AD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CC, 0x003F };
    uint32_t const ces[9] = { 0x0AD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_339)
{
    // 27CC 0061;	
    // (⟌) LONG DIVISION	[0AD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CC, 0x0061 };
    uint32_t const ces[9] = { 0x0AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_340)
{
    // 27CC 0041;	
    // (⟌) LONG DIVISION	[0AD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CC, 0x0041 };
    uint32_t const ces[9] = { 0x0AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_341)
{
    // 27CC 0062;	
    // (⟌) LONG DIVISION	[0AD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CC, 0x0062 };
    uint32_t const ces[9] = { 0x0AD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_342)
{
    // 27CD 0021;	
    // (⟍) MATHEMATICAL FALLING DIAGONAL	[0AD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CD, 0x0021 };
    uint32_t const ces[9] = { 0x0AD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_343)
{
    // 27CD 003F;	
    // (⟍) MATHEMATICAL FALLING DIAGONAL	[0AD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CD, 0x003F };
    uint32_t const ces[9] = { 0x0AD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_344)
{
    // 27CD 0061;	
    // (⟍) MATHEMATICAL FALLING DIAGONAL	[0AD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CD, 0x0061 };
    uint32_t const ces[9] = { 0x0AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_345)
{
    // 27CD 0041;	
    // (⟍) MATHEMATICAL FALLING DIAGONAL	[0AD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CD, 0x0041 };
    uint32_t const ces[9] = { 0x0AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_346)
{
    // 27CD 0062;	
    // (⟍) MATHEMATICAL FALLING DIAGONAL	[0AD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CD, 0x0062 };
    uint32_t const ces[9] = { 0x0AD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_347)
{
    // 27CE 0021;	
    // (⟎) SQUARED LOGICAL AND	[0AD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CE, 0x0021 };
    uint32_t const ces[9] = { 0x0AD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_348)
{
    // 27CE 003F;	
    // (⟎) SQUARED LOGICAL AND	[0AD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CE, 0x003F };
    uint32_t const ces[9] = { 0x0AD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_349)
{
    // 27CE 0061;	
    // (⟎) SQUARED LOGICAL AND	[0AD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CE, 0x0061 };
    uint32_t const ces[9] = { 0x0AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_350)
{
    // 27CE 0041;	
    // (⟎) SQUARED LOGICAL AND	[0AD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CE, 0x0041 };
    uint32_t const ces[9] = { 0x0AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_351)
{
    // 27CE 0062;	
    // (⟎) SQUARED LOGICAL AND	[0AD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CE, 0x0062 };
    uint32_t const ces[9] = { 0x0AD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_352)
{
    // 27CF 0021;	
    // (⟏) SQUARED LOGICAL OR	[0AD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CF, 0x0021 };
    uint32_t const ces[9] = { 0x0AD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_353)
{
    // 27CF 003F;	
    // (⟏) SQUARED LOGICAL OR	[0AD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CF, 0x003F };
    uint32_t const ces[9] = { 0x0AD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_354)
{
    // 27CF 0061;	
    // (⟏) SQUARED LOGICAL OR	[0AD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CF, 0x0061 };
    uint32_t const ces[9] = { 0x0AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_355)
{
    // 27CF 0041;	
    // (⟏) SQUARED LOGICAL OR	[0AD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27CF, 0x0041 };
    uint32_t const ces[9] = { 0x0AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_356)
{
    // 27CF 0062;	
    // (⟏) SQUARED LOGICAL OR	[0AD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27CF, 0x0062 };
    uint32_t const ces[9] = { 0x0AD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_357)
{
    // 27D0 0021;	
    // (⟐) WHITE DIAMOND WITH CENTRED DOT	[0ADA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D0, 0x0021 };
    uint32_t const ces[9] = { 0x0ADA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_358)
{
    // 27D0 003F;	
    // (⟐) WHITE DIAMOND WITH CENTRED DOT	[0ADA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D0, 0x003F };
    uint32_t const ces[9] = { 0x0ADA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_359)
{
    // 27D0 0061;	
    // (⟐) WHITE DIAMOND WITH CENTRED DOT	[0ADA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D0, 0x0061 };
    uint32_t const ces[9] = { 0x0ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_360)
{
    // 27D0 0041;	
    // (⟐) WHITE DIAMOND WITH CENTRED DOT	[0ADA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D0, 0x0041 };
    uint32_t const ces[9] = { 0x0ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_361)
{
    // 27D0 0062;	
    // (⟐) WHITE DIAMOND WITH CENTRED DOT	[0ADA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D0, 0x0062 };
    uint32_t const ces[9] = { 0x0ADA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_362)
{
    // 27D1 0021;	
    // (⟑) AND WITH DOT	[0ADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D1, 0x0021 };
    uint32_t const ces[9] = { 0x0ADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_363)
{
    // 27D1 003F;	
    // (⟑) AND WITH DOT	[0ADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D1, 0x003F };
    uint32_t const ces[9] = { 0x0ADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_364)
{
    // 27D1 0061;	
    // (⟑) AND WITH DOT	[0ADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D1, 0x0061 };
    uint32_t const ces[9] = { 0x0ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_365)
{
    // 27D1 0041;	
    // (⟑) AND WITH DOT	[0ADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D1, 0x0041 };
    uint32_t const ces[9] = { 0x0ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_366)
{
    // 27D1 0062;	
    // (⟑) AND WITH DOT	[0ADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D1, 0x0062 };
    uint32_t const ces[9] = { 0x0ADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_367)
{
    // 27D2 0021;	
    // (⟒) ELEMENT OF OPENING UPWARDS	[0ADC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D2, 0x0021 };
    uint32_t const ces[9] = { 0x0ADC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_368)
{
    // 27D2 003F;	
    // (⟒) ELEMENT OF OPENING UPWARDS	[0ADC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D2, 0x003F };
    uint32_t const ces[9] = { 0x0ADC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_369)
{
    // 27D2 0061;	
    // (⟒) ELEMENT OF OPENING UPWARDS	[0ADC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D2, 0x0061 };
    uint32_t const ces[9] = { 0x0ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_370)
{
    // 27D2 0041;	
    // (⟒) ELEMENT OF OPENING UPWARDS	[0ADC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D2, 0x0041 };
    uint32_t const ces[9] = { 0x0ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_371)
{
    // 27D2 0062;	
    // (⟒) ELEMENT OF OPENING UPWARDS	[0ADC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D2, 0x0062 };
    uint32_t const ces[9] = { 0x0ADC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_372)
{
    // 27D3 0021;	
    // (⟓) LOWER RIGHT CORNER WITH DOT	[0ADD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D3, 0x0021 };
    uint32_t const ces[9] = { 0x0ADD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_373)
{
    // 27D3 003F;	
    // (⟓) LOWER RIGHT CORNER WITH DOT	[0ADD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D3, 0x003F };
    uint32_t const ces[9] = { 0x0ADD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_374)
{
    // 27D3 0061;	
    // (⟓) LOWER RIGHT CORNER WITH DOT	[0ADD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D3, 0x0061 };
    uint32_t const ces[9] = { 0x0ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_375)
{
    // 27D3 0041;	
    // (⟓) LOWER RIGHT CORNER WITH DOT	[0ADD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D3, 0x0041 };
    uint32_t const ces[9] = { 0x0ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_376)
{
    // 27D3 0062;	
    // (⟓) LOWER RIGHT CORNER WITH DOT	[0ADD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D3, 0x0062 };
    uint32_t const ces[9] = { 0x0ADD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_377)
{
    // 27D4 0021;	
    // (⟔) UPPER LEFT CORNER WITH DOT	[0ADE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D4, 0x0021 };
    uint32_t const ces[9] = { 0x0ADE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_378)
{
    // 27D4 003F;	
    // (⟔) UPPER LEFT CORNER WITH DOT	[0ADE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D4, 0x003F };
    uint32_t const ces[9] = { 0x0ADE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_379)
{
    // 27D4 0061;	
    // (⟔) UPPER LEFT CORNER WITH DOT	[0ADE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D4, 0x0061 };
    uint32_t const ces[9] = { 0x0ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_380)
{
    // 27D4 0041;	
    // (⟔) UPPER LEFT CORNER WITH DOT	[0ADE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D4, 0x0041 };
    uint32_t const ces[9] = { 0x0ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_381)
{
    // 27D4 0062;	
    // (⟔) UPPER LEFT CORNER WITH DOT	[0ADE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D4, 0x0062 };
    uint32_t const ces[9] = { 0x0ADE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_382)
{
    // 27D5 0021;	
    // (⟕) LEFT OUTER JOIN	[0ADF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D5, 0x0021 };
    uint32_t const ces[9] = { 0x0ADF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_383)
{
    // 27D5 003F;	
    // (⟕) LEFT OUTER JOIN	[0ADF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D5, 0x003F };
    uint32_t const ces[9] = { 0x0ADF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_384)
{
    // 27D5 0061;	
    // (⟕) LEFT OUTER JOIN	[0ADF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D5, 0x0061 };
    uint32_t const ces[9] = { 0x0ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_385)
{
    // 27D5 0041;	
    // (⟕) LEFT OUTER JOIN	[0ADF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D5, 0x0041 };
    uint32_t const ces[9] = { 0x0ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_386)
{
    // 27D5 0062;	
    // (⟕) LEFT OUTER JOIN	[0ADF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D5, 0x0062 };
    uint32_t const ces[9] = { 0x0ADF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_387)
{
    // 27D6 0021;	
    // (⟖) RIGHT OUTER JOIN	[0AE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D6, 0x0021 };
    uint32_t const ces[9] = { 0x0AE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_388)
{
    // 27D6 003F;	
    // (⟖) RIGHT OUTER JOIN	[0AE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D6, 0x003F };
    uint32_t const ces[9] = { 0x0AE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_389)
{
    // 27D6 0061;	
    // (⟖) RIGHT OUTER JOIN	[0AE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D6, 0x0061 };
    uint32_t const ces[9] = { 0x0AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_390)
{
    // 27D6 0041;	
    // (⟖) RIGHT OUTER JOIN	[0AE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D6, 0x0041 };
    uint32_t const ces[9] = { 0x0AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_391)
{
    // 27D6 0062;	
    // (⟖) RIGHT OUTER JOIN	[0AE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D6, 0x0062 };
    uint32_t const ces[9] = { 0x0AE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_392)
{
    // 27D7 0021;	
    // (⟗) FULL OUTER JOIN	[0AE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D7, 0x0021 };
    uint32_t const ces[9] = { 0x0AE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_393)
{
    // 27D7 003F;	
    // (⟗) FULL OUTER JOIN	[0AE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D7, 0x003F };
    uint32_t const ces[9] = { 0x0AE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_394)
{
    // 27D7 0061;	
    // (⟗) FULL OUTER JOIN	[0AE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D7, 0x0061 };
    uint32_t const ces[9] = { 0x0AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_395)
{
    // 27D7 0041;	
    // (⟗) FULL OUTER JOIN	[0AE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D7, 0x0041 };
    uint32_t const ces[9] = { 0x0AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_396)
{
    // 27D7 0062;	
    // (⟗) FULL OUTER JOIN	[0AE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D7, 0x0062 };
    uint32_t const ces[9] = { 0x0AE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_397)
{
    // 27D8 0021;	
    // (⟘) LARGE UP TACK	[0AE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D8, 0x0021 };
    uint32_t const ces[9] = { 0x0AE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_398)
{
    // 27D8 003F;	
    // (⟘) LARGE UP TACK	[0AE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D8, 0x003F };
    uint32_t const ces[9] = { 0x0AE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_399)
{
    // 27D8 0061;	
    // (⟘) LARGE UP TACK	[0AE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D8, 0x0061 };
    uint32_t const ces[9] = { 0x0AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_400)
{
    // 27D8 0041;	
    // (⟘) LARGE UP TACK	[0AE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D8, 0x0041 };
    uint32_t const ces[9] = { 0x0AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_401)
{
    // 27D8 0062;	
    // (⟘) LARGE UP TACK	[0AE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D8, 0x0062 };
    uint32_t const ces[9] = { 0x0AE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_402)
{
    // 27D9 0021;	
    // (⟙) LARGE DOWN TACK	[0AE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D9, 0x0021 };
    uint32_t const ces[9] = { 0x0AE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_403)
{
    // 27D9 003F;	
    // (⟙) LARGE DOWN TACK	[0AE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D9, 0x003F };
    uint32_t const ces[9] = { 0x0AE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_404)
{
    // 27D9 0061;	
    // (⟙) LARGE DOWN TACK	[0AE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D9, 0x0061 };
    uint32_t const ces[9] = { 0x0AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_405)
{
    // 27D9 0041;	
    // (⟙) LARGE DOWN TACK	[0AE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27D9, 0x0041 };
    uint32_t const ces[9] = { 0x0AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_406)
{
    // 27D9 0062;	
    // (⟙) LARGE DOWN TACK	[0AE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27D9, 0x0062 };
    uint32_t const ces[9] = { 0x0AE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_407)
{
    // 27DA 0021;	
    // (⟚) LEFT AND RIGHT DOUBLE TURNSTILE	[0AE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DA, 0x0021 };
    uint32_t const ces[9] = { 0x0AE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_408)
{
    // 27DA 003F;	
    // (⟚) LEFT AND RIGHT DOUBLE TURNSTILE	[0AE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DA, 0x003F };
    uint32_t const ces[9] = { 0x0AE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_409)
{
    // 27DA 0061;	
    // (⟚) LEFT AND RIGHT DOUBLE TURNSTILE	[0AE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DA, 0x0061 };
    uint32_t const ces[9] = { 0x0AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_410)
{
    // 27DA 0041;	
    // (⟚) LEFT AND RIGHT DOUBLE TURNSTILE	[0AE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DA, 0x0041 };
    uint32_t const ces[9] = { 0x0AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_411)
{
    // 27DA 0062;	
    // (⟚) LEFT AND RIGHT DOUBLE TURNSTILE	[0AE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DA, 0x0062 };
    uint32_t const ces[9] = { 0x0AE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_412)
{
    // 27DB 0021;	
    // (⟛) LEFT AND RIGHT TACK	[0AE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DB, 0x0021 };
    uint32_t const ces[9] = { 0x0AE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_413)
{
    // 27DB 003F;	
    // (⟛) LEFT AND RIGHT TACK	[0AE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DB, 0x003F };
    uint32_t const ces[9] = { 0x0AE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_414)
{
    // 27DB 0061;	
    // (⟛) LEFT AND RIGHT TACK	[0AE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DB, 0x0061 };
    uint32_t const ces[9] = { 0x0AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_415)
{
    // 27DB 0041;	
    // (⟛) LEFT AND RIGHT TACK	[0AE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DB, 0x0041 };
    uint32_t const ces[9] = { 0x0AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_416)
{
    // 27DB 0062;	
    // (⟛) LEFT AND RIGHT TACK	[0AE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DB, 0x0062 };
    uint32_t const ces[9] = { 0x0AE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_417)
{
    // 27DC 0021;	
    // (⟜) LEFT MULTIMAP	[0AE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DC, 0x0021 };
    uint32_t const ces[9] = { 0x0AE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_418)
{
    // 27DC 003F;	
    // (⟜) LEFT MULTIMAP	[0AE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DC, 0x003F };
    uint32_t const ces[9] = { 0x0AE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_419)
{
    // 27DC 0061;	
    // (⟜) LEFT MULTIMAP	[0AE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DC, 0x0061 };
    uint32_t const ces[9] = { 0x0AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_420)
{
    // 27DC 0041;	
    // (⟜) LEFT MULTIMAP	[0AE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DC, 0x0041 };
    uint32_t const ces[9] = { 0x0AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_421)
{
    // 27DC 0062;	
    // (⟜) LEFT MULTIMAP	[0AE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DC, 0x0062 };
    uint32_t const ces[9] = { 0x0AE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_422)
{
    // 27DD 0021;	
    // (⟝) LONG RIGHT TACK	[0AE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DD, 0x0021 };
    uint32_t const ces[9] = { 0x0AE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_423)
{
    // 27DD 003F;	
    // (⟝) LONG RIGHT TACK	[0AE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DD, 0x003F };
    uint32_t const ces[9] = { 0x0AE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_424)
{
    // 27DD 0061;	
    // (⟝) LONG RIGHT TACK	[0AE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DD, 0x0061 };
    uint32_t const ces[9] = { 0x0AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_425)
{
    // 27DD 0041;	
    // (⟝) LONG RIGHT TACK	[0AE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DD, 0x0041 };
    uint32_t const ces[9] = { 0x0AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_426)
{
    // 27DD 0062;	
    // (⟝) LONG RIGHT TACK	[0AE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DD, 0x0062 };
    uint32_t const ces[9] = { 0x0AE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_427)
{
    // 27DE 0021;	
    // (⟞) LONG LEFT TACK	[0AE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DE, 0x0021 };
    uint32_t const ces[9] = { 0x0AE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_428)
{
    // 27DE 003F;	
    // (⟞) LONG LEFT TACK	[0AE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DE, 0x003F };
    uint32_t const ces[9] = { 0x0AE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_429)
{
    // 27DE 0061;	
    // (⟞) LONG LEFT TACK	[0AE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DE, 0x0061 };
    uint32_t const ces[9] = { 0x0AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_430)
{
    // 27DE 0041;	
    // (⟞) LONG LEFT TACK	[0AE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DE, 0x0041 };
    uint32_t const ces[9] = { 0x0AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_431)
{
    // 27DE 0062;	
    // (⟞) LONG LEFT TACK	[0AE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DE, 0x0062 };
    uint32_t const ces[9] = { 0x0AE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_432)
{
    // 27DF 0021;	
    // (⟟) UP TACK WITH CIRCLE ABOVE	[0AE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DF, 0x0021 };
    uint32_t const ces[9] = { 0x0AE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_433)
{
    // 27DF 003F;	
    // (⟟) UP TACK WITH CIRCLE ABOVE	[0AE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DF, 0x003F };
    uint32_t const ces[9] = { 0x0AE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_434)
{
    // 27DF 0061;	
    // (⟟) UP TACK WITH CIRCLE ABOVE	[0AE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DF, 0x0061 };
    uint32_t const ces[9] = { 0x0AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_435)
{
    // 27DF 0041;	
    // (⟟) UP TACK WITH CIRCLE ABOVE	[0AE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27DF, 0x0041 };
    uint32_t const ces[9] = { 0x0AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_436)
{
    // 27DF 0062;	
    // (⟟) UP TACK WITH CIRCLE ABOVE	[0AE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27DF, 0x0062 };
    uint32_t const ces[9] = { 0x0AE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_437)
{
    // 27E0 0021;	
    // (⟠) LOZENGE DIVIDED BY HORIZONTAL RULE	[0AEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E0, 0x0021 };
    uint32_t const ces[9] = { 0x0AEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_438)
{
    // 27E0 003F;	
    // (⟠) LOZENGE DIVIDED BY HORIZONTAL RULE	[0AEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E0, 0x003F };
    uint32_t const ces[9] = { 0x0AEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_439)
{
    // 27E0 0061;	
    // (⟠) LOZENGE DIVIDED BY HORIZONTAL RULE	[0AEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E0, 0x0061 };
    uint32_t const ces[9] = { 0x0AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_440)
{
    // 27E0 0041;	
    // (⟠) LOZENGE DIVIDED BY HORIZONTAL RULE	[0AEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E0, 0x0041 };
    uint32_t const ces[9] = { 0x0AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_441)
{
    // 27E0 0062;	
    // (⟠) LOZENGE DIVIDED BY HORIZONTAL RULE	[0AEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E0, 0x0062 };
    uint32_t const ces[9] = { 0x0AEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_442)
{
    // 27E1 0021;	
    // (⟡) WHITE CONCAVE-SIDED DIAMOND	[0AEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E1, 0x0021 };
    uint32_t const ces[9] = { 0x0AEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_443)
{
    // 27E1 003F;	
    // (⟡) WHITE CONCAVE-SIDED DIAMOND	[0AEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E1, 0x003F };
    uint32_t const ces[9] = { 0x0AEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_444)
{
    // 27E1 0061;	
    // (⟡) WHITE CONCAVE-SIDED DIAMOND	[0AEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E1, 0x0061 };
    uint32_t const ces[9] = { 0x0AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_445)
{
    // 27E1 0041;	
    // (⟡) WHITE CONCAVE-SIDED DIAMOND	[0AEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E1, 0x0041 };
    uint32_t const ces[9] = { 0x0AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_446)
{
    // 27E1 0062;	
    // (⟡) WHITE CONCAVE-SIDED DIAMOND	[0AEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E1, 0x0062 };
    uint32_t const ces[9] = { 0x0AEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_447)
{
    // 27E2 0021;	
    // (⟢) WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK	[0AEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E2, 0x0021 };
    uint32_t const ces[9] = { 0x0AEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_448)
{
    // 27E2 003F;	
    // (⟢) WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK	[0AEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E2, 0x003F };
    uint32_t const ces[9] = { 0x0AEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_449)
{
    // 27E2 0061;	
    // (⟢) WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK	[0AEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E2, 0x0061 };
    uint32_t const ces[9] = { 0x0AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_450)
{
    // 27E2 0041;	
    // (⟢) WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK	[0AEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E2, 0x0041 };
    uint32_t const ces[9] = { 0x0AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_451)
{
    // 27E2 0062;	
    // (⟢) WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK	[0AEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E2, 0x0062 };
    uint32_t const ces[9] = { 0x0AEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_452)
{
    // 27E3 0021;	
    // (⟣) WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK	[0AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E3, 0x0021 };
    uint32_t const ces[9] = { 0x0AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_453)
{
    // 27E3 003F;	
    // (⟣) WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK	[0AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E3, 0x003F };
    uint32_t const ces[9] = { 0x0AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_454)
{
    // 27E3 0061;	
    // (⟣) WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK	[0AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E3, 0x0061 };
    uint32_t const ces[9] = { 0x0AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_455)
{
    // 27E3 0041;	
    // (⟣) WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK	[0AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E3, 0x0041 };
    uint32_t const ces[9] = { 0x0AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_456)
{
    // 27E3 0062;	
    // (⟣) WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK	[0AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E3, 0x0062 };
    uint32_t const ces[9] = { 0x0AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_457)
{
    // 27E4 0021;	
    // (⟤) WHITE SQUARE WITH LEFTWARDS TICK	[0AEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E4, 0x0021 };
    uint32_t const ces[9] = { 0x0AEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_458)
{
    // 27E4 003F;	
    // (⟤) WHITE SQUARE WITH LEFTWARDS TICK	[0AEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E4, 0x003F };
    uint32_t const ces[9] = { 0x0AEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_459)
{
    // 27E4 0061;	
    // (⟤) WHITE SQUARE WITH LEFTWARDS TICK	[0AEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E4, 0x0061 };
    uint32_t const ces[9] = { 0x0AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_460)
{
    // 27E4 0041;	
    // (⟤) WHITE SQUARE WITH LEFTWARDS TICK	[0AEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E4, 0x0041 };
    uint32_t const ces[9] = { 0x0AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_461)
{
    // 27E4 0062;	
    // (⟤) WHITE SQUARE WITH LEFTWARDS TICK	[0AEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E4, 0x0062 };
    uint32_t const ces[9] = { 0x0AEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_462)
{
    // 27E5 0021;	
    // (⟥) WHITE SQUARE WITH RIGHTWARDS TICK	[0AEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E5, 0x0021 };
    uint32_t const ces[9] = { 0x0AEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_463)
{
    // 27E5 003F;	
    // (⟥) WHITE SQUARE WITH RIGHTWARDS TICK	[0AEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E5, 0x003F };
    uint32_t const ces[9] = { 0x0AEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_464)
{
    // 27E5 0061;	
    // (⟥) WHITE SQUARE WITH RIGHTWARDS TICK	[0AEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E5, 0x0061 };
    uint32_t const ces[9] = { 0x0AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_465)
{
    // 27E5 0041;	
    // (⟥) WHITE SQUARE WITH RIGHTWARDS TICK	[0AEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E5, 0x0041 };
    uint32_t const ces[9] = { 0x0AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_466)
{
    // 27E5 0062;	
    // (⟥) WHITE SQUARE WITH RIGHTWARDS TICK	[0AEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E5, 0x0062 };
    uint32_t const ces[9] = { 0x0AEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_467)
{
    // 27F0 0021;	
    // (⟰) UPWARDS QUADRUPLE ARROW	[0AF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F0, 0x0021 };
    uint32_t const ces[9] = { 0x0AF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_468)
{
    // 27F0 003F;	
    // (⟰) UPWARDS QUADRUPLE ARROW	[0AF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F0, 0x003F };
    uint32_t const ces[9] = { 0x0AF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_469)
{
    // 27F0 0061;	
    // (⟰) UPWARDS QUADRUPLE ARROW	[0AF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F0, 0x0061 };
    uint32_t const ces[9] = { 0x0AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_470)
{
    // 27F0 0041;	
    // (⟰) UPWARDS QUADRUPLE ARROW	[0AF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F0, 0x0041 };
    uint32_t const ces[9] = { 0x0AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_471)
{
    // 27F0 0062;	
    // (⟰) UPWARDS QUADRUPLE ARROW	[0AF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F0, 0x0062 };
    uint32_t const ces[9] = { 0x0AF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_472)
{
    // 27F1 0021;	
    // (⟱) DOWNWARDS QUADRUPLE ARROW	[0AF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F1, 0x0021 };
    uint32_t const ces[9] = { 0x0AF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_473)
{
    // 27F1 003F;	
    // (⟱) DOWNWARDS QUADRUPLE ARROW	[0AF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F1, 0x003F };
    uint32_t const ces[9] = { 0x0AF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_474)
{
    // 27F1 0061;	
    // (⟱) DOWNWARDS QUADRUPLE ARROW	[0AF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F1, 0x0061 };
    uint32_t const ces[9] = { 0x0AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_475)
{
    // 27F1 0041;	
    // (⟱) DOWNWARDS QUADRUPLE ARROW	[0AF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F1, 0x0041 };
    uint32_t const ces[9] = { 0x0AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_476)
{
    // 27F1 0062;	
    // (⟱) DOWNWARDS QUADRUPLE ARROW	[0AF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F1, 0x0062 };
    uint32_t const ces[9] = { 0x0AF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_477)
{
    // 27F2 0021;	
    // (⟲) ANTICLOCKWISE GAPPED CIRCLE ARROW	[0AF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F2, 0x0021 };
    uint32_t const ces[9] = { 0x0AF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_478)
{
    // 27F2 003F;	
    // (⟲) ANTICLOCKWISE GAPPED CIRCLE ARROW	[0AF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F2, 0x003F };
    uint32_t const ces[9] = { 0x0AF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_479)
{
    // 27F2 0061;	
    // (⟲) ANTICLOCKWISE GAPPED CIRCLE ARROW	[0AF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F2, 0x0061 };
    uint32_t const ces[9] = { 0x0AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_480)
{
    // 27F2 0041;	
    // (⟲) ANTICLOCKWISE GAPPED CIRCLE ARROW	[0AF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F2, 0x0041 };
    uint32_t const ces[9] = { 0x0AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_481)
{
    // 27F2 0062;	
    // (⟲) ANTICLOCKWISE GAPPED CIRCLE ARROW	[0AF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F2, 0x0062 };
    uint32_t const ces[9] = { 0x0AF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_482)
{
    // 27F3 0021;	
    // (⟳) CLOCKWISE GAPPED CIRCLE ARROW	[0AF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F3, 0x0021 };
    uint32_t const ces[9] = { 0x0AF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_483)
{
    // 27F3 003F;	
    // (⟳) CLOCKWISE GAPPED CIRCLE ARROW	[0AF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F3, 0x003F };
    uint32_t const ces[9] = { 0x0AF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_484)
{
    // 27F3 0061;	
    // (⟳) CLOCKWISE GAPPED CIRCLE ARROW	[0AF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F3, 0x0061 };
    uint32_t const ces[9] = { 0x0AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_485)
{
    // 27F3 0041;	
    // (⟳) CLOCKWISE GAPPED CIRCLE ARROW	[0AF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F3, 0x0041 };
    uint32_t const ces[9] = { 0x0AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_486)
{
    // 27F3 0062;	
    // (⟳) CLOCKWISE GAPPED CIRCLE ARROW	[0AF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F3, 0x0062 };
    uint32_t const ces[9] = { 0x0AF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_487)
{
    // 27F4 0021;	
    // (⟴) RIGHT ARROW WITH CIRCLED PLUS	[0AF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F4, 0x0021 };
    uint32_t const ces[9] = { 0x0AF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_488)
{
    // 27F4 003F;	
    // (⟴) RIGHT ARROW WITH CIRCLED PLUS	[0AF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F4, 0x003F };
    uint32_t const ces[9] = { 0x0AF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_489)
{
    // 27F4 0061;	
    // (⟴) RIGHT ARROW WITH CIRCLED PLUS	[0AF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F4, 0x0061 };
    uint32_t const ces[9] = { 0x0AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_490)
{
    // 27F4 0041;	
    // (⟴) RIGHT ARROW WITH CIRCLED PLUS	[0AF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F4, 0x0041 };
    uint32_t const ces[9] = { 0x0AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_491)
{
    // 27F4 0062;	
    // (⟴) RIGHT ARROW WITH CIRCLED PLUS	[0AF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F4, 0x0062 };
    uint32_t const ces[9] = { 0x0AF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_492)
{
    // 27F5 0021;	
    // (⟵) LONG LEFTWARDS ARROW	[0AF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F5, 0x0021 };
    uint32_t const ces[9] = { 0x0AF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_493)
{
    // 27F5 003F;	
    // (⟵) LONG LEFTWARDS ARROW	[0AF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F5, 0x003F };
    uint32_t const ces[9] = { 0x0AF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_494)
{
    // 27F5 0061;	
    // (⟵) LONG LEFTWARDS ARROW	[0AF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F5, 0x0061 };
    uint32_t const ces[9] = { 0x0AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_495)
{
    // 27F5 0041;	
    // (⟵) LONG LEFTWARDS ARROW	[0AF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F5, 0x0041 };
    uint32_t const ces[9] = { 0x0AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_496)
{
    // 27F5 0062;	
    // (⟵) LONG LEFTWARDS ARROW	[0AF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F5, 0x0062 };
    uint32_t const ces[9] = { 0x0AF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_497)
{
    // 27F6 0021;	
    // (⟶) LONG RIGHTWARDS ARROW	[0AF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F6, 0x0021 };
    uint32_t const ces[9] = { 0x0AF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_498)
{
    // 27F6 003F;	
    // (⟶) LONG RIGHTWARDS ARROW	[0AF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F6, 0x003F };
    uint32_t const ces[9] = { 0x0AF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_034_499)
{
    // 27F6 0061;	
    // (⟶) LONG RIGHTWARDS ARROW	[0AF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F6, 0x0061 };
    uint32_t const ces[9] = { 0x0AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

