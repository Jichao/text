// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_231_000)
{
    // A60B 0041;	
    // (ꘋ) VAI SYLLABLE NG	[397C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA60B, 0x0041 };
    uint32_t const ces[9] = { 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_001)
{
    // A60B 0062;	
    // (ꘋ) VAI SYLLABLE NG	[397C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60B, 0x0062 };
    uint32_t const ces[9] = { 0x397C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_002)
{
    // A60C 0021;	
    // (ꘌ) VAI SYLLABLE LENGTHENER	[397D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60C, 0x0021 };
    uint32_t const ces[9] = { 0x397D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_003)
{
    // A60C 003F;	
    // (ꘌ) VAI SYLLABLE LENGTHENER	[397D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60C, 0x003F };
    uint32_t const ces[9] = { 0x397D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_004)
{
    // A60C 0061;	
    // (ꘌ) VAI SYLLABLE LENGTHENER	[397D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60C, 0x0061 };
    uint32_t const ces[9] = { 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_005)
{
    // A60C 0041;	
    // (ꘌ) VAI SYLLABLE LENGTHENER	[397D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA60C, 0x0041 };
    uint32_t const ces[9] = { 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_006)
{
    // A60C 0062;	
    // (ꘌ) VAI SYLLABLE LENGTHENER	[397D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60C, 0x0062 };
    uint32_t const ces[9] = { 0x397D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_007)
{
    // A6A0 0021;	
    // (ꚠ) BAMUM LETTER A	[397E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A0, 0x0021 };
    uint32_t const ces[9] = { 0x397E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_008)
{
    // A6A0 003F;	
    // (ꚠ) BAMUM LETTER A	[397E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A0, 0x003F };
    uint32_t const ces[9] = { 0x397E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_009)
{
    // A6A0 0061;	
    // (ꚠ) BAMUM LETTER A	[397E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A0, 0x0061 };
    uint32_t const ces[9] = { 0x397E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_010)
{
    // A6A0 0041;	
    // (ꚠ) BAMUM LETTER A	[397E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A0, 0x0041 };
    uint32_t const ces[9] = { 0x397E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_011)
{
    // A6A0 0062;	
    // (ꚠ) BAMUM LETTER A	[397E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A0, 0x0062 };
    uint32_t const ces[9] = { 0x397E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_012)
{
    // A6A1 0021;	
    // (ꚡ) BAMUM LETTER KA	[397F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A1, 0x0021 };
    uint32_t const ces[9] = { 0x397F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_013)
{
    // A6A1 003F;	
    // (ꚡ) BAMUM LETTER KA	[397F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A1, 0x003F };
    uint32_t const ces[9] = { 0x397F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_014)
{
    // A6A1 0061;	
    // (ꚡ) BAMUM LETTER KA	[397F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A1, 0x0061 };
    uint32_t const ces[9] = { 0x397F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_015)
{
    // A6A1 0041;	
    // (ꚡ) BAMUM LETTER KA	[397F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A1, 0x0041 };
    uint32_t const ces[9] = { 0x397F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_016)
{
    // A6A1 0062;	
    // (ꚡ) BAMUM LETTER KA	[397F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A1, 0x0062 };
    uint32_t const ces[9] = { 0x397F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_017)
{
    // A6A2 0021;	
    // (ꚢ) BAMUM LETTER U	[3980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A2, 0x0021 };
    uint32_t const ces[9] = { 0x3980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_018)
{
    // A6A2 003F;	
    // (ꚢ) BAMUM LETTER U	[3980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A2, 0x003F };
    uint32_t const ces[9] = { 0x3980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_019)
{
    // A6A2 0061;	
    // (ꚢ) BAMUM LETTER U	[3980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A2, 0x0061 };
    uint32_t const ces[9] = { 0x3980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_020)
{
    // A6A2 0041;	
    // (ꚢ) BAMUM LETTER U	[3980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A2, 0x0041 };
    uint32_t const ces[9] = { 0x3980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_021)
{
    // A6A2 0062;	
    // (ꚢ) BAMUM LETTER U	[3980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A2, 0x0062 };
    uint32_t const ces[9] = { 0x3980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_022)
{
    // A6A3 0021;	
    // (ꚣ) BAMUM LETTER KU	[3981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A3, 0x0021 };
    uint32_t const ces[9] = { 0x3981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_023)
{
    // A6A3 003F;	
    // (ꚣ) BAMUM LETTER KU	[3981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A3, 0x003F };
    uint32_t const ces[9] = { 0x3981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_024)
{
    // A6A3 0061;	
    // (ꚣ) BAMUM LETTER KU	[3981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A3, 0x0061 };
    uint32_t const ces[9] = { 0x3981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_025)
{
    // A6A3 0041;	
    // (ꚣ) BAMUM LETTER KU	[3981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A3, 0x0041 };
    uint32_t const ces[9] = { 0x3981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_026)
{
    // A6A3 0062;	
    // (ꚣ) BAMUM LETTER KU	[3981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A3, 0x0062 };
    uint32_t const ces[9] = { 0x3981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_027)
{
    // A6A4 0021;	
    // (ꚤ) BAMUM LETTER EE	[3982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A4, 0x0021 };
    uint32_t const ces[9] = { 0x3982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_028)
{
    // A6A4 003F;	
    // (ꚤ) BAMUM LETTER EE	[3982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A4, 0x003F };
    uint32_t const ces[9] = { 0x3982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_029)
{
    // A6A4 0061;	
    // (ꚤ) BAMUM LETTER EE	[3982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A4, 0x0061 };
    uint32_t const ces[9] = { 0x3982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_030)
{
    // A6A4 0041;	
    // (ꚤ) BAMUM LETTER EE	[3982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A4, 0x0041 };
    uint32_t const ces[9] = { 0x3982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_031)
{
    // A6A4 0062;	
    // (ꚤ) BAMUM LETTER EE	[3982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A4, 0x0062 };
    uint32_t const ces[9] = { 0x3982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_032)
{
    // A6A5 0021;	
    // (ꚥ) BAMUM LETTER REE	[3983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A5, 0x0021 };
    uint32_t const ces[9] = { 0x3983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_033)
{
    // A6A5 003F;	
    // (ꚥ) BAMUM LETTER REE	[3983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A5, 0x003F };
    uint32_t const ces[9] = { 0x3983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_034)
{
    // A6A5 0061;	
    // (ꚥ) BAMUM LETTER REE	[3983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A5, 0x0061 };
    uint32_t const ces[9] = { 0x3983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_035)
{
    // A6A5 0041;	
    // (ꚥ) BAMUM LETTER REE	[3983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A5, 0x0041 };
    uint32_t const ces[9] = { 0x3983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_036)
{
    // A6A5 0062;	
    // (ꚥ) BAMUM LETTER REE	[3983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A5, 0x0062 };
    uint32_t const ces[9] = { 0x3983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_037)
{
    // A6A6 0021;	
    // (ꚦ) BAMUM LETTER TAE	[3984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A6, 0x0021 };
    uint32_t const ces[9] = { 0x3984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_038)
{
    // A6A6 003F;	
    // (ꚦ) BAMUM LETTER TAE	[3984 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A6, 0x003F };
    uint32_t const ces[9] = { 0x3984, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_039)
{
    // A6A6 0061;	
    // (ꚦ) BAMUM LETTER TAE	[3984 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A6, 0x0061 };
    uint32_t const ces[9] = { 0x3984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_040)
{
    // A6A6 0041;	
    // (ꚦ) BAMUM LETTER TAE	[3984 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A6, 0x0041 };
    uint32_t const ces[9] = { 0x3984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_041)
{
    // A6A6 0062;	
    // (ꚦ) BAMUM LETTER TAE	[3984 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A6, 0x0062 };
    uint32_t const ces[9] = { 0x3984, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_042)
{
    // A6A7 0021;	
    // (ꚧ) BAMUM LETTER O	[3985 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A7, 0x0021 };
    uint32_t const ces[9] = { 0x3985, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_043)
{
    // A6A7 003F;	
    // (ꚧ) BAMUM LETTER O	[3985 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A7, 0x003F };
    uint32_t const ces[9] = { 0x3985, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_044)
{
    // A6A7 0061;	
    // (ꚧ) BAMUM LETTER O	[3985 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A7, 0x0061 };
    uint32_t const ces[9] = { 0x3985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_045)
{
    // A6A7 0041;	
    // (ꚧ) BAMUM LETTER O	[3985 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A7, 0x0041 };
    uint32_t const ces[9] = { 0x3985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_046)
{
    // A6A7 0062;	
    // (ꚧ) BAMUM LETTER O	[3985 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A7, 0x0062 };
    uint32_t const ces[9] = { 0x3985, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_047)
{
    // A6A8 0021;	
    // (ꚨ) BAMUM LETTER NYI	[3986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A8, 0x0021 };
    uint32_t const ces[9] = { 0x3986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_048)
{
    // A6A8 003F;	
    // (ꚨ) BAMUM LETTER NYI	[3986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A8, 0x003F };
    uint32_t const ces[9] = { 0x3986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_049)
{
    // A6A8 0061;	
    // (ꚨ) BAMUM LETTER NYI	[3986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A8, 0x0061 };
    uint32_t const ces[9] = { 0x3986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_050)
{
    // A6A8 0041;	
    // (ꚨ) BAMUM LETTER NYI	[3986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A8, 0x0041 };
    uint32_t const ces[9] = { 0x3986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_051)
{
    // A6A8 0062;	
    // (ꚨ) BAMUM LETTER NYI	[3986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A8, 0x0062 };
    uint32_t const ces[9] = { 0x3986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_052)
{
    // A6A9 0021;	
    // (ꚩ) BAMUM LETTER I	[3987 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A9, 0x0021 };
    uint32_t const ces[9] = { 0x3987, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_053)
{
    // A6A9 003F;	
    // (ꚩ) BAMUM LETTER I	[3987 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A9, 0x003F };
    uint32_t const ces[9] = { 0x3987, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_054)
{
    // A6A9 0061;	
    // (ꚩ) BAMUM LETTER I	[3987 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A9, 0x0061 };
    uint32_t const ces[9] = { 0x3987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_055)
{
    // A6A9 0041;	
    // (ꚩ) BAMUM LETTER I	[3987 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6A9, 0x0041 };
    uint32_t const ces[9] = { 0x3987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_056)
{
    // A6A9 0062;	
    // (ꚩ) BAMUM LETTER I	[3987 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6A9, 0x0062 };
    uint32_t const ces[9] = { 0x3987, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_057)
{
    // A6AA 0021;	
    // (ꚪ) BAMUM LETTER LA	[3988 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AA, 0x0021 };
    uint32_t const ces[9] = { 0x3988, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_058)
{
    // A6AA 003F;	
    // (ꚪ) BAMUM LETTER LA	[3988 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AA, 0x003F };
    uint32_t const ces[9] = { 0x3988, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_059)
{
    // A6AA 0061;	
    // (ꚪ) BAMUM LETTER LA	[3988 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AA, 0x0061 };
    uint32_t const ces[9] = { 0x3988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_060)
{
    // A6AA 0041;	
    // (ꚪ) BAMUM LETTER LA	[3988 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AA, 0x0041 };
    uint32_t const ces[9] = { 0x3988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_061)
{
    // A6AA 0062;	
    // (ꚪ) BAMUM LETTER LA	[3988 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AA, 0x0062 };
    uint32_t const ces[9] = { 0x3988, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_062)
{
    // A6AB 0021;	
    // (ꚫ) BAMUM LETTER PA	[3989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AB, 0x0021 };
    uint32_t const ces[9] = { 0x3989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_063)
{
    // A6AB 003F;	
    // (ꚫ) BAMUM LETTER PA	[3989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AB, 0x003F };
    uint32_t const ces[9] = { 0x3989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_064)
{
    // A6AB 0061;	
    // (ꚫ) BAMUM LETTER PA	[3989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AB, 0x0061 };
    uint32_t const ces[9] = { 0x3989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_065)
{
    // A6AB 0041;	
    // (ꚫ) BAMUM LETTER PA	[3989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AB, 0x0041 };
    uint32_t const ces[9] = { 0x3989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_066)
{
    // A6AB 0062;	
    // (ꚫ) BAMUM LETTER PA	[3989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AB, 0x0062 };
    uint32_t const ces[9] = { 0x3989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_067)
{
    // A6AC 0021;	
    // (ꚬ) BAMUM LETTER RII	[398A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AC, 0x0021 };
    uint32_t const ces[9] = { 0x398A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_068)
{
    // A6AC 003F;	
    // (ꚬ) BAMUM LETTER RII	[398A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AC, 0x003F };
    uint32_t const ces[9] = { 0x398A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_069)
{
    // A6AC 0061;	
    // (ꚬ) BAMUM LETTER RII	[398A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AC, 0x0061 };
    uint32_t const ces[9] = { 0x398A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_070)
{
    // A6AC 0041;	
    // (ꚬ) BAMUM LETTER RII	[398A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AC, 0x0041 };
    uint32_t const ces[9] = { 0x398A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_071)
{
    // A6AC 0062;	
    // (ꚬ) BAMUM LETTER RII	[398A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AC, 0x0062 };
    uint32_t const ces[9] = { 0x398A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_072)
{
    // A6AD 0021;	
    // (ꚭ) BAMUM LETTER RIEE	[398B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AD, 0x0021 };
    uint32_t const ces[9] = { 0x398B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_073)
{
    // A6AD 003F;	
    // (ꚭ) BAMUM LETTER RIEE	[398B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AD, 0x003F };
    uint32_t const ces[9] = { 0x398B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_074)
{
    // A6AD 0061;	
    // (ꚭ) BAMUM LETTER RIEE	[398B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AD, 0x0061 };
    uint32_t const ces[9] = { 0x398B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_075)
{
    // A6AD 0041;	
    // (ꚭ) BAMUM LETTER RIEE	[398B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AD, 0x0041 };
    uint32_t const ces[9] = { 0x398B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_076)
{
    // A6AD 0062;	
    // (ꚭ) BAMUM LETTER RIEE	[398B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AD, 0x0062 };
    uint32_t const ces[9] = { 0x398B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_077)
{
    // A6AE 0021;	
    // (ꚮ) BAMUM LETTER LEEEE	[398C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AE, 0x0021 };
    uint32_t const ces[9] = { 0x398C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_078)
{
    // A6AE 003F;	
    // (ꚮ) BAMUM LETTER LEEEE	[398C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AE, 0x003F };
    uint32_t const ces[9] = { 0x398C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_079)
{
    // A6AE 0061;	
    // (ꚮ) BAMUM LETTER LEEEE	[398C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AE, 0x0061 };
    uint32_t const ces[9] = { 0x398C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_080)
{
    // A6AE 0041;	
    // (ꚮ) BAMUM LETTER LEEEE	[398C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AE, 0x0041 };
    uint32_t const ces[9] = { 0x398C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_081)
{
    // A6AE 0062;	
    // (ꚮ) BAMUM LETTER LEEEE	[398C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AE, 0x0062 };
    uint32_t const ces[9] = { 0x398C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_082)
{
    // A6AF 0021;	
    // (ꚯ) BAMUM LETTER MEEEE	[398D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AF, 0x0021 };
    uint32_t const ces[9] = { 0x398D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_083)
{
    // A6AF 003F;	
    // (ꚯ) BAMUM LETTER MEEEE	[398D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AF, 0x003F };
    uint32_t const ces[9] = { 0x398D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_084)
{
    // A6AF 0061;	
    // (ꚯ) BAMUM LETTER MEEEE	[398D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AF, 0x0061 };
    uint32_t const ces[9] = { 0x398D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_085)
{
    // A6AF 0041;	
    // (ꚯ) BAMUM LETTER MEEEE	[398D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6AF, 0x0041 };
    uint32_t const ces[9] = { 0x398D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_086)
{
    // A6AF 0062;	
    // (ꚯ) BAMUM LETTER MEEEE	[398D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6AF, 0x0062 };
    uint32_t const ces[9] = { 0x398D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_087)
{
    // A6B0 0021;	
    // (ꚰ) BAMUM LETTER TAA	[398E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B0, 0x0021 };
    uint32_t const ces[9] = { 0x398E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_088)
{
    // A6B0 003F;	
    // (ꚰ) BAMUM LETTER TAA	[398E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B0, 0x003F };
    uint32_t const ces[9] = { 0x398E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_089)
{
    // A6B0 0061;	
    // (ꚰ) BAMUM LETTER TAA	[398E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B0, 0x0061 };
    uint32_t const ces[9] = { 0x398E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_090)
{
    // A6B0 0041;	
    // (ꚰ) BAMUM LETTER TAA	[398E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B0, 0x0041 };
    uint32_t const ces[9] = { 0x398E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_091)
{
    // A6B0 0062;	
    // (ꚰ) BAMUM LETTER TAA	[398E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B0, 0x0062 };
    uint32_t const ces[9] = { 0x398E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_092)
{
    // A6B1 0021;	
    // (ꚱ) BAMUM LETTER NDAA	[398F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B1, 0x0021 };
    uint32_t const ces[9] = { 0x398F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_093)
{
    // A6B1 003F;	
    // (ꚱ) BAMUM LETTER NDAA	[398F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B1, 0x003F };
    uint32_t const ces[9] = { 0x398F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_094)
{
    // A6B1 0061;	
    // (ꚱ) BAMUM LETTER NDAA	[398F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B1, 0x0061 };
    uint32_t const ces[9] = { 0x398F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_095)
{
    // A6B1 0041;	
    // (ꚱ) BAMUM LETTER NDAA	[398F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B1, 0x0041 };
    uint32_t const ces[9] = { 0x398F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_096)
{
    // A6B1 0062;	
    // (ꚱ) BAMUM LETTER NDAA	[398F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B1, 0x0062 };
    uint32_t const ces[9] = { 0x398F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_097)
{
    // A6B2 0021;	
    // (ꚲ) BAMUM LETTER NJAEM	[3990 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B2, 0x0021 };
    uint32_t const ces[9] = { 0x3990, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_098)
{
    // A6B2 003F;	
    // (ꚲ) BAMUM LETTER NJAEM	[3990 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B2, 0x003F };
    uint32_t const ces[9] = { 0x3990, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_099)
{
    // A6B2 0061;	
    // (ꚲ) BAMUM LETTER NJAEM	[3990 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B2, 0x0061 };
    uint32_t const ces[9] = { 0x3990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_100)
{
    // A6B2 0041;	
    // (ꚲ) BAMUM LETTER NJAEM	[3990 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B2, 0x0041 };
    uint32_t const ces[9] = { 0x3990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_101)
{
    // A6B2 0062;	
    // (ꚲ) BAMUM LETTER NJAEM	[3990 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B2, 0x0062 };
    uint32_t const ces[9] = { 0x3990, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_102)
{
    // A6B3 0021;	
    // (ꚳ) BAMUM LETTER M	[3991 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B3, 0x0021 };
    uint32_t const ces[9] = { 0x3991, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_103)
{
    // A6B3 003F;	
    // (ꚳ) BAMUM LETTER M	[3991 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B3, 0x003F };
    uint32_t const ces[9] = { 0x3991, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_104)
{
    // A6B3 0061;	
    // (ꚳ) BAMUM LETTER M	[3991 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B3, 0x0061 };
    uint32_t const ces[9] = { 0x3991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_105)
{
    // A6B3 0041;	
    // (ꚳ) BAMUM LETTER M	[3991 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B3, 0x0041 };
    uint32_t const ces[9] = { 0x3991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_106)
{
    // A6B3 0062;	
    // (ꚳ) BAMUM LETTER M	[3991 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B3, 0x0062 };
    uint32_t const ces[9] = { 0x3991, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_107)
{
    // A6B4 0021;	
    // (ꚴ) BAMUM LETTER SUU	[3992 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B4, 0x0021 };
    uint32_t const ces[9] = { 0x3992, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_108)
{
    // A6B4 003F;	
    // (ꚴ) BAMUM LETTER SUU	[3992 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B4, 0x003F };
    uint32_t const ces[9] = { 0x3992, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_109)
{
    // A6B4 0061;	
    // (ꚴ) BAMUM LETTER SUU	[3992 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B4, 0x0061 };
    uint32_t const ces[9] = { 0x3992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_110)
{
    // A6B4 0041;	
    // (ꚴ) BAMUM LETTER SUU	[3992 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B4, 0x0041 };
    uint32_t const ces[9] = { 0x3992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_111)
{
    // A6B4 0062;	
    // (ꚴ) BAMUM LETTER SUU	[3992 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B4, 0x0062 };
    uint32_t const ces[9] = { 0x3992, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_112)
{
    // A6B5 0021;	
    // (ꚵ) BAMUM LETTER MU	[3993 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B5, 0x0021 };
    uint32_t const ces[9] = { 0x3993, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_113)
{
    // A6B5 003F;	
    // (ꚵ) BAMUM LETTER MU	[3993 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B5, 0x003F };
    uint32_t const ces[9] = { 0x3993, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_114)
{
    // A6B5 0061;	
    // (ꚵ) BAMUM LETTER MU	[3993 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B5, 0x0061 };
    uint32_t const ces[9] = { 0x3993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_115)
{
    // A6B5 0041;	
    // (ꚵ) BAMUM LETTER MU	[3993 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B5, 0x0041 };
    uint32_t const ces[9] = { 0x3993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_116)
{
    // A6B5 0062;	
    // (ꚵ) BAMUM LETTER MU	[3993 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B5, 0x0062 };
    uint32_t const ces[9] = { 0x3993, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_117)
{
    // A6B6 0021;	
    // (ꚶ) BAMUM LETTER SHII	[3994 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B6, 0x0021 };
    uint32_t const ces[9] = { 0x3994, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_118)
{
    // A6B6 003F;	
    // (ꚶ) BAMUM LETTER SHII	[3994 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B6, 0x003F };
    uint32_t const ces[9] = { 0x3994, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_119)
{
    // A6B6 0061;	
    // (ꚶ) BAMUM LETTER SHII	[3994 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B6, 0x0061 };
    uint32_t const ces[9] = { 0x3994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_120)
{
    // A6B6 0041;	
    // (ꚶ) BAMUM LETTER SHII	[3994 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B6, 0x0041 };
    uint32_t const ces[9] = { 0x3994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_121)
{
    // A6B6 0062;	
    // (ꚶ) BAMUM LETTER SHII	[3994 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B6, 0x0062 };
    uint32_t const ces[9] = { 0x3994, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_122)
{
    // A6B7 0021;	
    // (ꚷ) BAMUM LETTER SI	[3995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B7, 0x0021 };
    uint32_t const ces[9] = { 0x3995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_123)
{
    // A6B7 003F;	
    // (ꚷ) BAMUM LETTER SI	[3995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B7, 0x003F };
    uint32_t const ces[9] = { 0x3995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_124)
{
    // A6B7 0061;	
    // (ꚷ) BAMUM LETTER SI	[3995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B7, 0x0061 };
    uint32_t const ces[9] = { 0x3995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_125)
{
    // A6B7 0041;	
    // (ꚷ) BAMUM LETTER SI	[3995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B7, 0x0041 };
    uint32_t const ces[9] = { 0x3995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_126)
{
    // A6B7 0062;	
    // (ꚷ) BAMUM LETTER SI	[3995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B7, 0x0062 };
    uint32_t const ces[9] = { 0x3995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_127)
{
    // A6B8 0021;	
    // (ꚸ) BAMUM LETTER SHEUX	[3996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B8, 0x0021 };
    uint32_t const ces[9] = { 0x3996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_128)
{
    // A6B8 003F;	
    // (ꚸ) BAMUM LETTER SHEUX	[3996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B8, 0x003F };
    uint32_t const ces[9] = { 0x3996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_129)
{
    // A6B8 0061;	
    // (ꚸ) BAMUM LETTER SHEUX	[3996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B8, 0x0061 };
    uint32_t const ces[9] = { 0x3996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_130)
{
    // A6B8 0041;	
    // (ꚸ) BAMUM LETTER SHEUX	[3996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B8, 0x0041 };
    uint32_t const ces[9] = { 0x3996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_131)
{
    // A6B8 0062;	
    // (ꚸ) BAMUM LETTER SHEUX	[3996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B8, 0x0062 };
    uint32_t const ces[9] = { 0x3996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_132)
{
    // A6B9 0021;	
    // (ꚹ) BAMUM LETTER SEUX	[3997 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B9, 0x0021 };
    uint32_t const ces[9] = { 0x3997, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_133)
{
    // A6B9 003F;	
    // (ꚹ) BAMUM LETTER SEUX	[3997 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B9, 0x003F };
    uint32_t const ces[9] = { 0x3997, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_134)
{
    // A6B9 0061;	
    // (ꚹ) BAMUM LETTER SEUX	[3997 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B9, 0x0061 };
    uint32_t const ces[9] = { 0x3997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_135)
{
    // A6B9 0041;	
    // (ꚹ) BAMUM LETTER SEUX	[3997 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6B9, 0x0041 };
    uint32_t const ces[9] = { 0x3997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_136)
{
    // A6B9 0062;	
    // (ꚹ) BAMUM LETTER SEUX	[3997 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6B9, 0x0062 };
    uint32_t const ces[9] = { 0x3997, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_137)
{
    // A6BA 0021;	
    // (ꚺ) BAMUM LETTER KYEE	[3998 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BA, 0x0021 };
    uint32_t const ces[9] = { 0x3998, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_138)
{
    // A6BA 003F;	
    // (ꚺ) BAMUM LETTER KYEE	[3998 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BA, 0x003F };
    uint32_t const ces[9] = { 0x3998, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_139)
{
    // A6BA 0061;	
    // (ꚺ) BAMUM LETTER KYEE	[3998 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BA, 0x0061 };
    uint32_t const ces[9] = { 0x3998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_140)
{
    // A6BA 0041;	
    // (ꚺ) BAMUM LETTER KYEE	[3998 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BA, 0x0041 };
    uint32_t const ces[9] = { 0x3998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_141)
{
    // A6BA 0062;	
    // (ꚺ) BAMUM LETTER KYEE	[3998 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BA, 0x0062 };
    uint32_t const ces[9] = { 0x3998, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_142)
{
    // A6BB 0021;	
    // (ꚻ) BAMUM LETTER KET	[3999 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BB, 0x0021 };
    uint32_t const ces[9] = { 0x3999, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_143)
{
    // A6BB 003F;	
    // (ꚻ) BAMUM LETTER KET	[3999 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BB, 0x003F };
    uint32_t const ces[9] = { 0x3999, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_144)
{
    // A6BB 0061;	
    // (ꚻ) BAMUM LETTER KET	[3999 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BB, 0x0061 };
    uint32_t const ces[9] = { 0x3999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_145)
{
    // A6BB 0041;	
    // (ꚻ) BAMUM LETTER KET	[3999 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BB, 0x0041 };
    uint32_t const ces[9] = { 0x3999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_146)
{
    // A6BB 0062;	
    // (ꚻ) BAMUM LETTER KET	[3999 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BB, 0x0062 };
    uint32_t const ces[9] = { 0x3999, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_147)
{
    // A6BC 0021;	
    // (ꚼ) BAMUM LETTER NUAE	[399A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BC, 0x0021 };
    uint32_t const ces[9] = { 0x399A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_148)
{
    // A6BC 003F;	
    // (ꚼ) BAMUM LETTER NUAE	[399A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BC, 0x003F };
    uint32_t const ces[9] = { 0x399A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_149)
{
    // A6BC 0061;	
    // (ꚼ) BAMUM LETTER NUAE	[399A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BC, 0x0061 };
    uint32_t const ces[9] = { 0x399A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_150)
{
    // A6BC 0041;	
    // (ꚼ) BAMUM LETTER NUAE	[399A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BC, 0x0041 };
    uint32_t const ces[9] = { 0x399A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_151)
{
    // A6BC 0062;	
    // (ꚼ) BAMUM LETTER NUAE	[399A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BC, 0x0062 };
    uint32_t const ces[9] = { 0x399A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_152)
{
    // A6BD 0021;	
    // (ꚽ) BAMUM LETTER NU	[399B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BD, 0x0021 };
    uint32_t const ces[9] = { 0x399B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_153)
{
    // A6BD 003F;	
    // (ꚽ) BAMUM LETTER NU	[399B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BD, 0x003F };
    uint32_t const ces[9] = { 0x399B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_154)
{
    // A6BD 0061;	
    // (ꚽ) BAMUM LETTER NU	[399B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BD, 0x0061 };
    uint32_t const ces[9] = { 0x399B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_155)
{
    // A6BD 0041;	
    // (ꚽ) BAMUM LETTER NU	[399B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BD, 0x0041 };
    uint32_t const ces[9] = { 0x399B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_156)
{
    // A6BD 0062;	
    // (ꚽ) BAMUM LETTER NU	[399B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BD, 0x0062 };
    uint32_t const ces[9] = { 0x399B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_157)
{
    // A6BE 0021;	
    // (ꚾ) BAMUM LETTER NJUAE	[399C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BE, 0x0021 };
    uint32_t const ces[9] = { 0x399C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_158)
{
    // A6BE 003F;	
    // (ꚾ) BAMUM LETTER NJUAE	[399C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BE, 0x003F };
    uint32_t const ces[9] = { 0x399C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_159)
{
    // A6BE 0061;	
    // (ꚾ) BAMUM LETTER NJUAE	[399C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BE, 0x0061 };
    uint32_t const ces[9] = { 0x399C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_160)
{
    // A6BE 0041;	
    // (ꚾ) BAMUM LETTER NJUAE	[399C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BE, 0x0041 };
    uint32_t const ces[9] = { 0x399C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_161)
{
    // A6BE 0062;	
    // (ꚾ) BAMUM LETTER NJUAE	[399C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BE, 0x0062 };
    uint32_t const ces[9] = { 0x399C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_162)
{
    // A6BF 0021;	
    // (ꚿ) BAMUM LETTER YOQ	[399D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BF, 0x0021 };
    uint32_t const ces[9] = { 0x399D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_163)
{
    // A6BF 003F;	
    // (ꚿ) BAMUM LETTER YOQ	[399D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BF, 0x003F };
    uint32_t const ces[9] = { 0x399D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_164)
{
    // A6BF 0061;	
    // (ꚿ) BAMUM LETTER YOQ	[399D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BF, 0x0061 };
    uint32_t const ces[9] = { 0x399D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_165)
{
    // A6BF 0041;	
    // (ꚿ) BAMUM LETTER YOQ	[399D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6BF, 0x0041 };
    uint32_t const ces[9] = { 0x399D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_166)
{
    // A6BF 0062;	
    // (ꚿ) BAMUM LETTER YOQ	[399D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6BF, 0x0062 };
    uint32_t const ces[9] = { 0x399D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_167)
{
    // A6C0 0021;	
    // (ꛀ) BAMUM LETTER SHU	[399E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C0, 0x0021 };
    uint32_t const ces[9] = { 0x399E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_168)
{
    // A6C0 003F;	
    // (ꛀ) BAMUM LETTER SHU	[399E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C0, 0x003F };
    uint32_t const ces[9] = { 0x399E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_169)
{
    // A6C0 0061;	
    // (ꛀ) BAMUM LETTER SHU	[399E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C0, 0x0061 };
    uint32_t const ces[9] = { 0x399E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_170)
{
    // A6C0 0041;	
    // (ꛀ) BAMUM LETTER SHU	[399E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C0, 0x0041 };
    uint32_t const ces[9] = { 0x399E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_171)
{
    // A6C0 0062;	
    // (ꛀ) BAMUM LETTER SHU	[399E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C0, 0x0062 };
    uint32_t const ces[9] = { 0x399E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_172)
{
    // A6C1 0021;	
    // (ꛁ) BAMUM LETTER YUQ	[399F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C1, 0x0021 };
    uint32_t const ces[9] = { 0x399F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_173)
{
    // A6C1 003F;	
    // (ꛁ) BAMUM LETTER YUQ	[399F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C1, 0x003F };
    uint32_t const ces[9] = { 0x399F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_174)
{
    // A6C1 0061;	
    // (ꛁ) BAMUM LETTER YUQ	[399F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C1, 0x0061 };
    uint32_t const ces[9] = { 0x399F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_175)
{
    // A6C1 0041;	
    // (ꛁ) BAMUM LETTER YUQ	[399F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C1, 0x0041 };
    uint32_t const ces[9] = { 0x399F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_176)
{
    // A6C1 0062;	
    // (ꛁ) BAMUM LETTER YUQ	[399F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C1, 0x0062 };
    uint32_t const ces[9] = { 0x399F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_177)
{
    // A6C2 0021;	
    // (ꛂ) BAMUM LETTER YA	[39A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C2, 0x0021 };
    uint32_t const ces[9] = { 0x39A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_178)
{
    // A6C2 003F;	
    // (ꛂ) BAMUM LETTER YA	[39A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C2, 0x003F };
    uint32_t const ces[9] = { 0x39A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_179)
{
    // A6C2 0061;	
    // (ꛂ) BAMUM LETTER YA	[39A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C2, 0x0061 };
    uint32_t const ces[9] = { 0x39A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_180)
{
    // A6C2 0041;	
    // (ꛂ) BAMUM LETTER YA	[39A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C2, 0x0041 };
    uint32_t const ces[9] = { 0x39A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_181)
{
    // A6C2 0062;	
    // (ꛂ) BAMUM LETTER YA	[39A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C2, 0x0062 };
    uint32_t const ces[9] = { 0x39A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_182)
{
    // A6C3 0021;	
    // (ꛃ) BAMUM LETTER NSHA	[39A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C3, 0x0021 };
    uint32_t const ces[9] = { 0x39A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_183)
{
    // A6C3 003F;	
    // (ꛃ) BAMUM LETTER NSHA	[39A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C3, 0x003F };
    uint32_t const ces[9] = { 0x39A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_184)
{
    // A6C3 0061;	
    // (ꛃ) BAMUM LETTER NSHA	[39A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C3, 0x0061 };
    uint32_t const ces[9] = { 0x39A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_185)
{
    // A6C3 0041;	
    // (ꛃ) BAMUM LETTER NSHA	[39A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C3, 0x0041 };
    uint32_t const ces[9] = { 0x39A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_186)
{
    // A6C3 0062;	
    // (ꛃ) BAMUM LETTER NSHA	[39A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C3, 0x0062 };
    uint32_t const ces[9] = { 0x39A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_187)
{
    // A6C4 0021;	
    // (ꛄ) BAMUM LETTER KEUX	[39A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C4, 0x0021 };
    uint32_t const ces[9] = { 0x39A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_188)
{
    // A6C4 003F;	
    // (ꛄ) BAMUM LETTER KEUX	[39A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C4, 0x003F };
    uint32_t const ces[9] = { 0x39A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_189)
{
    // A6C4 0061;	
    // (ꛄ) BAMUM LETTER KEUX	[39A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C4, 0x0061 };
    uint32_t const ces[9] = { 0x39A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_190)
{
    // A6C4 0041;	
    // (ꛄ) BAMUM LETTER KEUX	[39A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C4, 0x0041 };
    uint32_t const ces[9] = { 0x39A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_191)
{
    // A6C4 0062;	
    // (ꛄ) BAMUM LETTER KEUX	[39A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C4, 0x0062 };
    uint32_t const ces[9] = { 0x39A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_192)
{
    // A6C5 0021;	
    // (ꛅ) BAMUM LETTER PEUX	[39A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C5, 0x0021 };
    uint32_t const ces[9] = { 0x39A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_193)
{
    // A6C5 003F;	
    // (ꛅ) BAMUM LETTER PEUX	[39A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C5, 0x003F };
    uint32_t const ces[9] = { 0x39A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_194)
{
    // A6C5 0061;	
    // (ꛅ) BAMUM LETTER PEUX	[39A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C5, 0x0061 };
    uint32_t const ces[9] = { 0x39A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_195)
{
    // A6C5 0041;	
    // (ꛅ) BAMUM LETTER PEUX	[39A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C5, 0x0041 };
    uint32_t const ces[9] = { 0x39A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_196)
{
    // A6C5 0062;	
    // (ꛅ) BAMUM LETTER PEUX	[39A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C5, 0x0062 };
    uint32_t const ces[9] = { 0x39A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_197)
{
    // A6C6 0021;	
    // (ꛆ) BAMUM LETTER NJEE	[39A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C6, 0x0021 };
    uint32_t const ces[9] = { 0x39A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_198)
{
    // A6C6 003F;	
    // (ꛆ) BAMUM LETTER NJEE	[39A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C6, 0x003F };
    uint32_t const ces[9] = { 0x39A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_199)
{
    // A6C6 0061;	
    // (ꛆ) BAMUM LETTER NJEE	[39A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C6, 0x0061 };
    uint32_t const ces[9] = { 0x39A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_200)
{
    // A6C6 0041;	
    // (ꛆ) BAMUM LETTER NJEE	[39A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C6, 0x0041 };
    uint32_t const ces[9] = { 0x39A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_201)
{
    // A6C6 0062;	
    // (ꛆ) BAMUM LETTER NJEE	[39A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C6, 0x0062 };
    uint32_t const ces[9] = { 0x39A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_202)
{
    // A6C7 0021;	
    // (ꛇ) BAMUM LETTER NTEE	[39A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C7, 0x0021 };
    uint32_t const ces[9] = { 0x39A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_203)
{
    // A6C7 003F;	
    // (ꛇ) BAMUM LETTER NTEE	[39A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C7, 0x003F };
    uint32_t const ces[9] = { 0x39A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_204)
{
    // A6C7 0061;	
    // (ꛇ) BAMUM LETTER NTEE	[39A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C7, 0x0061 };
    uint32_t const ces[9] = { 0x39A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_205)
{
    // A6C7 0041;	
    // (ꛇ) BAMUM LETTER NTEE	[39A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C7, 0x0041 };
    uint32_t const ces[9] = { 0x39A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_206)
{
    // A6C7 0062;	
    // (ꛇ) BAMUM LETTER NTEE	[39A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C7, 0x0062 };
    uint32_t const ces[9] = { 0x39A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_207)
{
    // A6C8 0021;	
    // (ꛈ) BAMUM LETTER PUE	[39A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C8, 0x0021 };
    uint32_t const ces[9] = { 0x39A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_208)
{
    // A6C8 003F;	
    // (ꛈ) BAMUM LETTER PUE	[39A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C8, 0x003F };
    uint32_t const ces[9] = { 0x39A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_209)
{
    // A6C8 0061;	
    // (ꛈ) BAMUM LETTER PUE	[39A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C8, 0x0061 };
    uint32_t const ces[9] = { 0x39A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_210)
{
    // A6C8 0041;	
    // (ꛈ) BAMUM LETTER PUE	[39A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C8, 0x0041 };
    uint32_t const ces[9] = { 0x39A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_211)
{
    // A6C8 0062;	
    // (ꛈ) BAMUM LETTER PUE	[39A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C8, 0x0062 };
    uint32_t const ces[9] = { 0x39A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_212)
{
    // A6C9 0021;	
    // (ꛉ) BAMUM LETTER WUE	[39A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C9, 0x0021 };
    uint32_t const ces[9] = { 0x39A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_213)
{
    // A6C9 003F;	
    // (ꛉ) BAMUM LETTER WUE	[39A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C9, 0x003F };
    uint32_t const ces[9] = { 0x39A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_214)
{
    // A6C9 0061;	
    // (ꛉ) BAMUM LETTER WUE	[39A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C9, 0x0061 };
    uint32_t const ces[9] = { 0x39A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_215)
{
    // A6C9 0041;	
    // (ꛉ) BAMUM LETTER WUE	[39A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6C9, 0x0041 };
    uint32_t const ces[9] = { 0x39A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_216)
{
    // A6C9 0062;	
    // (ꛉ) BAMUM LETTER WUE	[39A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6C9, 0x0062 };
    uint32_t const ces[9] = { 0x39A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_217)
{
    // A6CA 0021;	
    // (ꛊ) BAMUM LETTER PEE	[39A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CA, 0x0021 };
    uint32_t const ces[9] = { 0x39A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_218)
{
    // A6CA 003F;	
    // (ꛊ) BAMUM LETTER PEE	[39A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CA, 0x003F };
    uint32_t const ces[9] = { 0x39A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_219)
{
    // A6CA 0061;	
    // (ꛊ) BAMUM LETTER PEE	[39A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CA, 0x0061 };
    uint32_t const ces[9] = { 0x39A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_220)
{
    // A6CA 0041;	
    // (ꛊ) BAMUM LETTER PEE	[39A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CA, 0x0041 };
    uint32_t const ces[9] = { 0x39A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_221)
{
    // A6CA 0062;	
    // (ꛊ) BAMUM LETTER PEE	[39A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CA, 0x0062 };
    uint32_t const ces[9] = { 0x39A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_222)
{
    // A6CB 0021;	
    // (ꛋ) BAMUM LETTER FEE	[39A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CB, 0x0021 };
    uint32_t const ces[9] = { 0x39A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_223)
{
    // A6CB 003F;	
    // (ꛋ) BAMUM LETTER FEE	[39A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CB, 0x003F };
    uint32_t const ces[9] = { 0x39A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_224)
{
    // A6CB 0061;	
    // (ꛋ) BAMUM LETTER FEE	[39A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CB, 0x0061 };
    uint32_t const ces[9] = { 0x39A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_225)
{
    // A6CB 0041;	
    // (ꛋ) BAMUM LETTER FEE	[39A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CB, 0x0041 };
    uint32_t const ces[9] = { 0x39A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_226)
{
    // A6CB 0062;	
    // (ꛋ) BAMUM LETTER FEE	[39A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CB, 0x0062 };
    uint32_t const ces[9] = { 0x39A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_227)
{
    // A6CC 0021;	
    // (ꛌ) BAMUM LETTER RU	[39AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CC, 0x0021 };
    uint32_t const ces[9] = { 0x39AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_228)
{
    // A6CC 003F;	
    // (ꛌ) BAMUM LETTER RU	[39AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CC, 0x003F };
    uint32_t const ces[9] = { 0x39AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_229)
{
    // A6CC 0061;	
    // (ꛌ) BAMUM LETTER RU	[39AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CC, 0x0061 };
    uint32_t const ces[9] = { 0x39AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_230)
{
    // A6CC 0041;	
    // (ꛌ) BAMUM LETTER RU	[39AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CC, 0x0041 };
    uint32_t const ces[9] = { 0x39AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_231)
{
    // A6CC 0062;	
    // (ꛌ) BAMUM LETTER RU	[39AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CC, 0x0062 };
    uint32_t const ces[9] = { 0x39AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_232)
{
    // A6CD 0021;	
    // (ꛍ) BAMUM LETTER LU	[39AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CD, 0x0021 };
    uint32_t const ces[9] = { 0x39AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_233)
{
    // A6CD 003F;	
    // (ꛍ) BAMUM LETTER LU	[39AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CD, 0x003F };
    uint32_t const ces[9] = { 0x39AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_234)
{
    // A6CD 0061;	
    // (ꛍ) BAMUM LETTER LU	[39AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CD, 0x0061 };
    uint32_t const ces[9] = { 0x39AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_235)
{
    // A6CD 0041;	
    // (ꛍ) BAMUM LETTER LU	[39AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CD, 0x0041 };
    uint32_t const ces[9] = { 0x39AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_236)
{
    // A6CD 0062;	
    // (ꛍ) BAMUM LETTER LU	[39AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CD, 0x0062 };
    uint32_t const ces[9] = { 0x39AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_237)
{
    // A6CE 0021;	
    // (ꛎ) BAMUM LETTER MI	[39AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CE, 0x0021 };
    uint32_t const ces[9] = { 0x39AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_238)
{
    // A6CE 003F;	
    // (ꛎ) BAMUM LETTER MI	[39AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CE, 0x003F };
    uint32_t const ces[9] = { 0x39AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_239)
{
    // A6CE 0061;	
    // (ꛎ) BAMUM LETTER MI	[39AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CE, 0x0061 };
    uint32_t const ces[9] = { 0x39AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_240)
{
    // A6CE 0041;	
    // (ꛎ) BAMUM LETTER MI	[39AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CE, 0x0041 };
    uint32_t const ces[9] = { 0x39AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_241)
{
    // A6CE 0062;	
    // (ꛎ) BAMUM LETTER MI	[39AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CE, 0x0062 };
    uint32_t const ces[9] = { 0x39AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_242)
{
    // A6CF 0021;	
    // (ꛏ) BAMUM LETTER NI	[39AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CF, 0x0021 };
    uint32_t const ces[9] = { 0x39AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_243)
{
    // A6CF 003F;	
    // (ꛏ) BAMUM LETTER NI	[39AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CF, 0x003F };
    uint32_t const ces[9] = { 0x39AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_244)
{
    // A6CF 0061;	
    // (ꛏ) BAMUM LETTER NI	[39AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CF, 0x0061 };
    uint32_t const ces[9] = { 0x39AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_245)
{
    // A6CF 0041;	
    // (ꛏ) BAMUM LETTER NI	[39AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6CF, 0x0041 };
    uint32_t const ces[9] = { 0x39AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_246)
{
    // A6CF 0062;	
    // (ꛏ) BAMUM LETTER NI	[39AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6CF, 0x0062 };
    uint32_t const ces[9] = { 0x39AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_247)
{
    // A6D0 0021;	
    // (ꛐ) BAMUM LETTER REUX	[39AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D0, 0x0021 };
    uint32_t const ces[9] = { 0x39AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_248)
{
    // A6D0 003F;	
    // (ꛐ) BAMUM LETTER REUX	[39AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D0, 0x003F };
    uint32_t const ces[9] = { 0x39AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_249)
{
    // A6D0 0061;	
    // (ꛐ) BAMUM LETTER REUX	[39AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D0, 0x0061 };
    uint32_t const ces[9] = { 0x39AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_250)
{
    // A6D0 0041;	
    // (ꛐ) BAMUM LETTER REUX	[39AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D0, 0x0041 };
    uint32_t const ces[9] = { 0x39AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_251)
{
    // A6D0 0062;	
    // (ꛐ) BAMUM LETTER REUX	[39AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D0, 0x0062 };
    uint32_t const ces[9] = { 0x39AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_252)
{
    // A6D1 0021;	
    // (ꛑ) BAMUM LETTER RAE	[39AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D1, 0x0021 };
    uint32_t const ces[9] = { 0x39AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_253)
{
    // A6D1 003F;	
    // (ꛑ) BAMUM LETTER RAE	[39AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D1, 0x003F };
    uint32_t const ces[9] = { 0x39AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_254)
{
    // A6D1 0061;	
    // (ꛑ) BAMUM LETTER RAE	[39AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D1, 0x0061 };
    uint32_t const ces[9] = { 0x39AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_255)
{
    // A6D1 0041;	
    // (ꛑ) BAMUM LETTER RAE	[39AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D1, 0x0041 };
    uint32_t const ces[9] = { 0x39AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_256)
{
    // A6D1 0062;	
    // (ꛑ) BAMUM LETTER RAE	[39AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D1, 0x0062 };
    uint32_t const ces[9] = { 0x39AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_257)
{
    // A6D2 0021;	
    // (ꛒ) BAMUM LETTER KEN	[39B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D2, 0x0021 };
    uint32_t const ces[9] = { 0x39B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_258)
{
    // A6D2 003F;	
    // (ꛒ) BAMUM LETTER KEN	[39B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D2, 0x003F };
    uint32_t const ces[9] = { 0x39B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_259)
{
    // A6D2 0061;	
    // (ꛒ) BAMUM LETTER KEN	[39B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D2, 0x0061 };
    uint32_t const ces[9] = { 0x39B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_260)
{
    // A6D2 0041;	
    // (ꛒ) BAMUM LETTER KEN	[39B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D2, 0x0041 };
    uint32_t const ces[9] = { 0x39B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_261)
{
    // A6D2 0062;	
    // (ꛒ) BAMUM LETTER KEN	[39B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D2, 0x0062 };
    uint32_t const ces[9] = { 0x39B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_262)
{
    // A6D3 0021;	
    // (ꛓ) BAMUM LETTER NGKWAEN	[39B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D3, 0x0021 };
    uint32_t const ces[9] = { 0x39B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_263)
{
    // A6D3 003F;	
    // (ꛓ) BAMUM LETTER NGKWAEN	[39B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D3, 0x003F };
    uint32_t const ces[9] = { 0x39B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_264)
{
    // A6D3 0061;	
    // (ꛓ) BAMUM LETTER NGKWAEN	[39B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D3, 0x0061 };
    uint32_t const ces[9] = { 0x39B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_265)
{
    // A6D3 0041;	
    // (ꛓ) BAMUM LETTER NGKWAEN	[39B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D3, 0x0041 };
    uint32_t const ces[9] = { 0x39B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_266)
{
    // A6D3 0062;	
    // (ꛓ) BAMUM LETTER NGKWAEN	[39B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D3, 0x0062 };
    uint32_t const ces[9] = { 0x39B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_267)
{
    // A6D4 0021;	
    // (ꛔ) BAMUM LETTER NGGA	[39B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D4, 0x0021 };
    uint32_t const ces[9] = { 0x39B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_268)
{
    // A6D4 003F;	
    // (ꛔ) BAMUM LETTER NGGA	[39B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D4, 0x003F };
    uint32_t const ces[9] = { 0x39B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_269)
{
    // A6D4 0061;	
    // (ꛔ) BAMUM LETTER NGGA	[39B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D4, 0x0061 };
    uint32_t const ces[9] = { 0x39B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_270)
{
    // A6D4 0041;	
    // (ꛔ) BAMUM LETTER NGGA	[39B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D4, 0x0041 };
    uint32_t const ces[9] = { 0x39B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_271)
{
    // A6D4 0062;	
    // (ꛔ) BAMUM LETTER NGGA	[39B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D4, 0x0062 };
    uint32_t const ces[9] = { 0x39B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_272)
{
    // A6D5 0021;	
    // (ꛕ) BAMUM LETTER NGA	[39B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D5, 0x0021 };
    uint32_t const ces[9] = { 0x39B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_273)
{
    // A6D5 003F;	
    // (ꛕ) BAMUM LETTER NGA	[39B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D5, 0x003F };
    uint32_t const ces[9] = { 0x39B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_274)
{
    // A6D5 0061;	
    // (ꛕ) BAMUM LETTER NGA	[39B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D5, 0x0061 };
    uint32_t const ces[9] = { 0x39B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_275)
{
    // A6D5 0041;	
    // (ꛕ) BAMUM LETTER NGA	[39B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D5, 0x0041 };
    uint32_t const ces[9] = { 0x39B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_276)
{
    // A6D5 0062;	
    // (ꛕ) BAMUM LETTER NGA	[39B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D5, 0x0062 };
    uint32_t const ces[9] = { 0x39B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_277)
{
    // A6D6 0021;	
    // (ꛖ) BAMUM LETTER SHO	[39B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D6, 0x0021 };
    uint32_t const ces[9] = { 0x39B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_278)
{
    // A6D6 003F;	
    // (ꛖ) BAMUM LETTER SHO	[39B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D6, 0x003F };
    uint32_t const ces[9] = { 0x39B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_279)
{
    // A6D6 0061;	
    // (ꛖ) BAMUM LETTER SHO	[39B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D6, 0x0061 };
    uint32_t const ces[9] = { 0x39B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_280)
{
    // A6D6 0041;	
    // (ꛖ) BAMUM LETTER SHO	[39B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D6, 0x0041 };
    uint32_t const ces[9] = { 0x39B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_281)
{
    // A6D6 0062;	
    // (ꛖ) BAMUM LETTER SHO	[39B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D6, 0x0062 };
    uint32_t const ces[9] = { 0x39B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_282)
{
    // A6D7 0021;	
    // (ꛗ) BAMUM LETTER PUAE	[39B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D7, 0x0021 };
    uint32_t const ces[9] = { 0x39B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_283)
{
    // A6D7 003F;	
    // (ꛗ) BAMUM LETTER PUAE	[39B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D7, 0x003F };
    uint32_t const ces[9] = { 0x39B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_284)
{
    // A6D7 0061;	
    // (ꛗ) BAMUM LETTER PUAE	[39B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D7, 0x0061 };
    uint32_t const ces[9] = { 0x39B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_285)
{
    // A6D7 0041;	
    // (ꛗ) BAMUM LETTER PUAE	[39B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D7, 0x0041 };
    uint32_t const ces[9] = { 0x39B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_286)
{
    // A6D7 0062;	
    // (ꛗ) BAMUM LETTER PUAE	[39B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D7, 0x0062 };
    uint32_t const ces[9] = { 0x39B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_287)
{
    // A6D8 0021;	
    // (ꛘ) BAMUM LETTER FU	[39B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D8, 0x0021 };
    uint32_t const ces[9] = { 0x39B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_288)
{
    // A6D8 003F;	
    // (ꛘ) BAMUM LETTER FU	[39B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D8, 0x003F };
    uint32_t const ces[9] = { 0x39B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_289)
{
    // A6D8 0061;	
    // (ꛘ) BAMUM LETTER FU	[39B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D8, 0x0061 };
    uint32_t const ces[9] = { 0x39B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_290)
{
    // A6D8 0041;	
    // (ꛘ) BAMUM LETTER FU	[39B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D8, 0x0041 };
    uint32_t const ces[9] = { 0x39B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_291)
{
    // A6D8 0062;	
    // (ꛘ) BAMUM LETTER FU	[39B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D8, 0x0062 };
    uint32_t const ces[9] = { 0x39B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_292)
{
    // A6D9 0021;	
    // (ꛙ) BAMUM LETTER FOM	[39B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D9, 0x0021 };
    uint32_t const ces[9] = { 0x39B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_293)
{
    // A6D9 003F;	
    // (ꛙ) BAMUM LETTER FOM	[39B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D9, 0x003F };
    uint32_t const ces[9] = { 0x39B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_294)
{
    // A6D9 0061;	
    // (ꛙ) BAMUM LETTER FOM	[39B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D9, 0x0061 };
    uint32_t const ces[9] = { 0x39B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_295)
{
    // A6D9 0041;	
    // (ꛙ) BAMUM LETTER FOM	[39B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6D9, 0x0041 };
    uint32_t const ces[9] = { 0x39B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_296)
{
    // A6D9 0062;	
    // (ꛙ) BAMUM LETTER FOM	[39B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6D9, 0x0062 };
    uint32_t const ces[9] = { 0x39B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_297)
{
    // A6DA 0021;	
    // (ꛚ) BAMUM LETTER WA	[39B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DA, 0x0021 };
    uint32_t const ces[9] = { 0x39B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_298)
{
    // A6DA 003F;	
    // (ꛚ) BAMUM LETTER WA	[39B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DA, 0x003F };
    uint32_t const ces[9] = { 0x39B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_299)
{
    // A6DA 0061;	
    // (ꛚ) BAMUM LETTER WA	[39B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DA, 0x0061 };
    uint32_t const ces[9] = { 0x39B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_300)
{
    // A6DA 0041;	
    // (ꛚ) BAMUM LETTER WA	[39B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DA, 0x0041 };
    uint32_t const ces[9] = { 0x39B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_301)
{
    // A6DA 0062;	
    // (ꛚ) BAMUM LETTER WA	[39B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DA, 0x0062 };
    uint32_t const ces[9] = { 0x39B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_302)
{
    // A6DB 0021;	
    // (ꛛ) BAMUM LETTER NA	[39B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DB, 0x0021 };
    uint32_t const ces[9] = { 0x39B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_303)
{
    // A6DB 003F;	
    // (ꛛ) BAMUM LETTER NA	[39B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DB, 0x003F };
    uint32_t const ces[9] = { 0x39B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_304)
{
    // A6DB 0061;	
    // (ꛛ) BAMUM LETTER NA	[39B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DB, 0x0061 };
    uint32_t const ces[9] = { 0x39B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_305)
{
    // A6DB 0041;	
    // (ꛛ) BAMUM LETTER NA	[39B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DB, 0x0041 };
    uint32_t const ces[9] = { 0x39B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_306)
{
    // A6DB 0062;	
    // (ꛛ) BAMUM LETTER NA	[39B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DB, 0x0062 };
    uint32_t const ces[9] = { 0x39B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_307)
{
    // A6DC 0021;	
    // (ꛜ) BAMUM LETTER LI	[39BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DC, 0x0021 };
    uint32_t const ces[9] = { 0x39BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_308)
{
    // A6DC 003F;	
    // (ꛜ) BAMUM LETTER LI	[39BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DC, 0x003F };
    uint32_t const ces[9] = { 0x39BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_309)
{
    // A6DC 0061;	
    // (ꛜ) BAMUM LETTER LI	[39BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DC, 0x0061 };
    uint32_t const ces[9] = { 0x39BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_310)
{
    // A6DC 0041;	
    // (ꛜ) BAMUM LETTER LI	[39BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DC, 0x0041 };
    uint32_t const ces[9] = { 0x39BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_311)
{
    // A6DC 0062;	
    // (ꛜ) BAMUM LETTER LI	[39BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DC, 0x0062 };
    uint32_t const ces[9] = { 0x39BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_312)
{
    // A6DD 0021;	
    // (ꛝ) BAMUM LETTER PI	[39BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DD, 0x0021 };
    uint32_t const ces[9] = { 0x39BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_313)
{
    // A6DD 003F;	
    // (ꛝ) BAMUM LETTER PI	[39BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DD, 0x003F };
    uint32_t const ces[9] = { 0x39BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_314)
{
    // A6DD 0061;	
    // (ꛝ) BAMUM LETTER PI	[39BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DD, 0x0061 };
    uint32_t const ces[9] = { 0x39BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_315)
{
    // A6DD 0041;	
    // (ꛝ) BAMUM LETTER PI	[39BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DD, 0x0041 };
    uint32_t const ces[9] = { 0x39BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_316)
{
    // A6DD 0062;	
    // (ꛝ) BAMUM LETTER PI	[39BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DD, 0x0062 };
    uint32_t const ces[9] = { 0x39BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_317)
{
    // A6DE 0021;	
    // (ꛞ) BAMUM LETTER LOQ	[39BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DE, 0x0021 };
    uint32_t const ces[9] = { 0x39BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_318)
{
    // A6DE 003F;	
    // (ꛞ) BAMUM LETTER LOQ	[39BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DE, 0x003F };
    uint32_t const ces[9] = { 0x39BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_319)
{
    // A6DE 0061;	
    // (ꛞ) BAMUM LETTER LOQ	[39BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DE, 0x0061 };
    uint32_t const ces[9] = { 0x39BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_320)
{
    // A6DE 0041;	
    // (ꛞ) BAMUM LETTER LOQ	[39BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DE, 0x0041 };
    uint32_t const ces[9] = { 0x39BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_321)
{
    // A6DE 0062;	
    // (ꛞ) BAMUM LETTER LOQ	[39BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DE, 0x0062 };
    uint32_t const ces[9] = { 0x39BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_322)
{
    // A6DF 0021;	
    // (ꛟ) BAMUM LETTER KO	[39BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DF, 0x0021 };
    uint32_t const ces[9] = { 0x39BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_323)
{
    // A6DF 003F;	
    // (ꛟ) BAMUM LETTER KO	[39BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DF, 0x003F };
    uint32_t const ces[9] = { 0x39BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_324)
{
    // A6DF 0061;	
    // (ꛟ) BAMUM LETTER KO	[39BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DF, 0x0061 };
    uint32_t const ces[9] = { 0x39BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_325)
{
    // A6DF 0041;	
    // (ꛟ) BAMUM LETTER KO	[39BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6DF, 0x0041 };
    uint32_t const ces[9] = { 0x39BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_326)
{
    // A6DF 0062;	
    // (ꛟ) BAMUM LETTER KO	[39BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6DF, 0x0062 };
    uint32_t const ces[9] = { 0x39BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_327)
{
    // A6E0 0021;	
    // (ꛠ) BAMUM LETTER MBEN	[39BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E0, 0x0021 };
    uint32_t const ces[9] = { 0x39BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_328)
{
    // A6E0 003F;	
    // (ꛠ) BAMUM LETTER MBEN	[39BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E0, 0x003F };
    uint32_t const ces[9] = { 0x39BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_329)
{
    // A6E0 0061;	
    // (ꛠ) BAMUM LETTER MBEN	[39BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E0, 0x0061 };
    uint32_t const ces[9] = { 0x39BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_330)
{
    // A6E0 0041;	
    // (ꛠ) BAMUM LETTER MBEN	[39BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E0, 0x0041 };
    uint32_t const ces[9] = { 0x39BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_331)
{
    // A6E0 0062;	
    // (ꛠ) BAMUM LETTER MBEN	[39BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E0, 0x0062 };
    uint32_t const ces[9] = { 0x39BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_332)
{
    // A6E1 0021;	
    // (ꛡ) BAMUM LETTER REN	[39BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E1, 0x0021 };
    uint32_t const ces[9] = { 0x39BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_333)
{
    // A6E1 003F;	
    // (ꛡ) BAMUM LETTER REN	[39BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E1, 0x003F };
    uint32_t const ces[9] = { 0x39BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_334)
{
    // A6E1 0061;	
    // (ꛡ) BAMUM LETTER REN	[39BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E1, 0x0061 };
    uint32_t const ces[9] = { 0x39BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_335)
{
    // A6E1 0041;	
    // (ꛡ) BAMUM LETTER REN	[39BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E1, 0x0041 };
    uint32_t const ces[9] = { 0x39BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_336)
{
    // A6E1 0062;	
    // (ꛡ) BAMUM LETTER REN	[39BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E1, 0x0062 };
    uint32_t const ces[9] = { 0x39BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_337)
{
    // A6E2 0021;	
    // (ꛢ) BAMUM LETTER MEN	[39C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E2, 0x0021 };
    uint32_t const ces[9] = { 0x39C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_338)
{
    // A6E2 003F;	
    // (ꛢ) BAMUM LETTER MEN	[39C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E2, 0x003F };
    uint32_t const ces[9] = { 0x39C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_339)
{
    // A6E2 0061;	
    // (ꛢ) BAMUM LETTER MEN	[39C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E2, 0x0061 };
    uint32_t const ces[9] = { 0x39C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_340)
{
    // A6E2 0041;	
    // (ꛢ) BAMUM LETTER MEN	[39C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E2, 0x0041 };
    uint32_t const ces[9] = { 0x39C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_341)
{
    // A6E2 0062;	
    // (ꛢ) BAMUM LETTER MEN	[39C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E2, 0x0062 };
    uint32_t const ces[9] = { 0x39C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_342)
{
    // A6E3 0021;	
    // (ꛣ) BAMUM LETTER MA	[39C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E3, 0x0021 };
    uint32_t const ces[9] = { 0x39C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_343)
{
    // A6E3 003F;	
    // (ꛣ) BAMUM LETTER MA	[39C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E3, 0x003F };
    uint32_t const ces[9] = { 0x39C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_344)
{
    // A6E3 0061;	
    // (ꛣ) BAMUM LETTER MA	[39C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E3, 0x0061 };
    uint32_t const ces[9] = { 0x39C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_345)
{
    // A6E3 0041;	
    // (ꛣ) BAMUM LETTER MA	[39C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E3, 0x0041 };
    uint32_t const ces[9] = { 0x39C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_346)
{
    // A6E3 0062;	
    // (ꛣ) BAMUM LETTER MA	[39C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E3, 0x0062 };
    uint32_t const ces[9] = { 0x39C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_347)
{
    // A6E4 0021;	
    // (ꛤ) BAMUM LETTER TI	[39C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E4, 0x0021 };
    uint32_t const ces[9] = { 0x39C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_348)
{
    // A6E4 003F;	
    // (ꛤ) BAMUM LETTER TI	[39C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E4, 0x003F };
    uint32_t const ces[9] = { 0x39C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_349)
{
    // A6E4 0061;	
    // (ꛤ) BAMUM LETTER TI	[39C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E4, 0x0061 };
    uint32_t const ces[9] = { 0x39C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_350)
{
    // A6E4 0041;	
    // (ꛤ) BAMUM LETTER TI	[39C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E4, 0x0041 };
    uint32_t const ces[9] = { 0x39C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_351)
{
    // A6E4 0062;	
    // (ꛤ) BAMUM LETTER TI	[39C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E4, 0x0062 };
    uint32_t const ces[9] = { 0x39C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_352)
{
    // A6E5 0021;	
    // (ꛥ) BAMUM LETTER KI	[39C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E5, 0x0021 };
    uint32_t const ces[9] = { 0x39C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_353)
{
    // A6E5 003F;	
    // (ꛥ) BAMUM LETTER KI	[39C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E5, 0x003F };
    uint32_t const ces[9] = { 0x39C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_354)
{
    // A6E5 0061;	
    // (ꛥ) BAMUM LETTER KI	[39C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E5, 0x0061 };
    uint32_t const ces[9] = { 0x39C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_355)
{
    // A6E5 0041;	
    // (ꛥ) BAMUM LETTER KI	[39C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E5, 0x0041 };
    uint32_t const ces[9] = { 0x39C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_356)
{
    // A6E5 0062;	
    // (ꛥ) BAMUM LETTER KI	[39C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E5, 0x0062 };
    uint32_t const ces[9] = { 0x39C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_357)
{
    // A6E6 0021;	
    // (ꛦ) BAMUM LETTER MO	[39C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E6, 0x0021 };
    uint32_t const ces[9] = { 0x39C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_358)
{
    // A6E6 003F;	
    // (ꛦ) BAMUM LETTER MO	[39C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E6, 0x003F };
    uint32_t const ces[9] = { 0x39C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_359)
{
    // A6E6 0061;	
    // (ꛦ) BAMUM LETTER MO	[39C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E6, 0x0061 };
    uint32_t const ces[9] = { 0x39C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_360)
{
    // A6E6 0041;	
    // (ꛦ) BAMUM LETTER MO	[39C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E6, 0x0041 };
    uint32_t const ces[9] = { 0x39C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_361)
{
    // A6E6 0062;	
    // (ꛦ) BAMUM LETTER MO	[39C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E6, 0x0062 };
    uint32_t const ces[9] = { 0x39C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_362)
{
    // A6E7 0021;	
    // (ꛧ) BAMUM LETTER MBAA	[39C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E7, 0x0021 };
    uint32_t const ces[9] = { 0x39C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_363)
{
    // A6E7 003F;	
    // (ꛧ) BAMUM LETTER MBAA	[39C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E7, 0x003F };
    uint32_t const ces[9] = { 0x39C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_364)
{
    // A6E7 0061;	
    // (ꛧ) BAMUM LETTER MBAA	[39C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E7, 0x0061 };
    uint32_t const ces[9] = { 0x39C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_365)
{
    // A6E7 0041;	
    // (ꛧ) BAMUM LETTER MBAA	[39C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E7, 0x0041 };
    uint32_t const ces[9] = { 0x39C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_366)
{
    // A6E7 0062;	
    // (ꛧ) BAMUM LETTER MBAA	[39C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E7, 0x0062 };
    uint32_t const ces[9] = { 0x39C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_367)
{
    // A6E8 0021;	
    // (ꛨ) BAMUM LETTER TET	[39C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E8, 0x0021 };
    uint32_t const ces[9] = { 0x39C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_368)
{
    // A6E8 003F;	
    // (ꛨ) BAMUM LETTER TET	[39C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E8, 0x003F };
    uint32_t const ces[9] = { 0x39C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_369)
{
    // A6E8 0061;	
    // (ꛨ) BAMUM LETTER TET	[39C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E8, 0x0061 };
    uint32_t const ces[9] = { 0x39C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_370)
{
    // A6E8 0041;	
    // (ꛨ) BAMUM LETTER TET	[39C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E8, 0x0041 };
    uint32_t const ces[9] = { 0x39C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_371)
{
    // A6E8 0062;	
    // (ꛨ) BAMUM LETTER TET	[39C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E8, 0x0062 };
    uint32_t const ces[9] = { 0x39C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_372)
{
    // A6E9 0021;	
    // (ꛩ) BAMUM LETTER KPA	[39C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E9, 0x0021 };
    uint32_t const ces[9] = { 0x39C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_373)
{
    // A6E9 003F;	
    // (ꛩ) BAMUM LETTER KPA	[39C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E9, 0x003F };
    uint32_t const ces[9] = { 0x39C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_374)
{
    // A6E9 0061;	
    // (ꛩ) BAMUM LETTER KPA	[39C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E9, 0x0061 };
    uint32_t const ces[9] = { 0x39C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_375)
{
    // A6E9 0041;	
    // (ꛩ) BAMUM LETTER KPA	[39C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6E9, 0x0041 };
    uint32_t const ces[9] = { 0x39C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_376)
{
    // A6E9 0062;	
    // (ꛩ) BAMUM LETTER KPA	[39C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6E9, 0x0062 };
    uint32_t const ces[9] = { 0x39C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_377)
{
    // A6EA 0021;	
    // (ꛪ) BAMUM LETTER TEN	[39C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EA, 0x0021 };
    uint32_t const ces[9] = { 0x39C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_378)
{
    // A6EA 003F;	
    // (ꛪ) BAMUM LETTER TEN	[39C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EA, 0x003F };
    uint32_t const ces[9] = { 0x39C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_379)
{
    // A6EA 0061;	
    // (ꛪ) BAMUM LETTER TEN	[39C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EA, 0x0061 };
    uint32_t const ces[9] = { 0x39C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_380)
{
    // A6EA 0041;	
    // (ꛪ) BAMUM LETTER TEN	[39C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6EA, 0x0041 };
    uint32_t const ces[9] = { 0x39C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_381)
{
    // A6EA 0062;	
    // (ꛪ) BAMUM LETTER TEN	[39C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EA, 0x0062 };
    uint32_t const ces[9] = { 0x39C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_382)
{
    // A6EB 0021;	
    // (ꛫ) BAMUM LETTER NTUU	[39C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EB, 0x0021 };
    uint32_t const ces[9] = { 0x39C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_383)
{
    // A6EB 003F;	
    // (ꛫ) BAMUM LETTER NTUU	[39C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EB, 0x003F };
    uint32_t const ces[9] = { 0x39C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_384)
{
    // A6EB 0061;	
    // (ꛫ) BAMUM LETTER NTUU	[39C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EB, 0x0061 };
    uint32_t const ces[9] = { 0x39C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_385)
{
    // A6EB 0041;	
    // (ꛫ) BAMUM LETTER NTUU	[39C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6EB, 0x0041 };
    uint32_t const ces[9] = { 0x39C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_386)
{
    // A6EB 0062;	
    // (ꛫ) BAMUM LETTER NTUU	[39C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EB, 0x0062 };
    uint32_t const ces[9] = { 0x39C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_387)
{
    // A6EC 0021;	
    // (ꛬ) BAMUM LETTER SAMBA	[39CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EC, 0x0021 };
    uint32_t const ces[9] = { 0x39CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_388)
{
    // A6EC 003F;	
    // (ꛬ) BAMUM LETTER SAMBA	[39CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EC, 0x003F };
    uint32_t const ces[9] = { 0x39CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_389)
{
    // A6EC 0061;	
    // (ꛬ) BAMUM LETTER SAMBA	[39CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EC, 0x0061 };
    uint32_t const ces[9] = { 0x39CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_390)
{
    // A6EC 0041;	
    // (ꛬ) BAMUM LETTER SAMBA	[39CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6EC, 0x0041 };
    uint32_t const ces[9] = { 0x39CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_391)
{
    // A6EC 0062;	
    // (ꛬ) BAMUM LETTER SAMBA	[39CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EC, 0x0062 };
    uint32_t const ces[9] = { 0x39CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_392)
{
    // A6ED 0021;	
    // (ꛭ) BAMUM LETTER FAAMAE	[39CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6ED, 0x0021 };
    uint32_t const ces[9] = { 0x39CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_393)
{
    // A6ED 003F;	
    // (ꛭ) BAMUM LETTER FAAMAE	[39CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6ED, 0x003F };
    uint32_t const ces[9] = { 0x39CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_394)
{
    // A6ED 0061;	
    // (ꛭ) BAMUM LETTER FAAMAE	[39CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6ED, 0x0061 };
    uint32_t const ces[9] = { 0x39CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_395)
{
    // A6ED 0041;	
    // (ꛭ) BAMUM LETTER FAAMAE	[39CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6ED, 0x0041 };
    uint32_t const ces[9] = { 0x39CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_396)
{
    // A6ED 0062;	
    // (ꛭ) BAMUM LETTER FAAMAE	[39CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6ED, 0x0062 };
    uint32_t const ces[9] = { 0x39CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_397)
{
    // A6EE 0021;	
    // (ꛮ) BAMUM LETTER KOVUU	[39CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EE, 0x0021 };
    uint32_t const ces[9] = { 0x39CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_398)
{
    // A6EE 003F;	
    // (ꛮ) BAMUM LETTER KOVUU	[39CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EE, 0x003F };
    uint32_t const ces[9] = { 0x39CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_399)
{
    // A6EE 0061;	
    // (ꛮ) BAMUM LETTER KOVUU	[39CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EE, 0x0061 };
    uint32_t const ces[9] = { 0x39CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_400)
{
    // A6EE 0041;	
    // (ꛮ) BAMUM LETTER KOVUU	[39CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6EE, 0x0041 };
    uint32_t const ces[9] = { 0x39CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_401)
{
    // A6EE 0062;	
    // (ꛮ) BAMUM LETTER KOVUU	[39CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EE, 0x0062 };
    uint32_t const ces[9] = { 0x39CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_402)
{
    // A6EF 0021;	
    // (ꛯ) BAMUM LETTER KOGHOM	[39CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EF, 0x0021 };
    uint32_t const ces[9] = { 0x39CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_403)
{
    // A6EF 003F;	
    // (ꛯ) BAMUM LETTER KOGHOM	[39CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EF, 0x003F };
    uint32_t const ces[9] = { 0x39CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_404)
{
    // A6EF 0061;	
    // (ꛯ) BAMUM LETTER KOGHOM	[39CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EF, 0x0061 };
    uint32_t const ces[9] = { 0x39CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_405)
{
    // A6EF 0041;	
    // (ꛯ) BAMUM LETTER KOGHOM	[39CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6EF, 0x0041 };
    uint32_t const ces[9] = { 0x39CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_406)
{
    // A6EF 0062;	
    // (ꛯ) BAMUM LETTER KOGHOM	[39CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6EF, 0x0062 };
    uint32_t const ces[9] = { 0x39CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_407)
{
    // 16800 0021;	
    // (𖠀) BAMUM LETTER PHASE-A NGKUE MFON	[39CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16800, 0x0021 };
    uint32_t const ces[9] = { 0x39CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_408)
{
    // 16800 003F;	
    // (𖠀) BAMUM LETTER PHASE-A NGKUE MFON	[39CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16800, 0x003F };
    uint32_t const ces[9] = { 0x39CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_409)
{
    // 16800 0061;	
    // (𖠀) BAMUM LETTER PHASE-A NGKUE MFON	[39CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16800, 0x0061 };
    uint32_t const ces[9] = { 0x39CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_410)
{
    // 16800 0041;	
    // (𖠀) BAMUM LETTER PHASE-A NGKUE MFON	[39CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16800, 0x0041 };
    uint32_t const ces[9] = { 0x39CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_411)
{
    // 16800 0062;	
    // (𖠀) BAMUM LETTER PHASE-A NGKUE MFON	[39CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16800, 0x0062 };
    uint32_t const ces[9] = { 0x39CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_412)
{
    // 16801 0021;	
    // (𖠁) BAMUM LETTER PHASE-A GBIEE FON	[39CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16801, 0x0021 };
    uint32_t const ces[9] = { 0x39CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_413)
{
    // 16801 003F;	
    // (𖠁) BAMUM LETTER PHASE-A GBIEE FON	[39CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16801, 0x003F };
    uint32_t const ces[9] = { 0x39CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_414)
{
    // 16801 0061;	
    // (𖠁) BAMUM LETTER PHASE-A GBIEE FON	[39CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16801, 0x0061 };
    uint32_t const ces[9] = { 0x39CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_415)
{
    // 16801 0041;	
    // (𖠁) BAMUM LETTER PHASE-A GBIEE FON	[39CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16801, 0x0041 };
    uint32_t const ces[9] = { 0x39CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_416)
{
    // 16801 0062;	
    // (𖠁) BAMUM LETTER PHASE-A GBIEE FON	[39CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16801, 0x0062 };
    uint32_t const ces[9] = { 0x39CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_417)
{
    // 16802 0021;	
    // (𖠂) BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE	[39D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16802, 0x0021 };
    uint32_t const ces[9] = { 0x39D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_418)
{
    // 16802 003F;	
    // (𖠂) BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE	[39D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16802, 0x003F };
    uint32_t const ces[9] = { 0x39D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_419)
{
    // 16802 0061;	
    // (𖠂) BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE	[39D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16802, 0x0061 };
    uint32_t const ces[9] = { 0x39D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_420)
{
    // 16802 0041;	
    // (𖠂) BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE	[39D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16802, 0x0041 };
    uint32_t const ces[9] = { 0x39D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_421)
{
    // 16802 0062;	
    // (𖠂) BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE	[39D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16802, 0x0062 };
    uint32_t const ces[9] = { 0x39D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_422)
{
    // 16803 0021;	
    // (𖠃) BAMUM LETTER PHASE-A PON MFON PIPAEMBA	[39D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16803, 0x0021 };
    uint32_t const ces[9] = { 0x39D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_423)
{
    // 16803 003F;	
    // (𖠃) BAMUM LETTER PHASE-A PON MFON PIPAEMBA	[39D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16803, 0x003F };
    uint32_t const ces[9] = { 0x39D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_424)
{
    // 16803 0061;	
    // (𖠃) BAMUM LETTER PHASE-A PON MFON PIPAEMBA	[39D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16803, 0x0061 };
    uint32_t const ces[9] = { 0x39D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_425)
{
    // 16803 0041;	
    // (𖠃) BAMUM LETTER PHASE-A PON MFON PIPAEMBA	[39D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16803, 0x0041 };
    uint32_t const ces[9] = { 0x39D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_426)
{
    // 16803 0062;	
    // (𖠃) BAMUM LETTER PHASE-A PON MFON PIPAEMBA	[39D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16803, 0x0062 };
    uint32_t const ces[9] = { 0x39D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_427)
{
    // 16804 0021;	
    // (𖠄) BAMUM LETTER PHASE-A NAA MFON	[39D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16804, 0x0021 };
    uint32_t const ces[9] = { 0x39D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_428)
{
    // 16804 003F;	
    // (𖠄) BAMUM LETTER PHASE-A NAA MFON	[39D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16804, 0x003F };
    uint32_t const ces[9] = { 0x39D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_429)
{
    // 16804 0061;	
    // (𖠄) BAMUM LETTER PHASE-A NAA MFON	[39D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16804, 0x0061 };
    uint32_t const ces[9] = { 0x39D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_430)
{
    // 16804 0041;	
    // (𖠄) BAMUM LETTER PHASE-A NAA MFON	[39D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16804, 0x0041 };
    uint32_t const ces[9] = { 0x39D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_431)
{
    // 16804 0062;	
    // (𖠄) BAMUM LETTER PHASE-A NAA MFON	[39D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16804, 0x0062 };
    uint32_t const ces[9] = { 0x39D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_432)
{
    // 16805 0021;	
    // (𖠅) BAMUM LETTER PHASE-A SHUENSHUET	[39D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16805, 0x0021 };
    uint32_t const ces[9] = { 0x39D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_433)
{
    // 16805 003F;	
    // (𖠅) BAMUM LETTER PHASE-A SHUENSHUET	[39D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16805, 0x003F };
    uint32_t const ces[9] = { 0x39D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_434)
{
    // 16805 0061;	
    // (𖠅) BAMUM LETTER PHASE-A SHUENSHUET	[39D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16805, 0x0061 };
    uint32_t const ces[9] = { 0x39D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_435)
{
    // 16805 0041;	
    // (𖠅) BAMUM LETTER PHASE-A SHUENSHUET	[39D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16805, 0x0041 };
    uint32_t const ces[9] = { 0x39D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_436)
{
    // 16805 0062;	
    // (𖠅) BAMUM LETTER PHASE-A SHUENSHUET	[39D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16805, 0x0062 };
    uint32_t const ces[9] = { 0x39D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_437)
{
    // 16806 0021;	
    // (𖠆) BAMUM LETTER PHASE-A TITA MFON	[39D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16806, 0x0021 };
    uint32_t const ces[9] = { 0x39D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_438)
{
    // 16806 003F;	
    // (𖠆) BAMUM LETTER PHASE-A TITA MFON	[39D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16806, 0x003F };
    uint32_t const ces[9] = { 0x39D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_439)
{
    // 16806 0061;	
    // (𖠆) BAMUM LETTER PHASE-A TITA MFON	[39D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16806, 0x0061 };
    uint32_t const ces[9] = { 0x39D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_440)
{
    // 16806 0041;	
    // (𖠆) BAMUM LETTER PHASE-A TITA MFON	[39D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16806, 0x0041 };
    uint32_t const ces[9] = { 0x39D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_441)
{
    // 16806 0062;	
    // (𖠆) BAMUM LETTER PHASE-A TITA MFON	[39D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16806, 0x0062 };
    uint32_t const ces[9] = { 0x39D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_442)
{
    // 16807 0021;	
    // (𖠇) BAMUM LETTER PHASE-A NZA MFON	[39D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16807, 0x0021 };
    uint32_t const ces[9] = { 0x39D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_443)
{
    // 16807 003F;	
    // (𖠇) BAMUM LETTER PHASE-A NZA MFON	[39D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16807, 0x003F };
    uint32_t const ces[9] = { 0x39D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_444)
{
    // 16807 0061;	
    // (𖠇) BAMUM LETTER PHASE-A NZA MFON	[39D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16807, 0x0061 };
    uint32_t const ces[9] = { 0x39D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_445)
{
    // 16807 0041;	
    // (𖠇) BAMUM LETTER PHASE-A NZA MFON	[39D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16807, 0x0041 };
    uint32_t const ces[9] = { 0x39D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_446)
{
    // 16807 0062;	
    // (𖠇) BAMUM LETTER PHASE-A NZA MFON	[39D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16807, 0x0062 };
    uint32_t const ces[9] = { 0x39D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_447)
{
    // 16808 0021;	
    // (𖠈) BAMUM LETTER PHASE-A SHINDA PA NJI	[39D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16808, 0x0021 };
    uint32_t const ces[9] = { 0x39D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_448)
{
    // 16808 003F;	
    // (𖠈) BAMUM LETTER PHASE-A SHINDA PA NJI	[39D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16808, 0x003F };
    uint32_t const ces[9] = { 0x39D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_449)
{
    // 16808 0061;	
    // (𖠈) BAMUM LETTER PHASE-A SHINDA PA NJI	[39D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16808, 0x0061 };
    uint32_t const ces[9] = { 0x39D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_450)
{
    // 16808 0041;	
    // (𖠈) BAMUM LETTER PHASE-A SHINDA PA NJI	[39D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16808, 0x0041 };
    uint32_t const ces[9] = { 0x39D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_451)
{
    // 16808 0062;	
    // (𖠈) BAMUM LETTER PHASE-A SHINDA PA NJI	[39D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16808, 0x0062 };
    uint32_t const ces[9] = { 0x39D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_452)
{
    // 16809 0021;	
    // (𖠉) BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE	[39D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16809, 0x0021 };
    uint32_t const ces[9] = { 0x39D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_453)
{
    // 16809 003F;	
    // (𖠉) BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE	[39D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16809, 0x003F };
    uint32_t const ces[9] = { 0x39D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_454)
{
    // 16809 0061;	
    // (𖠉) BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE	[39D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16809, 0x0061 };
    uint32_t const ces[9] = { 0x39D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_455)
{
    // 16809 0041;	
    // (𖠉) BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE	[39D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16809, 0x0041 };
    uint32_t const ces[9] = { 0x39D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_456)
{
    // 16809 0062;	
    // (𖠉) BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE	[39D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16809, 0x0062 };
    uint32_t const ces[9] = { 0x39D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_457)
{
    // 1680A 0021;	
    // (𖠊) BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA	[39D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680A, 0x0021 };
    uint32_t const ces[9] = { 0x39D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_458)
{
    // 1680A 003F;	
    // (𖠊) BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA	[39D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680A, 0x003F };
    uint32_t const ces[9] = { 0x39D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_459)
{
    // 1680A 0061;	
    // (𖠊) BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA	[39D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680A, 0x0061 };
    uint32_t const ces[9] = { 0x39D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_460)
{
    // 1680A 0041;	
    // (𖠊) BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA	[39D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680A, 0x0041 };
    uint32_t const ces[9] = { 0x39D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_461)
{
    // 1680A 0062;	
    // (𖠊) BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA	[39D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680A, 0x0062 };
    uint32_t const ces[9] = { 0x39D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_462)
{
    // 1680B 0021;	
    // (𖠋) BAMUM LETTER PHASE-A MAEMBGBIEE	[39D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680B, 0x0021 };
    uint32_t const ces[9] = { 0x39D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_463)
{
    // 1680B 003F;	
    // (𖠋) BAMUM LETTER PHASE-A MAEMBGBIEE	[39D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680B, 0x003F };
    uint32_t const ces[9] = { 0x39D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_464)
{
    // 1680B 0061;	
    // (𖠋) BAMUM LETTER PHASE-A MAEMBGBIEE	[39D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680B, 0x0061 };
    uint32_t const ces[9] = { 0x39D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_465)
{
    // 1680B 0041;	
    // (𖠋) BAMUM LETTER PHASE-A MAEMBGBIEE	[39D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680B, 0x0041 };
    uint32_t const ces[9] = { 0x39D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_466)
{
    // 1680B 0062;	
    // (𖠋) BAMUM LETTER PHASE-A MAEMBGBIEE	[39D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680B, 0x0062 };
    uint32_t const ces[9] = { 0x39D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_467)
{
    // 1680C 0021;	
    // (𖠌) BAMUM LETTER PHASE-A TU MAEMBA	[39DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680C, 0x0021 };
    uint32_t const ces[9] = { 0x39DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_468)
{
    // 1680C 003F;	
    // (𖠌) BAMUM LETTER PHASE-A TU MAEMBA	[39DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680C, 0x003F };
    uint32_t const ces[9] = { 0x39DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_469)
{
    // 1680C 0061;	
    // (𖠌) BAMUM LETTER PHASE-A TU MAEMBA	[39DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680C, 0x0061 };
    uint32_t const ces[9] = { 0x39DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_470)
{
    // 1680C 0041;	
    // (𖠌) BAMUM LETTER PHASE-A TU MAEMBA	[39DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680C, 0x0041 };
    uint32_t const ces[9] = { 0x39DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_471)
{
    // 1680C 0062;	
    // (𖠌) BAMUM LETTER PHASE-A TU MAEMBA	[39DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680C, 0x0062 };
    uint32_t const ces[9] = { 0x39DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_472)
{
    // 1680D 0021;	
    // (𖠍) BAMUM LETTER PHASE-A NGANGU	[39DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680D, 0x0021 };
    uint32_t const ces[9] = { 0x39DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_473)
{
    // 1680D 003F;	
    // (𖠍) BAMUM LETTER PHASE-A NGANGU	[39DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680D, 0x003F };
    uint32_t const ces[9] = { 0x39DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_474)
{
    // 1680D 0061;	
    // (𖠍) BAMUM LETTER PHASE-A NGANGU	[39DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680D, 0x0061 };
    uint32_t const ces[9] = { 0x39DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_475)
{
    // 1680D 0041;	
    // (𖠍) BAMUM LETTER PHASE-A NGANGU	[39DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680D, 0x0041 };
    uint32_t const ces[9] = { 0x39DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_476)
{
    // 1680D 0062;	
    // (𖠍) BAMUM LETTER PHASE-A NGANGU	[39DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680D, 0x0062 };
    uint32_t const ces[9] = { 0x39DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_477)
{
    // 1680E 0021;	
    // (𖠎) BAMUM LETTER PHASE-A MAEMVEUX	[39DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680E, 0x0021 };
    uint32_t const ces[9] = { 0x39DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_478)
{
    // 1680E 003F;	
    // (𖠎) BAMUM LETTER PHASE-A MAEMVEUX	[39DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680E, 0x003F };
    uint32_t const ces[9] = { 0x39DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_479)
{
    // 1680E 0061;	
    // (𖠎) BAMUM LETTER PHASE-A MAEMVEUX	[39DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680E, 0x0061 };
    uint32_t const ces[9] = { 0x39DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_480)
{
    // 1680E 0041;	
    // (𖠎) BAMUM LETTER PHASE-A MAEMVEUX	[39DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680E, 0x0041 };
    uint32_t const ces[9] = { 0x39DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_481)
{
    // 1680E 0062;	
    // (𖠎) BAMUM LETTER PHASE-A MAEMVEUX	[39DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680E, 0x0062 };
    uint32_t const ces[9] = { 0x39DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_482)
{
    // 1680F 0021;	
    // (𖠏) BAMUM LETTER PHASE-A MANSUAE	[39DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680F, 0x0021 };
    uint32_t const ces[9] = { 0x39DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_483)
{
    // 1680F 003F;	
    // (𖠏) BAMUM LETTER PHASE-A MANSUAE	[39DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680F, 0x003F };
    uint32_t const ces[9] = { 0x39DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_484)
{
    // 1680F 0061;	
    // (𖠏) BAMUM LETTER PHASE-A MANSUAE	[39DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680F, 0x0061 };
    uint32_t const ces[9] = { 0x39DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_485)
{
    // 1680F 0041;	
    // (𖠏) BAMUM LETTER PHASE-A MANSUAE	[39DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1680F, 0x0041 };
    uint32_t const ces[9] = { 0x39DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_486)
{
    // 1680F 0062;	
    // (𖠏) BAMUM LETTER PHASE-A MANSUAE	[39DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1680F, 0x0062 };
    uint32_t const ces[9] = { 0x39DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_487)
{
    // 16810 0021;	
    // (𖠐) BAMUM LETTER PHASE-A MVEUAENGAM	[39DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16810, 0x0021 };
    uint32_t const ces[9] = { 0x39DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_488)
{
    // 16810 003F;	
    // (𖠐) BAMUM LETTER PHASE-A MVEUAENGAM	[39DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16810, 0x003F };
    uint32_t const ces[9] = { 0x39DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_489)
{
    // 16810 0061;	
    // (𖠐) BAMUM LETTER PHASE-A MVEUAENGAM	[39DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16810, 0x0061 };
    uint32_t const ces[9] = { 0x39DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_490)
{
    // 16810 0041;	
    // (𖠐) BAMUM LETTER PHASE-A MVEUAENGAM	[39DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16810, 0x0041 };
    uint32_t const ces[9] = { 0x39DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_491)
{
    // 16810 0062;	
    // (𖠐) BAMUM LETTER PHASE-A MVEUAENGAM	[39DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16810, 0x0062 };
    uint32_t const ces[9] = { 0x39DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_492)
{
    // 16811 0021;	
    // (𖠑) BAMUM LETTER PHASE-A SEUNYAM	[39DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16811, 0x0021 };
    uint32_t const ces[9] = { 0x39DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_493)
{
    // 16811 003F;	
    // (𖠑) BAMUM LETTER PHASE-A SEUNYAM	[39DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16811, 0x003F };
    uint32_t const ces[9] = { 0x39DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_494)
{
    // 16811 0061;	
    // (𖠑) BAMUM LETTER PHASE-A SEUNYAM	[39DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16811, 0x0061 };
    uint32_t const ces[9] = { 0x39DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_495)
{
    // 16811 0041;	
    // (𖠑) BAMUM LETTER PHASE-A SEUNYAM	[39DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16811, 0x0041 };
    uint32_t const ces[9] = { 0x39DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_496)
{
    // 16811 0062;	
    // (𖠑) BAMUM LETTER PHASE-A SEUNYAM	[39DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16811, 0x0062 };
    uint32_t const ces[9] = { 0x39DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_497)
{
    // 16812 0021;	
    // (𖠒) BAMUM LETTER PHASE-A NTOQPEN	[39E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16812, 0x0021 };
    uint32_t const ces[9] = { 0x39E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_498)
{
    // 16812 003F;	
    // (𖠒) BAMUM LETTER PHASE-A NTOQPEN	[39E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16812, 0x003F };
    uint32_t const ces[9] = { 0x39E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_231_499)
{
    // 16812 0061;	
    // (𖠒) BAMUM LETTER PHASE-A NTOQPEN	[39E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16812, 0x0061 };
    uint32_t const ces[9] = { 0x39E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

