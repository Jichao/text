// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_206_000)
{
    // 11107 0062;	
    // (𑄇) CHAKMA LETTER KAA	[31FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11107, 0x0062 };
    uint32_t const ces[9] = { 0x31FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_001)
{
    // 11108 0021;	
    // (𑄈) CHAKMA LETTER KHAA	[3200 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11108, 0x0021 };
    uint32_t const ces[9] = { 0x3200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_002)
{
    // 11108 003F;	
    // (𑄈) CHAKMA LETTER KHAA	[3200 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11108, 0x003F };
    uint32_t const ces[9] = { 0x3200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_003)
{
    // 11108 0061;	
    // (𑄈) CHAKMA LETTER KHAA	[3200 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11108, 0x0061 };
    uint32_t const ces[9] = { 0x3200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_004)
{
    // 11108 0041;	
    // (𑄈) CHAKMA LETTER KHAA	[3200 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11108, 0x0041 };
    uint32_t const ces[9] = { 0x3200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_005)
{
    // 11108 0062;	
    // (𑄈) CHAKMA LETTER KHAA	[3200 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11108, 0x0062 };
    uint32_t const ces[9] = { 0x3200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_006)
{
    // 11109 0021;	
    // (𑄉) CHAKMA LETTER GAA	[3201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11109, 0x0021 };
    uint32_t const ces[9] = { 0x3201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_007)
{
    // 11109 003F;	
    // (𑄉) CHAKMA LETTER GAA	[3201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11109, 0x003F };
    uint32_t const ces[9] = { 0x3201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_008)
{
    // 11109 0061;	
    // (𑄉) CHAKMA LETTER GAA	[3201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11109, 0x0061 };
    uint32_t const ces[9] = { 0x3201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_009)
{
    // 11109 0041;	
    // (𑄉) CHAKMA LETTER GAA	[3201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11109, 0x0041 };
    uint32_t const ces[9] = { 0x3201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_010)
{
    // 11109 0062;	
    // (𑄉) CHAKMA LETTER GAA	[3201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11109, 0x0062 };
    uint32_t const ces[9] = { 0x3201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_011)
{
    // 1110A 0021;	
    // (𑄊) CHAKMA LETTER GHAA	[3202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110A, 0x0021 };
    uint32_t const ces[9] = { 0x3202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_012)
{
    // 1110A 003F;	
    // (𑄊) CHAKMA LETTER GHAA	[3202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110A, 0x003F };
    uint32_t const ces[9] = { 0x3202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_013)
{
    // 1110A 0061;	
    // (𑄊) CHAKMA LETTER GHAA	[3202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110A, 0x0061 };
    uint32_t const ces[9] = { 0x3202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_014)
{
    // 1110A 0041;	
    // (𑄊) CHAKMA LETTER GHAA	[3202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110A, 0x0041 };
    uint32_t const ces[9] = { 0x3202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_015)
{
    // 1110A 0062;	
    // (𑄊) CHAKMA LETTER GHAA	[3202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110A, 0x0062 };
    uint32_t const ces[9] = { 0x3202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_016)
{
    // 1110B 0021;	
    // (𑄋) CHAKMA LETTER NGAA	[3203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110B, 0x0021 };
    uint32_t const ces[9] = { 0x3203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_017)
{
    // 1110B 003F;	
    // (𑄋) CHAKMA LETTER NGAA	[3203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110B, 0x003F };
    uint32_t const ces[9] = { 0x3203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_018)
{
    // 1110B 0061;	
    // (𑄋) CHAKMA LETTER NGAA	[3203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110B, 0x0061 };
    uint32_t const ces[9] = { 0x3203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_019)
{
    // 1110B 0041;	
    // (𑄋) CHAKMA LETTER NGAA	[3203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110B, 0x0041 };
    uint32_t const ces[9] = { 0x3203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_020)
{
    // 1110B 0062;	
    // (𑄋) CHAKMA LETTER NGAA	[3203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110B, 0x0062 };
    uint32_t const ces[9] = { 0x3203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_021)
{
    // 1110C 0021;	
    // (𑄌) CHAKMA LETTER CAA	[3204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110C, 0x0021 };
    uint32_t const ces[9] = { 0x3204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_022)
{
    // 1110C 003F;	
    // (𑄌) CHAKMA LETTER CAA	[3204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110C, 0x003F };
    uint32_t const ces[9] = { 0x3204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_023)
{
    // 1110C 0061;	
    // (𑄌) CHAKMA LETTER CAA	[3204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110C, 0x0061 };
    uint32_t const ces[9] = { 0x3204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_024)
{
    // 1110C 0041;	
    // (𑄌) CHAKMA LETTER CAA	[3204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110C, 0x0041 };
    uint32_t const ces[9] = { 0x3204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_025)
{
    // 1110C 0062;	
    // (𑄌) CHAKMA LETTER CAA	[3204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110C, 0x0062 };
    uint32_t const ces[9] = { 0x3204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_026)
{
    // 1110D 0021;	
    // (𑄍) CHAKMA LETTER CHAA	[3205 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110D, 0x0021 };
    uint32_t const ces[9] = { 0x3205, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_027)
{
    // 1110D 003F;	
    // (𑄍) CHAKMA LETTER CHAA	[3205 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110D, 0x003F };
    uint32_t const ces[9] = { 0x3205, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_028)
{
    // 1110D 0061;	
    // (𑄍) CHAKMA LETTER CHAA	[3205 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110D, 0x0061 };
    uint32_t const ces[9] = { 0x3205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_029)
{
    // 1110D 0041;	
    // (𑄍) CHAKMA LETTER CHAA	[3205 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110D, 0x0041 };
    uint32_t const ces[9] = { 0x3205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_030)
{
    // 1110D 0062;	
    // (𑄍) CHAKMA LETTER CHAA	[3205 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110D, 0x0062 };
    uint32_t const ces[9] = { 0x3205, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_031)
{
    // 1110E 0021;	
    // (𑄎) CHAKMA LETTER JAA	[3206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110E, 0x0021 };
    uint32_t const ces[9] = { 0x3206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_032)
{
    // 1110E 003F;	
    // (𑄎) CHAKMA LETTER JAA	[3206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110E, 0x003F };
    uint32_t const ces[9] = { 0x3206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_033)
{
    // 1110E 0061;	
    // (𑄎) CHAKMA LETTER JAA	[3206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110E, 0x0061 };
    uint32_t const ces[9] = { 0x3206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_034)
{
    // 1110E 0041;	
    // (𑄎) CHAKMA LETTER JAA	[3206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110E, 0x0041 };
    uint32_t const ces[9] = { 0x3206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_035)
{
    // 1110E 0062;	
    // (𑄎) CHAKMA LETTER JAA	[3206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110E, 0x0062 };
    uint32_t const ces[9] = { 0x3206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_036)
{
    // 1110F 0021;	
    // (𑄏) CHAKMA LETTER JHAA	[3207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110F, 0x0021 };
    uint32_t const ces[9] = { 0x3207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_037)
{
    // 1110F 003F;	
    // (𑄏) CHAKMA LETTER JHAA	[3207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110F, 0x003F };
    uint32_t const ces[9] = { 0x3207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_038)
{
    // 1110F 0061;	
    // (𑄏) CHAKMA LETTER JHAA	[3207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110F, 0x0061 };
    uint32_t const ces[9] = { 0x3207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_039)
{
    // 1110F 0041;	
    // (𑄏) CHAKMA LETTER JHAA	[3207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1110F, 0x0041 };
    uint32_t const ces[9] = { 0x3207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_040)
{
    // 1110F 0062;	
    // (𑄏) CHAKMA LETTER JHAA	[3207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1110F, 0x0062 };
    uint32_t const ces[9] = { 0x3207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_041)
{
    // 11110 0021;	
    // (𑄐) CHAKMA LETTER NYAA	[3208 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11110, 0x0021 };
    uint32_t const ces[9] = { 0x3208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_042)
{
    // 11110 003F;	
    // (𑄐) CHAKMA LETTER NYAA	[3208 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11110, 0x003F };
    uint32_t const ces[9] = { 0x3208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_043)
{
    // 11110 0061;	
    // (𑄐) CHAKMA LETTER NYAA	[3208 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11110, 0x0061 };
    uint32_t const ces[9] = { 0x3208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_044)
{
    // 11110 0041;	
    // (𑄐) CHAKMA LETTER NYAA	[3208 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11110, 0x0041 };
    uint32_t const ces[9] = { 0x3208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_045)
{
    // 11110 0062;	
    // (𑄐) CHAKMA LETTER NYAA	[3208 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11110, 0x0062 };
    uint32_t const ces[9] = { 0x3208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_046)
{
    // 11111 0021;	
    // (𑄑) CHAKMA LETTER TTAA	[3209 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11111, 0x0021 };
    uint32_t const ces[9] = { 0x3209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_047)
{
    // 11111 003F;	
    // (𑄑) CHAKMA LETTER TTAA	[3209 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11111, 0x003F };
    uint32_t const ces[9] = { 0x3209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_048)
{
    // 11111 0061;	
    // (𑄑) CHAKMA LETTER TTAA	[3209 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11111, 0x0061 };
    uint32_t const ces[9] = { 0x3209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_049)
{
    // 11111 0041;	
    // (𑄑) CHAKMA LETTER TTAA	[3209 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11111, 0x0041 };
    uint32_t const ces[9] = { 0x3209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_050)
{
    // 11111 0062;	
    // (𑄑) CHAKMA LETTER TTAA	[3209 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11111, 0x0062 };
    uint32_t const ces[9] = { 0x3209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_051)
{
    // 11112 0021;	
    // (𑄒) CHAKMA LETTER TTHAA	[320A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11112, 0x0021 };
    uint32_t const ces[9] = { 0x320A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_052)
{
    // 11112 003F;	
    // (𑄒) CHAKMA LETTER TTHAA	[320A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11112, 0x003F };
    uint32_t const ces[9] = { 0x320A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_053)
{
    // 11112 0061;	
    // (𑄒) CHAKMA LETTER TTHAA	[320A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11112, 0x0061 };
    uint32_t const ces[9] = { 0x320A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_054)
{
    // 11112 0041;	
    // (𑄒) CHAKMA LETTER TTHAA	[320A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11112, 0x0041 };
    uint32_t const ces[9] = { 0x320A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_055)
{
    // 11112 0062;	
    // (𑄒) CHAKMA LETTER TTHAA	[320A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11112, 0x0062 };
    uint32_t const ces[9] = { 0x320A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_056)
{
    // 11113 0021;	
    // (𑄓) CHAKMA LETTER DDAA	[320B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11113, 0x0021 };
    uint32_t const ces[9] = { 0x320B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_057)
{
    // 11113 003F;	
    // (𑄓) CHAKMA LETTER DDAA	[320B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11113, 0x003F };
    uint32_t const ces[9] = { 0x320B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_058)
{
    // 11113 0061;	
    // (𑄓) CHAKMA LETTER DDAA	[320B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11113, 0x0061 };
    uint32_t const ces[9] = { 0x320B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_059)
{
    // 11113 0041;	
    // (𑄓) CHAKMA LETTER DDAA	[320B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11113, 0x0041 };
    uint32_t const ces[9] = { 0x320B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_060)
{
    // 11113 0062;	
    // (𑄓) CHAKMA LETTER DDAA	[320B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11113, 0x0062 };
    uint32_t const ces[9] = { 0x320B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_061)
{
    // 11114 0021;	
    // (𑄔) CHAKMA LETTER DDHAA	[320C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11114, 0x0021 };
    uint32_t const ces[9] = { 0x320C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_062)
{
    // 11114 003F;	
    // (𑄔) CHAKMA LETTER DDHAA	[320C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11114, 0x003F };
    uint32_t const ces[9] = { 0x320C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_063)
{
    // 11114 0061;	
    // (𑄔) CHAKMA LETTER DDHAA	[320C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11114, 0x0061 };
    uint32_t const ces[9] = { 0x320C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_064)
{
    // 11114 0041;	
    // (𑄔) CHAKMA LETTER DDHAA	[320C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11114, 0x0041 };
    uint32_t const ces[9] = { 0x320C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_065)
{
    // 11114 0062;	
    // (𑄔) CHAKMA LETTER DDHAA	[320C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11114, 0x0062 };
    uint32_t const ces[9] = { 0x320C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_066)
{
    // 11115 0021;	
    // (𑄕) CHAKMA LETTER NNAA	[320D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11115, 0x0021 };
    uint32_t const ces[9] = { 0x320D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_067)
{
    // 11115 003F;	
    // (𑄕) CHAKMA LETTER NNAA	[320D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11115, 0x003F };
    uint32_t const ces[9] = { 0x320D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_068)
{
    // 11115 0061;	
    // (𑄕) CHAKMA LETTER NNAA	[320D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11115, 0x0061 };
    uint32_t const ces[9] = { 0x320D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_069)
{
    // 11115 0041;	
    // (𑄕) CHAKMA LETTER NNAA	[320D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11115, 0x0041 };
    uint32_t const ces[9] = { 0x320D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_070)
{
    // 11115 0062;	
    // (𑄕) CHAKMA LETTER NNAA	[320D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11115, 0x0062 };
    uint32_t const ces[9] = { 0x320D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_071)
{
    // 11116 0021;	
    // (𑄖) CHAKMA LETTER TAA	[320E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11116, 0x0021 };
    uint32_t const ces[9] = { 0x320E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_072)
{
    // 11116 003F;	
    // (𑄖) CHAKMA LETTER TAA	[320E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11116, 0x003F };
    uint32_t const ces[9] = { 0x320E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_073)
{
    // 11116 0061;	
    // (𑄖) CHAKMA LETTER TAA	[320E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11116, 0x0061 };
    uint32_t const ces[9] = { 0x320E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_074)
{
    // 11116 0041;	
    // (𑄖) CHAKMA LETTER TAA	[320E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11116, 0x0041 };
    uint32_t const ces[9] = { 0x320E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_075)
{
    // 11116 0062;	
    // (𑄖) CHAKMA LETTER TAA	[320E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11116, 0x0062 };
    uint32_t const ces[9] = { 0x320E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_076)
{
    // 11117 0021;	
    // (𑄗) CHAKMA LETTER THAA	[320F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11117, 0x0021 };
    uint32_t const ces[9] = { 0x320F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_077)
{
    // 11117 003F;	
    // (𑄗) CHAKMA LETTER THAA	[320F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11117, 0x003F };
    uint32_t const ces[9] = { 0x320F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_078)
{
    // 11117 0061;	
    // (𑄗) CHAKMA LETTER THAA	[320F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11117, 0x0061 };
    uint32_t const ces[9] = { 0x320F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_079)
{
    // 11117 0041;	
    // (𑄗) CHAKMA LETTER THAA	[320F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11117, 0x0041 };
    uint32_t const ces[9] = { 0x320F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_080)
{
    // 11117 0062;	
    // (𑄗) CHAKMA LETTER THAA	[320F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11117, 0x0062 };
    uint32_t const ces[9] = { 0x320F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_081)
{
    // 11118 0021;	
    // (𑄘) CHAKMA LETTER DAA	[3210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11118, 0x0021 };
    uint32_t const ces[9] = { 0x3210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_082)
{
    // 11118 003F;	
    // (𑄘) CHAKMA LETTER DAA	[3210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11118, 0x003F };
    uint32_t const ces[9] = { 0x3210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_083)
{
    // 11118 0061;	
    // (𑄘) CHAKMA LETTER DAA	[3210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11118, 0x0061 };
    uint32_t const ces[9] = { 0x3210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_084)
{
    // 11118 0041;	
    // (𑄘) CHAKMA LETTER DAA	[3210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11118, 0x0041 };
    uint32_t const ces[9] = { 0x3210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_085)
{
    // 11118 0062;	
    // (𑄘) CHAKMA LETTER DAA	[3210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11118, 0x0062 };
    uint32_t const ces[9] = { 0x3210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_086)
{
    // 11119 0021;	
    // (𑄙) CHAKMA LETTER DHAA	[3211 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11119, 0x0021 };
    uint32_t const ces[9] = { 0x3211, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_087)
{
    // 11119 003F;	
    // (𑄙) CHAKMA LETTER DHAA	[3211 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11119, 0x003F };
    uint32_t const ces[9] = { 0x3211, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_088)
{
    // 11119 0061;	
    // (𑄙) CHAKMA LETTER DHAA	[3211 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11119, 0x0061 };
    uint32_t const ces[9] = { 0x3211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_089)
{
    // 11119 0041;	
    // (𑄙) CHAKMA LETTER DHAA	[3211 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11119, 0x0041 };
    uint32_t const ces[9] = { 0x3211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_090)
{
    // 11119 0062;	
    // (𑄙) CHAKMA LETTER DHAA	[3211 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11119, 0x0062 };
    uint32_t const ces[9] = { 0x3211, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_091)
{
    // 1111A 0021;	
    // (𑄚) CHAKMA LETTER NAA	[3212 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111A, 0x0021 };
    uint32_t const ces[9] = { 0x3212, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_092)
{
    // 1111A 003F;	
    // (𑄚) CHAKMA LETTER NAA	[3212 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111A, 0x003F };
    uint32_t const ces[9] = { 0x3212, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_093)
{
    // 1111A 0061;	
    // (𑄚) CHAKMA LETTER NAA	[3212 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111A, 0x0061 };
    uint32_t const ces[9] = { 0x3212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_094)
{
    // 1111A 0041;	
    // (𑄚) CHAKMA LETTER NAA	[3212 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111A, 0x0041 };
    uint32_t const ces[9] = { 0x3212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_095)
{
    // 1111A 0062;	
    // (𑄚) CHAKMA LETTER NAA	[3212 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111A, 0x0062 };
    uint32_t const ces[9] = { 0x3212, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_096)
{
    // 1111B 0021;	
    // (𑄛) CHAKMA LETTER PAA	[3213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111B, 0x0021 };
    uint32_t const ces[9] = { 0x3213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_097)
{
    // 1111B 003F;	
    // (𑄛) CHAKMA LETTER PAA	[3213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111B, 0x003F };
    uint32_t const ces[9] = { 0x3213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_098)
{
    // 1111B 0061;	
    // (𑄛) CHAKMA LETTER PAA	[3213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111B, 0x0061 };
    uint32_t const ces[9] = { 0x3213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_099)
{
    // 1111B 0041;	
    // (𑄛) CHAKMA LETTER PAA	[3213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111B, 0x0041 };
    uint32_t const ces[9] = { 0x3213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_100)
{
    // 1111B 0062;	
    // (𑄛) CHAKMA LETTER PAA	[3213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111B, 0x0062 };
    uint32_t const ces[9] = { 0x3213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_101)
{
    // 1111C 0021;	
    // (𑄜) CHAKMA LETTER PHAA	[3214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111C, 0x0021 };
    uint32_t const ces[9] = { 0x3214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_102)
{
    // 1111C 003F;	
    // (𑄜) CHAKMA LETTER PHAA	[3214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111C, 0x003F };
    uint32_t const ces[9] = { 0x3214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_103)
{
    // 1111C 0061;	
    // (𑄜) CHAKMA LETTER PHAA	[3214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111C, 0x0061 };
    uint32_t const ces[9] = { 0x3214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_104)
{
    // 1111C 0041;	
    // (𑄜) CHAKMA LETTER PHAA	[3214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111C, 0x0041 };
    uint32_t const ces[9] = { 0x3214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_105)
{
    // 1111C 0062;	
    // (𑄜) CHAKMA LETTER PHAA	[3214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111C, 0x0062 };
    uint32_t const ces[9] = { 0x3214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_106)
{
    // 1111D 0021;	
    // (𑄝) CHAKMA LETTER BAA	[3215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111D, 0x0021 };
    uint32_t const ces[9] = { 0x3215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_107)
{
    // 1111D 003F;	
    // (𑄝) CHAKMA LETTER BAA	[3215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111D, 0x003F };
    uint32_t const ces[9] = { 0x3215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_108)
{
    // 1111D 0061;	
    // (𑄝) CHAKMA LETTER BAA	[3215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111D, 0x0061 };
    uint32_t const ces[9] = { 0x3215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_109)
{
    // 1111D 0041;	
    // (𑄝) CHAKMA LETTER BAA	[3215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111D, 0x0041 };
    uint32_t const ces[9] = { 0x3215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_110)
{
    // 1111D 0062;	
    // (𑄝) CHAKMA LETTER BAA	[3215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111D, 0x0062 };
    uint32_t const ces[9] = { 0x3215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_111)
{
    // 1111E 0021;	
    // (𑄞) CHAKMA LETTER BHAA	[3216 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111E, 0x0021 };
    uint32_t const ces[9] = { 0x3216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_112)
{
    // 1111E 003F;	
    // (𑄞) CHAKMA LETTER BHAA	[3216 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111E, 0x003F };
    uint32_t const ces[9] = { 0x3216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_113)
{
    // 1111E 0061;	
    // (𑄞) CHAKMA LETTER BHAA	[3216 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111E, 0x0061 };
    uint32_t const ces[9] = { 0x3216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_114)
{
    // 1111E 0041;	
    // (𑄞) CHAKMA LETTER BHAA	[3216 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111E, 0x0041 };
    uint32_t const ces[9] = { 0x3216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_115)
{
    // 1111E 0062;	
    // (𑄞) CHAKMA LETTER BHAA	[3216 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111E, 0x0062 };
    uint32_t const ces[9] = { 0x3216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_116)
{
    // 1111F 0021;	
    // (𑄟) CHAKMA LETTER MAA	[3217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111F, 0x0021 };
    uint32_t const ces[9] = { 0x3217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_117)
{
    // 1111F 003F;	
    // (𑄟) CHAKMA LETTER MAA	[3217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111F, 0x003F };
    uint32_t const ces[9] = { 0x3217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_118)
{
    // 1111F 0061;	
    // (𑄟) CHAKMA LETTER MAA	[3217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111F, 0x0061 };
    uint32_t const ces[9] = { 0x3217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_119)
{
    // 1111F 0041;	
    // (𑄟) CHAKMA LETTER MAA	[3217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1111F, 0x0041 };
    uint32_t const ces[9] = { 0x3217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_120)
{
    // 1111F 0062;	
    // (𑄟) CHAKMA LETTER MAA	[3217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1111F, 0x0062 };
    uint32_t const ces[9] = { 0x3217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_121)
{
    // 11120 0021;	
    // (𑄠) CHAKMA LETTER YYAA	[3218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11120, 0x0021 };
    uint32_t const ces[9] = { 0x3218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_122)
{
    // 11120 003F;	
    // (𑄠) CHAKMA LETTER YYAA	[3218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11120, 0x003F };
    uint32_t const ces[9] = { 0x3218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_123)
{
    // 11120 0061;	
    // (𑄠) CHAKMA LETTER YYAA	[3218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11120, 0x0061 };
    uint32_t const ces[9] = { 0x3218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_124)
{
    // 11120 0041;	
    // (𑄠) CHAKMA LETTER YYAA	[3218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11120, 0x0041 };
    uint32_t const ces[9] = { 0x3218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_125)
{
    // 11120 0062;	
    // (𑄠) CHAKMA LETTER YYAA	[3218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11120, 0x0062 };
    uint32_t const ces[9] = { 0x3218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_126)
{
    // 11121 0021;	
    // (𑄡) CHAKMA LETTER YAA	[3219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11121, 0x0021 };
    uint32_t const ces[9] = { 0x3219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_127)
{
    // 11121 003F;	
    // (𑄡) CHAKMA LETTER YAA	[3219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11121, 0x003F };
    uint32_t const ces[9] = { 0x3219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_128)
{
    // 11121 0061;	
    // (𑄡) CHAKMA LETTER YAA	[3219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11121, 0x0061 };
    uint32_t const ces[9] = { 0x3219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_129)
{
    // 11121 0041;	
    // (𑄡) CHAKMA LETTER YAA	[3219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11121, 0x0041 };
    uint32_t const ces[9] = { 0x3219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_130)
{
    // 11121 0062;	
    // (𑄡) CHAKMA LETTER YAA	[3219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11121, 0x0062 };
    uint32_t const ces[9] = { 0x3219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_131)
{
    // 11122 0021;	
    // (𑄢) CHAKMA LETTER RAA	[321A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11122, 0x0021 };
    uint32_t const ces[9] = { 0x321A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_132)
{
    // 11122 003F;	
    // (𑄢) CHAKMA LETTER RAA	[321A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11122, 0x003F };
    uint32_t const ces[9] = { 0x321A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_133)
{
    // 11122 0061;	
    // (𑄢) CHAKMA LETTER RAA	[321A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11122, 0x0061 };
    uint32_t const ces[9] = { 0x321A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_134)
{
    // 11122 0041;	
    // (𑄢) CHAKMA LETTER RAA	[321A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11122, 0x0041 };
    uint32_t const ces[9] = { 0x321A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_135)
{
    // 11122 0062;	
    // (𑄢) CHAKMA LETTER RAA	[321A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11122, 0x0062 };
    uint32_t const ces[9] = { 0x321A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_136)
{
    // 11123 0021;	
    // (𑄣) CHAKMA LETTER LAA	[321B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11123, 0x0021 };
    uint32_t const ces[9] = { 0x321B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_137)
{
    // 11123 003F;	
    // (𑄣) CHAKMA LETTER LAA	[321B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11123, 0x003F };
    uint32_t const ces[9] = { 0x321B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_138)
{
    // 11123 0061;	
    // (𑄣) CHAKMA LETTER LAA	[321B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11123, 0x0061 };
    uint32_t const ces[9] = { 0x321B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_139)
{
    // 11123 0041;	
    // (𑄣) CHAKMA LETTER LAA	[321B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11123, 0x0041 };
    uint32_t const ces[9] = { 0x321B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_140)
{
    // 11123 0062;	
    // (𑄣) CHAKMA LETTER LAA	[321B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11123, 0x0062 };
    uint32_t const ces[9] = { 0x321B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_141)
{
    // 11124 0021;	
    // (𑄤) CHAKMA LETTER WAA	[321C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11124, 0x0021 };
    uint32_t const ces[9] = { 0x321C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_142)
{
    // 11124 003F;	
    // (𑄤) CHAKMA LETTER WAA	[321C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11124, 0x003F };
    uint32_t const ces[9] = { 0x321C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_143)
{
    // 11124 0061;	
    // (𑄤) CHAKMA LETTER WAA	[321C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11124, 0x0061 };
    uint32_t const ces[9] = { 0x321C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_144)
{
    // 11124 0041;	
    // (𑄤) CHAKMA LETTER WAA	[321C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11124, 0x0041 };
    uint32_t const ces[9] = { 0x321C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_145)
{
    // 11124 0062;	
    // (𑄤) CHAKMA LETTER WAA	[321C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11124, 0x0062 };
    uint32_t const ces[9] = { 0x321C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_146)
{
    // 11125 0021;	
    // (𑄥) CHAKMA LETTER SAA	[321D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11125, 0x0021 };
    uint32_t const ces[9] = { 0x321D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_147)
{
    // 11125 003F;	
    // (𑄥) CHAKMA LETTER SAA	[321D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11125, 0x003F };
    uint32_t const ces[9] = { 0x321D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_148)
{
    // 11125 0061;	
    // (𑄥) CHAKMA LETTER SAA	[321D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11125, 0x0061 };
    uint32_t const ces[9] = { 0x321D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_149)
{
    // 11125 0041;	
    // (𑄥) CHAKMA LETTER SAA	[321D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11125, 0x0041 };
    uint32_t const ces[9] = { 0x321D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_150)
{
    // 11125 0062;	
    // (𑄥) CHAKMA LETTER SAA	[321D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11125, 0x0062 };
    uint32_t const ces[9] = { 0x321D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_151)
{
    // 11126 0021;	
    // (𑄦) CHAKMA LETTER HAA	[321E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11126, 0x0021 };
    uint32_t const ces[9] = { 0x321E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_152)
{
    // 11126 003F;	
    // (𑄦) CHAKMA LETTER HAA	[321E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11126, 0x003F };
    uint32_t const ces[9] = { 0x321E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_153)
{
    // 11126 0061;	
    // (𑄦) CHAKMA LETTER HAA	[321E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11126, 0x0061 };
    uint32_t const ces[9] = { 0x321E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_154)
{
    // 11126 0041;	
    // (𑄦) CHAKMA LETTER HAA	[321E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11126, 0x0041 };
    uint32_t const ces[9] = { 0x321E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_155)
{
    // 11126 0062;	
    // (𑄦) CHAKMA LETTER HAA	[321E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11126, 0x0062 };
    uint32_t const ces[9] = { 0x321E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_156)
{
    // 11127 0021;	
    // (𑄧) CHAKMA VOWEL SIGN A	[321F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11127, 0x0021 };
    uint32_t const ces[9] = { 0x321F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_157)
{
    // 11127 003F;	
    // (𑄧) CHAKMA VOWEL SIGN A	[321F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11127, 0x003F };
    uint32_t const ces[9] = { 0x321F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_158)
{
    // 11127 0061;	
    // (𑄧) CHAKMA VOWEL SIGN A	[321F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11127, 0x0061 };
    uint32_t const ces[9] = { 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_159)
{
    // 11127 0041;	
    // (𑄧) CHAKMA VOWEL SIGN A	[321F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11127, 0x0041 };
    uint32_t const ces[9] = { 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_160)
{
    // 11127 0062;	
    // (𑄧) CHAKMA VOWEL SIGN A	[321F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11127, 0x0062 };
    uint32_t const ces[9] = { 0x321F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_161)
{
    // 11128 0021;	
    // (𑄨) CHAKMA VOWEL SIGN I	[3220 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11128, 0x0021 };
    uint32_t const ces[9] = { 0x3220, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_162)
{
    // 11128 003F;	
    // (𑄨) CHAKMA VOWEL SIGN I	[3220 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11128, 0x003F };
    uint32_t const ces[9] = { 0x3220, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_163)
{
    // 11128 0061;	
    // (𑄨) CHAKMA VOWEL SIGN I	[3220 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11128, 0x0061 };
    uint32_t const ces[9] = { 0x3220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_164)
{
    // 11128 0041;	
    // (𑄨) CHAKMA VOWEL SIGN I	[3220 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11128, 0x0041 };
    uint32_t const ces[9] = { 0x3220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_165)
{
    // 11128 0062;	
    // (𑄨) CHAKMA VOWEL SIGN I	[3220 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11128, 0x0062 };
    uint32_t const ces[9] = { 0x3220, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_166)
{
    // 11129 0021;	
    // (𑄩) CHAKMA VOWEL SIGN II	[3221 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11129, 0x0021 };
    uint32_t const ces[9] = { 0x3221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_167)
{
    // 11129 003F;	
    // (𑄩) CHAKMA VOWEL SIGN II	[3221 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11129, 0x003F };
    uint32_t const ces[9] = { 0x3221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_168)
{
    // 11129 0061;	
    // (𑄩) CHAKMA VOWEL SIGN II	[3221 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11129, 0x0061 };
    uint32_t const ces[9] = { 0x3221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_169)
{
    // 11129 0041;	
    // (𑄩) CHAKMA VOWEL SIGN II	[3221 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11129, 0x0041 };
    uint32_t const ces[9] = { 0x3221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_170)
{
    // 11129 0062;	
    // (𑄩) CHAKMA VOWEL SIGN II	[3221 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11129, 0x0062 };
    uint32_t const ces[9] = { 0x3221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_171)
{
    // 1112A 0021;	
    // (𑄪) CHAKMA VOWEL SIGN U	[3222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112A, 0x0021 };
    uint32_t const ces[9] = { 0x3222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_172)
{
    // 1112A 003F;	
    // (𑄪) CHAKMA VOWEL SIGN U	[3222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112A, 0x003F };
    uint32_t const ces[9] = { 0x3222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_173)
{
    // 1112A 0061;	
    // (𑄪) CHAKMA VOWEL SIGN U	[3222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112A, 0x0061 };
    uint32_t const ces[9] = { 0x3222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_174)
{
    // 1112A 0041;	
    // (𑄪) CHAKMA VOWEL SIGN U	[3222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112A, 0x0041 };
    uint32_t const ces[9] = { 0x3222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_175)
{
    // 1112A 0062;	
    // (𑄪) CHAKMA VOWEL SIGN U	[3222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112A, 0x0062 };
    uint32_t const ces[9] = { 0x3222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_176)
{
    // 1112B 0021;	
    // (𑄫) CHAKMA VOWEL SIGN UU	[3223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112B, 0x0021 };
    uint32_t const ces[9] = { 0x3223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_177)
{
    // 1112B 003F;	
    // (𑄫) CHAKMA VOWEL SIGN UU	[3223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112B, 0x003F };
    uint32_t const ces[9] = { 0x3223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_178)
{
    // 1112B 0061;	
    // (𑄫) CHAKMA VOWEL SIGN UU	[3223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112B, 0x0061 };
    uint32_t const ces[9] = { 0x3223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_179)
{
    // 1112B 0041;	
    // (𑄫) CHAKMA VOWEL SIGN UU	[3223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112B, 0x0041 };
    uint32_t const ces[9] = { 0x3223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_180)
{
    // 1112B 0062;	
    // (𑄫) CHAKMA VOWEL SIGN UU	[3223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112B, 0x0062 };
    uint32_t const ces[9] = { 0x3223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_181)
{
    // 1112C 0021;	
    // (𑄬) CHAKMA VOWEL SIGN E	[3224 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112C, 0x0021 };
    uint32_t const ces[9] = { 0x3224, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_182)
{
    // 1112C 003F;	
    // (𑄬) CHAKMA VOWEL SIGN E	[3224 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112C, 0x003F };
    uint32_t const ces[9] = { 0x3224, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_183)
{
    // 1112C 0061;	
    // (𑄬) CHAKMA VOWEL SIGN E	[3224 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112C, 0x0061 };
    uint32_t const ces[9] = { 0x3224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_184)
{
    // 1112C 0041;	
    // (𑄬) CHAKMA VOWEL SIGN E	[3224 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112C, 0x0041 };
    uint32_t const ces[9] = { 0x3224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_185)
{
    // 1112C 0062;	
    // (𑄬) CHAKMA VOWEL SIGN E	[3224 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112C, 0x0062 };
    uint32_t const ces[9] = { 0x3224, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_186)
{
    // 1112D 0021;	
    // (𑄭) CHAKMA VOWEL SIGN AI	[3225 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112D, 0x0021 };
    uint32_t const ces[9] = { 0x3225, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_187)
{
    // 1112D 003F;	
    // (𑄭) CHAKMA VOWEL SIGN AI	[3225 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112D, 0x003F };
    uint32_t const ces[9] = { 0x3225, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_188)
{
    // 1112D 0061;	
    // (𑄭) CHAKMA VOWEL SIGN AI	[3225 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112D, 0x0061 };
    uint32_t const ces[9] = { 0x3225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_189)
{
    // 1112D 0041;	
    // (𑄭) CHAKMA VOWEL SIGN AI	[3225 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112D, 0x0041 };
    uint32_t const ces[9] = { 0x3225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_190)
{
    // 1112D 0062;	
    // (𑄭) CHAKMA VOWEL SIGN AI	[3225 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112D, 0x0062 };
    uint32_t const ces[9] = { 0x3225, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_191)
{
    // 1112E 0021;	
    // (𑄮) CHAKMA VOWEL SIGN O	[3226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112E, 0x0021 };
    uint32_t const ces[9] = { 0x3226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_192)
{
    // 11131 11127 0021;	
    // (𑄮) CHAKMA O MARK, CHAKMA VOWEL SIGN A	[3226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11131, 0x11127, 0x0021 };
    uint32_t const ces[9] = { 0x3226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_193)
{
    // 1112E 003F;	
    // (𑄮) CHAKMA VOWEL SIGN O	[3226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112E, 0x003F };
    uint32_t const ces[9] = { 0x3226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_194)
{
    // 11131 11127 003F;	
    // (𑄮) CHAKMA O MARK, CHAKMA VOWEL SIGN A	[3226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11131, 0x11127, 0x003F };
    uint32_t const ces[9] = { 0x3226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_195)
{
    // 1112E 0061;	
    // (𑄮) CHAKMA VOWEL SIGN O	[3226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112E, 0x0061 };
    uint32_t const ces[9] = { 0x3226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_196)
{
    // 11131 11127 0061;	
    // (𑄮) CHAKMA O MARK, CHAKMA VOWEL SIGN A	[3226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11131, 0x11127, 0x0061 };
    uint32_t const ces[9] = { 0x3226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_197)
{
    // 1112E 0041;	
    // (𑄮) CHAKMA VOWEL SIGN O	[3226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112E, 0x0041 };
    uint32_t const ces[9] = { 0x3226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_198)
{
    // 11131 11127 0041;	
    // (𑄮) CHAKMA O MARK, CHAKMA VOWEL SIGN A	[3226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x11131, 0x11127, 0x0041 };
    uint32_t const ces[9] = { 0x3226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_199)
{
    // 1112E 0062;	
    // (𑄮) CHAKMA VOWEL SIGN O	[3226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112E, 0x0062 };
    uint32_t const ces[9] = { 0x3226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_200)
{
    // 11131 11127 0062;	
    // (𑄮) CHAKMA O MARK, CHAKMA VOWEL SIGN A	[3226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11131, 0x11127, 0x0062 };
    uint32_t const ces[9] = { 0x3226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_201)
{
    // 1112F 0021;	
    // (𑄯) CHAKMA VOWEL SIGN AU	[3227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112F, 0x0021 };
    uint32_t const ces[9] = { 0x3227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_202)
{
    // 11132 11127 0021;	
    // (𑄯) CHAKMA AU MARK, CHAKMA VOWEL SIGN A	[3227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11132, 0x11127, 0x0021 };
    uint32_t const ces[9] = { 0x3227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_203)
{
    // 1112F 003F;	
    // (𑄯) CHAKMA VOWEL SIGN AU	[3227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112F, 0x003F };
    uint32_t const ces[9] = { 0x3227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_204)
{
    // 11132 11127 003F;	
    // (𑄯) CHAKMA AU MARK, CHAKMA VOWEL SIGN A	[3227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11132, 0x11127, 0x003F };
    uint32_t const ces[9] = { 0x3227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_205)
{
    // 1112F 0061;	
    // (𑄯) CHAKMA VOWEL SIGN AU	[3227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112F, 0x0061 };
    uint32_t const ces[9] = { 0x3227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_206)
{
    // 11132 11127 0061;	
    // (𑄯) CHAKMA AU MARK, CHAKMA VOWEL SIGN A	[3227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11132, 0x11127, 0x0061 };
    uint32_t const ces[9] = { 0x3227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_207)
{
    // 1112F 0041;	
    // (𑄯) CHAKMA VOWEL SIGN AU	[3227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1112F, 0x0041 };
    uint32_t const ces[9] = { 0x3227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_208)
{
    // 11132 11127 0041;	
    // (𑄯) CHAKMA AU MARK, CHAKMA VOWEL SIGN A	[3227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x11132, 0x11127, 0x0041 };
    uint32_t const ces[9] = { 0x3227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_209)
{
    // 1112F 0062;	
    // (𑄯) CHAKMA VOWEL SIGN AU	[3227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1112F, 0x0062 };
    uint32_t const ces[9] = { 0x3227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_210)
{
    // 11132 11127 0062;	
    // (𑄯) CHAKMA AU MARK, CHAKMA VOWEL SIGN A	[3227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11132, 0x11127, 0x0062 };
    uint32_t const ces[9] = { 0x3227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_211)
{
    // 11130 0021;	
    // (𑄰) CHAKMA VOWEL SIGN OI	[3228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11130, 0x0021 };
    uint32_t const ces[9] = { 0x3228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_212)
{
    // 11130 003F;	
    // (𑄰) CHAKMA VOWEL SIGN OI	[3228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11130, 0x003F };
    uint32_t const ces[9] = { 0x3228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_213)
{
    // 11130 0061;	
    // (𑄰) CHAKMA VOWEL SIGN OI	[3228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11130, 0x0061 };
    uint32_t const ces[9] = { 0x3228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_214)
{
    // 11130 0041;	
    // (𑄰) CHAKMA VOWEL SIGN OI	[3228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11130, 0x0041 };
    uint32_t const ces[9] = { 0x3228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_215)
{
    // 11130 0062;	
    // (𑄰) CHAKMA VOWEL SIGN OI	[3228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11130, 0x0062 };
    uint32_t const ces[9] = { 0x3228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_216)
{
    // 11131 0021;	
    // (𑄱) CHAKMA O MARK	[3229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11131, 0x0021 };
    uint32_t const ces[9] = { 0x3229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_217)
{
    // 11131 003F;	
    // (𑄱) CHAKMA O MARK	[3229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11131, 0x003F };
    uint32_t const ces[9] = { 0x3229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_218)
{
    // 11131 0061;	
    // (𑄱) CHAKMA O MARK	[3229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11131, 0x0061 };
    uint32_t const ces[9] = { 0x3229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_219)
{
    // 11131 0041;	
    // (𑄱) CHAKMA O MARK	[3229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11131, 0x0041 };
    uint32_t const ces[9] = { 0x3229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_220)
{
    // 11131 0062;	
    // (𑄱) CHAKMA O MARK	[3229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11131, 0x0062 };
    uint32_t const ces[9] = { 0x3229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_221)
{
    // 11131 0001 11127 0061;	
    // (𑄱'\u0001'𑄧) CHAKMA O MARK, <START OF HEADING>, CHAKMA VOWEL SIGN A	[3229 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11131, 0x0001, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x3229, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_222)
{
    // 11131 0591 11127 0061;	
    // (𑄱֑𑄧) CHAKMA O MARK, HEBREW ACCENT ETNAHTA, CHAKMA VOWEL SIGN A	[3229 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11131, 0x0591, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x3229, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_223)
{
    // 11131 1D165 11127 0061;	
    // (𑄱𝅥𑄧) CHAKMA O MARK, MUSICAL SYMBOL COMBINING STEM, CHAKMA VOWEL SIGN A	[3229 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11131, 0x1D165, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x3229, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_224)
{
    // 11132 0021;	
    // (𑄲) CHAKMA AU MARK	[322A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11132, 0x0021 };
    uint32_t const ces[9] = { 0x322A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_225)
{
    // 11132 003F;	
    // (𑄲) CHAKMA AU MARK	[322A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11132, 0x003F };
    uint32_t const ces[9] = { 0x322A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_226)
{
    // 11132 0061;	
    // (𑄲) CHAKMA AU MARK	[322A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11132, 0x0061 };
    uint32_t const ces[9] = { 0x322A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_227)
{
    // 11132 0041;	
    // (𑄲) CHAKMA AU MARK	[322A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11132, 0x0041 };
    uint32_t const ces[9] = { 0x322A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_228)
{
    // 11132 0062;	
    // (𑄲) CHAKMA AU MARK	[322A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11132, 0x0062 };
    uint32_t const ces[9] = { 0x322A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_229)
{
    // 11132 0001 11127 0061;	
    // (𑄲'\u0001'𑄧) CHAKMA AU MARK, <START OF HEADING>, CHAKMA VOWEL SIGN A	[322A 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11132, 0x0001, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x322A, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_230)
{
    // 11132 0591 11127 0061;	
    // (𑄲֑𑄧) CHAKMA AU MARK, HEBREW ACCENT ETNAHTA, CHAKMA VOWEL SIGN A	[322A 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11132, 0x0591, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x322A, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_231)
{
    // 11132 1D165 11127 0061;	
    // (𑄲𝅥𑄧) CHAKMA AU MARK, MUSICAL SYMBOL COMBINING STEM, CHAKMA VOWEL SIGN A	[322A 321F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11132, 0x1D165, 0x11127, 0x0061 };
    uint32_t const ces[12] = { 0x322A, 0x321F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_232)
{
    // 0334 11133;	
    // (𑄳) CHAKMA VIRAMA	[322B | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11133 };
    uint32_t const ces[8] = { 0x322B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_233)
{
    // 11133 0334;	
    // (𑄳) CHAKMA VIRAMA	[322B | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11133, 0x0334 };
    uint32_t const ces[8] = { 0x322B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_234)
{
    // 11133 0021;	
    // (𑄳) CHAKMA VIRAMA	[322B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11133, 0x0021 };
    uint32_t const ces[9] = { 0x322B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_235)
{
    // 11133 003F;	
    // (𑄳) CHAKMA VIRAMA	[322B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11133, 0x003F };
    uint32_t const ces[9] = { 0x322B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_236)
{
    // 11133 0061;	
    // (𑄳) CHAKMA VIRAMA	[322B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11133, 0x0061 };
    uint32_t const ces[9] = { 0x322B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_237)
{
    // 11133 0041;	
    // (𑄳) CHAKMA VIRAMA	[322B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11133, 0x0041 };
    uint32_t const ces[9] = { 0x322B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_238)
{
    // 11133 0062;	
    // (𑄳) CHAKMA VIRAMA	[322B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11133, 0x0062 };
    uint32_t const ces[9] = { 0x322B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_239)
{
    // 0334 11134;	
    // (𑄴) CHAKMA MAAYYAA	[322C | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11134 };
    uint32_t const ces[8] = { 0x322C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_240)
{
    // 11134 0334;	
    // (𑄴) CHAKMA MAAYYAA	[322C | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11134, 0x0334 };
    uint32_t const ces[8] = { 0x322C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_241)
{
    // 11134 0021;	
    // (𑄴) CHAKMA MAAYYAA	[322C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11134, 0x0021 };
    uint32_t const ces[9] = { 0x322C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_242)
{
    // 11134 003F;	
    // (𑄴) CHAKMA MAAYYAA	[322C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11134, 0x003F };
    uint32_t const ces[9] = { 0x322C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_243)
{
    // 11134 0061;	
    // (𑄴) CHAKMA MAAYYAA	[322C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11134, 0x0061 };
    uint32_t const ces[9] = { 0x322C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_244)
{
    // 11134 0041;	
    // (𑄴) CHAKMA MAAYYAA	[322C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11134, 0x0041 };
    uint32_t const ces[9] = { 0x322C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_245)
{
    // 11134 0062;	
    // (𑄴) CHAKMA MAAYYAA	[322C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11134, 0x0062 };
    uint32_t const ces[9] = { 0x322C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_246)
{
    // 1780 0021;	
    // (ក) KHMER LETTER KA	[322D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1780, 0x0021 };
    uint32_t const ces[9] = { 0x322D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_247)
{
    // 1780 003F;	
    // (ក) KHMER LETTER KA	[322D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1780, 0x003F };
    uint32_t const ces[9] = { 0x322D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_248)
{
    // 1780 0061;	
    // (ក) KHMER LETTER KA	[322D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1780, 0x0061 };
    uint32_t const ces[9] = { 0x322D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_249)
{
    // 1780 0041;	
    // (ក) KHMER LETTER KA	[322D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1780, 0x0041 };
    uint32_t const ces[9] = { 0x322D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_250)
{
    // 1780 0062;	
    // (ក) KHMER LETTER KA	[322D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1780, 0x0062 };
    uint32_t const ces[9] = { 0x322D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_251)
{
    // 1781 0021;	
    // (ខ) KHMER LETTER KHA	[322E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1781, 0x0021 };
    uint32_t const ces[9] = { 0x322E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_252)
{
    // 1781 003F;	
    // (ខ) KHMER LETTER KHA	[322E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1781, 0x003F };
    uint32_t const ces[9] = { 0x322E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_253)
{
    // 1781 0061;	
    // (ខ) KHMER LETTER KHA	[322E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1781, 0x0061 };
    uint32_t const ces[9] = { 0x322E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_254)
{
    // 1781 0041;	
    // (ខ) KHMER LETTER KHA	[322E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1781, 0x0041 };
    uint32_t const ces[9] = { 0x322E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_255)
{
    // 1781 0062;	
    // (ខ) KHMER LETTER KHA	[322E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1781, 0x0062 };
    uint32_t const ces[9] = { 0x322E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_256)
{
    // 1782 0021;	
    // (គ) KHMER LETTER KO	[322F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1782, 0x0021 };
    uint32_t const ces[9] = { 0x322F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_257)
{
    // 1782 003F;	
    // (គ) KHMER LETTER KO	[322F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1782, 0x003F };
    uint32_t const ces[9] = { 0x322F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_258)
{
    // 1782 0061;	
    // (គ) KHMER LETTER KO	[322F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1782, 0x0061 };
    uint32_t const ces[9] = { 0x322F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_259)
{
    // 1782 0041;	
    // (គ) KHMER LETTER KO	[322F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1782, 0x0041 };
    uint32_t const ces[9] = { 0x322F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_260)
{
    // 1782 0062;	
    // (គ) KHMER LETTER KO	[322F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1782, 0x0062 };
    uint32_t const ces[9] = { 0x322F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_261)
{
    // 1783 0021;	
    // (ឃ) KHMER LETTER KHO	[3230 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1783, 0x0021 };
    uint32_t const ces[9] = { 0x3230, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_262)
{
    // 1783 003F;	
    // (ឃ) KHMER LETTER KHO	[3230 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1783, 0x003F };
    uint32_t const ces[9] = { 0x3230, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_263)
{
    // 1783 0061;	
    // (ឃ) KHMER LETTER KHO	[3230 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1783, 0x0061 };
    uint32_t const ces[9] = { 0x3230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_264)
{
    // 1783 0041;	
    // (ឃ) KHMER LETTER KHO	[3230 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1783, 0x0041 };
    uint32_t const ces[9] = { 0x3230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_265)
{
    // 1783 0062;	
    // (ឃ) KHMER LETTER KHO	[3230 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1783, 0x0062 };
    uint32_t const ces[9] = { 0x3230, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_266)
{
    // 1784 0021;	
    // (ង) KHMER LETTER NGO	[3231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1784, 0x0021 };
    uint32_t const ces[9] = { 0x3231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_267)
{
    // 1784 003F;	
    // (ង) KHMER LETTER NGO	[3231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1784, 0x003F };
    uint32_t const ces[9] = { 0x3231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_268)
{
    // 1784 0061;	
    // (ង) KHMER LETTER NGO	[3231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1784, 0x0061 };
    uint32_t const ces[9] = { 0x3231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_269)
{
    // 1784 0041;	
    // (ង) KHMER LETTER NGO	[3231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1784, 0x0041 };
    uint32_t const ces[9] = { 0x3231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_270)
{
    // 1784 0062;	
    // (ង) KHMER LETTER NGO	[3231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1784, 0x0062 };
    uint32_t const ces[9] = { 0x3231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_271)
{
    // 1785 0021;	
    // (ច) KHMER LETTER CA	[3232 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1785, 0x0021 };
    uint32_t const ces[9] = { 0x3232, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_272)
{
    // 1785 003F;	
    // (ច) KHMER LETTER CA	[3232 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1785, 0x003F };
    uint32_t const ces[9] = { 0x3232, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_273)
{
    // 1785 0061;	
    // (ច) KHMER LETTER CA	[3232 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1785, 0x0061 };
    uint32_t const ces[9] = { 0x3232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_274)
{
    // 1785 0041;	
    // (ច) KHMER LETTER CA	[3232 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1785, 0x0041 };
    uint32_t const ces[9] = { 0x3232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_275)
{
    // 1785 0062;	
    // (ច) KHMER LETTER CA	[3232 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1785, 0x0062 };
    uint32_t const ces[9] = { 0x3232, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_276)
{
    // 1786 0021;	
    // (ឆ) KHMER LETTER CHA	[3233 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1786, 0x0021 };
    uint32_t const ces[9] = { 0x3233, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_277)
{
    // 1786 003F;	
    // (ឆ) KHMER LETTER CHA	[3233 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1786, 0x003F };
    uint32_t const ces[9] = { 0x3233, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_278)
{
    // 1786 0061;	
    // (ឆ) KHMER LETTER CHA	[3233 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1786, 0x0061 };
    uint32_t const ces[9] = { 0x3233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_279)
{
    // 1786 0041;	
    // (ឆ) KHMER LETTER CHA	[3233 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1786, 0x0041 };
    uint32_t const ces[9] = { 0x3233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_280)
{
    // 1786 0062;	
    // (ឆ) KHMER LETTER CHA	[3233 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1786, 0x0062 };
    uint32_t const ces[9] = { 0x3233, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_281)
{
    // 1787 0021;	
    // (ជ) KHMER LETTER CO	[3234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1787, 0x0021 };
    uint32_t const ces[9] = { 0x3234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_282)
{
    // 1787 003F;	
    // (ជ) KHMER LETTER CO	[3234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1787, 0x003F };
    uint32_t const ces[9] = { 0x3234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_283)
{
    // 1787 0061;	
    // (ជ) KHMER LETTER CO	[3234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1787, 0x0061 };
    uint32_t const ces[9] = { 0x3234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_284)
{
    // 1787 0041;	
    // (ជ) KHMER LETTER CO	[3234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1787, 0x0041 };
    uint32_t const ces[9] = { 0x3234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_285)
{
    // 1787 0062;	
    // (ជ) KHMER LETTER CO	[3234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1787, 0x0062 };
    uint32_t const ces[9] = { 0x3234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_286)
{
    // 1788 0021;	
    // (ឈ) KHMER LETTER CHO	[3235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1788, 0x0021 };
    uint32_t const ces[9] = { 0x3235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_287)
{
    // 1788 003F;	
    // (ឈ) KHMER LETTER CHO	[3235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1788, 0x003F };
    uint32_t const ces[9] = { 0x3235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_288)
{
    // 1788 0061;	
    // (ឈ) KHMER LETTER CHO	[3235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1788, 0x0061 };
    uint32_t const ces[9] = { 0x3235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_289)
{
    // 1788 0041;	
    // (ឈ) KHMER LETTER CHO	[3235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1788, 0x0041 };
    uint32_t const ces[9] = { 0x3235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_290)
{
    // 1788 0062;	
    // (ឈ) KHMER LETTER CHO	[3235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1788, 0x0062 };
    uint32_t const ces[9] = { 0x3235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_291)
{
    // 1789 0021;	
    // (ញ) KHMER LETTER NYO	[3236 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1789, 0x0021 };
    uint32_t const ces[9] = { 0x3236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_292)
{
    // 1789 003F;	
    // (ញ) KHMER LETTER NYO	[3236 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1789, 0x003F };
    uint32_t const ces[9] = { 0x3236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_293)
{
    // 1789 0061;	
    // (ញ) KHMER LETTER NYO	[3236 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1789, 0x0061 };
    uint32_t const ces[9] = { 0x3236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_294)
{
    // 1789 0041;	
    // (ញ) KHMER LETTER NYO	[3236 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1789, 0x0041 };
    uint32_t const ces[9] = { 0x3236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_295)
{
    // 1789 0062;	
    // (ញ) KHMER LETTER NYO	[3236 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1789, 0x0062 };
    uint32_t const ces[9] = { 0x3236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_296)
{
    // 178A 0021;	
    // (ដ) KHMER LETTER DA	[3237 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178A, 0x0021 };
    uint32_t const ces[9] = { 0x3237, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_297)
{
    // 178A 003F;	
    // (ដ) KHMER LETTER DA	[3237 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178A, 0x003F };
    uint32_t const ces[9] = { 0x3237, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_298)
{
    // 178A 0061;	
    // (ដ) KHMER LETTER DA	[3237 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178A, 0x0061 };
    uint32_t const ces[9] = { 0x3237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_299)
{
    // 178A 0041;	
    // (ដ) KHMER LETTER DA	[3237 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178A, 0x0041 };
    uint32_t const ces[9] = { 0x3237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_300)
{
    // 178A 0062;	
    // (ដ) KHMER LETTER DA	[3237 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178A, 0x0062 };
    uint32_t const ces[9] = { 0x3237, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_301)
{
    // 178B 0021;	
    // (ឋ) KHMER LETTER TTHA	[3238 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178B, 0x0021 };
    uint32_t const ces[9] = { 0x3238, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_302)
{
    // 178B 003F;	
    // (ឋ) KHMER LETTER TTHA	[3238 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178B, 0x003F };
    uint32_t const ces[9] = { 0x3238, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_303)
{
    // 178B 0061;	
    // (ឋ) KHMER LETTER TTHA	[3238 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178B, 0x0061 };
    uint32_t const ces[9] = { 0x3238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_304)
{
    // 178B 0041;	
    // (ឋ) KHMER LETTER TTHA	[3238 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178B, 0x0041 };
    uint32_t const ces[9] = { 0x3238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_305)
{
    // 178B 0062;	
    // (ឋ) KHMER LETTER TTHA	[3238 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178B, 0x0062 };
    uint32_t const ces[9] = { 0x3238, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_306)
{
    // 178C 0021;	
    // (ឌ) KHMER LETTER DO	[3239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178C, 0x0021 };
    uint32_t const ces[9] = { 0x3239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_307)
{
    // 178C 003F;	
    // (ឌ) KHMER LETTER DO	[3239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178C, 0x003F };
    uint32_t const ces[9] = { 0x3239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_308)
{
    // 178C 0061;	
    // (ឌ) KHMER LETTER DO	[3239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178C, 0x0061 };
    uint32_t const ces[9] = { 0x3239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_309)
{
    // 178C 0041;	
    // (ឌ) KHMER LETTER DO	[3239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178C, 0x0041 };
    uint32_t const ces[9] = { 0x3239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_310)
{
    // 178C 0062;	
    // (ឌ) KHMER LETTER DO	[3239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178C, 0x0062 };
    uint32_t const ces[9] = { 0x3239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_311)
{
    // 178D 0021;	
    // (ឍ) KHMER LETTER TTHO	[323A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178D, 0x0021 };
    uint32_t const ces[9] = { 0x323A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_312)
{
    // 178D 003F;	
    // (ឍ) KHMER LETTER TTHO	[323A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178D, 0x003F };
    uint32_t const ces[9] = { 0x323A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_313)
{
    // 178D 0061;	
    // (ឍ) KHMER LETTER TTHO	[323A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178D, 0x0061 };
    uint32_t const ces[9] = { 0x323A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_314)
{
    // 178D 0041;	
    // (ឍ) KHMER LETTER TTHO	[323A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178D, 0x0041 };
    uint32_t const ces[9] = { 0x323A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_315)
{
    // 178D 0062;	
    // (ឍ) KHMER LETTER TTHO	[323A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178D, 0x0062 };
    uint32_t const ces[9] = { 0x323A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_316)
{
    // 178E 0021;	
    // (ណ) KHMER LETTER NNO	[323B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178E, 0x0021 };
    uint32_t const ces[9] = { 0x323B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_317)
{
    // 178E 003F;	
    // (ណ) KHMER LETTER NNO	[323B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178E, 0x003F };
    uint32_t const ces[9] = { 0x323B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_318)
{
    // 178E 0061;	
    // (ណ) KHMER LETTER NNO	[323B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178E, 0x0061 };
    uint32_t const ces[9] = { 0x323B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_319)
{
    // 178E 0041;	
    // (ណ) KHMER LETTER NNO	[323B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178E, 0x0041 };
    uint32_t const ces[9] = { 0x323B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_320)
{
    // 178E 0062;	
    // (ណ) KHMER LETTER NNO	[323B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178E, 0x0062 };
    uint32_t const ces[9] = { 0x323B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_321)
{
    // 178F 0021;	
    // (ត) KHMER LETTER TA	[323C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178F, 0x0021 };
    uint32_t const ces[9] = { 0x323C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_322)
{
    // 178F 003F;	
    // (ត) KHMER LETTER TA	[323C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178F, 0x003F };
    uint32_t const ces[9] = { 0x323C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_323)
{
    // 178F 0061;	
    // (ត) KHMER LETTER TA	[323C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178F, 0x0061 };
    uint32_t const ces[9] = { 0x323C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_324)
{
    // 178F 0041;	
    // (ត) KHMER LETTER TA	[323C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x178F, 0x0041 };
    uint32_t const ces[9] = { 0x323C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_325)
{
    // 178F 0062;	
    // (ត) KHMER LETTER TA	[323C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x178F, 0x0062 };
    uint32_t const ces[9] = { 0x323C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_326)
{
    // 1790 0021;	
    // (ថ) KHMER LETTER THA	[323D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1790, 0x0021 };
    uint32_t const ces[9] = { 0x323D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_327)
{
    // 1790 003F;	
    // (ថ) KHMER LETTER THA	[323D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1790, 0x003F };
    uint32_t const ces[9] = { 0x323D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_328)
{
    // 1790 0061;	
    // (ថ) KHMER LETTER THA	[323D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1790, 0x0061 };
    uint32_t const ces[9] = { 0x323D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_329)
{
    // 1790 0041;	
    // (ថ) KHMER LETTER THA	[323D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1790, 0x0041 };
    uint32_t const ces[9] = { 0x323D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_330)
{
    // 1790 0062;	
    // (ថ) KHMER LETTER THA	[323D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1790, 0x0062 };
    uint32_t const ces[9] = { 0x323D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_331)
{
    // 1791 0021;	
    // (ទ) KHMER LETTER TO	[323E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1791, 0x0021 };
    uint32_t const ces[9] = { 0x323E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_332)
{
    // 1791 003F;	
    // (ទ) KHMER LETTER TO	[323E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1791, 0x003F };
    uint32_t const ces[9] = { 0x323E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_333)
{
    // 1791 0061;	
    // (ទ) KHMER LETTER TO	[323E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1791, 0x0061 };
    uint32_t const ces[9] = { 0x323E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_334)
{
    // 1791 0041;	
    // (ទ) KHMER LETTER TO	[323E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1791, 0x0041 };
    uint32_t const ces[9] = { 0x323E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_335)
{
    // 1791 0062;	
    // (ទ) KHMER LETTER TO	[323E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1791, 0x0062 };
    uint32_t const ces[9] = { 0x323E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_336)
{
    // 1792 0021;	
    // (ធ) KHMER LETTER THO	[323F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1792, 0x0021 };
    uint32_t const ces[9] = { 0x323F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_337)
{
    // 1792 003F;	
    // (ធ) KHMER LETTER THO	[323F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1792, 0x003F };
    uint32_t const ces[9] = { 0x323F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_338)
{
    // 1792 0061;	
    // (ធ) KHMER LETTER THO	[323F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1792, 0x0061 };
    uint32_t const ces[9] = { 0x323F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_339)
{
    // 1792 0041;	
    // (ធ) KHMER LETTER THO	[323F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1792, 0x0041 };
    uint32_t const ces[9] = { 0x323F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_340)
{
    // 1792 0062;	
    // (ធ) KHMER LETTER THO	[323F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1792, 0x0062 };
    uint32_t const ces[9] = { 0x323F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_341)
{
    // 1793 0021;	
    // (ន) KHMER LETTER NO	[3240 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1793, 0x0021 };
    uint32_t const ces[9] = { 0x3240, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_342)
{
    // 1793 003F;	
    // (ន) KHMER LETTER NO	[3240 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1793, 0x003F };
    uint32_t const ces[9] = { 0x3240, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_343)
{
    // 1793 0061;	
    // (ន) KHMER LETTER NO	[3240 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1793, 0x0061 };
    uint32_t const ces[9] = { 0x3240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_344)
{
    // 1793 0041;	
    // (ន) KHMER LETTER NO	[3240 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1793, 0x0041 };
    uint32_t const ces[9] = { 0x3240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_345)
{
    // 1793 0062;	
    // (ន) KHMER LETTER NO	[3240 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1793, 0x0062 };
    uint32_t const ces[9] = { 0x3240, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_346)
{
    // 1794 0021;	
    // (ប) KHMER LETTER BA	[3241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1794, 0x0021 };
    uint32_t const ces[9] = { 0x3241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_347)
{
    // 1794 003F;	
    // (ប) KHMER LETTER BA	[3241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1794, 0x003F };
    uint32_t const ces[9] = { 0x3241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_348)
{
    // 1794 0061;	
    // (ប) KHMER LETTER BA	[3241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1794, 0x0061 };
    uint32_t const ces[9] = { 0x3241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_349)
{
    // 1794 0041;	
    // (ប) KHMER LETTER BA	[3241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1794, 0x0041 };
    uint32_t const ces[9] = { 0x3241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_350)
{
    // 1794 0062;	
    // (ប) KHMER LETTER BA	[3241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1794, 0x0062 };
    uint32_t const ces[9] = { 0x3241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_351)
{
    // 1795 0021;	
    // (ផ) KHMER LETTER PHA	[3242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1795, 0x0021 };
    uint32_t const ces[9] = { 0x3242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_352)
{
    // 1795 003F;	
    // (ផ) KHMER LETTER PHA	[3242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1795, 0x003F };
    uint32_t const ces[9] = { 0x3242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_353)
{
    // 1795 0061;	
    // (ផ) KHMER LETTER PHA	[3242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1795, 0x0061 };
    uint32_t const ces[9] = { 0x3242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_354)
{
    // 1795 0041;	
    // (ផ) KHMER LETTER PHA	[3242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1795, 0x0041 };
    uint32_t const ces[9] = { 0x3242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_355)
{
    // 1795 0062;	
    // (ផ) KHMER LETTER PHA	[3242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1795, 0x0062 };
    uint32_t const ces[9] = { 0x3242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_356)
{
    // 1796 0021;	
    // (ព) KHMER LETTER PO	[3243 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1796, 0x0021 };
    uint32_t const ces[9] = { 0x3243, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_357)
{
    // 1796 003F;	
    // (ព) KHMER LETTER PO	[3243 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1796, 0x003F };
    uint32_t const ces[9] = { 0x3243, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_358)
{
    // 1796 0061;	
    // (ព) KHMER LETTER PO	[3243 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1796, 0x0061 };
    uint32_t const ces[9] = { 0x3243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_359)
{
    // 1796 0041;	
    // (ព) KHMER LETTER PO	[3243 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1796, 0x0041 };
    uint32_t const ces[9] = { 0x3243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_360)
{
    // 1796 0062;	
    // (ព) KHMER LETTER PO	[3243 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1796, 0x0062 };
    uint32_t const ces[9] = { 0x3243, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_361)
{
    // 1797 0021;	
    // (ភ) KHMER LETTER PHO	[3244 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1797, 0x0021 };
    uint32_t const ces[9] = { 0x3244, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_362)
{
    // 1797 003F;	
    // (ភ) KHMER LETTER PHO	[3244 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1797, 0x003F };
    uint32_t const ces[9] = { 0x3244, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_363)
{
    // 1797 0061;	
    // (ភ) KHMER LETTER PHO	[3244 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1797, 0x0061 };
    uint32_t const ces[9] = { 0x3244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_364)
{
    // 1797 0041;	
    // (ភ) KHMER LETTER PHO	[3244 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1797, 0x0041 };
    uint32_t const ces[9] = { 0x3244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_365)
{
    // 1797 0062;	
    // (ភ) KHMER LETTER PHO	[3244 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1797, 0x0062 };
    uint32_t const ces[9] = { 0x3244, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_366)
{
    // 1798 0021;	
    // (ម) KHMER LETTER MO	[3245 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1798, 0x0021 };
    uint32_t const ces[9] = { 0x3245, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_367)
{
    // 1798 003F;	
    // (ម) KHMER LETTER MO	[3245 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1798, 0x003F };
    uint32_t const ces[9] = { 0x3245, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_368)
{
    // 1798 0061;	
    // (ម) KHMER LETTER MO	[3245 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1798, 0x0061 };
    uint32_t const ces[9] = { 0x3245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_369)
{
    // 1798 0041;	
    // (ម) KHMER LETTER MO	[3245 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1798, 0x0041 };
    uint32_t const ces[9] = { 0x3245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_370)
{
    // 1798 0062;	
    // (ម) KHMER LETTER MO	[3245 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1798, 0x0062 };
    uint32_t const ces[9] = { 0x3245, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_371)
{
    // 1799 0021;	
    // (យ) KHMER LETTER YO	[3246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1799, 0x0021 };
    uint32_t const ces[9] = { 0x3246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_372)
{
    // 1799 003F;	
    // (យ) KHMER LETTER YO	[3246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1799, 0x003F };
    uint32_t const ces[9] = { 0x3246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_373)
{
    // 1799 0061;	
    // (យ) KHMER LETTER YO	[3246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1799, 0x0061 };
    uint32_t const ces[9] = { 0x3246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_374)
{
    // 1799 0041;	
    // (យ) KHMER LETTER YO	[3246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1799, 0x0041 };
    uint32_t const ces[9] = { 0x3246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_375)
{
    // 1799 0062;	
    // (យ) KHMER LETTER YO	[3246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1799, 0x0062 };
    uint32_t const ces[9] = { 0x3246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_376)
{
    // 179A 0021;	
    // (រ) KHMER LETTER RO	[3247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179A, 0x0021 };
    uint32_t const ces[9] = { 0x3247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_377)
{
    // 179A 003F;	
    // (រ) KHMER LETTER RO	[3247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179A, 0x003F };
    uint32_t const ces[9] = { 0x3247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_378)
{
    // 179A 0061;	
    // (រ) KHMER LETTER RO	[3247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179A, 0x0061 };
    uint32_t const ces[9] = { 0x3247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_379)
{
    // 179A 0041;	
    // (រ) KHMER LETTER RO	[3247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179A, 0x0041 };
    uint32_t const ces[9] = { 0x3247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_380)
{
    // 179A 0062;	
    // (រ) KHMER LETTER RO	[3247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179A, 0x0062 };
    uint32_t const ces[9] = { 0x3247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_381)
{
    // 179B 0021;	
    // (ល) KHMER LETTER LO	[3248 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179B, 0x0021 };
    uint32_t const ces[9] = { 0x3248, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_382)
{
    // 179B 003F;	
    // (ល) KHMER LETTER LO	[3248 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179B, 0x003F };
    uint32_t const ces[9] = { 0x3248, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_383)
{
    // 179B 0061;	
    // (ល) KHMER LETTER LO	[3248 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179B, 0x0061 };
    uint32_t const ces[9] = { 0x3248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_384)
{
    // 179B 0041;	
    // (ល) KHMER LETTER LO	[3248 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179B, 0x0041 };
    uint32_t const ces[9] = { 0x3248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_385)
{
    // 179B 0062;	
    // (ល) KHMER LETTER LO	[3248 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179B, 0x0062 };
    uint32_t const ces[9] = { 0x3248, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_386)
{
    // 179C 0021;	
    // (វ) KHMER LETTER VO	[3249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179C, 0x0021 };
    uint32_t const ces[9] = { 0x3249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_387)
{
    // 179C 003F;	
    // (វ) KHMER LETTER VO	[3249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179C, 0x003F };
    uint32_t const ces[9] = { 0x3249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_388)
{
    // 179C 0061;	
    // (វ) KHMER LETTER VO	[3249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179C, 0x0061 };
    uint32_t const ces[9] = { 0x3249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_389)
{
    // 179C 0041;	
    // (វ) KHMER LETTER VO	[3249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179C, 0x0041 };
    uint32_t const ces[9] = { 0x3249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_390)
{
    // 179C 0062;	
    // (វ) KHMER LETTER VO	[3249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179C, 0x0062 };
    uint32_t const ces[9] = { 0x3249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_391)
{
    // 179D 0021;	
    // (ឝ) KHMER LETTER SHA	[324A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179D, 0x0021 };
    uint32_t const ces[9] = { 0x324A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_392)
{
    // 179D 003F;	
    // (ឝ) KHMER LETTER SHA	[324A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179D, 0x003F };
    uint32_t const ces[9] = { 0x324A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_393)
{
    // 179D 0061;	
    // (ឝ) KHMER LETTER SHA	[324A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179D, 0x0061 };
    uint32_t const ces[9] = { 0x324A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_394)
{
    // 179D 0041;	
    // (ឝ) KHMER LETTER SHA	[324A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179D, 0x0041 };
    uint32_t const ces[9] = { 0x324A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_395)
{
    // 179D 0062;	
    // (ឝ) KHMER LETTER SHA	[324A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179D, 0x0062 };
    uint32_t const ces[9] = { 0x324A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_396)
{
    // 179E 0021;	
    // (ឞ) KHMER LETTER SSO	[324B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179E, 0x0021 };
    uint32_t const ces[9] = { 0x324B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_397)
{
    // 179E 003F;	
    // (ឞ) KHMER LETTER SSO	[324B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179E, 0x003F };
    uint32_t const ces[9] = { 0x324B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_398)
{
    // 179E 0061;	
    // (ឞ) KHMER LETTER SSO	[324B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179E, 0x0061 };
    uint32_t const ces[9] = { 0x324B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_399)
{
    // 179E 0041;	
    // (ឞ) KHMER LETTER SSO	[324B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179E, 0x0041 };
    uint32_t const ces[9] = { 0x324B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_400)
{
    // 179E 0062;	
    // (ឞ) KHMER LETTER SSO	[324B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179E, 0x0062 };
    uint32_t const ces[9] = { 0x324B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_401)
{
    // 179F 0021;	
    // (ស) KHMER LETTER SA	[324C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179F, 0x0021 };
    uint32_t const ces[9] = { 0x324C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_402)
{
    // 179F 003F;	
    // (ស) KHMER LETTER SA	[324C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179F, 0x003F };
    uint32_t const ces[9] = { 0x324C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_403)
{
    // 179F 0061;	
    // (ស) KHMER LETTER SA	[324C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179F, 0x0061 };
    uint32_t const ces[9] = { 0x324C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_404)
{
    // 179F 0041;	
    // (ស) KHMER LETTER SA	[324C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x179F, 0x0041 };
    uint32_t const ces[9] = { 0x324C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_405)
{
    // 179F 0062;	
    // (ស) KHMER LETTER SA	[324C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x179F, 0x0062 };
    uint32_t const ces[9] = { 0x324C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_406)
{
    // 17A0 0021;	
    // (ហ) KHMER LETTER HA	[324D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A0, 0x0021 };
    uint32_t const ces[9] = { 0x324D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_407)
{
    // 17A0 003F;	
    // (ហ) KHMER LETTER HA	[324D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A0, 0x003F };
    uint32_t const ces[9] = { 0x324D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_408)
{
    // 17A0 0061;	
    // (ហ) KHMER LETTER HA	[324D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A0, 0x0061 };
    uint32_t const ces[9] = { 0x324D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_409)
{
    // 17A0 0041;	
    // (ហ) KHMER LETTER HA	[324D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A0, 0x0041 };
    uint32_t const ces[9] = { 0x324D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_410)
{
    // 17A0 0062;	
    // (ហ) KHMER LETTER HA	[324D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A0, 0x0062 };
    uint32_t const ces[9] = { 0x324D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_411)
{
    // 17A1 0021;	
    // (ឡ) KHMER LETTER LA	[324E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A1, 0x0021 };
    uint32_t const ces[9] = { 0x324E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_412)
{
    // 17A1 003F;	
    // (ឡ) KHMER LETTER LA	[324E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A1, 0x003F };
    uint32_t const ces[9] = { 0x324E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_413)
{
    // 17A1 0061;	
    // (ឡ) KHMER LETTER LA	[324E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A1, 0x0061 };
    uint32_t const ces[9] = { 0x324E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_414)
{
    // 17A1 0041;	
    // (ឡ) KHMER LETTER LA	[324E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A1, 0x0041 };
    uint32_t const ces[9] = { 0x324E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_415)
{
    // 17A1 0062;	
    // (ឡ) KHMER LETTER LA	[324E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A1, 0x0062 };
    uint32_t const ces[9] = { 0x324E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_416)
{
    // 17A2 0021;	
    // (អ) KHMER LETTER QA	[324F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A2, 0x0021 };
    uint32_t const ces[9] = { 0x324F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_417)
{
    // 17A2 003F;	
    // (អ) KHMER LETTER QA	[324F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A2, 0x003F };
    uint32_t const ces[9] = { 0x324F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_418)
{
    // 17A2 0061;	
    // (អ) KHMER LETTER QA	[324F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A2, 0x0061 };
    uint32_t const ces[9] = { 0x324F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_419)
{
    // 17A2 0041;	
    // (អ) KHMER LETTER QA	[324F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A2, 0x0041 };
    uint32_t const ces[9] = { 0x324F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_420)
{
    // 17A2 0062;	
    // (អ) KHMER LETTER QA	[324F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A2, 0x0062 };
    uint32_t const ces[9] = { 0x324F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_421)
{
    // 17DC 0021;	
    // (ៜ) KHMER SIGN AVAKRAHASANYA	[3250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DC, 0x0021 };
    uint32_t const ces[9] = { 0x3250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_422)
{
    // 17DC 003F;	
    // (ៜ) KHMER SIGN AVAKRAHASANYA	[3250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DC, 0x003F };
    uint32_t const ces[9] = { 0x3250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_423)
{
    // 17DC 0061;	
    // (ៜ) KHMER SIGN AVAKRAHASANYA	[3250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DC, 0x0061 };
    uint32_t const ces[9] = { 0x3250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_424)
{
    // 17DC 0041;	
    // (ៜ) KHMER SIGN AVAKRAHASANYA	[3250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17DC, 0x0041 };
    uint32_t const ces[9] = { 0x3250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_425)
{
    // 17DC 0062;	
    // (ៜ) KHMER SIGN AVAKRAHASANYA	[3250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DC, 0x0062 };
    uint32_t const ces[9] = { 0x3250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_426)
{
    // 17A3 0021;	
    // (ឣ) KHMER INDEPENDENT VOWEL QAQ	[3251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A3, 0x0021 };
    uint32_t const ces[9] = { 0x3251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_427)
{
    // 17A3 003F;	
    // (ឣ) KHMER INDEPENDENT VOWEL QAQ	[3251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A3, 0x003F };
    uint32_t const ces[9] = { 0x3251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_428)
{
    // 17A3 0061;	
    // (ឣ) KHMER INDEPENDENT VOWEL QAQ	[3251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A3, 0x0061 };
    uint32_t const ces[9] = { 0x3251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_429)
{
    // 17A3 0041;	
    // (ឣ) KHMER INDEPENDENT VOWEL QAQ	[3251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A3, 0x0041 };
    uint32_t const ces[9] = { 0x3251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_430)
{
    // 17A3 0062;	
    // (ឣ) KHMER INDEPENDENT VOWEL QAQ	[3251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A3, 0x0062 };
    uint32_t const ces[9] = { 0x3251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_431)
{
    // 17A4 0021;	
    // (ឤ) KHMER INDEPENDENT VOWEL QAA	[3252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A4, 0x0021 };
    uint32_t const ces[9] = { 0x3252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_432)
{
    // 17A4 003F;	
    // (ឤ) KHMER INDEPENDENT VOWEL QAA	[3252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A4, 0x003F };
    uint32_t const ces[9] = { 0x3252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_433)
{
    // 17A4 0061;	
    // (ឤ) KHMER INDEPENDENT VOWEL QAA	[3252 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A4, 0x0061 };
    uint32_t const ces[9] = { 0x3252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_434)
{
    // 17A4 0041;	
    // (ឤ) KHMER INDEPENDENT VOWEL QAA	[3252 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A4, 0x0041 };
    uint32_t const ces[9] = { 0x3252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_435)
{
    // 17A4 0062;	
    // (ឤ) KHMER INDEPENDENT VOWEL QAA	[3252 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A4, 0x0062 };
    uint32_t const ces[9] = { 0x3252, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_436)
{
    // 17A5 0021;	
    // (ឥ) KHMER INDEPENDENT VOWEL QI	[3253 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A5, 0x0021 };
    uint32_t const ces[9] = { 0x3253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_437)
{
    // 17A5 003F;	
    // (ឥ) KHMER INDEPENDENT VOWEL QI	[3253 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A5, 0x003F };
    uint32_t const ces[9] = { 0x3253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_438)
{
    // 17A5 0061;	
    // (ឥ) KHMER INDEPENDENT VOWEL QI	[3253 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A5, 0x0061 };
    uint32_t const ces[9] = { 0x3253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_439)
{
    // 17A5 0041;	
    // (ឥ) KHMER INDEPENDENT VOWEL QI	[3253 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A5, 0x0041 };
    uint32_t const ces[9] = { 0x3253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_440)
{
    // 17A5 0062;	
    // (ឥ) KHMER INDEPENDENT VOWEL QI	[3253 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A5, 0x0062 };
    uint32_t const ces[9] = { 0x3253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_441)
{
    // 17A6 0021;	
    // (ឦ) KHMER INDEPENDENT VOWEL QII	[3254 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A6, 0x0021 };
    uint32_t const ces[9] = { 0x3254, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_442)
{
    // 17A6 003F;	
    // (ឦ) KHMER INDEPENDENT VOWEL QII	[3254 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A6, 0x003F };
    uint32_t const ces[9] = { 0x3254, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_443)
{
    // 17A6 0061;	
    // (ឦ) KHMER INDEPENDENT VOWEL QII	[3254 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A6, 0x0061 };
    uint32_t const ces[9] = { 0x3254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_444)
{
    // 17A6 0041;	
    // (ឦ) KHMER INDEPENDENT VOWEL QII	[3254 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A6, 0x0041 };
    uint32_t const ces[9] = { 0x3254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_445)
{
    // 17A6 0062;	
    // (ឦ) KHMER INDEPENDENT VOWEL QII	[3254 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A6, 0x0062 };
    uint32_t const ces[9] = { 0x3254, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_446)
{
    // 17A7 0021;	
    // (ឧ) KHMER INDEPENDENT VOWEL QU	[3255 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A7, 0x0021 };
    uint32_t const ces[9] = { 0x3255, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_447)
{
    // 17A7 003F;	
    // (ឧ) KHMER INDEPENDENT VOWEL QU	[3255 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A7, 0x003F };
    uint32_t const ces[9] = { 0x3255, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_448)
{
    // 17A7 0061;	
    // (ឧ) KHMER INDEPENDENT VOWEL QU	[3255 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A7, 0x0061 };
    uint32_t const ces[9] = { 0x3255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_449)
{
    // 17A7 0041;	
    // (ឧ) KHMER INDEPENDENT VOWEL QU	[3255 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A7, 0x0041 };
    uint32_t const ces[9] = { 0x3255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_450)
{
    // 17A7 0062;	
    // (ឧ) KHMER INDEPENDENT VOWEL QU	[3255 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A7, 0x0062 };
    uint32_t const ces[9] = { 0x3255, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_451)
{
    // 17A8 0021;	
    // (ឨ) KHMER INDEPENDENT VOWEL QUK	[3256 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A8, 0x0021 };
    uint32_t const ces[9] = { 0x3256, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_452)
{
    // 17A8 003F;	
    // (ឨ) KHMER INDEPENDENT VOWEL QUK	[3256 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A8, 0x003F };
    uint32_t const ces[9] = { 0x3256, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_453)
{
    // 17A8 0061;	
    // (ឨ) KHMER INDEPENDENT VOWEL QUK	[3256 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A8, 0x0061 };
    uint32_t const ces[9] = { 0x3256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_454)
{
    // 17A8 0041;	
    // (ឨ) KHMER INDEPENDENT VOWEL QUK	[3256 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A8, 0x0041 };
    uint32_t const ces[9] = { 0x3256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_455)
{
    // 17A8 0062;	
    // (ឨ) KHMER INDEPENDENT VOWEL QUK	[3256 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A8, 0x0062 };
    uint32_t const ces[9] = { 0x3256, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_456)
{
    // 17A9 0021;	
    // (ឩ) KHMER INDEPENDENT VOWEL QUU	[3257 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A9, 0x0021 };
    uint32_t const ces[9] = { 0x3257, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_457)
{
    // 17A9 003F;	
    // (ឩ) KHMER INDEPENDENT VOWEL QUU	[3257 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A9, 0x003F };
    uint32_t const ces[9] = { 0x3257, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_458)
{
    // 17A9 0061;	
    // (ឩ) KHMER INDEPENDENT VOWEL QUU	[3257 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A9, 0x0061 };
    uint32_t const ces[9] = { 0x3257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_459)
{
    // 17A9 0041;	
    // (ឩ) KHMER INDEPENDENT VOWEL QUU	[3257 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17A9, 0x0041 };
    uint32_t const ces[9] = { 0x3257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_460)
{
    // 17A9 0062;	
    // (ឩ) KHMER INDEPENDENT VOWEL QUU	[3257 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17A9, 0x0062 };
    uint32_t const ces[9] = { 0x3257, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_461)
{
    // 17AA 0021;	
    // (ឪ) KHMER INDEPENDENT VOWEL QUUV	[3258 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AA, 0x0021 };
    uint32_t const ces[9] = { 0x3258, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_462)
{
    // 17AA 003F;	
    // (ឪ) KHMER INDEPENDENT VOWEL QUUV	[3258 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AA, 0x003F };
    uint32_t const ces[9] = { 0x3258, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_463)
{
    // 17AA 0061;	
    // (ឪ) KHMER INDEPENDENT VOWEL QUUV	[3258 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AA, 0x0061 };
    uint32_t const ces[9] = { 0x3258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_464)
{
    // 17AA 0041;	
    // (ឪ) KHMER INDEPENDENT VOWEL QUUV	[3258 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AA, 0x0041 };
    uint32_t const ces[9] = { 0x3258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_465)
{
    // 17AA 0062;	
    // (ឪ) KHMER INDEPENDENT VOWEL QUUV	[3258 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AA, 0x0062 };
    uint32_t const ces[9] = { 0x3258, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_466)
{
    // 17AB 0021;	
    // (ឫ) KHMER INDEPENDENT VOWEL RY	[3259 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AB, 0x0021 };
    uint32_t const ces[9] = { 0x3259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_467)
{
    // 17AB 003F;	
    // (ឫ) KHMER INDEPENDENT VOWEL RY	[3259 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AB, 0x003F };
    uint32_t const ces[9] = { 0x3259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_468)
{
    // 17AB 0061;	
    // (ឫ) KHMER INDEPENDENT VOWEL RY	[3259 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AB, 0x0061 };
    uint32_t const ces[9] = { 0x3259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_469)
{
    // 17AB 0041;	
    // (ឫ) KHMER INDEPENDENT VOWEL RY	[3259 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AB, 0x0041 };
    uint32_t const ces[9] = { 0x3259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_470)
{
    // 17AB 0062;	
    // (ឫ) KHMER INDEPENDENT VOWEL RY	[3259 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AB, 0x0062 };
    uint32_t const ces[9] = { 0x3259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_471)
{
    // 17AC 0021;	
    // (ឬ) KHMER INDEPENDENT VOWEL RYY	[325A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AC, 0x0021 };
    uint32_t const ces[9] = { 0x325A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_472)
{
    // 17AC 003F;	
    // (ឬ) KHMER INDEPENDENT VOWEL RYY	[325A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AC, 0x003F };
    uint32_t const ces[9] = { 0x325A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_473)
{
    // 17AC 0061;	
    // (ឬ) KHMER INDEPENDENT VOWEL RYY	[325A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AC, 0x0061 };
    uint32_t const ces[9] = { 0x325A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_474)
{
    // 17AC 0041;	
    // (ឬ) KHMER INDEPENDENT VOWEL RYY	[325A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AC, 0x0041 };
    uint32_t const ces[9] = { 0x325A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_475)
{
    // 17AC 0062;	
    // (ឬ) KHMER INDEPENDENT VOWEL RYY	[325A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AC, 0x0062 };
    uint32_t const ces[9] = { 0x325A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_476)
{
    // 17AD 0021;	
    // (ឭ) KHMER INDEPENDENT VOWEL LY	[325B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AD, 0x0021 };
    uint32_t const ces[9] = { 0x325B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_477)
{
    // 17AD 003F;	
    // (ឭ) KHMER INDEPENDENT VOWEL LY	[325B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AD, 0x003F };
    uint32_t const ces[9] = { 0x325B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_478)
{
    // 17AD 0061;	
    // (ឭ) KHMER INDEPENDENT VOWEL LY	[325B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AD, 0x0061 };
    uint32_t const ces[9] = { 0x325B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_479)
{
    // 17AD 0041;	
    // (ឭ) KHMER INDEPENDENT VOWEL LY	[325B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AD, 0x0041 };
    uint32_t const ces[9] = { 0x325B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_480)
{
    // 17AD 0062;	
    // (ឭ) KHMER INDEPENDENT VOWEL LY	[325B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AD, 0x0062 };
    uint32_t const ces[9] = { 0x325B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_481)
{
    // 17AE 0021;	
    // (ឮ) KHMER INDEPENDENT VOWEL LYY	[325C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AE, 0x0021 };
    uint32_t const ces[9] = { 0x325C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_482)
{
    // 17AE 003F;	
    // (ឮ) KHMER INDEPENDENT VOWEL LYY	[325C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AE, 0x003F };
    uint32_t const ces[9] = { 0x325C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_483)
{
    // 17AE 0061;	
    // (ឮ) KHMER INDEPENDENT VOWEL LYY	[325C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AE, 0x0061 };
    uint32_t const ces[9] = { 0x325C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_484)
{
    // 17AE 0041;	
    // (ឮ) KHMER INDEPENDENT VOWEL LYY	[325C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AE, 0x0041 };
    uint32_t const ces[9] = { 0x325C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_485)
{
    // 17AE 0062;	
    // (ឮ) KHMER INDEPENDENT VOWEL LYY	[325C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AE, 0x0062 };
    uint32_t const ces[9] = { 0x325C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_486)
{
    // 17AF 0021;	
    // (ឯ) KHMER INDEPENDENT VOWEL QE	[325D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AF, 0x0021 };
    uint32_t const ces[9] = { 0x325D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_487)
{
    // 17AF 003F;	
    // (ឯ) KHMER INDEPENDENT VOWEL QE	[325D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AF, 0x003F };
    uint32_t const ces[9] = { 0x325D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_488)
{
    // 17AF 0061;	
    // (ឯ) KHMER INDEPENDENT VOWEL QE	[325D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AF, 0x0061 };
    uint32_t const ces[9] = { 0x325D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_489)
{
    // 17AF 0041;	
    // (ឯ) KHMER INDEPENDENT VOWEL QE	[325D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17AF, 0x0041 };
    uint32_t const ces[9] = { 0x325D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_490)
{
    // 17AF 0062;	
    // (ឯ) KHMER INDEPENDENT VOWEL QE	[325D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17AF, 0x0062 };
    uint32_t const ces[9] = { 0x325D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_491)
{
    // 17B0 0021;	
    // (ឰ) KHMER INDEPENDENT VOWEL QAI	[325E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B0, 0x0021 };
    uint32_t const ces[9] = { 0x325E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_492)
{
    // 17B0 003F;	
    // (ឰ) KHMER INDEPENDENT VOWEL QAI	[325E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B0, 0x003F };
    uint32_t const ces[9] = { 0x325E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_493)
{
    // 17B0 0061;	
    // (ឰ) KHMER INDEPENDENT VOWEL QAI	[325E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B0, 0x0061 };
    uint32_t const ces[9] = { 0x325E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_494)
{
    // 17B0 0041;	
    // (ឰ) KHMER INDEPENDENT VOWEL QAI	[325E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17B0, 0x0041 };
    uint32_t const ces[9] = { 0x325E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_495)
{
    // 17B0 0062;	
    // (ឰ) KHMER INDEPENDENT VOWEL QAI	[325E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B0, 0x0062 };
    uint32_t const ces[9] = { 0x325E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_496)
{
    // 17B1 0021;	
    // (ឱ) KHMER INDEPENDENT VOWEL QOO TYPE ONE	[325F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B1, 0x0021 };
    uint32_t const ces[9] = { 0x325F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_497)
{
    // 17B1 003F;	
    // (ឱ) KHMER INDEPENDENT VOWEL QOO TYPE ONE	[325F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B1, 0x003F };
    uint32_t const ces[9] = { 0x325F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_498)
{
    // 17B1 0061;	
    // (ឱ) KHMER INDEPENDENT VOWEL QOO TYPE ONE	[325F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17B1, 0x0061 };
    uint32_t const ces[9] = { 0x325F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_206_499)
{
    // 17B1 0041;	
    // (ឱ) KHMER INDEPENDENT VOWEL QOO TYPE ONE	[325F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17B1, 0x0041 };
    uint32_t const ces[9] = { 0x325F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

