// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_284_000)
{
    // 10B6B 003F;	
    // (‚Äé‚Äéê≠´‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER LAMEDH	[4B64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6B, 0x003F };
    uint32_t const ces[9] = { 0x4B64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_001)
{
    // 10B6B 0061;	
    // (‚Äé‚Äéê≠´‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER LAMEDH	[4B64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6B, 0x0061 };
    uint32_t const ces[9] = { 0x4B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_002)
{
    // 10B6B 0041;	
    // (‚Äé‚Äéê≠´‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER LAMEDH	[4B64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B6B, 0x0041 };
    uint32_t const ces[9] = { 0x4B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_003)
{
    // 10B6B 0062;	
    // (‚Äé‚Äéê≠´‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER LAMEDH	[4B64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6B, 0x0062 };
    uint32_t const ces[9] = { 0x4B64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_004)
{
    // 10B6C 0021;	
    // (‚Äé‚Äéê≠¨‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH	[4B65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6C, 0x0021 };
    uint32_t const ces[9] = { 0x4B65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_005)
{
    // 10B6C 003F;	
    // (‚Äé‚Äéê≠¨‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH	[4B65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6C, 0x003F };
    uint32_t const ces[9] = { 0x4B65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_006)
{
    // 10B6C 0061;	
    // (‚Äé‚Äéê≠¨‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH	[4B65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6C, 0x0061 };
    uint32_t const ces[9] = { 0x4B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_007)
{
    // 10B6C 0041;	
    // (‚Äé‚Äéê≠¨‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH	[4B65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B6C, 0x0041 };
    uint32_t const ces[9] = { 0x4B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_008)
{
    // 10B6C 0062;	
    // (‚Äé‚Äéê≠¨‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH	[4B65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6C, 0x0062 };
    uint32_t const ces[9] = { 0x4B65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_009)
{
    // 10B6D 0021;	
    // (‚Äé‚Äéê≠≠‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER NUN	[4B66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6D, 0x0021 };
    uint32_t const ces[9] = { 0x4B66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_010)
{
    // 10B6D 003F;	
    // (‚Äé‚Äéê≠≠‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER NUN	[4B66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6D, 0x003F };
    uint32_t const ces[9] = { 0x4B66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_011)
{
    // 10B6D 0061;	
    // (‚Äé‚Äéê≠≠‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER NUN	[4B66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6D, 0x0061 };
    uint32_t const ces[9] = { 0x4B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_012)
{
    // 10B6D 0041;	
    // (‚Äé‚Äéê≠≠‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER NUN	[4B66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B6D, 0x0041 };
    uint32_t const ces[9] = { 0x4B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_013)
{
    // 10B6D 0062;	
    // (‚Äé‚Äéê≠≠‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER NUN	[4B66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6D, 0x0062 };
    uint32_t const ces[9] = { 0x4B66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_014)
{
    // 10B6E 0021;	
    // (‚Äé‚Äéê≠Æ‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SAMEKH	[4B67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6E, 0x0021 };
    uint32_t const ces[9] = { 0x4B67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_015)
{
    // 10B6E 003F;	
    // (‚Äé‚Äéê≠Æ‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SAMEKH	[4B67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6E, 0x003F };
    uint32_t const ces[9] = { 0x4B67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_016)
{
    // 10B6E 0061;	
    // (‚Äé‚Äéê≠Æ‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SAMEKH	[4B67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6E, 0x0061 };
    uint32_t const ces[9] = { 0x4B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_017)
{
    // 10B6E 0041;	
    // (‚Äé‚Äéê≠Æ‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SAMEKH	[4B67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B6E, 0x0041 };
    uint32_t const ces[9] = { 0x4B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_018)
{
    // 10B6E 0062;	
    // (‚Äé‚Äéê≠Æ‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SAMEKH	[4B67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6E, 0x0062 };
    uint32_t const ces[9] = { 0x4B67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_019)
{
    // 10B6F 0021;	
    // (‚Äé‚Äéê≠Ø‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER PE	[4B68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6F, 0x0021 };
    uint32_t const ces[9] = { 0x4B68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_020)
{
    // 10B6F 003F;	
    // (‚Äé‚Äéê≠Ø‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER PE	[4B68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6F, 0x003F };
    uint32_t const ces[9] = { 0x4B68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_021)
{
    // 10B6F 0061;	
    // (‚Äé‚Äéê≠Ø‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER PE	[4B68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6F, 0x0061 };
    uint32_t const ces[9] = { 0x4B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_022)
{
    // 10B6F 0041;	
    // (‚Äé‚Äéê≠Ø‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER PE	[4B68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B6F, 0x0041 };
    uint32_t const ces[9] = { 0x4B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_023)
{
    // 10B6F 0062;	
    // (‚Äé‚Äéê≠Ø‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER PE	[4B68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B6F, 0x0062 };
    uint32_t const ces[9] = { 0x4B68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_024)
{
    // 10B70 0021;	
    // (‚Äé‚Äéê≠∞‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SADHE	[4B69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B70, 0x0021 };
    uint32_t const ces[9] = { 0x4B69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_025)
{
    // 10B70 003F;	
    // (‚Äé‚Äéê≠∞‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SADHE	[4B69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B70, 0x003F };
    uint32_t const ces[9] = { 0x4B69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_026)
{
    // 10B70 0061;	
    // (‚Äé‚Äéê≠∞‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SADHE	[4B69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B70, 0x0061 };
    uint32_t const ces[9] = { 0x4B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_027)
{
    // 10B70 0041;	
    // (‚Äé‚Äéê≠∞‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SADHE	[4B69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B70, 0x0041 };
    uint32_t const ces[9] = { 0x4B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_028)
{
    // 10B70 0062;	
    // (‚Äé‚Äéê≠∞‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SADHE	[4B69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B70, 0x0062 };
    uint32_t const ces[9] = { 0x4B69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_029)
{
    // 10B71 0021;	
    // (‚Äé‚Äéê≠±‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SHIN	[4B6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B71, 0x0021 };
    uint32_t const ces[9] = { 0x4B6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_030)
{
    // 10B71 003F;	
    // (‚Äé‚Äéê≠±‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SHIN	[4B6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B71, 0x003F };
    uint32_t const ces[9] = { 0x4B6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_031)
{
    // 10B71 0061;	
    // (‚Äé‚Äéê≠±‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SHIN	[4B6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B71, 0x0061 };
    uint32_t const ces[9] = { 0x4B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_032)
{
    // 10B71 0041;	
    // (‚Äé‚Äéê≠±‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SHIN	[4B6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B71, 0x0041 };
    uint32_t const ces[9] = { 0x4B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_033)
{
    // 10B71 0062;	
    // (‚Äé‚Äéê≠±‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER SHIN	[4B6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B71, 0x0062 };
    uint32_t const ces[9] = { 0x4B6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_034)
{
    // 10B72 0021;	
    // (‚Äé‚Äéê≠≤‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER TAW	[4B6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B72, 0x0021 };
    uint32_t const ces[9] = { 0x4B6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_035)
{
    // 10B72 003F;	
    // (‚Äé‚Äéê≠≤‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER TAW	[4B6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B72, 0x003F };
    uint32_t const ces[9] = { 0x4B6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_036)
{
    // 10B72 0061;	
    // (‚Äé‚Äéê≠≤‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER TAW	[4B6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B72, 0x0061 };
    uint32_t const ces[9] = { 0x4B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_037)
{
    // 10B72 0041;	
    // (‚Äé‚Äéê≠≤‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER TAW	[4B6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B72, 0x0041 };
    uint32_t const ces[9] = { 0x4B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_038)
{
    // 10B72 0062;	
    // (‚Äé‚Äéê≠≤‚Äé‚Äé) INSCRIPTIONAL PAHLAVI LETTER TAW	[4B6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B72, 0x0062 };
    uint32_t const ces[9] = { 0x4B6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_039)
{
    // 10B80 0021;	
    // (‚Äé‚ÄéêÆÄ‚Äé‚Äé) PSALTER PAHLAVI LETTER ALEPH	[4B6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B80, 0x0021 };
    uint32_t const ces[9] = { 0x4B6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_040)
{
    // 10B80 003F;	
    // (‚Äé‚ÄéêÆÄ‚Äé‚Äé) PSALTER PAHLAVI LETTER ALEPH	[4B6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B80, 0x003F };
    uint32_t const ces[9] = { 0x4B6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_041)
{
    // 10B80 0061;	
    // (‚Äé‚ÄéêÆÄ‚Äé‚Äé) PSALTER PAHLAVI LETTER ALEPH	[4B6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B80, 0x0061 };
    uint32_t const ces[9] = { 0x4B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_042)
{
    // 10B80 0041;	
    // (‚Äé‚ÄéêÆÄ‚Äé‚Äé) PSALTER PAHLAVI LETTER ALEPH	[4B6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B80, 0x0041 };
    uint32_t const ces[9] = { 0x4B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_043)
{
    // 10B80 0062;	
    // (‚Äé‚ÄéêÆÄ‚Äé‚Äé) PSALTER PAHLAVI LETTER ALEPH	[4B6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B80, 0x0062 };
    uint32_t const ces[9] = { 0x4B6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_044)
{
    // 10B81 0021;	
    // (‚Äé‚ÄéêÆÅ‚Äé‚Äé) PSALTER PAHLAVI LETTER BETH	[4B6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B81, 0x0021 };
    uint32_t const ces[9] = { 0x4B6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_045)
{
    // 10B81 003F;	
    // (‚Äé‚ÄéêÆÅ‚Äé‚Äé) PSALTER PAHLAVI LETTER BETH	[4B6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B81, 0x003F };
    uint32_t const ces[9] = { 0x4B6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_046)
{
    // 10B81 0061;	
    // (‚Äé‚ÄéêÆÅ‚Äé‚Äé) PSALTER PAHLAVI LETTER BETH	[4B6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B81, 0x0061 };
    uint32_t const ces[9] = { 0x4B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_047)
{
    // 10B81 0041;	
    // (‚Äé‚ÄéêÆÅ‚Äé‚Äé) PSALTER PAHLAVI LETTER BETH	[4B6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B81, 0x0041 };
    uint32_t const ces[9] = { 0x4B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_048)
{
    // 10B81 0062;	
    // (‚Äé‚ÄéêÆÅ‚Äé‚Äé) PSALTER PAHLAVI LETTER BETH	[4B6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B81, 0x0062 };
    uint32_t const ces[9] = { 0x4B6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_049)
{
    // 10B82 0021;	
    // (‚Äé‚ÄéêÆÇ‚Äé‚Äé) PSALTER PAHLAVI LETTER GIMEL	[4B6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B82, 0x0021 };
    uint32_t const ces[9] = { 0x4B6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_050)
{
    // 10B82 003F;	
    // (‚Äé‚ÄéêÆÇ‚Äé‚Äé) PSALTER PAHLAVI LETTER GIMEL	[4B6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B82, 0x003F };
    uint32_t const ces[9] = { 0x4B6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_051)
{
    // 10B82 0061;	
    // (‚Äé‚ÄéêÆÇ‚Äé‚Äé) PSALTER PAHLAVI LETTER GIMEL	[4B6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B82, 0x0061 };
    uint32_t const ces[9] = { 0x4B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_052)
{
    // 10B82 0041;	
    // (‚Äé‚ÄéêÆÇ‚Äé‚Äé) PSALTER PAHLAVI LETTER GIMEL	[4B6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B82, 0x0041 };
    uint32_t const ces[9] = { 0x4B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_053)
{
    // 10B82 0062;	
    // (‚Äé‚ÄéêÆÇ‚Äé‚Äé) PSALTER PAHLAVI LETTER GIMEL	[4B6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B82, 0x0062 };
    uint32_t const ces[9] = { 0x4B6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_054)
{
    // 10B83 0021;	
    // (‚Äé‚ÄéêÆÉ‚Äé‚Äé) PSALTER PAHLAVI LETTER DALETH	[4B6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B83, 0x0021 };
    uint32_t const ces[9] = { 0x4B6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_055)
{
    // 10B83 003F;	
    // (‚Äé‚ÄéêÆÉ‚Äé‚Äé) PSALTER PAHLAVI LETTER DALETH	[4B6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B83, 0x003F };
    uint32_t const ces[9] = { 0x4B6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_056)
{
    // 10B83 0061;	
    // (‚Äé‚ÄéêÆÉ‚Äé‚Äé) PSALTER PAHLAVI LETTER DALETH	[4B6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B83, 0x0061 };
    uint32_t const ces[9] = { 0x4B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_057)
{
    // 10B83 0041;	
    // (‚Äé‚ÄéêÆÉ‚Äé‚Äé) PSALTER PAHLAVI LETTER DALETH	[4B6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B83, 0x0041 };
    uint32_t const ces[9] = { 0x4B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_058)
{
    // 10B83 0062;	
    // (‚Äé‚ÄéêÆÉ‚Äé‚Äé) PSALTER PAHLAVI LETTER DALETH	[4B6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B83, 0x0062 };
    uint32_t const ces[9] = { 0x4B6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_059)
{
    // 10B84 0021;	
    // (‚Äé‚ÄéêÆÑ‚Äé‚Äé) PSALTER PAHLAVI LETTER HE	[4B70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B84, 0x0021 };
    uint32_t const ces[9] = { 0x4B70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_060)
{
    // 10B84 003F;	
    // (‚Äé‚ÄéêÆÑ‚Äé‚Äé) PSALTER PAHLAVI LETTER HE	[4B70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B84, 0x003F };
    uint32_t const ces[9] = { 0x4B70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_061)
{
    // 10B84 0061;	
    // (‚Äé‚ÄéêÆÑ‚Äé‚Äé) PSALTER PAHLAVI LETTER HE	[4B70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B84, 0x0061 };
    uint32_t const ces[9] = { 0x4B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_062)
{
    // 10B84 0041;	
    // (‚Äé‚ÄéêÆÑ‚Äé‚Äé) PSALTER PAHLAVI LETTER HE	[4B70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B84, 0x0041 };
    uint32_t const ces[9] = { 0x4B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_063)
{
    // 10B84 0062;	
    // (‚Äé‚ÄéêÆÑ‚Äé‚Äé) PSALTER PAHLAVI LETTER HE	[4B70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B84, 0x0062 };
    uint32_t const ces[9] = { 0x4B70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_064)
{
    // 10B85 0021;	
    // (‚Äé‚ÄéêÆÖ‚Äé‚Äé) PSALTER PAHLAVI LETTER WAW-AYIN-RESH	[4B71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B85, 0x0021 };
    uint32_t const ces[9] = { 0x4B71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_065)
{
    // 10B85 003F;	
    // (‚Äé‚ÄéêÆÖ‚Äé‚Äé) PSALTER PAHLAVI LETTER WAW-AYIN-RESH	[4B71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B85, 0x003F };
    uint32_t const ces[9] = { 0x4B71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_066)
{
    // 10B85 0061;	
    // (‚Äé‚ÄéêÆÖ‚Äé‚Äé) PSALTER PAHLAVI LETTER WAW-AYIN-RESH	[4B71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B85, 0x0061 };
    uint32_t const ces[9] = { 0x4B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_067)
{
    // 10B85 0041;	
    // (‚Äé‚ÄéêÆÖ‚Äé‚Äé) PSALTER PAHLAVI LETTER WAW-AYIN-RESH	[4B71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B85, 0x0041 };
    uint32_t const ces[9] = { 0x4B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_068)
{
    // 10B85 0062;	
    // (‚Äé‚ÄéêÆÖ‚Äé‚Äé) PSALTER PAHLAVI LETTER WAW-AYIN-RESH	[4B71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B85, 0x0062 };
    uint32_t const ces[9] = { 0x4B71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_069)
{
    // 10B86 0021;	
    // (‚Äé‚ÄéêÆÜ‚Äé‚Äé) PSALTER PAHLAVI LETTER ZAYIN	[4B72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B86, 0x0021 };
    uint32_t const ces[9] = { 0x4B72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_070)
{
    // 10B86 003F;	
    // (‚Äé‚ÄéêÆÜ‚Äé‚Äé) PSALTER PAHLAVI LETTER ZAYIN	[4B72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B86, 0x003F };
    uint32_t const ces[9] = { 0x4B72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_071)
{
    // 10B86 0061;	
    // (‚Äé‚ÄéêÆÜ‚Äé‚Äé) PSALTER PAHLAVI LETTER ZAYIN	[4B72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B86, 0x0061 };
    uint32_t const ces[9] = { 0x4B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_072)
{
    // 10B86 0041;	
    // (‚Äé‚ÄéêÆÜ‚Äé‚Äé) PSALTER PAHLAVI LETTER ZAYIN	[4B72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B86, 0x0041 };
    uint32_t const ces[9] = { 0x4B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_073)
{
    // 10B86 0062;	
    // (‚Äé‚ÄéêÆÜ‚Äé‚Äé) PSALTER PAHLAVI LETTER ZAYIN	[4B72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B86, 0x0062 };
    uint32_t const ces[9] = { 0x4B72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_074)
{
    // 10B87 0021;	
    // (‚Äé‚ÄéêÆá‚Äé‚Äé) PSALTER PAHLAVI LETTER HETH	[4B73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B87, 0x0021 };
    uint32_t const ces[9] = { 0x4B73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_075)
{
    // 10B87 003F;	
    // (‚Äé‚ÄéêÆá‚Äé‚Äé) PSALTER PAHLAVI LETTER HETH	[4B73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B87, 0x003F };
    uint32_t const ces[9] = { 0x4B73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_076)
{
    // 10B87 0061;	
    // (‚Äé‚ÄéêÆá‚Äé‚Äé) PSALTER PAHLAVI LETTER HETH	[4B73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B87, 0x0061 };
    uint32_t const ces[9] = { 0x4B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_077)
{
    // 10B87 0041;	
    // (‚Äé‚ÄéêÆá‚Äé‚Äé) PSALTER PAHLAVI LETTER HETH	[4B73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B87, 0x0041 };
    uint32_t const ces[9] = { 0x4B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_078)
{
    // 10B87 0062;	
    // (‚Äé‚ÄéêÆá‚Äé‚Äé) PSALTER PAHLAVI LETTER HETH	[4B73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B87, 0x0062 };
    uint32_t const ces[9] = { 0x4B73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_079)
{
    // 10B88 0021;	
    // (‚Äé‚ÄéêÆà‚Äé‚Äé) PSALTER PAHLAVI LETTER YODH	[4B74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B88, 0x0021 };
    uint32_t const ces[9] = { 0x4B74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_080)
{
    // 10B88 003F;	
    // (‚Äé‚ÄéêÆà‚Äé‚Äé) PSALTER PAHLAVI LETTER YODH	[4B74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B88, 0x003F };
    uint32_t const ces[9] = { 0x4B74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_081)
{
    // 10B88 0061;	
    // (‚Äé‚ÄéêÆà‚Äé‚Äé) PSALTER PAHLAVI LETTER YODH	[4B74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B88, 0x0061 };
    uint32_t const ces[9] = { 0x4B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_082)
{
    // 10B88 0041;	
    // (‚Äé‚ÄéêÆà‚Äé‚Äé) PSALTER PAHLAVI LETTER YODH	[4B74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B88, 0x0041 };
    uint32_t const ces[9] = { 0x4B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_083)
{
    // 10B88 0062;	
    // (‚Äé‚ÄéêÆà‚Äé‚Äé) PSALTER PAHLAVI LETTER YODH	[4B74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B88, 0x0062 };
    uint32_t const ces[9] = { 0x4B74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_084)
{
    // 10B89 0021;	
    // (‚Äé‚ÄéêÆâ‚Äé‚Äé) PSALTER PAHLAVI LETTER KAPH	[4B75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B89, 0x0021 };
    uint32_t const ces[9] = { 0x4B75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_085)
{
    // 10B89 003F;	
    // (‚Äé‚ÄéêÆâ‚Äé‚Äé) PSALTER PAHLAVI LETTER KAPH	[4B75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B89, 0x003F };
    uint32_t const ces[9] = { 0x4B75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_086)
{
    // 10B89 0061;	
    // (‚Äé‚ÄéêÆâ‚Äé‚Äé) PSALTER PAHLAVI LETTER KAPH	[4B75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B89, 0x0061 };
    uint32_t const ces[9] = { 0x4B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_087)
{
    // 10B89 0041;	
    // (‚Äé‚ÄéêÆâ‚Äé‚Äé) PSALTER PAHLAVI LETTER KAPH	[4B75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B89, 0x0041 };
    uint32_t const ces[9] = { 0x4B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_088)
{
    // 10B89 0062;	
    // (‚Äé‚ÄéêÆâ‚Äé‚Äé) PSALTER PAHLAVI LETTER KAPH	[4B75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B89, 0x0062 };
    uint32_t const ces[9] = { 0x4B75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_089)
{
    // 10B8A 0021;	
    // (‚Äé‚ÄéêÆä‚Äé‚Äé) PSALTER PAHLAVI LETTER LAMEDH	[4B76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8A, 0x0021 };
    uint32_t const ces[9] = { 0x4B76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_090)
{
    // 10B8A 003F;	
    // (‚Äé‚ÄéêÆä‚Äé‚Äé) PSALTER PAHLAVI LETTER LAMEDH	[4B76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8A, 0x003F };
    uint32_t const ces[9] = { 0x4B76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_091)
{
    // 10B8A 0061;	
    // (‚Äé‚ÄéêÆä‚Äé‚Äé) PSALTER PAHLAVI LETTER LAMEDH	[4B76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8A, 0x0061 };
    uint32_t const ces[9] = { 0x4B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_092)
{
    // 10B8A 0041;	
    // (‚Äé‚ÄéêÆä‚Äé‚Äé) PSALTER PAHLAVI LETTER LAMEDH	[4B76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8A, 0x0041 };
    uint32_t const ces[9] = { 0x4B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_093)
{
    // 10B8A 0062;	
    // (‚Äé‚ÄéêÆä‚Äé‚Äé) PSALTER PAHLAVI LETTER LAMEDH	[4B76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8A, 0x0062 };
    uint32_t const ces[9] = { 0x4B76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_094)
{
    // 10B8B 0021;	
    // (‚Äé‚ÄéêÆã‚Äé‚Äé) PSALTER PAHLAVI LETTER MEM-QOPH	[4B77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8B, 0x0021 };
    uint32_t const ces[9] = { 0x4B77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_095)
{
    // 10B8B 003F;	
    // (‚Äé‚ÄéêÆã‚Äé‚Äé) PSALTER PAHLAVI LETTER MEM-QOPH	[4B77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8B, 0x003F };
    uint32_t const ces[9] = { 0x4B77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_096)
{
    // 10B8B 0061;	
    // (‚Äé‚ÄéêÆã‚Äé‚Äé) PSALTER PAHLAVI LETTER MEM-QOPH	[4B77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8B, 0x0061 };
    uint32_t const ces[9] = { 0x4B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_097)
{
    // 10B8B 0041;	
    // (‚Äé‚ÄéêÆã‚Äé‚Äé) PSALTER PAHLAVI LETTER MEM-QOPH	[4B77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8B, 0x0041 };
    uint32_t const ces[9] = { 0x4B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_098)
{
    // 10B8B 0062;	
    // (‚Äé‚ÄéêÆã‚Äé‚Äé) PSALTER PAHLAVI LETTER MEM-QOPH	[4B77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8B, 0x0062 };
    uint32_t const ces[9] = { 0x4B77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_099)
{
    // 10B8C 0021;	
    // (‚Äé‚ÄéêÆå‚Äé‚Äé) PSALTER PAHLAVI LETTER NUN	[4B78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8C, 0x0021 };
    uint32_t const ces[9] = { 0x4B78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_100)
{
    // 10B8C 003F;	
    // (‚Äé‚ÄéêÆå‚Äé‚Äé) PSALTER PAHLAVI LETTER NUN	[4B78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8C, 0x003F };
    uint32_t const ces[9] = { 0x4B78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_101)
{
    // 10B8C 0061;	
    // (‚Äé‚ÄéêÆå‚Äé‚Äé) PSALTER PAHLAVI LETTER NUN	[4B78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8C, 0x0061 };
    uint32_t const ces[9] = { 0x4B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_102)
{
    // 10B8C 0041;	
    // (‚Äé‚ÄéêÆå‚Äé‚Äé) PSALTER PAHLAVI LETTER NUN	[4B78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8C, 0x0041 };
    uint32_t const ces[9] = { 0x4B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_103)
{
    // 10B8C 0062;	
    // (‚Äé‚ÄéêÆå‚Äé‚Äé) PSALTER PAHLAVI LETTER NUN	[4B78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8C, 0x0062 };
    uint32_t const ces[9] = { 0x4B78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_104)
{
    // 10B8D 0021;	
    // (‚Äé‚ÄéêÆç‚Äé‚Äé) PSALTER PAHLAVI LETTER SAMEKH	[4B79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8D, 0x0021 };
    uint32_t const ces[9] = { 0x4B79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_105)
{
    // 10B8D 003F;	
    // (‚Äé‚ÄéêÆç‚Äé‚Äé) PSALTER PAHLAVI LETTER SAMEKH	[4B79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8D, 0x003F };
    uint32_t const ces[9] = { 0x4B79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_106)
{
    // 10B8D 0061;	
    // (‚Äé‚ÄéêÆç‚Äé‚Äé) PSALTER PAHLAVI LETTER SAMEKH	[4B79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8D, 0x0061 };
    uint32_t const ces[9] = { 0x4B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_107)
{
    // 10B8D 0041;	
    // (‚Äé‚ÄéêÆç‚Äé‚Äé) PSALTER PAHLAVI LETTER SAMEKH	[4B79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8D, 0x0041 };
    uint32_t const ces[9] = { 0x4B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_108)
{
    // 10B8D 0062;	
    // (‚Äé‚ÄéêÆç‚Äé‚Äé) PSALTER PAHLAVI LETTER SAMEKH	[4B79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8D, 0x0062 };
    uint32_t const ces[9] = { 0x4B79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_109)
{
    // 10B8E 0021;	
    // (‚Äé‚ÄéêÆé‚Äé‚Äé) PSALTER PAHLAVI LETTER PE	[4B7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8E, 0x0021 };
    uint32_t const ces[9] = { 0x4B7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_110)
{
    // 10B8E 003F;	
    // (‚Äé‚ÄéêÆé‚Äé‚Äé) PSALTER PAHLAVI LETTER PE	[4B7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8E, 0x003F };
    uint32_t const ces[9] = { 0x4B7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_111)
{
    // 10B8E 0061;	
    // (‚Äé‚ÄéêÆé‚Äé‚Äé) PSALTER PAHLAVI LETTER PE	[4B7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8E, 0x0061 };
    uint32_t const ces[9] = { 0x4B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_112)
{
    // 10B8E 0041;	
    // (‚Äé‚ÄéêÆé‚Äé‚Äé) PSALTER PAHLAVI LETTER PE	[4B7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8E, 0x0041 };
    uint32_t const ces[9] = { 0x4B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_113)
{
    // 10B8E 0062;	
    // (‚Äé‚ÄéêÆé‚Äé‚Äé) PSALTER PAHLAVI LETTER PE	[4B7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8E, 0x0062 };
    uint32_t const ces[9] = { 0x4B7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_114)
{
    // 10B8F 0021;	
    // (‚Äé‚ÄéêÆè‚Äé‚Äé) PSALTER PAHLAVI LETTER SADHE	[4B7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8F, 0x0021 };
    uint32_t const ces[9] = { 0x4B7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_115)
{
    // 10B8F 003F;	
    // (‚Äé‚ÄéêÆè‚Äé‚Äé) PSALTER PAHLAVI LETTER SADHE	[4B7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8F, 0x003F };
    uint32_t const ces[9] = { 0x4B7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_116)
{
    // 10B8F 0061;	
    // (‚Äé‚ÄéêÆè‚Äé‚Äé) PSALTER PAHLAVI LETTER SADHE	[4B7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8F, 0x0061 };
    uint32_t const ces[9] = { 0x4B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_117)
{
    // 10B8F 0041;	
    // (‚Äé‚ÄéêÆè‚Äé‚Äé) PSALTER PAHLAVI LETTER SADHE	[4B7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B8F, 0x0041 };
    uint32_t const ces[9] = { 0x4B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_118)
{
    // 10B8F 0062;	
    // (‚Äé‚ÄéêÆè‚Äé‚Äé) PSALTER PAHLAVI LETTER SADHE	[4B7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B8F, 0x0062 };
    uint32_t const ces[9] = { 0x4B7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_119)
{
    // 10B90 0021;	
    // (‚Äé‚ÄéêÆê‚Äé‚Äé) PSALTER PAHLAVI LETTER SHIN	[4B7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B90, 0x0021 };
    uint32_t const ces[9] = { 0x4B7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_120)
{
    // 10B90 003F;	
    // (‚Äé‚ÄéêÆê‚Äé‚Äé) PSALTER PAHLAVI LETTER SHIN	[4B7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B90, 0x003F };
    uint32_t const ces[9] = { 0x4B7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_121)
{
    // 10B90 0061;	
    // (‚Äé‚ÄéêÆê‚Äé‚Äé) PSALTER PAHLAVI LETTER SHIN	[4B7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B90, 0x0061 };
    uint32_t const ces[9] = { 0x4B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_122)
{
    // 10B90 0041;	
    // (‚Äé‚ÄéêÆê‚Äé‚Äé) PSALTER PAHLAVI LETTER SHIN	[4B7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B90, 0x0041 };
    uint32_t const ces[9] = { 0x4B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_123)
{
    // 10B90 0062;	
    // (‚Äé‚ÄéêÆê‚Äé‚Äé) PSALTER PAHLAVI LETTER SHIN	[4B7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B90, 0x0062 };
    uint32_t const ces[9] = { 0x4B7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_124)
{
    // 10B91 0021;	
    // (‚Äé‚ÄéêÆë‚Äé‚Äé) PSALTER PAHLAVI LETTER TAW	[4B7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B91, 0x0021 };
    uint32_t const ces[9] = { 0x4B7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_125)
{
    // 10B91 003F;	
    // (‚Äé‚ÄéêÆë‚Äé‚Äé) PSALTER PAHLAVI LETTER TAW	[4B7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B91, 0x003F };
    uint32_t const ces[9] = { 0x4B7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_126)
{
    // 10B91 0061;	
    // (‚Äé‚ÄéêÆë‚Äé‚Äé) PSALTER PAHLAVI LETTER TAW	[4B7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B91, 0x0061 };
    uint32_t const ces[9] = { 0x4B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_127)
{
    // 10B91 0041;	
    // (‚Äé‚ÄéêÆë‚Äé‚Äé) PSALTER PAHLAVI LETTER TAW	[4B7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B91, 0x0041 };
    uint32_t const ces[9] = { 0x4B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_128)
{
    // 10B91 0062;	
    // (‚Äé‚ÄéêÆë‚Äé‚Äé) PSALTER PAHLAVI LETTER TAW	[4B7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B91, 0x0062 };
    uint32_t const ces[9] = { 0x4B7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_129)
{
    // 10AC0 0021;	
    // (‚Äé‚Äéê´Ä‚Äé‚Äé) MANICHAEAN LETTER ALEPH	[4B7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC0, 0x0021 };
    uint32_t const ces[9] = { 0x4B7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_130)
{
    // 10AC0 003F;	
    // (‚Äé‚Äéê´Ä‚Äé‚Äé) MANICHAEAN LETTER ALEPH	[4B7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC0, 0x003F };
    uint32_t const ces[9] = { 0x4B7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_131)
{
    // 10AC0 0061;	
    // (‚Äé‚Äéê´Ä‚Äé‚Äé) MANICHAEAN LETTER ALEPH	[4B7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC0, 0x0061 };
    uint32_t const ces[9] = { 0x4B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_132)
{
    // 10AC0 0041;	
    // (‚Äé‚Äéê´Ä‚Äé‚Äé) MANICHAEAN LETTER ALEPH	[4B7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC0, 0x0041 };
    uint32_t const ces[9] = { 0x4B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_133)
{
    // 10AC0 0062;	
    // (‚Äé‚Äéê´Ä‚Äé‚Äé) MANICHAEAN LETTER ALEPH	[4B7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC0, 0x0062 };
    uint32_t const ces[9] = { 0x4B7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_134)
{
    // 10AC1 0021;	
    // (‚Äé‚Äéê´Å‚Äé‚Äé) MANICHAEAN LETTER BETH	[4B7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC1, 0x0021 };
    uint32_t const ces[9] = { 0x4B7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_135)
{
    // 10AC1 003F;	
    // (‚Äé‚Äéê´Å‚Äé‚Äé) MANICHAEAN LETTER BETH	[4B7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC1, 0x003F };
    uint32_t const ces[9] = { 0x4B7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_136)
{
    // 10AC1 0061;	
    // (‚Äé‚Äéê´Å‚Äé‚Äé) MANICHAEAN LETTER BETH	[4B7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC1, 0x0061 };
    uint32_t const ces[9] = { 0x4B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_137)
{
    // 10AC1 0041;	
    // (‚Äé‚Äéê´Å‚Äé‚Äé) MANICHAEAN LETTER BETH	[4B7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC1, 0x0041 };
    uint32_t const ces[9] = { 0x4B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_138)
{
    // 10AC1 0062;	
    // (‚Äé‚Äéê´Å‚Äé‚Äé) MANICHAEAN LETTER BETH	[4B7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC1, 0x0062 };
    uint32_t const ces[9] = { 0x4B7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_139)
{
    // 10AC2 0021;	
    // (‚Äé‚Äéê´Ç‚Äé‚Äé) MANICHAEAN LETTER BHETH	[4B80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC2, 0x0021 };
    uint32_t const ces[9] = { 0x4B80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_140)
{
    // 10AC2 003F;	
    // (‚Äé‚Äéê´Ç‚Äé‚Äé) MANICHAEAN LETTER BHETH	[4B80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC2, 0x003F };
    uint32_t const ces[9] = { 0x4B80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_141)
{
    // 10AC2 0061;	
    // (‚Äé‚Äéê´Ç‚Äé‚Äé) MANICHAEAN LETTER BHETH	[4B80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC2, 0x0061 };
    uint32_t const ces[9] = { 0x4B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_142)
{
    // 10AC2 0041;	
    // (‚Äé‚Äéê´Ç‚Äé‚Äé) MANICHAEAN LETTER BHETH	[4B80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC2, 0x0041 };
    uint32_t const ces[9] = { 0x4B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_143)
{
    // 10AC2 0062;	
    // (‚Äé‚Äéê´Ç‚Äé‚Äé) MANICHAEAN LETTER BHETH	[4B80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC2, 0x0062 };
    uint32_t const ces[9] = { 0x4B80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_144)
{
    // 10AC3 0021;	
    // (‚Äé‚Äéê´É‚Äé‚Äé) MANICHAEAN LETTER GIMEL	[4B81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC3, 0x0021 };
    uint32_t const ces[9] = { 0x4B81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_145)
{
    // 10AC3 003F;	
    // (‚Äé‚Äéê´É‚Äé‚Äé) MANICHAEAN LETTER GIMEL	[4B81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC3, 0x003F };
    uint32_t const ces[9] = { 0x4B81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_146)
{
    // 10AC3 0061;	
    // (‚Äé‚Äéê´É‚Äé‚Äé) MANICHAEAN LETTER GIMEL	[4B81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC3, 0x0061 };
    uint32_t const ces[9] = { 0x4B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_147)
{
    // 10AC3 0041;	
    // (‚Äé‚Äéê´É‚Äé‚Äé) MANICHAEAN LETTER GIMEL	[4B81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC3, 0x0041 };
    uint32_t const ces[9] = { 0x4B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_148)
{
    // 10AC3 0062;	
    // (‚Äé‚Äéê´É‚Äé‚Äé) MANICHAEAN LETTER GIMEL	[4B81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC3, 0x0062 };
    uint32_t const ces[9] = { 0x4B81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_149)
{
    // 10AC4 0021;	
    // (‚Äé‚Äéê´Ñ‚Äé‚Äé) MANICHAEAN LETTER GHIMEL	[4B82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC4, 0x0021 };
    uint32_t const ces[9] = { 0x4B82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_150)
{
    // 10AC4 003F;	
    // (‚Äé‚Äéê´Ñ‚Äé‚Äé) MANICHAEAN LETTER GHIMEL	[4B82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC4, 0x003F };
    uint32_t const ces[9] = { 0x4B82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_151)
{
    // 10AC4 0061;	
    // (‚Äé‚Äéê´Ñ‚Äé‚Äé) MANICHAEAN LETTER GHIMEL	[4B82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC4, 0x0061 };
    uint32_t const ces[9] = { 0x4B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_152)
{
    // 10AC4 0041;	
    // (‚Äé‚Äéê´Ñ‚Äé‚Äé) MANICHAEAN LETTER GHIMEL	[4B82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC4, 0x0041 };
    uint32_t const ces[9] = { 0x4B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_153)
{
    // 10AC4 0062;	
    // (‚Äé‚Äéê´Ñ‚Äé‚Äé) MANICHAEAN LETTER GHIMEL	[4B82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC4, 0x0062 };
    uint32_t const ces[9] = { 0x4B82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_154)
{
    // 10AC5 0021;	
    // (‚Äé‚Äéê´Ö‚Äé‚Äé) MANICHAEAN LETTER DALETH	[4B83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC5, 0x0021 };
    uint32_t const ces[9] = { 0x4B83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_155)
{
    // 10AC5 003F;	
    // (‚Äé‚Äéê´Ö‚Äé‚Äé) MANICHAEAN LETTER DALETH	[4B83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC5, 0x003F };
    uint32_t const ces[9] = { 0x4B83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_156)
{
    // 10AC5 0061;	
    // (‚Äé‚Äéê´Ö‚Äé‚Äé) MANICHAEAN LETTER DALETH	[4B83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC5, 0x0061 };
    uint32_t const ces[9] = { 0x4B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_157)
{
    // 10AC5 0041;	
    // (‚Äé‚Äéê´Ö‚Äé‚Äé) MANICHAEAN LETTER DALETH	[4B83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC5, 0x0041 };
    uint32_t const ces[9] = { 0x4B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_158)
{
    // 10AC5 0062;	
    // (‚Äé‚Äéê´Ö‚Äé‚Äé) MANICHAEAN LETTER DALETH	[4B83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC5, 0x0062 };
    uint32_t const ces[9] = { 0x4B83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_159)
{
    // 10AC6 0021;	
    // (‚Äé‚Äéê´Ü‚Äé‚Äé) MANICHAEAN LETTER HE	[4B84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC6, 0x0021 };
    uint32_t const ces[9] = { 0x4B84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_160)
{
    // 10AC6 003F;	
    // (‚Äé‚Äéê´Ü‚Äé‚Äé) MANICHAEAN LETTER HE	[4B84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC6, 0x003F };
    uint32_t const ces[9] = { 0x4B84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_161)
{
    // 10AC6 0061;	
    // (‚Äé‚Äéê´Ü‚Äé‚Äé) MANICHAEAN LETTER HE	[4B84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC6, 0x0061 };
    uint32_t const ces[9] = { 0x4B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_162)
{
    // 10AC6 0041;	
    // (‚Äé‚Äéê´Ü‚Äé‚Äé) MANICHAEAN LETTER HE	[4B84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC6, 0x0041 };
    uint32_t const ces[9] = { 0x4B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_163)
{
    // 10AC6 0062;	
    // (‚Äé‚Äéê´Ü‚Äé‚Äé) MANICHAEAN LETTER HE	[4B84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC6, 0x0062 };
    uint32_t const ces[9] = { 0x4B84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_164)
{
    // 10AC7 0021;	
    // (‚Äé‚Äéê´á‚Äé‚Äé) MANICHAEAN LETTER WAW	[4B85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC7, 0x0021 };
    uint32_t const ces[9] = { 0x4B85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_165)
{
    // 10AC8 0021;	
    // (‚Äé‚Äéê´à‚Äé‚Äé) MANICHAEAN SIGN UD	[4B85 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10AC8, 0x0021 };
    uint32_t const ces[11] = { 0x4B85, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_166)
{
    // 10AC7 003F;	
    // (‚Äé‚Äéê´á‚Äé‚Äé) MANICHAEAN LETTER WAW	[4B85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC7, 0x003F };
    uint32_t const ces[9] = { 0x4B85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_167)
{
    // 10AC8 003F;	
    // (‚Äé‚Äéê´à‚Äé‚Äé) MANICHAEAN SIGN UD	[4B85 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10AC8, 0x003F };
    uint32_t const ces[11] = { 0x4B85, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_168)
{
    // 10AC7 0061;	
    // (‚Äé‚Äéê´á‚Äé‚Äé) MANICHAEAN LETTER WAW	[4B85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC7, 0x0061 };
    uint32_t const ces[9] = { 0x4B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_169)
{
    // 10AC7 0041;	
    // (‚Äé‚Äéê´á‚Äé‚Äé) MANICHAEAN LETTER WAW	[4B85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC7, 0x0041 };
    uint32_t const ces[9] = { 0x4B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_170)
{
    // 10AC8 0061;	
    // (‚Äé‚Äéê´à‚Äé‚Äé) MANICHAEAN SIGN UD	[4B85 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10AC8, 0x0061 };
    uint32_t const ces[11] = { 0x4B85, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_171)
{
    // 10AC8 0041;	
    // (‚Äé‚Äéê´à‚Äé‚Äé) MANICHAEAN SIGN UD	[4B85 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10AC8, 0x0041 };
    uint32_t const ces[11] = { 0x4B85, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_172)
{
    // 10AC7 0062;	
    // (‚Äé‚Äéê´á‚Äé‚Äé) MANICHAEAN LETTER WAW	[4B85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC7, 0x0062 };
    uint32_t const ces[9] = { 0x4B85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_173)
{
    // 10AC8 0062;	
    // (‚Äé‚Äéê´à‚Äé‚Äé) MANICHAEAN SIGN UD	[4B85 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10AC8, 0x0062 };
    uint32_t const ces[11] = { 0x4B85, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_174)
{
    // 10AC9 0021;	
    // (‚Äé‚Äéê´â‚Äé‚Äé) MANICHAEAN LETTER ZAYIN	[4B86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC9, 0x0021 };
    uint32_t const ces[9] = { 0x4B86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_175)
{
    // 10AC9 003F;	
    // (‚Äé‚Äéê´â‚Äé‚Äé) MANICHAEAN LETTER ZAYIN	[4B86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC9, 0x003F };
    uint32_t const ces[9] = { 0x4B86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_176)
{
    // 10AC9 0061;	
    // (‚Äé‚Äéê´â‚Äé‚Äé) MANICHAEAN LETTER ZAYIN	[4B86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC9, 0x0061 };
    uint32_t const ces[9] = { 0x4B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_177)
{
    // 10AC9 0041;	
    // (‚Äé‚Äéê´â‚Äé‚Äé) MANICHAEAN LETTER ZAYIN	[4B86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AC9, 0x0041 };
    uint32_t const ces[9] = { 0x4B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_178)
{
    // 10AC9 0062;	
    // (‚Äé‚Äéê´â‚Äé‚Äé) MANICHAEAN LETTER ZAYIN	[4B86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AC9, 0x0062 };
    uint32_t const ces[9] = { 0x4B86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_179)
{
    // 10ACA 0021;	
    // (‚Äé‚Äéê´ä‚Äé‚Äé) MANICHAEAN LETTER ZHAYIN	[4B87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACA, 0x0021 };
    uint32_t const ces[9] = { 0x4B87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_180)
{
    // 10ACA 003F;	
    // (‚Äé‚Äéê´ä‚Äé‚Äé) MANICHAEAN LETTER ZHAYIN	[4B87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACA, 0x003F };
    uint32_t const ces[9] = { 0x4B87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_181)
{
    // 10ACA 0061;	
    // (‚Äé‚Äéê´ä‚Äé‚Äé) MANICHAEAN LETTER ZHAYIN	[4B87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACA, 0x0061 };
    uint32_t const ces[9] = { 0x4B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_182)
{
    // 10ACA 0041;	
    // (‚Äé‚Äéê´ä‚Äé‚Äé) MANICHAEAN LETTER ZHAYIN	[4B87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACA, 0x0041 };
    uint32_t const ces[9] = { 0x4B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_183)
{
    // 10ACA 0062;	
    // (‚Äé‚Äéê´ä‚Äé‚Äé) MANICHAEAN LETTER ZHAYIN	[4B87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACA, 0x0062 };
    uint32_t const ces[9] = { 0x4B87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_184)
{
    // 10ACB 0021;	
    // (‚Äé‚Äéê´ã‚Äé‚Äé) MANICHAEAN LETTER JAYIN	[4B88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACB, 0x0021 };
    uint32_t const ces[9] = { 0x4B88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_185)
{
    // 10ACB 003F;	
    // (‚Äé‚Äéê´ã‚Äé‚Äé) MANICHAEAN LETTER JAYIN	[4B88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACB, 0x003F };
    uint32_t const ces[9] = { 0x4B88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_186)
{
    // 10ACB 0061;	
    // (‚Äé‚Äéê´ã‚Äé‚Äé) MANICHAEAN LETTER JAYIN	[4B88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACB, 0x0061 };
    uint32_t const ces[9] = { 0x4B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_187)
{
    // 10ACB 0041;	
    // (‚Äé‚Äéê´ã‚Äé‚Äé) MANICHAEAN LETTER JAYIN	[4B88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACB, 0x0041 };
    uint32_t const ces[9] = { 0x4B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_188)
{
    // 10ACB 0062;	
    // (‚Äé‚Äéê´ã‚Äé‚Äé) MANICHAEAN LETTER JAYIN	[4B88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACB, 0x0062 };
    uint32_t const ces[9] = { 0x4B88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_189)
{
    // 10ACC 0021;	
    // (‚Äé‚Äéê´å‚Äé‚Äé) MANICHAEAN LETTER JHAYIN	[4B89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACC, 0x0021 };
    uint32_t const ces[9] = { 0x4B89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_190)
{
    // 10ACC 003F;	
    // (‚Äé‚Äéê´å‚Äé‚Äé) MANICHAEAN LETTER JHAYIN	[4B89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACC, 0x003F };
    uint32_t const ces[9] = { 0x4B89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_191)
{
    // 10ACC 0061;	
    // (‚Äé‚Äéê´å‚Äé‚Äé) MANICHAEAN LETTER JHAYIN	[4B89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACC, 0x0061 };
    uint32_t const ces[9] = { 0x4B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_192)
{
    // 10ACC 0041;	
    // (‚Äé‚Äéê´å‚Äé‚Äé) MANICHAEAN LETTER JHAYIN	[4B89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACC, 0x0041 };
    uint32_t const ces[9] = { 0x4B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_193)
{
    // 10ACC 0062;	
    // (‚Äé‚Äéê´å‚Äé‚Äé) MANICHAEAN LETTER JHAYIN	[4B89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACC, 0x0062 };
    uint32_t const ces[9] = { 0x4B89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_194)
{
    // 10ACD 0021;	
    // (‚Äé‚Äéê´ç‚Äé‚Äé) MANICHAEAN LETTER HETH	[4B8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACD, 0x0021 };
    uint32_t const ces[9] = { 0x4B8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_195)
{
    // 10ACD 003F;	
    // (‚Äé‚Äéê´ç‚Äé‚Äé) MANICHAEAN LETTER HETH	[4B8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACD, 0x003F };
    uint32_t const ces[9] = { 0x4B8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_196)
{
    // 10ACD 0061;	
    // (‚Äé‚Äéê´ç‚Äé‚Äé) MANICHAEAN LETTER HETH	[4B8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACD, 0x0061 };
    uint32_t const ces[9] = { 0x4B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_197)
{
    // 10ACD 0041;	
    // (‚Äé‚Äéê´ç‚Äé‚Äé) MANICHAEAN LETTER HETH	[4B8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACD, 0x0041 };
    uint32_t const ces[9] = { 0x4B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_198)
{
    // 10ACD 0062;	
    // (‚Äé‚Äéê´ç‚Äé‚Äé) MANICHAEAN LETTER HETH	[4B8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACD, 0x0062 };
    uint32_t const ces[9] = { 0x4B8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_199)
{
    // 10ACE 0021;	
    // (‚Äé‚Äéê´é‚Äé‚Äé) MANICHAEAN LETTER TETH	[4B8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACE, 0x0021 };
    uint32_t const ces[9] = { 0x4B8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_200)
{
    // 10ACE 003F;	
    // (‚Äé‚Äéê´é‚Äé‚Äé) MANICHAEAN LETTER TETH	[4B8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACE, 0x003F };
    uint32_t const ces[9] = { 0x4B8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_201)
{
    // 10ACE 0061;	
    // (‚Äé‚Äéê´é‚Äé‚Äé) MANICHAEAN LETTER TETH	[4B8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACE, 0x0061 };
    uint32_t const ces[9] = { 0x4B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_202)
{
    // 10ACE 0041;	
    // (‚Äé‚Äéê´é‚Äé‚Äé) MANICHAEAN LETTER TETH	[4B8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACE, 0x0041 };
    uint32_t const ces[9] = { 0x4B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_203)
{
    // 10ACE 0062;	
    // (‚Äé‚Äéê´é‚Äé‚Äé) MANICHAEAN LETTER TETH	[4B8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACE, 0x0062 };
    uint32_t const ces[9] = { 0x4B8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_204)
{
    // 10ACF 0021;	
    // (‚Äé‚Äéê´è‚Äé‚Äé) MANICHAEAN LETTER YODH	[4B8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACF, 0x0021 };
    uint32_t const ces[9] = { 0x4B8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_205)
{
    // 10ACF 003F;	
    // (‚Äé‚Äéê´è‚Äé‚Äé) MANICHAEAN LETTER YODH	[4B8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACF, 0x003F };
    uint32_t const ces[9] = { 0x4B8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_206)
{
    // 10ACF 0061;	
    // (‚Äé‚Äéê´è‚Äé‚Äé) MANICHAEAN LETTER YODH	[4B8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACF, 0x0061 };
    uint32_t const ces[9] = { 0x4B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_207)
{
    // 10ACF 0041;	
    // (‚Äé‚Äéê´è‚Äé‚Äé) MANICHAEAN LETTER YODH	[4B8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ACF, 0x0041 };
    uint32_t const ces[9] = { 0x4B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_208)
{
    // 10ACF 0062;	
    // (‚Äé‚Äéê´è‚Äé‚Äé) MANICHAEAN LETTER YODH	[4B8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ACF, 0x0062 };
    uint32_t const ces[9] = { 0x4B8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_209)
{
    // 10AD0 0021;	
    // (‚Äé‚Äéê´ê‚Äé‚Äé) MANICHAEAN LETTER KAPH	[4B8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD0, 0x0021 };
    uint32_t const ces[9] = { 0x4B8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_210)
{
    // 10AD0 003F;	
    // (‚Äé‚Äéê´ê‚Äé‚Äé) MANICHAEAN LETTER KAPH	[4B8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD0, 0x003F };
    uint32_t const ces[9] = { 0x4B8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_211)
{
    // 10AD0 0061;	
    // (‚Äé‚Äéê´ê‚Äé‚Äé) MANICHAEAN LETTER KAPH	[4B8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD0, 0x0061 };
    uint32_t const ces[9] = { 0x4B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_212)
{
    // 10AD0 0041;	
    // (‚Äé‚Äéê´ê‚Äé‚Äé) MANICHAEAN LETTER KAPH	[4B8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD0, 0x0041 };
    uint32_t const ces[9] = { 0x4B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_213)
{
    // 10AD0 0062;	
    // (‚Äé‚Äéê´ê‚Äé‚Äé) MANICHAEAN LETTER KAPH	[4B8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD0, 0x0062 };
    uint32_t const ces[9] = { 0x4B8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_214)
{
    // 10AD1 0021;	
    // (‚Äé‚Äéê´ë‚Äé‚Äé) MANICHAEAN LETTER XAPH	[4B8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD1, 0x0021 };
    uint32_t const ces[9] = { 0x4B8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_215)
{
    // 10AD1 003F;	
    // (‚Äé‚Äéê´ë‚Äé‚Äé) MANICHAEAN LETTER XAPH	[4B8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD1, 0x003F };
    uint32_t const ces[9] = { 0x4B8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_216)
{
    // 10AD1 0061;	
    // (‚Äé‚Äéê´ë‚Äé‚Äé) MANICHAEAN LETTER XAPH	[4B8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD1, 0x0061 };
    uint32_t const ces[9] = { 0x4B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_217)
{
    // 10AD1 0041;	
    // (‚Äé‚Äéê´ë‚Äé‚Äé) MANICHAEAN LETTER XAPH	[4B8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD1, 0x0041 };
    uint32_t const ces[9] = { 0x4B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_218)
{
    // 10AD1 0062;	
    // (‚Äé‚Äéê´ë‚Äé‚Äé) MANICHAEAN LETTER XAPH	[4B8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD1, 0x0062 };
    uint32_t const ces[9] = { 0x4B8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_219)
{
    // 10AD2 0021;	
    // (‚Äé‚Äéê´í‚Äé‚Äé) MANICHAEAN LETTER KHAPH	[4B8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD2, 0x0021 };
    uint32_t const ces[9] = { 0x4B8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_220)
{
    // 10AD2 003F;	
    // (‚Äé‚Äéê´í‚Äé‚Äé) MANICHAEAN LETTER KHAPH	[4B8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD2, 0x003F };
    uint32_t const ces[9] = { 0x4B8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_221)
{
    // 10AD2 0061;	
    // (‚Äé‚Äéê´í‚Äé‚Äé) MANICHAEAN LETTER KHAPH	[4B8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD2, 0x0061 };
    uint32_t const ces[9] = { 0x4B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_222)
{
    // 10AD2 0041;	
    // (‚Äé‚Äéê´í‚Äé‚Äé) MANICHAEAN LETTER KHAPH	[4B8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD2, 0x0041 };
    uint32_t const ces[9] = { 0x4B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_223)
{
    // 10AD2 0062;	
    // (‚Äé‚Äéê´í‚Äé‚Äé) MANICHAEAN LETTER KHAPH	[4B8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD2, 0x0062 };
    uint32_t const ces[9] = { 0x4B8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_224)
{
    // 10AD3 0021;	
    // (‚Äé‚Äéê´ì‚Äé‚Äé) MANICHAEAN LETTER LAMEDH	[4B90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD3, 0x0021 };
    uint32_t const ces[9] = { 0x4B90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_225)
{
    // 10AD3 003F;	
    // (‚Äé‚Äéê´ì‚Äé‚Äé) MANICHAEAN LETTER LAMEDH	[4B90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD3, 0x003F };
    uint32_t const ces[9] = { 0x4B90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_226)
{
    // 10AD3 0061;	
    // (‚Äé‚Äéê´ì‚Äé‚Äé) MANICHAEAN LETTER LAMEDH	[4B90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD3, 0x0061 };
    uint32_t const ces[9] = { 0x4B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_227)
{
    // 10AD3 0041;	
    // (‚Äé‚Äéê´ì‚Äé‚Äé) MANICHAEAN LETTER LAMEDH	[4B90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD3, 0x0041 };
    uint32_t const ces[9] = { 0x4B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_228)
{
    // 10AD3 0062;	
    // (‚Äé‚Äéê´ì‚Äé‚Äé) MANICHAEAN LETTER LAMEDH	[4B90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD3, 0x0062 };
    uint32_t const ces[9] = { 0x4B90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_229)
{
    // 10AD4 0021;	
    // (‚Äé‚Äéê´î‚Äé‚Äé) MANICHAEAN LETTER DHAMEDH	[4B91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD4, 0x0021 };
    uint32_t const ces[9] = { 0x4B91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_230)
{
    // 10AD4 003F;	
    // (‚Äé‚Äéê´î‚Äé‚Äé) MANICHAEAN LETTER DHAMEDH	[4B91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD4, 0x003F };
    uint32_t const ces[9] = { 0x4B91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_231)
{
    // 10AD4 0061;	
    // (‚Äé‚Äéê´î‚Äé‚Äé) MANICHAEAN LETTER DHAMEDH	[4B91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD4, 0x0061 };
    uint32_t const ces[9] = { 0x4B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_232)
{
    // 10AD4 0041;	
    // (‚Äé‚Äéê´î‚Äé‚Äé) MANICHAEAN LETTER DHAMEDH	[4B91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD4, 0x0041 };
    uint32_t const ces[9] = { 0x4B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_233)
{
    // 10AD4 0062;	
    // (‚Äé‚Äéê´î‚Äé‚Äé) MANICHAEAN LETTER DHAMEDH	[4B91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD4, 0x0062 };
    uint32_t const ces[9] = { 0x4B91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_234)
{
    // 10AD5 0021;	
    // (‚Äé‚Äéê´ï‚Äé‚Äé) MANICHAEAN LETTER THAMEDH	[4B92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD5, 0x0021 };
    uint32_t const ces[9] = { 0x4B92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_235)
{
    // 10AD5 003F;	
    // (‚Äé‚Äéê´ï‚Äé‚Äé) MANICHAEAN LETTER THAMEDH	[4B92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD5, 0x003F };
    uint32_t const ces[9] = { 0x4B92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_236)
{
    // 10AD5 0061;	
    // (‚Äé‚Äéê´ï‚Äé‚Äé) MANICHAEAN LETTER THAMEDH	[4B92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD5, 0x0061 };
    uint32_t const ces[9] = { 0x4B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_237)
{
    // 10AD5 0041;	
    // (‚Äé‚Äéê´ï‚Äé‚Äé) MANICHAEAN LETTER THAMEDH	[4B92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD5, 0x0041 };
    uint32_t const ces[9] = { 0x4B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_238)
{
    // 10AD5 0062;	
    // (‚Äé‚Äéê´ï‚Äé‚Äé) MANICHAEAN LETTER THAMEDH	[4B92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD5, 0x0062 };
    uint32_t const ces[9] = { 0x4B92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_239)
{
    // 10AD6 0021;	
    // (‚Äé‚Äéê´ñ‚Äé‚Äé) MANICHAEAN LETTER MEM	[4B93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD6, 0x0021 };
    uint32_t const ces[9] = { 0x4B93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_240)
{
    // 10AD6 003F;	
    // (‚Äé‚Äéê´ñ‚Äé‚Äé) MANICHAEAN LETTER MEM	[4B93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD6, 0x003F };
    uint32_t const ces[9] = { 0x4B93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_241)
{
    // 10AD6 0061;	
    // (‚Äé‚Äéê´ñ‚Äé‚Äé) MANICHAEAN LETTER MEM	[4B93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD6, 0x0061 };
    uint32_t const ces[9] = { 0x4B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_242)
{
    // 10AD6 0041;	
    // (‚Äé‚Äéê´ñ‚Äé‚Äé) MANICHAEAN LETTER MEM	[4B93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD6, 0x0041 };
    uint32_t const ces[9] = { 0x4B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_243)
{
    // 10AD6 0062;	
    // (‚Äé‚Äéê´ñ‚Äé‚Äé) MANICHAEAN LETTER MEM	[4B93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD6, 0x0062 };
    uint32_t const ces[9] = { 0x4B93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_244)
{
    // 10AD7 0021;	
    // (‚Äé‚Äéê´ó‚Äé‚Äé) MANICHAEAN LETTER NUN	[4B94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD7, 0x0021 };
    uint32_t const ces[9] = { 0x4B94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_245)
{
    // 10AD7 003F;	
    // (‚Äé‚Äéê´ó‚Äé‚Äé) MANICHAEAN LETTER NUN	[4B94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD7, 0x003F };
    uint32_t const ces[9] = { 0x4B94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_246)
{
    // 10AD7 0061;	
    // (‚Äé‚Äéê´ó‚Äé‚Äé) MANICHAEAN LETTER NUN	[4B94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD7, 0x0061 };
    uint32_t const ces[9] = { 0x4B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_247)
{
    // 10AD7 0041;	
    // (‚Äé‚Äéê´ó‚Äé‚Äé) MANICHAEAN LETTER NUN	[4B94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD7, 0x0041 };
    uint32_t const ces[9] = { 0x4B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_248)
{
    // 10AD7 0062;	
    // (‚Äé‚Äéê´ó‚Äé‚Äé) MANICHAEAN LETTER NUN	[4B94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD7, 0x0062 };
    uint32_t const ces[9] = { 0x4B94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_249)
{
    // 10AD8 0021;	
    // (‚Äé‚Äéê´ò‚Äé‚Äé) MANICHAEAN LETTER SAMEKH	[4B95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD8, 0x0021 };
    uint32_t const ces[9] = { 0x4B95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_250)
{
    // 10AD8 003F;	
    // (‚Äé‚Äéê´ò‚Äé‚Äé) MANICHAEAN LETTER SAMEKH	[4B95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD8, 0x003F };
    uint32_t const ces[9] = { 0x4B95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_251)
{
    // 10AD8 0061;	
    // (‚Äé‚Äéê´ò‚Äé‚Äé) MANICHAEAN LETTER SAMEKH	[4B95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD8, 0x0061 };
    uint32_t const ces[9] = { 0x4B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_252)
{
    // 10AD8 0041;	
    // (‚Äé‚Äéê´ò‚Äé‚Äé) MANICHAEAN LETTER SAMEKH	[4B95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD8, 0x0041 };
    uint32_t const ces[9] = { 0x4B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_253)
{
    // 10AD8 0062;	
    // (‚Äé‚Äéê´ò‚Äé‚Äé) MANICHAEAN LETTER SAMEKH	[4B95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD8, 0x0062 };
    uint32_t const ces[9] = { 0x4B95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_254)
{
    // 10AD9 0021;	
    // (‚Äé‚Äéê´ô‚Äé‚Äé) MANICHAEAN LETTER AYIN	[4B96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD9, 0x0021 };
    uint32_t const ces[9] = { 0x4B96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_255)
{
    // 10AD9 003F;	
    // (‚Äé‚Äéê´ô‚Äé‚Äé) MANICHAEAN LETTER AYIN	[4B96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD9, 0x003F };
    uint32_t const ces[9] = { 0x4B96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_256)
{
    // 10AD9 0061;	
    // (‚Äé‚Äéê´ô‚Äé‚Äé) MANICHAEAN LETTER AYIN	[4B96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD9, 0x0061 };
    uint32_t const ces[9] = { 0x4B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_257)
{
    // 10AD9 0041;	
    // (‚Äé‚Äéê´ô‚Äé‚Äé) MANICHAEAN LETTER AYIN	[4B96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AD9, 0x0041 };
    uint32_t const ces[9] = { 0x4B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_258)
{
    // 10AD9 0062;	
    // (‚Äé‚Äéê´ô‚Äé‚Äé) MANICHAEAN LETTER AYIN	[4B96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AD9, 0x0062 };
    uint32_t const ces[9] = { 0x4B96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_259)
{
    // 10ADA 0021;	
    // (‚Äé‚Äéê´ö‚Äé‚Äé) MANICHAEAN LETTER AAYIN	[4B97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADA, 0x0021 };
    uint32_t const ces[9] = { 0x4B97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_260)
{
    // 10ADA 003F;	
    // (‚Äé‚Äéê´ö‚Äé‚Äé) MANICHAEAN LETTER AAYIN	[4B97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADA, 0x003F };
    uint32_t const ces[9] = { 0x4B97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_261)
{
    // 10ADA 0061;	
    // (‚Äé‚Äéê´ö‚Äé‚Äé) MANICHAEAN LETTER AAYIN	[4B97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADA, 0x0061 };
    uint32_t const ces[9] = { 0x4B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_262)
{
    // 10ADA 0041;	
    // (‚Äé‚Äéê´ö‚Äé‚Äé) MANICHAEAN LETTER AAYIN	[4B97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADA, 0x0041 };
    uint32_t const ces[9] = { 0x4B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_263)
{
    // 10ADA 0062;	
    // (‚Äé‚Äéê´ö‚Äé‚Äé) MANICHAEAN LETTER AAYIN	[4B97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADA, 0x0062 };
    uint32_t const ces[9] = { 0x4B97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_264)
{
    // 10ADB 0021;	
    // (‚Äé‚Äéê´õ‚Äé‚Äé) MANICHAEAN LETTER PE	[4B98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADB, 0x0021 };
    uint32_t const ces[9] = { 0x4B98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_265)
{
    // 10ADB 003F;	
    // (‚Äé‚Äéê´õ‚Äé‚Äé) MANICHAEAN LETTER PE	[4B98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADB, 0x003F };
    uint32_t const ces[9] = { 0x4B98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_266)
{
    // 10ADB 0061;	
    // (‚Äé‚Äéê´õ‚Äé‚Äé) MANICHAEAN LETTER PE	[4B98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADB, 0x0061 };
    uint32_t const ces[9] = { 0x4B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_267)
{
    // 10ADB 0041;	
    // (‚Äé‚Äéê´õ‚Äé‚Äé) MANICHAEAN LETTER PE	[4B98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADB, 0x0041 };
    uint32_t const ces[9] = { 0x4B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_268)
{
    // 10ADB 0062;	
    // (‚Äé‚Äéê´õ‚Äé‚Äé) MANICHAEAN LETTER PE	[4B98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADB, 0x0062 };
    uint32_t const ces[9] = { 0x4B98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_269)
{
    // 10ADC 0021;	
    // (‚Äé‚Äéê´ú‚Äé‚Äé) MANICHAEAN LETTER FE	[4B99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADC, 0x0021 };
    uint32_t const ces[9] = { 0x4B99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_270)
{
    // 10ADC 003F;	
    // (‚Äé‚Äéê´ú‚Äé‚Äé) MANICHAEAN LETTER FE	[4B99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADC, 0x003F };
    uint32_t const ces[9] = { 0x4B99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_271)
{
    // 10ADC 0061;	
    // (‚Äé‚Äéê´ú‚Äé‚Äé) MANICHAEAN LETTER FE	[4B99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADC, 0x0061 };
    uint32_t const ces[9] = { 0x4B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_272)
{
    // 10ADC 0041;	
    // (‚Äé‚Äéê´ú‚Äé‚Äé) MANICHAEAN LETTER FE	[4B99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADC, 0x0041 };
    uint32_t const ces[9] = { 0x4B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_273)
{
    // 10ADC 0062;	
    // (‚Äé‚Äéê´ú‚Äé‚Äé) MANICHAEAN LETTER FE	[4B99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADC, 0x0062 };
    uint32_t const ces[9] = { 0x4B99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_274)
{
    // 10ADD 0021;	
    // (‚Äé‚Äéê´ù‚Äé‚Äé) MANICHAEAN LETTER SADHE	[4B9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADD, 0x0021 };
    uint32_t const ces[9] = { 0x4B9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_275)
{
    // 10ADD 003F;	
    // (‚Äé‚Äéê´ù‚Äé‚Äé) MANICHAEAN LETTER SADHE	[4B9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADD, 0x003F };
    uint32_t const ces[9] = { 0x4B9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_276)
{
    // 10ADD 0061;	
    // (‚Äé‚Äéê´ù‚Äé‚Äé) MANICHAEAN LETTER SADHE	[4B9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADD, 0x0061 };
    uint32_t const ces[9] = { 0x4B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_277)
{
    // 10ADD 0041;	
    // (‚Äé‚Äéê´ù‚Äé‚Äé) MANICHAEAN LETTER SADHE	[4B9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADD, 0x0041 };
    uint32_t const ces[9] = { 0x4B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_278)
{
    // 10ADD 0062;	
    // (‚Äé‚Äéê´ù‚Äé‚Äé) MANICHAEAN LETTER SADHE	[4B9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADD, 0x0062 };
    uint32_t const ces[9] = { 0x4B9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_279)
{
    // 10ADE 0021;	
    // (‚Äé‚Äéê´û‚Äé‚Äé) MANICHAEAN LETTER QOPH	[4B9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADE, 0x0021 };
    uint32_t const ces[9] = { 0x4B9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_280)
{
    // 10ADE 003F;	
    // (‚Äé‚Äéê´û‚Äé‚Äé) MANICHAEAN LETTER QOPH	[4B9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADE, 0x003F };
    uint32_t const ces[9] = { 0x4B9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_281)
{
    // 10ADE 0061;	
    // (‚Äé‚Äéê´û‚Äé‚Äé) MANICHAEAN LETTER QOPH	[4B9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADE, 0x0061 };
    uint32_t const ces[9] = { 0x4B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_282)
{
    // 10ADE 0041;	
    // (‚Äé‚Äéê´û‚Äé‚Äé) MANICHAEAN LETTER QOPH	[4B9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADE, 0x0041 };
    uint32_t const ces[9] = { 0x4B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_283)
{
    // 10ADE 0062;	
    // (‚Äé‚Äéê´û‚Äé‚Äé) MANICHAEAN LETTER QOPH	[4B9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADE, 0x0062 };
    uint32_t const ces[9] = { 0x4B9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_284)
{
    // 10ADF 0021;	
    // (‚Äé‚Äéê´ü‚Äé‚Äé) MANICHAEAN LETTER XOPH	[4B9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADF, 0x0021 };
    uint32_t const ces[9] = { 0x4B9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_285)
{
    // 10ADF 003F;	
    // (‚Äé‚Äéê´ü‚Äé‚Äé) MANICHAEAN LETTER XOPH	[4B9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADF, 0x003F };
    uint32_t const ces[9] = { 0x4B9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_286)
{
    // 10ADF 0061;	
    // (‚Äé‚Äéê´ü‚Äé‚Äé) MANICHAEAN LETTER XOPH	[4B9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADF, 0x0061 };
    uint32_t const ces[9] = { 0x4B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_287)
{
    // 10ADF 0041;	
    // (‚Äé‚Äéê´ü‚Äé‚Äé) MANICHAEAN LETTER XOPH	[4B9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ADF, 0x0041 };
    uint32_t const ces[9] = { 0x4B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_288)
{
    // 10ADF 0062;	
    // (‚Äé‚Äéê´ü‚Äé‚Äé) MANICHAEAN LETTER XOPH	[4B9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ADF, 0x0062 };
    uint32_t const ces[9] = { 0x4B9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_289)
{
    // 10AE0 0021;	
    // (‚Äé‚Äéê´†‚Äé‚Äé) MANICHAEAN LETTER QHOPH	[4B9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE0, 0x0021 };
    uint32_t const ces[9] = { 0x4B9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_290)
{
    // 10AE0 003F;	
    // (‚Äé‚Äéê´†‚Äé‚Äé) MANICHAEAN LETTER QHOPH	[4B9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE0, 0x003F };
    uint32_t const ces[9] = { 0x4B9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_291)
{
    // 10AE0 0061;	
    // (‚Äé‚Äéê´†‚Äé‚Äé) MANICHAEAN LETTER QHOPH	[4B9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE0, 0x0061 };
    uint32_t const ces[9] = { 0x4B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_292)
{
    // 10AE0 0041;	
    // (‚Äé‚Äéê´†‚Äé‚Äé) MANICHAEAN LETTER QHOPH	[4B9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE0, 0x0041 };
    uint32_t const ces[9] = { 0x4B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_293)
{
    // 10AE0 0062;	
    // (‚Äé‚Äéê´†‚Äé‚Äé) MANICHAEAN LETTER QHOPH	[4B9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE0, 0x0062 };
    uint32_t const ces[9] = { 0x4B9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_294)
{
    // 10AE1 0021;	
    // (‚Äé‚Äéê´°‚Äé‚Äé) MANICHAEAN LETTER RESH	[4B9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE1, 0x0021 };
    uint32_t const ces[9] = { 0x4B9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_295)
{
    // 10AE1 003F;	
    // (‚Äé‚Äéê´°‚Äé‚Äé) MANICHAEAN LETTER RESH	[4B9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE1, 0x003F };
    uint32_t const ces[9] = { 0x4B9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_296)
{
    // 10AE1 0061;	
    // (‚Äé‚Äéê´°‚Äé‚Äé) MANICHAEAN LETTER RESH	[4B9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE1, 0x0061 };
    uint32_t const ces[9] = { 0x4B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_297)
{
    // 10AE1 0041;	
    // (‚Äé‚Äéê´°‚Äé‚Äé) MANICHAEAN LETTER RESH	[4B9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE1, 0x0041 };
    uint32_t const ces[9] = { 0x4B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_298)
{
    // 10AE1 0062;	
    // (‚Äé‚Äéê´°‚Äé‚Äé) MANICHAEAN LETTER RESH	[4B9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE1, 0x0062 };
    uint32_t const ces[9] = { 0x4B9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_299)
{
    // 10AE2 0021;	
    // (‚Äé‚Äéê´¢‚Äé‚Äé) MANICHAEAN LETTER SHIN	[4B9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE2, 0x0021 };
    uint32_t const ces[9] = { 0x4B9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_300)
{
    // 10AE2 003F;	
    // (‚Äé‚Äéê´¢‚Äé‚Äé) MANICHAEAN LETTER SHIN	[4B9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE2, 0x003F };
    uint32_t const ces[9] = { 0x4B9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_301)
{
    // 10AE2 0061;	
    // (‚Äé‚Äéê´¢‚Äé‚Äé) MANICHAEAN LETTER SHIN	[4B9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE2, 0x0061 };
    uint32_t const ces[9] = { 0x4B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_302)
{
    // 10AE2 0041;	
    // (‚Äé‚Äéê´¢‚Äé‚Äé) MANICHAEAN LETTER SHIN	[4B9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE2, 0x0041 };
    uint32_t const ces[9] = { 0x4B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_303)
{
    // 10AE2 0062;	
    // (‚Äé‚Äéê´¢‚Äé‚Äé) MANICHAEAN LETTER SHIN	[4B9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE2, 0x0062 };
    uint32_t const ces[9] = { 0x4B9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_304)
{
    // 10AE3 0021;	
    // (‚Äé‚Äéê´£‚Äé‚Äé) MANICHAEAN LETTER SSHIN	[4BA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE3, 0x0021 };
    uint32_t const ces[9] = { 0x4BA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_305)
{
    // 10AE3 003F;	
    // (‚Äé‚Äéê´£‚Äé‚Äé) MANICHAEAN LETTER SSHIN	[4BA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE3, 0x003F };
    uint32_t const ces[9] = { 0x4BA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_306)
{
    // 10AE3 0061;	
    // (‚Äé‚Äéê´£‚Äé‚Äé) MANICHAEAN LETTER SSHIN	[4BA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE3, 0x0061 };
    uint32_t const ces[9] = { 0x4BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_307)
{
    // 10AE3 0041;	
    // (‚Äé‚Äéê´£‚Äé‚Äé) MANICHAEAN LETTER SSHIN	[4BA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE3, 0x0041 };
    uint32_t const ces[9] = { 0x4BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_308)
{
    // 10AE3 0062;	
    // (‚Äé‚Äéê´£‚Äé‚Äé) MANICHAEAN LETTER SSHIN	[4BA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE3, 0x0062 };
    uint32_t const ces[9] = { 0x4BA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_309)
{
    // 10AE4 0021;	
    // (‚Äé‚Äéê´§‚Äé‚Äé) MANICHAEAN LETTER TAW	[4BA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE4, 0x0021 };
    uint32_t const ces[9] = { 0x4BA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_310)
{
    // 10AE4 003F;	
    // (‚Äé‚Äéê´§‚Äé‚Äé) MANICHAEAN LETTER TAW	[4BA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE4, 0x003F };
    uint32_t const ces[9] = { 0x4BA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_311)
{
    // 10AE4 0061;	
    // (‚Äé‚Äéê´§‚Äé‚Äé) MANICHAEAN LETTER TAW	[4BA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE4, 0x0061 };
    uint32_t const ces[9] = { 0x4BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_312)
{
    // 10AE4 0041;	
    // (‚Äé‚Äéê´§‚Äé‚Äé) MANICHAEAN LETTER TAW	[4BA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE4, 0x0041 };
    uint32_t const ces[9] = { 0x4BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_313)
{
    // 10AE4 0062;	
    // (‚Äé‚Äéê´§‚Äé‚Äé) MANICHAEAN LETTER TAW	[4BA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE4, 0x0062 };
    uint32_t const ces[9] = { 0x4BA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_314)
{
    // 10380 0021;	
    // (êéÄ) UGARITIC LETTER ALPA	[4BA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10380, 0x0021 };
    uint32_t const ces[9] = { 0x4BA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_315)
{
    // 10380 003F;	
    // (êéÄ) UGARITIC LETTER ALPA	[4BA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10380, 0x003F };
    uint32_t const ces[9] = { 0x4BA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_316)
{
    // 10380 0061;	
    // (êéÄ) UGARITIC LETTER ALPA	[4BA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10380, 0x0061 };
    uint32_t const ces[9] = { 0x4BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_317)
{
    // 10380 0041;	
    // (êéÄ) UGARITIC LETTER ALPA	[4BA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10380, 0x0041 };
    uint32_t const ces[9] = { 0x4BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_318)
{
    // 10380 0062;	
    // (êéÄ) UGARITIC LETTER ALPA	[4BA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10380, 0x0062 };
    uint32_t const ces[9] = { 0x4BA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_319)
{
    // 10381 0021;	
    // (êéÅ) UGARITIC LETTER BETA	[4BA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10381, 0x0021 };
    uint32_t const ces[9] = { 0x4BA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_320)
{
    // 10381 003F;	
    // (êéÅ) UGARITIC LETTER BETA	[4BA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10381, 0x003F };
    uint32_t const ces[9] = { 0x4BA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_321)
{
    // 10381 0061;	
    // (êéÅ) UGARITIC LETTER BETA	[4BA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10381, 0x0061 };
    uint32_t const ces[9] = { 0x4BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_322)
{
    // 10381 0041;	
    // (êéÅ) UGARITIC LETTER BETA	[4BA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10381, 0x0041 };
    uint32_t const ces[9] = { 0x4BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_323)
{
    // 10381 0062;	
    // (êéÅ) UGARITIC LETTER BETA	[4BA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10381, 0x0062 };
    uint32_t const ces[9] = { 0x4BA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_324)
{
    // 10382 0021;	
    // (êéÇ) UGARITIC LETTER GAMLA	[4BA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10382, 0x0021 };
    uint32_t const ces[9] = { 0x4BA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_325)
{
    // 10382 003F;	
    // (êéÇ) UGARITIC LETTER GAMLA	[4BA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10382, 0x003F };
    uint32_t const ces[9] = { 0x4BA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_326)
{
    // 10382 0061;	
    // (êéÇ) UGARITIC LETTER GAMLA	[4BA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10382, 0x0061 };
    uint32_t const ces[9] = { 0x4BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_327)
{
    // 10382 0041;	
    // (êéÇ) UGARITIC LETTER GAMLA	[4BA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10382, 0x0041 };
    uint32_t const ces[9] = { 0x4BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_328)
{
    // 10382 0062;	
    // (êéÇ) UGARITIC LETTER GAMLA	[4BA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10382, 0x0062 };
    uint32_t const ces[9] = { 0x4BA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_329)
{
    // 10383 0021;	
    // (êéÉ) UGARITIC LETTER KHA	[4BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10383, 0x0021 };
    uint32_t const ces[9] = { 0x4BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_330)
{
    // 10383 003F;	
    // (êéÉ) UGARITIC LETTER KHA	[4BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10383, 0x003F };
    uint32_t const ces[9] = { 0x4BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_331)
{
    // 10383 0061;	
    // (êéÉ) UGARITIC LETTER KHA	[4BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10383, 0x0061 };
    uint32_t const ces[9] = { 0x4BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_332)
{
    // 10383 0041;	
    // (êéÉ) UGARITIC LETTER KHA	[4BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10383, 0x0041 };
    uint32_t const ces[9] = { 0x4BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_333)
{
    // 10383 0062;	
    // (êéÉ) UGARITIC LETTER KHA	[4BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10383, 0x0062 };
    uint32_t const ces[9] = { 0x4BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_334)
{
    // 10384 0021;	
    // (êéÑ) UGARITIC LETTER DELTA	[4BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10384, 0x0021 };
    uint32_t const ces[9] = { 0x4BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_335)
{
    // 10384 003F;	
    // (êéÑ) UGARITIC LETTER DELTA	[4BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10384, 0x003F };
    uint32_t const ces[9] = { 0x4BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_336)
{
    // 10384 0061;	
    // (êéÑ) UGARITIC LETTER DELTA	[4BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10384, 0x0061 };
    uint32_t const ces[9] = { 0x4BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_337)
{
    // 10384 0041;	
    // (êéÑ) UGARITIC LETTER DELTA	[4BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10384, 0x0041 };
    uint32_t const ces[9] = { 0x4BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_338)
{
    // 10384 0062;	
    // (êéÑ) UGARITIC LETTER DELTA	[4BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10384, 0x0062 };
    uint32_t const ces[9] = { 0x4BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_339)
{
    // 10385 0021;	
    // (êéÖ) UGARITIC LETTER HO	[4BA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10385, 0x0021 };
    uint32_t const ces[9] = { 0x4BA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_340)
{
    // 10385 003F;	
    // (êéÖ) UGARITIC LETTER HO	[4BA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10385, 0x003F };
    uint32_t const ces[9] = { 0x4BA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_341)
{
    // 10385 0061;	
    // (êéÖ) UGARITIC LETTER HO	[4BA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10385, 0x0061 };
    uint32_t const ces[9] = { 0x4BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_342)
{
    // 10385 0041;	
    // (êéÖ) UGARITIC LETTER HO	[4BA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10385, 0x0041 };
    uint32_t const ces[9] = { 0x4BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_343)
{
    // 10385 0062;	
    // (êéÖ) UGARITIC LETTER HO	[4BA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10385, 0x0062 };
    uint32_t const ces[9] = { 0x4BA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_344)
{
    // 10386 0021;	
    // (êéÜ) UGARITIC LETTER WO	[4BA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10386, 0x0021 };
    uint32_t const ces[9] = { 0x4BA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_345)
{
    // 10386 003F;	
    // (êéÜ) UGARITIC LETTER WO	[4BA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10386, 0x003F };
    uint32_t const ces[9] = { 0x4BA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_346)
{
    // 10386 0061;	
    // (êéÜ) UGARITIC LETTER WO	[4BA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10386, 0x0061 };
    uint32_t const ces[9] = { 0x4BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_347)
{
    // 10386 0041;	
    // (êéÜ) UGARITIC LETTER WO	[4BA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10386, 0x0041 };
    uint32_t const ces[9] = { 0x4BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_348)
{
    // 10386 0062;	
    // (êéÜ) UGARITIC LETTER WO	[4BA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10386, 0x0062 };
    uint32_t const ces[9] = { 0x4BA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_349)
{
    // 10387 0021;	
    // (êéá) UGARITIC LETTER ZETA	[4BA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10387, 0x0021 };
    uint32_t const ces[9] = { 0x4BA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_350)
{
    // 10387 003F;	
    // (êéá) UGARITIC LETTER ZETA	[4BA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10387, 0x003F };
    uint32_t const ces[9] = { 0x4BA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_351)
{
    // 10387 0061;	
    // (êéá) UGARITIC LETTER ZETA	[4BA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10387, 0x0061 };
    uint32_t const ces[9] = { 0x4BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_352)
{
    // 10387 0041;	
    // (êéá) UGARITIC LETTER ZETA	[4BA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10387, 0x0041 };
    uint32_t const ces[9] = { 0x4BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_353)
{
    // 10387 0062;	
    // (êéá) UGARITIC LETTER ZETA	[4BA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10387, 0x0062 };
    uint32_t const ces[9] = { 0x4BA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_354)
{
    // 10388 0021;	
    // (êéà) UGARITIC LETTER HOTA	[4BAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10388, 0x0021 };
    uint32_t const ces[9] = { 0x4BAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_355)
{
    // 10388 003F;	
    // (êéà) UGARITIC LETTER HOTA	[4BAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10388, 0x003F };
    uint32_t const ces[9] = { 0x4BAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_356)
{
    // 10388 0061;	
    // (êéà) UGARITIC LETTER HOTA	[4BAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10388, 0x0061 };
    uint32_t const ces[9] = { 0x4BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_357)
{
    // 10388 0041;	
    // (êéà) UGARITIC LETTER HOTA	[4BAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10388, 0x0041 };
    uint32_t const ces[9] = { 0x4BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_358)
{
    // 10388 0062;	
    // (êéà) UGARITIC LETTER HOTA	[4BAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10388, 0x0062 };
    uint32_t const ces[9] = { 0x4BAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_359)
{
    // 10389 0021;	
    // (êéâ) UGARITIC LETTER TET	[4BAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10389, 0x0021 };
    uint32_t const ces[9] = { 0x4BAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_360)
{
    // 10389 003F;	
    // (êéâ) UGARITIC LETTER TET	[4BAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10389, 0x003F };
    uint32_t const ces[9] = { 0x4BAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_361)
{
    // 10389 0061;	
    // (êéâ) UGARITIC LETTER TET	[4BAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10389, 0x0061 };
    uint32_t const ces[9] = { 0x4BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_362)
{
    // 10389 0041;	
    // (êéâ) UGARITIC LETTER TET	[4BAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10389, 0x0041 };
    uint32_t const ces[9] = { 0x4BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_363)
{
    // 10389 0062;	
    // (êéâ) UGARITIC LETTER TET	[4BAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10389, 0x0062 };
    uint32_t const ces[9] = { 0x4BAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_364)
{
    // 1038A 0021;	
    // (êéä) UGARITIC LETTER YOD	[4BAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038A, 0x0021 };
    uint32_t const ces[9] = { 0x4BAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_365)
{
    // 1038A 003F;	
    // (êéä) UGARITIC LETTER YOD	[4BAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038A, 0x003F };
    uint32_t const ces[9] = { 0x4BAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_366)
{
    // 1038A 0061;	
    // (êéä) UGARITIC LETTER YOD	[4BAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038A, 0x0061 };
    uint32_t const ces[9] = { 0x4BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_367)
{
    // 1038A 0041;	
    // (êéä) UGARITIC LETTER YOD	[4BAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038A, 0x0041 };
    uint32_t const ces[9] = { 0x4BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_368)
{
    // 1038A 0062;	
    // (êéä) UGARITIC LETTER YOD	[4BAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038A, 0x0062 };
    uint32_t const ces[9] = { 0x4BAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_369)
{
    // 1038B 0021;	
    // (êéã) UGARITIC LETTER KAF	[4BAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038B, 0x0021 };
    uint32_t const ces[9] = { 0x4BAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_370)
{
    // 1038B 003F;	
    // (êéã) UGARITIC LETTER KAF	[4BAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038B, 0x003F };
    uint32_t const ces[9] = { 0x4BAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_371)
{
    // 1038B 0061;	
    // (êéã) UGARITIC LETTER KAF	[4BAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038B, 0x0061 };
    uint32_t const ces[9] = { 0x4BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_372)
{
    // 1038B 0041;	
    // (êéã) UGARITIC LETTER KAF	[4BAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038B, 0x0041 };
    uint32_t const ces[9] = { 0x4BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_373)
{
    // 1038B 0062;	
    // (êéã) UGARITIC LETTER KAF	[4BAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038B, 0x0062 };
    uint32_t const ces[9] = { 0x4BAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_374)
{
    // 1038C 0021;	
    // (êéå) UGARITIC LETTER SHIN	[4BAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038C, 0x0021 };
    uint32_t const ces[9] = { 0x4BAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_375)
{
    // 1038C 003F;	
    // (êéå) UGARITIC LETTER SHIN	[4BAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038C, 0x003F };
    uint32_t const ces[9] = { 0x4BAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_376)
{
    // 1038C 0061;	
    // (êéå) UGARITIC LETTER SHIN	[4BAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038C, 0x0061 };
    uint32_t const ces[9] = { 0x4BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_377)
{
    // 1038C 0041;	
    // (êéå) UGARITIC LETTER SHIN	[4BAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038C, 0x0041 };
    uint32_t const ces[9] = { 0x4BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_378)
{
    // 1038C 0062;	
    // (êéå) UGARITIC LETTER SHIN	[4BAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038C, 0x0062 };
    uint32_t const ces[9] = { 0x4BAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_379)
{
    // 1038D 0021;	
    // (êéç) UGARITIC LETTER LAMDA	[4BAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038D, 0x0021 };
    uint32_t const ces[9] = { 0x4BAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_380)
{
    // 1038D 003F;	
    // (êéç) UGARITIC LETTER LAMDA	[4BAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038D, 0x003F };
    uint32_t const ces[9] = { 0x4BAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_381)
{
    // 1038D 0061;	
    // (êéç) UGARITIC LETTER LAMDA	[4BAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038D, 0x0061 };
    uint32_t const ces[9] = { 0x4BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_382)
{
    // 1038D 0041;	
    // (êéç) UGARITIC LETTER LAMDA	[4BAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038D, 0x0041 };
    uint32_t const ces[9] = { 0x4BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_383)
{
    // 1038D 0062;	
    // (êéç) UGARITIC LETTER LAMDA	[4BAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038D, 0x0062 };
    uint32_t const ces[9] = { 0x4BAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_384)
{
    // 1038E 0021;	
    // (êéé) UGARITIC LETTER MEM	[4BB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038E, 0x0021 };
    uint32_t const ces[9] = { 0x4BB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_385)
{
    // 1038E 003F;	
    // (êéé) UGARITIC LETTER MEM	[4BB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038E, 0x003F };
    uint32_t const ces[9] = { 0x4BB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_386)
{
    // 1038E 0061;	
    // (êéé) UGARITIC LETTER MEM	[4BB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038E, 0x0061 };
    uint32_t const ces[9] = { 0x4BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_387)
{
    // 1038E 0041;	
    // (êéé) UGARITIC LETTER MEM	[4BB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038E, 0x0041 };
    uint32_t const ces[9] = { 0x4BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_388)
{
    // 1038E 0062;	
    // (êéé) UGARITIC LETTER MEM	[4BB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038E, 0x0062 };
    uint32_t const ces[9] = { 0x4BB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_389)
{
    // 1038F 0021;	
    // (êéè) UGARITIC LETTER DHAL	[4BB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038F, 0x0021 };
    uint32_t const ces[9] = { 0x4BB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_390)
{
    // 1038F 003F;	
    // (êéè) UGARITIC LETTER DHAL	[4BB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038F, 0x003F };
    uint32_t const ces[9] = { 0x4BB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_391)
{
    // 1038F 0061;	
    // (êéè) UGARITIC LETTER DHAL	[4BB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038F, 0x0061 };
    uint32_t const ces[9] = { 0x4BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_392)
{
    // 1038F 0041;	
    // (êéè) UGARITIC LETTER DHAL	[4BB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1038F, 0x0041 };
    uint32_t const ces[9] = { 0x4BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_393)
{
    // 1038F 0062;	
    // (êéè) UGARITIC LETTER DHAL	[4BB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038F, 0x0062 };
    uint32_t const ces[9] = { 0x4BB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_394)
{
    // 10390 0021;	
    // (êéê) UGARITIC LETTER NUN	[4BB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10390, 0x0021 };
    uint32_t const ces[9] = { 0x4BB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_395)
{
    // 10390 003F;	
    // (êéê) UGARITIC LETTER NUN	[4BB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10390, 0x003F };
    uint32_t const ces[9] = { 0x4BB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_396)
{
    // 10390 0061;	
    // (êéê) UGARITIC LETTER NUN	[4BB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10390, 0x0061 };
    uint32_t const ces[9] = { 0x4BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_397)
{
    // 10390 0041;	
    // (êéê) UGARITIC LETTER NUN	[4BB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10390, 0x0041 };
    uint32_t const ces[9] = { 0x4BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_398)
{
    // 10390 0062;	
    // (êéê) UGARITIC LETTER NUN	[4BB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10390, 0x0062 };
    uint32_t const ces[9] = { 0x4BB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_399)
{
    // 10391 0021;	
    // (êéë) UGARITIC LETTER ZU	[4BB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10391, 0x0021 };
    uint32_t const ces[9] = { 0x4BB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_400)
{
    // 10391 003F;	
    // (êéë) UGARITIC LETTER ZU	[4BB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10391, 0x003F };
    uint32_t const ces[9] = { 0x4BB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_401)
{
    // 10391 0061;	
    // (êéë) UGARITIC LETTER ZU	[4BB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10391, 0x0061 };
    uint32_t const ces[9] = { 0x4BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_402)
{
    // 10391 0041;	
    // (êéë) UGARITIC LETTER ZU	[4BB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10391, 0x0041 };
    uint32_t const ces[9] = { 0x4BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_403)
{
    // 10391 0062;	
    // (êéë) UGARITIC LETTER ZU	[4BB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10391, 0x0062 };
    uint32_t const ces[9] = { 0x4BB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_404)
{
    // 10392 0021;	
    // (êéí) UGARITIC LETTER SAMKA	[4BB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10392, 0x0021 };
    uint32_t const ces[9] = { 0x4BB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_405)
{
    // 10392 003F;	
    // (êéí) UGARITIC LETTER SAMKA	[4BB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10392, 0x003F };
    uint32_t const ces[9] = { 0x4BB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_406)
{
    // 10392 0061;	
    // (êéí) UGARITIC LETTER SAMKA	[4BB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10392, 0x0061 };
    uint32_t const ces[9] = { 0x4BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_407)
{
    // 10392 0041;	
    // (êéí) UGARITIC LETTER SAMKA	[4BB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10392, 0x0041 };
    uint32_t const ces[9] = { 0x4BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_408)
{
    // 10392 0062;	
    // (êéí) UGARITIC LETTER SAMKA	[4BB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10392, 0x0062 };
    uint32_t const ces[9] = { 0x4BB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_409)
{
    // 10393 0021;	
    // (êéì) UGARITIC LETTER AIN	[4BB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10393, 0x0021 };
    uint32_t const ces[9] = { 0x4BB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_410)
{
    // 10393 003F;	
    // (êéì) UGARITIC LETTER AIN	[4BB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10393, 0x003F };
    uint32_t const ces[9] = { 0x4BB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_411)
{
    // 10393 0061;	
    // (êéì) UGARITIC LETTER AIN	[4BB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10393, 0x0061 };
    uint32_t const ces[9] = { 0x4BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_412)
{
    // 10393 0041;	
    // (êéì) UGARITIC LETTER AIN	[4BB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10393, 0x0041 };
    uint32_t const ces[9] = { 0x4BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_413)
{
    // 10393 0062;	
    // (êéì) UGARITIC LETTER AIN	[4BB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10393, 0x0062 };
    uint32_t const ces[9] = { 0x4BB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_414)
{
    // 10394 0021;	
    // (êéî) UGARITIC LETTER PU	[4BB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10394, 0x0021 };
    uint32_t const ces[9] = { 0x4BB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_415)
{
    // 10394 003F;	
    // (êéî) UGARITIC LETTER PU	[4BB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10394, 0x003F };
    uint32_t const ces[9] = { 0x4BB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_416)
{
    // 10394 0061;	
    // (êéî) UGARITIC LETTER PU	[4BB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10394, 0x0061 };
    uint32_t const ces[9] = { 0x4BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_417)
{
    // 10394 0041;	
    // (êéî) UGARITIC LETTER PU	[4BB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10394, 0x0041 };
    uint32_t const ces[9] = { 0x4BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_418)
{
    // 10394 0062;	
    // (êéî) UGARITIC LETTER PU	[4BB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10394, 0x0062 };
    uint32_t const ces[9] = { 0x4BB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_419)
{
    // 10395 0021;	
    // (êéï) UGARITIC LETTER SADE	[4BB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10395, 0x0021 };
    uint32_t const ces[9] = { 0x4BB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_420)
{
    // 10395 003F;	
    // (êéï) UGARITIC LETTER SADE	[4BB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10395, 0x003F };
    uint32_t const ces[9] = { 0x4BB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_421)
{
    // 10395 0061;	
    // (êéï) UGARITIC LETTER SADE	[4BB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10395, 0x0061 };
    uint32_t const ces[9] = { 0x4BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_422)
{
    // 10395 0041;	
    // (êéï) UGARITIC LETTER SADE	[4BB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10395, 0x0041 };
    uint32_t const ces[9] = { 0x4BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_423)
{
    // 10395 0062;	
    // (êéï) UGARITIC LETTER SADE	[4BB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10395, 0x0062 };
    uint32_t const ces[9] = { 0x4BB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_424)
{
    // 10396 0021;	
    // (êéñ) UGARITIC LETTER QOPA	[4BB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10396, 0x0021 };
    uint32_t const ces[9] = { 0x4BB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_425)
{
    // 10396 003F;	
    // (êéñ) UGARITIC LETTER QOPA	[4BB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10396, 0x003F };
    uint32_t const ces[9] = { 0x4BB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_426)
{
    // 10396 0061;	
    // (êéñ) UGARITIC LETTER QOPA	[4BB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10396, 0x0061 };
    uint32_t const ces[9] = { 0x4BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_427)
{
    // 10396 0041;	
    // (êéñ) UGARITIC LETTER QOPA	[4BB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10396, 0x0041 };
    uint32_t const ces[9] = { 0x4BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_428)
{
    // 10396 0062;	
    // (êéñ) UGARITIC LETTER QOPA	[4BB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10396, 0x0062 };
    uint32_t const ces[9] = { 0x4BB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_429)
{
    // 10397 0021;	
    // (êéó) UGARITIC LETTER RASHA	[4BB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10397, 0x0021 };
    uint32_t const ces[9] = { 0x4BB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_430)
{
    // 10397 003F;	
    // (êéó) UGARITIC LETTER RASHA	[4BB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10397, 0x003F };
    uint32_t const ces[9] = { 0x4BB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_431)
{
    // 10397 0061;	
    // (êéó) UGARITIC LETTER RASHA	[4BB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10397, 0x0061 };
    uint32_t const ces[9] = { 0x4BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_432)
{
    // 10397 0041;	
    // (êéó) UGARITIC LETTER RASHA	[4BB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10397, 0x0041 };
    uint32_t const ces[9] = { 0x4BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_433)
{
    // 10397 0062;	
    // (êéó) UGARITIC LETTER RASHA	[4BB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10397, 0x0062 };
    uint32_t const ces[9] = { 0x4BB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_434)
{
    // 10398 0021;	
    // (êéò) UGARITIC LETTER THANNA	[4BBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10398, 0x0021 };
    uint32_t const ces[9] = { 0x4BBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_435)
{
    // 10398 003F;	
    // (êéò) UGARITIC LETTER THANNA	[4BBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10398, 0x003F };
    uint32_t const ces[9] = { 0x4BBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_436)
{
    // 10398 0061;	
    // (êéò) UGARITIC LETTER THANNA	[4BBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10398, 0x0061 };
    uint32_t const ces[9] = { 0x4BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_437)
{
    // 10398 0041;	
    // (êéò) UGARITIC LETTER THANNA	[4BBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10398, 0x0041 };
    uint32_t const ces[9] = { 0x4BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_438)
{
    // 10398 0062;	
    // (êéò) UGARITIC LETTER THANNA	[4BBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10398, 0x0062 };
    uint32_t const ces[9] = { 0x4BBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_439)
{
    // 10399 0021;	
    // (êéô) UGARITIC LETTER GHAIN	[4BBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10399, 0x0021 };
    uint32_t const ces[9] = { 0x4BBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_440)
{
    // 10399 003F;	
    // (êéô) UGARITIC LETTER GHAIN	[4BBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10399, 0x003F };
    uint32_t const ces[9] = { 0x4BBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_441)
{
    // 10399 0061;	
    // (êéô) UGARITIC LETTER GHAIN	[4BBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10399, 0x0061 };
    uint32_t const ces[9] = { 0x4BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_442)
{
    // 10399 0041;	
    // (êéô) UGARITIC LETTER GHAIN	[4BBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10399, 0x0041 };
    uint32_t const ces[9] = { 0x4BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_443)
{
    // 10399 0062;	
    // (êéô) UGARITIC LETTER GHAIN	[4BBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10399, 0x0062 };
    uint32_t const ces[9] = { 0x4BBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_444)
{
    // 1039A 0021;	
    // (êéö) UGARITIC LETTER TO	[4BBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039A, 0x0021 };
    uint32_t const ces[9] = { 0x4BBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_445)
{
    // 1039A 003F;	
    // (êéö) UGARITIC LETTER TO	[4BBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039A, 0x003F };
    uint32_t const ces[9] = { 0x4BBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_446)
{
    // 1039A 0061;	
    // (êéö) UGARITIC LETTER TO	[4BBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039A, 0x0061 };
    uint32_t const ces[9] = { 0x4BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_447)
{
    // 1039A 0041;	
    // (êéö) UGARITIC LETTER TO	[4BBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1039A, 0x0041 };
    uint32_t const ces[9] = { 0x4BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_448)
{
    // 1039A 0062;	
    // (êéö) UGARITIC LETTER TO	[4BBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039A, 0x0062 };
    uint32_t const ces[9] = { 0x4BBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_449)
{
    // 1039B 0021;	
    // (êéõ) UGARITIC LETTER I	[4BBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039B, 0x0021 };
    uint32_t const ces[9] = { 0x4BBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_450)
{
    // 1039B 003F;	
    // (êéõ) UGARITIC LETTER I	[4BBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039B, 0x003F };
    uint32_t const ces[9] = { 0x4BBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_451)
{
    // 1039B 0061;	
    // (êéõ) UGARITIC LETTER I	[4BBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039B, 0x0061 };
    uint32_t const ces[9] = { 0x4BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_452)
{
    // 1039B 0041;	
    // (êéõ) UGARITIC LETTER I	[4BBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1039B, 0x0041 };
    uint32_t const ces[9] = { 0x4BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_453)
{
    // 1039B 0062;	
    // (êéõ) UGARITIC LETTER I	[4BBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039B, 0x0062 };
    uint32_t const ces[9] = { 0x4BBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_454)
{
    // 1039C 0021;	
    // (êéú) UGARITIC LETTER U	[4BBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039C, 0x0021 };
    uint32_t const ces[9] = { 0x4BBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_455)
{
    // 1039C 003F;	
    // (êéú) UGARITIC LETTER U	[4BBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039C, 0x003F };
    uint32_t const ces[9] = { 0x4BBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_456)
{
    // 1039C 0061;	
    // (êéú) UGARITIC LETTER U	[4BBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039C, 0x0061 };
    uint32_t const ces[9] = { 0x4BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_457)
{
    // 1039C 0041;	
    // (êéú) UGARITIC LETTER U	[4BBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1039C, 0x0041 };
    uint32_t const ces[9] = { 0x4BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_458)
{
    // 1039C 0062;	
    // (êéú) UGARITIC LETTER U	[4BBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039C, 0x0062 };
    uint32_t const ces[9] = { 0x4BBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_459)
{
    // 1039D 0021;	
    // (êéù) UGARITIC LETTER SSU	[4BBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039D, 0x0021 };
    uint32_t const ces[9] = { 0x4BBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_460)
{
    // 1039D 003F;	
    // (êéù) UGARITIC LETTER SSU	[4BBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039D, 0x003F };
    uint32_t const ces[9] = { 0x4BBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_461)
{
    // 1039D 0061;	
    // (êéù) UGARITIC LETTER SSU	[4BBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039D, 0x0061 };
    uint32_t const ces[9] = { 0x4BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_462)
{
    // 1039D 0041;	
    // (êéù) UGARITIC LETTER SSU	[4BBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1039D, 0x0041 };
    uint32_t const ces[9] = { 0x4BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_463)
{
    // 1039D 0062;	
    // (êéù) UGARITIC LETTER SSU	[4BBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039D, 0x0062 };
    uint32_t const ces[9] = { 0x4BBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_464)
{
    // 103A0 0021;	
    // (êé†) OLD PERSIAN SIGN A	[4BC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A0, 0x0021 };
    uint32_t const ces[9] = { 0x4BC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_465)
{
    // 103A0 003F;	
    // (êé†) OLD PERSIAN SIGN A	[4BC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A0, 0x003F };
    uint32_t const ces[9] = { 0x4BC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_466)
{
    // 103A0 0061;	
    // (êé†) OLD PERSIAN SIGN A	[4BC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A0, 0x0061 };
    uint32_t const ces[9] = { 0x4BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_467)
{
    // 103A0 0041;	
    // (êé†) OLD PERSIAN SIGN A	[4BC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A0, 0x0041 };
    uint32_t const ces[9] = { 0x4BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_468)
{
    // 103A0 0062;	
    // (êé†) OLD PERSIAN SIGN A	[4BC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A0, 0x0062 };
    uint32_t const ces[9] = { 0x4BC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_469)
{
    // 103A1 0021;	
    // (êé°) OLD PERSIAN SIGN I	[4BC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A1, 0x0021 };
    uint32_t const ces[9] = { 0x4BC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_470)
{
    // 103A1 003F;	
    // (êé°) OLD PERSIAN SIGN I	[4BC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A1, 0x003F };
    uint32_t const ces[9] = { 0x4BC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_471)
{
    // 103A1 0061;	
    // (êé°) OLD PERSIAN SIGN I	[4BC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A1, 0x0061 };
    uint32_t const ces[9] = { 0x4BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_472)
{
    // 103A1 0041;	
    // (êé°) OLD PERSIAN SIGN I	[4BC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A1, 0x0041 };
    uint32_t const ces[9] = { 0x4BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_473)
{
    // 103A1 0062;	
    // (êé°) OLD PERSIAN SIGN I	[4BC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A1, 0x0062 };
    uint32_t const ces[9] = { 0x4BC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_474)
{
    // 103A2 0021;	
    // (êé¢) OLD PERSIAN SIGN U	[4BC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A2, 0x0021 };
    uint32_t const ces[9] = { 0x4BC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_475)
{
    // 103A2 003F;	
    // (êé¢) OLD PERSIAN SIGN U	[4BC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A2, 0x003F };
    uint32_t const ces[9] = { 0x4BC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_476)
{
    // 103A2 0061;	
    // (êé¢) OLD PERSIAN SIGN U	[4BC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A2, 0x0061 };
    uint32_t const ces[9] = { 0x4BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_477)
{
    // 103A2 0041;	
    // (êé¢) OLD PERSIAN SIGN U	[4BC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A2, 0x0041 };
    uint32_t const ces[9] = { 0x4BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_478)
{
    // 103A2 0062;	
    // (êé¢) OLD PERSIAN SIGN U	[4BC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A2, 0x0062 };
    uint32_t const ces[9] = { 0x4BC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_479)
{
    // 103A3 0021;	
    // (êé£) OLD PERSIAN SIGN KA	[4BC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A3, 0x0021 };
    uint32_t const ces[9] = { 0x4BC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_480)
{
    // 103A3 003F;	
    // (êé£) OLD PERSIAN SIGN KA	[4BC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A3, 0x003F };
    uint32_t const ces[9] = { 0x4BC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_481)
{
    // 103A3 0061;	
    // (êé£) OLD PERSIAN SIGN KA	[4BC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A3, 0x0061 };
    uint32_t const ces[9] = { 0x4BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_482)
{
    // 103A3 0041;	
    // (êé£) OLD PERSIAN SIGN KA	[4BC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A3, 0x0041 };
    uint32_t const ces[9] = { 0x4BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_483)
{
    // 103A3 0062;	
    // (êé£) OLD PERSIAN SIGN KA	[4BC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A3, 0x0062 };
    uint32_t const ces[9] = { 0x4BC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_484)
{
    // 103A4 0021;	
    // (êé§) OLD PERSIAN SIGN KU	[4BC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A4, 0x0021 };
    uint32_t const ces[9] = { 0x4BC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_485)
{
    // 103A4 003F;	
    // (êé§) OLD PERSIAN SIGN KU	[4BC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A4, 0x003F };
    uint32_t const ces[9] = { 0x4BC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_486)
{
    // 103A4 0061;	
    // (êé§) OLD PERSIAN SIGN KU	[4BC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A4, 0x0061 };
    uint32_t const ces[9] = { 0x4BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_487)
{
    // 103A4 0041;	
    // (êé§) OLD PERSIAN SIGN KU	[4BC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A4, 0x0041 };
    uint32_t const ces[9] = { 0x4BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_488)
{
    // 103A4 0062;	
    // (êé§) OLD PERSIAN SIGN KU	[4BC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A4, 0x0062 };
    uint32_t const ces[9] = { 0x4BC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_489)
{
    // 103A5 0021;	
    // (êé•) OLD PERSIAN SIGN GA	[4BC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A5, 0x0021 };
    uint32_t const ces[9] = { 0x4BC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_490)
{
    // 103A5 003F;	
    // (êé•) OLD PERSIAN SIGN GA	[4BC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A5, 0x003F };
    uint32_t const ces[9] = { 0x4BC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_491)
{
    // 103A5 0061;	
    // (êé•) OLD PERSIAN SIGN GA	[4BC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A5, 0x0061 };
    uint32_t const ces[9] = { 0x4BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_492)
{
    // 103A5 0041;	
    // (êé•) OLD PERSIAN SIGN GA	[4BC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A5, 0x0041 };
    uint32_t const ces[9] = { 0x4BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_493)
{
    // 103A5 0062;	
    // (êé•) OLD PERSIAN SIGN GA	[4BC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A5, 0x0062 };
    uint32_t const ces[9] = { 0x4BC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_494)
{
    // 103A6 0021;	
    // (êé¶) OLD PERSIAN SIGN GU	[4BC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A6, 0x0021 };
    uint32_t const ces[9] = { 0x4BC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_495)
{
    // 103A6 003F;	
    // (êé¶) OLD PERSIAN SIGN GU	[4BC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A6, 0x003F };
    uint32_t const ces[9] = { 0x4BC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_496)
{
    // 103A6 0061;	
    // (êé¶) OLD PERSIAN SIGN GU	[4BC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A6, 0x0061 };
    uint32_t const ces[9] = { 0x4BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_497)
{
    // 103A6 0041;	
    // (êé¶) OLD PERSIAN SIGN GU	[4BC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A6, 0x0041 };
    uint32_t const ces[9] = { 0x4BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_498)
{
    // 103A6 0062;	
    // (êé¶) OLD PERSIAN SIGN GU	[4BC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A6, 0x0062 };
    uint32_t const ces[9] = { 0x4BC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_284_499)
{
    // 103A7 0021;	
    // (êéß) OLD PERSIAN SIGN XA	[4BC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A7, 0x0021 };
    uint32_t const ces[9] = { 0x4BC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

