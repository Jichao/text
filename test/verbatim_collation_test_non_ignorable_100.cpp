// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_100_000)
{
    // 2063 0062;	
    // ('\u2063') INVISIBLE SEPARATOR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2063, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_001)
{
    // 2064 0062;	
    // ('\u2064') INVISIBLE PLUS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2064, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_002)
{
    // 2066 0062;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2066, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_003)
{
    // 2067 0062;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2067, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_004)
{
    // 2068 0062;	
    // ('\u2068') FIRST STRONG ISOLATE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2068, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_005)
{
    // 2069 0062;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2069, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_006)
{
    // 206A 0062;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_007)
{
    // 206B 0062;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_008)
{
    // 206C 0062;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_009)
{
    // 206D 0062;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_010)
{
    // 206E 0062;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_011)
{
    // 206F 0062;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_012)
{
    // 2D7F 0062;	
    // (⵿) TIFINAGH CONSONANT JOINER	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2D7F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_013)
{
    // A670 0062;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA670, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_014)
{
    // A671 0062;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA671, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_015)
{
    // A672 0062;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA672, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_016)
{
    // A8E0 0062;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_017)
{
    // A8E1 0062;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_018)
{
    // A8E2 0062;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_019)
{
    // A8E3 0062;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_020)
{
    // A8E4 0062;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_021)
{
    // A8E5 0062;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_022)
{
    // A8E6 0062;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_023)
{
    // A8E7 0062;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_024)
{
    // A8E8 0062;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_025)
{
    // A8E9 0062;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_026)
{
    // A8EA 0062;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_027)
{
    // A8EB 0062;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_028)
{
    // A8EC 0062;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_029)
{
    // A8ED 0062;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8ED, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_030)
{
    // A8EE 0062;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_031)
{
    // A8EF 0062;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_032)
{
    // A8F0 0062;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8F0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_033)
{
    // A8F1 0062;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8F1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_034)
{
    // FE00 0062;	
    // (︀) VARIATION SELECTOR-1	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE00, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_035)
{
    // FE01 0062;	
    // (︁) VARIATION SELECTOR-2	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE01, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_036)
{
    // FE02 0062;	
    // (︂) VARIATION SELECTOR-3	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE02, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_037)
{
    // FE03 0062;	
    // (︃) VARIATION SELECTOR-4	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE03, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_038)
{
    // FE04 0062;	
    // (︄) VARIATION SELECTOR-5	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE04, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_039)
{
    // FE05 0062;	
    // (︅) VARIATION SELECTOR-6	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE05, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_040)
{
    // FE06 0062;	
    // (︆) VARIATION SELECTOR-7	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE06, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_041)
{
    // FE07 0062;	
    // (︇) VARIATION SELECTOR-8	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE07, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_042)
{
    // FE08 0062;	
    // (︈) VARIATION SELECTOR-9	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE08, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_043)
{
    // FE09 0062;	
    // (︉) VARIATION SELECTOR-10	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE09, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_044)
{
    // FE0A 0062;	
    // (︊) VARIATION SELECTOR-11	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_045)
{
    // FE0B 0062;	
    // (︋) VARIATION SELECTOR-12	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_046)
{
    // FE0C 0062;	
    // (︌) VARIATION SELECTOR-13	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_047)
{
    // FE0D 0062;	
    // (︍) VARIATION SELECTOR-14	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_048)
{
    // FE0E 0062;	
    // (︎) VARIATION SELECTOR-15	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_049)
{
    // FE0F 0062;	
    // (️) VARIATION SELECTOR-16	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_050)
{
    // FE21 0062;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE21, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_051)
{
    // FE23 0062;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE23, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_052)
{
    // FE24 0062;	
    // (︤) COMBINING MACRON LEFT HALF	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE24, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_053)
{
    // FE25 0062;	
    // (︥) COMBINING MACRON RIGHT HALF	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE25, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_054)
{
    // FE26 0062;	
    // (︦) COMBINING CONJOINING MACRON	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE26, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_055)
{
    // FE28 0062;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE28, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_056)
{
    // FE2A 0062;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_057)
{
    // FE2B 0062;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_058)
{
    // FE2C 0062;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_059)
{
    // FE2D 0062;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_060)
{
    // FE2F 0062;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_061)
{
    // FE73 0062;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE73, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_062)
{
    // FEFF 0062;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFEFF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_063)
{
    // FFF9 0062;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFF9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_064)
{
    // FFFA 0062;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFFA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_065)
{
    // FFFB 0062;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFFB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_066)
{
    // 102E0 0062;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x102E0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_067)
{
    // 110BD 0062;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x110BD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_068)
{
    // 11366 0062;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11366, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_069)
{
    // 11367 0062;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11367, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_070)
{
    // 11368 0062;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11368, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_071)
{
    // 11369 0062;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11369, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_072)
{
    // 1136A 0062;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_073)
{
    // 1136B 0062;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_074)
{
    // 1136C 0062;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_075)
{
    // 11370 0062;	
    // (𑍰) COMBINING GRANTHA LETTER A	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11370, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_076)
{
    // 11371 0062;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11371, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_077)
{
    // 11372 0062;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11372, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_078)
{
    // 11373 0062;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11373, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_079)
{
    // 11374 0062;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11374, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_080)
{
    // 1BCA0 0062;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_081)
{
    // 1BCA1 0062;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_082)
{
    // 1BCA2 0062;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_083)
{
    // 1BCA3 0062;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_084)
{
    // 1D165 0062;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D165, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_085)
{
    // 1D166 0062;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D166, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_086)
{
    // 1D167 0062;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D167, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_087)
{
    // 1D168 0062;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D168, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_088)
{
    // 1D169 0062;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D169, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_089)
{
    // 1D16D 0062;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_090)
{
    // 1D16E 0062;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_091)
{
    // 1D16F 0062;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_092)
{
    // 1D170 0062;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D170, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_093)
{
    // 1D171 0062;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D171, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_094)
{
    // 1D172 0062;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D172, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_095)
{
    // 1D173 0062;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D173, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_096)
{
    // 1D174 0062;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D174, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_097)
{
    // 1D175 0062;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D175, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_098)
{
    // 1D176 0062;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D176, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_099)
{
    // 1D177 0062;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D177, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_100)
{
    // 1D178 0062;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D178, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_101)
{
    // 1D179 0062;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D179, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_102)
{
    // 1D17A 0062;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_103)
{
    // 1D17B 0062;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_104)
{
    // 1D17C 0062;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_105)
{
    // 1D17D 0062;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_106)
{
    // 1D17E 0062;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_107)
{
    // 1D17F 0062;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_108)
{
    // 1D180 0062;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D180, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_109)
{
    // 1D181 0062;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D181, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_110)
{
    // 1D182 0062;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D182, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_111)
{
    // 1D185 0062;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D185, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_112)
{
    // 1D186 0062;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D186, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_113)
{
    // 1D187 0062;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D187, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_114)
{
    // 1D188 0062;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D188, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_115)
{
    // 1D189 0062;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D189, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_116)
{
    // 1D18A 0062;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D18A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_117)
{
    // 1D18B 0062;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D18B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_118)
{
    // 1D1AA 0062;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_119)
{
    // 1D1AB 0062;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_120)
{
    // 1D1AC 0062;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_121)
{
    // 1D1AD 0062;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_122)
{
    // 1D242 0062;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D242, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_123)
{
    // 1D243 0062;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D243, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_124)
{
    // 1D244 0062;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D244, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_125)
{
    // 1DA00 0062;	
    // (𝨀) SIGNWRITING HEAD RIM	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA00, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_126)
{
    // 1DA01 0062;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA01, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_127)
{
    // 1DA02 0062;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA02, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_128)
{
    // 1DA03 0062;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA03, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_129)
{
    // 1DA04 0062;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA04, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_130)
{
    // 1DA05 0062;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA05, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_131)
{
    // 1DA06 0062;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA06, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_132)
{
    // 1DA07 0062;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA07, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_133)
{
    // 1DA08 0062;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA08, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_134)
{
    // 1DA09 0062;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA09, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_135)
{
    // 1DA0A 0062;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_136)
{
    // 1DA0B 0062;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_137)
{
    // 1DA0C 0062;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_138)
{
    // 1DA0D 0062;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_139)
{
    // 1DA0E 0062;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_140)
{
    // 1DA0F 0062;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_141)
{
    // 1DA10 0062;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA10, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_142)
{
    // 1DA11 0062;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA11, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_143)
{
    // 1DA12 0062;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA12, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_144)
{
    // 1DA13 0062;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA13, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_145)
{
    // 1DA14 0062;	
    // (𝨔) SIGNWRITING EYES OPEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA14, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_146)
{
    // 1DA15 0062;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA15, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_147)
{
    // 1DA16 0062;	
    // (𝨖) SIGNWRITING EYES CLOSED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA16, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_148)
{
    // 1DA17 0062;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA17, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_149)
{
    // 1DA18 0062;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA18, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_150)
{
    // 1DA19 0062;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA19, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_151)
{
    // 1DA1A 0062;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_152)
{
    // 1DA1B 0062;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_153)
{
    // 1DA1C 0062;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_154)
{
    // 1DA1D 0062;	
    // (𝨝) SIGNWRITING EYE WINK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_155)
{
    // 1DA1E 0062;	
    // (𝨞) SIGNWRITING EYELASHES UP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_156)
{
    // 1DA1F 0062;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_157)
{
    // 1DA20 0062;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA20, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_158)
{
    // 1DA21 0062;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA21, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_159)
{
    // 1DA22 0062;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA22, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_160)
{
    // 1DA23 0062;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA23, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_161)
{
    // 1DA24 0062;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA24, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_162)
{
    // 1DA25 0062;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA25, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_163)
{
    // 1DA26 0062;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA26, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_164)
{
    // 1DA27 0062;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA27, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_165)
{
    // 1DA28 0062;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA28, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_166)
{
    // 1DA29 0062;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA29, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_167)
{
    // 1DA2A 0062;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_168)
{
    // 1DA2B 0062;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_169)
{
    // 1DA2C 0062;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_170)
{
    // 1DA2D 0062;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_171)
{
    // 1DA2E 0062;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_172)
{
    // 1DA2F 0062;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_173)
{
    // 1DA30 0062;	
    // (𝨰) SIGNWRITING EARS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA30, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_174)
{
    // 1DA31 0062;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA31, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_175)
{
    // 1DA32 0062;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA32, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_176)
{
    // 1DA33 0062;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA33, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_177)
{
    // 1DA34 0062;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA34, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_178)
{
    // 1DA35 0062;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA35, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_179)
{
    // 1DA36 0062;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA36, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_180)
{
    // 1DA3B 0062;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_181)
{
    // 1DA3C 0062;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_182)
{
    // 1DA3D 0062;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_183)
{
    // 1DA3E 0062;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_184)
{
    // 1DA3F 0062;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_185)
{
    // 1DA40 0062;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA40, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_186)
{
    // 1DA41 0062;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA41, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_187)
{
    // 1DA42 0062;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA42, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_188)
{
    // 1DA43 0062;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA43, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_189)
{
    // 1DA44 0062;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA44, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_190)
{
    // 1DA45 0062;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA45, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_191)
{
    // 1DA46 0062;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA46, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_192)
{
    // 1DA47 0062;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA47, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_193)
{
    // 1DA48 0062;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA48, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_194)
{
    // 1DA49 0062;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA49, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_195)
{
    // 1DA4A 0062;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_196)
{
    // 1DA4B 0062;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_197)
{
    // 1DA4C 0062;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_198)
{
    // 1DA4D 0062;	
    // (𝩍) SIGNWRITING MOUTH KISS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_199)
{
    // 1DA4E 0062;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_200)
{
    // 1DA4F 0062;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_201)
{
    // 1DA50 0062;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA50, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_202)
{
    // 1DA51 0062;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA51, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_203)
{
    // 1DA52 0062;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA52, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_204)
{
    // 1DA53 0062;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA53, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_205)
{
    // 1DA54 0062;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA54, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_206)
{
    // 1DA55 0062;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA55, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_207)
{
    // 1DA56 0062;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA56, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_208)
{
    // 1DA57 0062;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA57, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_209)
{
    // 1DA58 0062;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA58, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_210)
{
    // 1DA59 0062;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA59, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_211)
{
    // 1DA5A 0062;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_212)
{
    // 1DA5B 0062;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_213)
{
    // 1DA5C 0062;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_214)
{
    // 1DA5D 0062;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_215)
{
    // 1DA5E 0062;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_216)
{
    // 1DA5F 0062;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_217)
{
    // 1DA60 0062;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA60, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_218)
{
    // 1DA61 0062;	
    // (𝩡) SIGNWRITING TEETH	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA61, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_219)
{
    // 1DA62 0062;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA62, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_220)
{
    // 1DA63 0062;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA63, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_221)
{
    // 1DA64 0062;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA64, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_222)
{
    // 1DA65 0062;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA65, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_223)
{
    // 1DA66 0062;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA66, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_224)
{
    // 1DA67 0062;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA67, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_225)
{
    // 1DA68 0062;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA68, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_226)
{
    // 1DA69 0062;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA69, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_227)
{
    // 1DA6A 0062;	
    // (𝩪) SIGNWRITING NECK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_228)
{
    // 1DA6B 0062;	
    // (𝩫) SIGNWRITING HAIR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_229)
{
    // 1DA6C 0062;	
    // (𝩬) SIGNWRITING EXCITEMENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_230)
{
    // 1DA75 0062;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA75, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_231)
{
    // 1DA84 0062;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA84, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_232)
{
    // 1DA9B 0062;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_233)
{
    // 1DA9C 0062;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_234)
{
    // 1DA9D 0062;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_235)
{
    // 1DA9E 0062;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_236)
{
    // 1DA9F 0062;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_237)
{
    // 1DAA1 0062;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_238)
{
    // 1DAA2 0062;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_239)
{
    // 1DAA3 0062;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_240)
{
    // 1DAA4 0062;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_241)
{
    // 1DAA5 0062;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_242)
{
    // 1DAA6 0062;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_243)
{
    // 1DAA7 0062;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_244)
{
    // 1DAA8 0062;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_245)
{
    // 1DAA9 0062;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_246)
{
    // 1DAAA 0062;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_247)
{
    // 1DAAB 0062;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_248)
{
    // 1DAAC 0062;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_249)
{
    // 1DAAD 0062;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_250)
{
    // 1DAAE 0062;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_251)
{
    // 1DAAF 0062;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_252)
{
    // 1E8D0 0062;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_253)
{
    // 1E8D1 0062;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_254)
{
    // 1E8D2 0062;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_255)
{
    // 1E8D3 0062;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_256)
{
    // 1E8D4 0062;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_257)
{
    // 1E8D5 0062;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_258)
{
    // 1E8D6 0062;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_259)
{
    // E0001 0062;	
    // ('\U000E0001') LANGUAGE TAG	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0001, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_260)
{
    // E0020 0062;	
    // ('\U000E0020') TAG SPACE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0020, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_261)
{
    // E0021 0062;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0021, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_262)
{
    // E0022 0062;	
    // ('\U000E0022') TAG QUOTATION MARK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0022, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_263)
{
    // E0023 0062;	
    // ('\U000E0023') TAG NUMBER SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0023, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_264)
{
    // E0024 0062;	
    // ('\U000E0024') TAG DOLLAR SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0024, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_265)
{
    // E0025 0062;	
    // ('\U000E0025') TAG PERCENT SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0025, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_266)
{
    // E0026 0062;	
    // ('\U000E0026') TAG AMPERSAND	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0026, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_267)
{
    // E0027 0062;	
    // ('\U000E0027') TAG APOSTROPHE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0027, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_268)
{
    // E0028 0062;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0028, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_269)
{
    // E0029 0062;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0029, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_270)
{
    // E002A 0062;	
    // ('\U000E002A') TAG ASTERISK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_271)
{
    // E002B 0062;	
    // ('\U000E002B') TAG PLUS SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_272)
{
    // E002C 0062;	
    // ('\U000E002C') TAG COMMA	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_273)
{
    // E002D 0062;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_274)
{
    // E002E 0062;	
    // ('\U000E002E') TAG FULL STOP	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_275)
{
    // E002F 0062;	
    // ('\U000E002F') TAG SOLIDUS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_276)
{
    // E0030 0062;	
    // ('\U000E0030') TAG DIGIT ZERO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0030, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_277)
{
    // E0031 0062;	
    // ('\U000E0031') TAG DIGIT ONE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0031, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_278)
{
    // E0032 0062;	
    // ('\U000E0032') TAG DIGIT TWO	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0032, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_279)
{
    // E0033 0062;	
    // ('\U000E0033') TAG DIGIT THREE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0033, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_280)
{
    // E0034 0062;	
    // ('\U000E0034') TAG DIGIT FOUR	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0034, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_281)
{
    // E0035 0062;	
    // ('\U000E0035') TAG DIGIT FIVE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0035, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_282)
{
    // E0036 0062;	
    // ('\U000E0036') TAG DIGIT SIX	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0036, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_283)
{
    // E0037 0062;	
    // ('\U000E0037') TAG DIGIT SEVEN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0037, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_284)
{
    // E0038 0062;	
    // ('\U000E0038') TAG DIGIT EIGHT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0038, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_285)
{
    // E0039 0062;	
    // ('\U000E0039') TAG DIGIT NINE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0039, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_286)
{
    // E003A 0062;	
    // ('\U000E003A') TAG COLON	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_287)
{
    // E003B 0062;	
    // ('\U000E003B') TAG SEMICOLON	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_288)
{
    // E003C 0062;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_289)
{
    // E003D 0062;	
    // ('\U000E003D') TAG EQUALS SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_290)
{
    // E003E 0062;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_291)
{
    // E003F 0062;	
    // ('\U000E003F') TAG QUESTION MARK	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_292)
{
    // E0040 0062;	
    // ('\U000E0040') TAG COMMERCIAL AT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0040, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_293)
{
    // E0041 0062;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0041, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_294)
{
    // E0042 0062;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0042, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_295)
{
    // E0043 0062;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0043, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_296)
{
    // E0044 0062;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0044, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_297)
{
    // E0045 0062;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0045, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_298)
{
    // E0046 0062;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0046, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_299)
{
    // E0047 0062;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0047, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_300)
{
    // E0048 0062;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0048, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_301)
{
    // E0049 0062;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0049, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_302)
{
    // E004A 0062;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_303)
{
    // E004B 0062;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_304)
{
    // E004C 0062;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_305)
{
    // E004D 0062;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_306)
{
    // E004E 0062;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_307)
{
    // E004F 0062;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_308)
{
    // E0050 0062;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0050, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_309)
{
    // E0051 0062;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0051, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_310)
{
    // E0052 0062;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0052, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_311)
{
    // E0053 0062;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0053, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_312)
{
    // E0054 0062;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0054, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_313)
{
    // E0055 0062;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0055, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_314)
{
    // E0056 0062;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0056, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_315)
{
    // E0057 0062;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0057, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_316)
{
    // E0058 0062;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0058, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_317)
{
    // E0059 0062;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0059, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_318)
{
    // E005A 0062;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_319)
{
    // E005B 0062;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_320)
{
    // E005C 0062;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_321)
{
    // E005D 0062;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_322)
{
    // E005E 0062;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_323)
{
    // E005F 0062;	
    // ('\U000E005F') TAG LOW LINE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_324)
{
    // E0060 0062;	
    // ('\U000E0060') TAG GRAVE ACCENT	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0060, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_325)
{
    // E0061 0062;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0061, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_326)
{
    // E0062 0062;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0062, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_327)
{
    // E0063 0062;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0063, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_328)
{
    // E0064 0062;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0064, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_329)
{
    // E0065 0062;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0065, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_330)
{
    // E0066 0062;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0066, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_331)
{
    // E0067 0062;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0067, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_332)
{
    // E0068 0062;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0068, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_333)
{
    // E0069 0062;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0069, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_334)
{
    // E006A 0062;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_335)
{
    // E006B 0062;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_336)
{
    // E006C 0062;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_337)
{
    // E006D 0062;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_338)
{
    // E006E 0062;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_339)
{
    // E006F 0062;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_340)
{
    // E0070 0062;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0070, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_341)
{
    // E0071 0062;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0071, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_342)
{
    // E0072 0062;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0072, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_343)
{
    // E0073 0062;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0073, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_344)
{
    // E0074 0062;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0074, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_345)
{
    // E0075 0062;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0075, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_346)
{
    // E0076 0062;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0076, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_347)
{
    // E0077 0062;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0077, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_348)
{
    // E0078 0062;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0078, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_349)
{
    // E0079 0062;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0079, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_350)
{
    // E007A 0062;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_351)
{
    // E007B 0062;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_352)
{
    // E007C 0062;	
    // ('\U000E007C') TAG VERTICAL LINE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_353)
{
    // E007D 0062;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_354)
{
    // E007E 0062;	
    // ('\U000E007E') TAG TILDE	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_355)
{
    // E007F 0062;	
    // ('\U000E007F') CANCEL TAG	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_356)
{
    // E0100 0062;	
    // (󠄀) VARIATION SELECTOR-17	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0100, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_357)
{
    // E0101 0062;	
    // (󠄁) VARIATION SELECTOR-18	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0101, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_358)
{
    // E0102 0062;	
    // (󠄂) VARIATION SELECTOR-19	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0102, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_359)
{
    // E0103 0062;	
    // (󠄃) VARIATION SELECTOR-20	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0103, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_360)
{
    // E0104 0062;	
    // (󠄄) VARIATION SELECTOR-21	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0104, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_361)
{
    // E0105 0062;	
    // (󠄅) VARIATION SELECTOR-22	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0105, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_362)
{
    // E0106 0062;	
    // (󠄆) VARIATION SELECTOR-23	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0106, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_363)
{
    // E0107 0062;	
    // (󠄇) VARIATION SELECTOR-24	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0107, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_364)
{
    // E0108 0062;	
    // (󠄈) VARIATION SELECTOR-25	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0108, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_365)
{
    // E0109 0062;	
    // (󠄉) VARIATION SELECTOR-26	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0109, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_366)
{
    // E010A 0062;	
    // (󠄊) VARIATION SELECTOR-27	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_367)
{
    // E010B 0062;	
    // (󠄋) VARIATION SELECTOR-28	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_368)
{
    // E010C 0062;	
    // (󠄌) VARIATION SELECTOR-29	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_369)
{
    // E010D 0062;	
    // (󠄍) VARIATION SELECTOR-30	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_370)
{
    // E010E 0062;	
    // (󠄎) VARIATION SELECTOR-31	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_371)
{
    // E010F 0062;	
    // (󠄏) VARIATION SELECTOR-32	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_372)
{
    // E0110 0062;	
    // (󠄐) VARIATION SELECTOR-33	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0110, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_373)
{
    // E0111 0062;	
    // (󠄑) VARIATION SELECTOR-34	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0111, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_374)
{
    // E0112 0062;	
    // (󠄒) VARIATION SELECTOR-35	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0112, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_375)
{
    // E0113 0062;	
    // (󠄓) VARIATION SELECTOR-36	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0113, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_376)
{
    // E0114 0062;	
    // (󠄔) VARIATION SELECTOR-37	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0114, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_377)
{
    // E0115 0062;	
    // (󠄕) VARIATION SELECTOR-38	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0115, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_378)
{
    // E0116 0062;	
    // (󠄖) VARIATION SELECTOR-39	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0116, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_379)
{
    // E0117 0062;	
    // (󠄗) VARIATION SELECTOR-40	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0117, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_380)
{
    // E0118 0062;	
    // (󠄘) VARIATION SELECTOR-41	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0118, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_381)
{
    // E0119 0062;	
    // (󠄙) VARIATION SELECTOR-42	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0119, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_382)
{
    // E011A 0062;	
    // (󠄚) VARIATION SELECTOR-43	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_383)
{
    // E011B 0062;	
    // (󠄛) VARIATION SELECTOR-44	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_384)
{
    // E011C 0062;	
    // (󠄜) VARIATION SELECTOR-45	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_385)
{
    // E011D 0062;	
    // (󠄝) VARIATION SELECTOR-46	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_386)
{
    // E011E 0062;	
    // (󠄞) VARIATION SELECTOR-47	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_387)
{
    // E011F 0062;	
    // (󠄟) VARIATION SELECTOR-48	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_388)
{
    // E0120 0062;	
    // (󠄠) VARIATION SELECTOR-49	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0120, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_389)
{
    // E0121 0062;	
    // (󠄡) VARIATION SELECTOR-50	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0121, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_390)
{
    // E0122 0062;	
    // (󠄢) VARIATION SELECTOR-51	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0122, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_391)
{
    // E0123 0062;	
    // (󠄣) VARIATION SELECTOR-52	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0123, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_392)
{
    // E0124 0062;	
    // (󠄤) VARIATION SELECTOR-53	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0124, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_393)
{
    // E0125 0062;	
    // (󠄥) VARIATION SELECTOR-54	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0125, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_394)
{
    // E0126 0062;	
    // (󠄦) VARIATION SELECTOR-55	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0126, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_395)
{
    // E0127 0062;	
    // (󠄧) VARIATION SELECTOR-56	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0127, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_396)
{
    // E0128 0062;	
    // (󠄨) VARIATION SELECTOR-57	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0128, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_397)
{
    // E0129 0062;	
    // (󠄩) VARIATION SELECTOR-58	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0129, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_398)
{
    // E012A 0062;	
    // (󠄪) VARIATION SELECTOR-59	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_399)
{
    // E012B 0062;	
    // (󠄫) VARIATION SELECTOR-60	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_400)
{
    // E012C 0062;	
    // (󠄬) VARIATION SELECTOR-61	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_401)
{
    // E012D 0062;	
    // (󠄭) VARIATION SELECTOR-62	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_402)
{
    // E012E 0062;	
    // (󠄮) VARIATION SELECTOR-63	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_403)
{
    // E012F 0062;	
    // (󠄯) VARIATION SELECTOR-64	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_404)
{
    // E0130 0062;	
    // (󠄰) VARIATION SELECTOR-65	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0130, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_405)
{
    // E0131 0062;	
    // (󠄱) VARIATION SELECTOR-66	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0131, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_406)
{
    // E0132 0062;	
    // (󠄲) VARIATION SELECTOR-67	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0132, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_407)
{
    // E0133 0062;	
    // (󠄳) VARIATION SELECTOR-68	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0133, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_408)
{
    // E0134 0062;	
    // (󠄴) VARIATION SELECTOR-69	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0134, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_409)
{
    // E0135 0062;	
    // (󠄵) VARIATION SELECTOR-70	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0135, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_410)
{
    // E0136 0062;	
    // (󠄶) VARIATION SELECTOR-71	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0136, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_411)
{
    // E0137 0062;	
    // (󠄷) VARIATION SELECTOR-72	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0137, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_412)
{
    // E0138 0062;	
    // (󠄸) VARIATION SELECTOR-73	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0138, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_413)
{
    // E0139 0062;	
    // (󠄹) VARIATION SELECTOR-74	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0139, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_414)
{
    // E013A 0062;	
    // (󠄺) VARIATION SELECTOR-75	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_415)
{
    // E013B 0062;	
    // (󠄻) VARIATION SELECTOR-76	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_416)
{
    // E013C 0062;	
    // (󠄼) VARIATION SELECTOR-77	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_417)
{
    // E013D 0062;	
    // (󠄽) VARIATION SELECTOR-78	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_418)
{
    // E013E 0062;	
    // (󠄾) VARIATION SELECTOR-79	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_419)
{
    // E013F 0062;	
    // (󠄿) VARIATION SELECTOR-80	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_420)
{
    // E0140 0062;	
    // (󠅀) VARIATION SELECTOR-81	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0140, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_421)
{
    // E0141 0062;	
    // (󠅁) VARIATION SELECTOR-82	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0141, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_422)
{
    // E0142 0062;	
    // (󠅂) VARIATION SELECTOR-83	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0142, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_423)
{
    // E0143 0062;	
    // (󠅃) VARIATION SELECTOR-84	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0143, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_424)
{
    // E0144 0062;	
    // (󠅄) VARIATION SELECTOR-85	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0144, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_425)
{
    // E0145 0062;	
    // (󠅅) VARIATION SELECTOR-86	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0145, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_426)
{
    // E0146 0062;	
    // (󠅆) VARIATION SELECTOR-87	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0146, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_427)
{
    // E0147 0062;	
    // (󠅇) VARIATION SELECTOR-88	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0147, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_428)
{
    // E0148 0062;	
    // (󠅈) VARIATION SELECTOR-89	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0148, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_429)
{
    // E0149 0062;	
    // (󠅉) VARIATION SELECTOR-90	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0149, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_430)
{
    // E014A 0062;	
    // (󠅊) VARIATION SELECTOR-91	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_431)
{
    // E014B 0062;	
    // (󠅋) VARIATION SELECTOR-92	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_432)
{
    // E014C 0062;	
    // (󠅌) VARIATION SELECTOR-93	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_433)
{
    // E014D 0062;	
    // (󠅍) VARIATION SELECTOR-94	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_434)
{
    // E014E 0062;	
    // (󠅎) VARIATION SELECTOR-95	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_435)
{
    // E014F 0062;	
    // (󠅏) VARIATION SELECTOR-96	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_436)
{
    // E0150 0062;	
    // (󠅐) VARIATION SELECTOR-97	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0150, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_437)
{
    // E0151 0062;	
    // (󠅑) VARIATION SELECTOR-98	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0151, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_438)
{
    // E0152 0062;	
    // (󠅒) VARIATION SELECTOR-99	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0152, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_439)
{
    // E0153 0062;	
    // (󠅓) VARIATION SELECTOR-100	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0153, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_440)
{
    // E0154 0062;	
    // (󠅔) VARIATION SELECTOR-101	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0154, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_441)
{
    // E0155 0062;	
    // (󠅕) VARIATION SELECTOR-102	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0155, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_442)
{
    // E0156 0062;	
    // (󠅖) VARIATION SELECTOR-103	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0156, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_443)
{
    // E0157 0062;	
    // (󠅗) VARIATION SELECTOR-104	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0157, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_444)
{
    // E0158 0062;	
    // (󠅘) VARIATION SELECTOR-105	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0158, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_445)
{
    // E0159 0062;	
    // (󠅙) VARIATION SELECTOR-106	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0159, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_446)
{
    // E015A 0062;	
    // (󠅚) VARIATION SELECTOR-107	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_447)
{
    // E015B 0062;	
    // (󠅛) VARIATION SELECTOR-108	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_448)
{
    // E015C 0062;	
    // (󠅜) VARIATION SELECTOR-109	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_449)
{
    // E015D 0062;	
    // (󠅝) VARIATION SELECTOR-110	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_450)
{
    // E015E 0062;	
    // (󠅞) VARIATION SELECTOR-111	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_451)
{
    // E015F 0062;	
    // (󠅟) VARIATION SELECTOR-112	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_452)
{
    // E0160 0062;	
    // (󠅠) VARIATION SELECTOR-113	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0160, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_453)
{
    // E0161 0062;	
    // (󠅡) VARIATION SELECTOR-114	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0161, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_454)
{
    // E0162 0062;	
    // (󠅢) VARIATION SELECTOR-115	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0162, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_455)
{
    // E0163 0062;	
    // (󠅣) VARIATION SELECTOR-116	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0163, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_456)
{
    // E0164 0062;	
    // (󠅤) VARIATION SELECTOR-117	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0164, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_457)
{
    // E0165 0062;	
    // (󠅥) VARIATION SELECTOR-118	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0165, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_458)
{
    // E0166 0062;	
    // (󠅦) VARIATION SELECTOR-119	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0166, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_459)
{
    // E0167 0062;	
    // (󠅧) VARIATION SELECTOR-120	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0167, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_460)
{
    // E0168 0062;	
    // (󠅨) VARIATION SELECTOR-121	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0168, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_461)
{
    // E0169 0062;	
    // (󠅩) VARIATION SELECTOR-122	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0169, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_462)
{
    // E016A 0062;	
    // (󠅪) VARIATION SELECTOR-123	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_463)
{
    // E016B 0062;	
    // (󠅫) VARIATION SELECTOR-124	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_464)
{
    // E016C 0062;	
    // (󠅬) VARIATION SELECTOR-125	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_465)
{
    // E016D 0062;	
    // (󠅭) VARIATION SELECTOR-126	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_466)
{
    // E016E 0062;	
    // (󠅮) VARIATION SELECTOR-127	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_467)
{
    // E016F 0062;	
    // (󠅯) VARIATION SELECTOR-128	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_468)
{
    // E0170 0062;	
    // (󠅰) VARIATION SELECTOR-129	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0170, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_469)
{
    // E0171 0062;	
    // (󠅱) VARIATION SELECTOR-130	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0171, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_470)
{
    // E0172 0062;	
    // (󠅲) VARIATION SELECTOR-131	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0172, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_471)
{
    // E0173 0062;	
    // (󠅳) VARIATION SELECTOR-132	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0173, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_472)
{
    // E0174 0062;	
    // (󠅴) VARIATION SELECTOR-133	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0174, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_473)
{
    // E0175 0062;	
    // (󠅵) VARIATION SELECTOR-134	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0175, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_474)
{
    // E0176 0062;	
    // (󠅶) VARIATION SELECTOR-135	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0176, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_475)
{
    // E0177 0062;	
    // (󠅷) VARIATION SELECTOR-136	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0177, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_476)
{
    // E0178 0062;	
    // (󠅸) VARIATION SELECTOR-137	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0178, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_477)
{
    // E0179 0062;	
    // (󠅹) VARIATION SELECTOR-138	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0179, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_478)
{
    // E017A 0062;	
    // (󠅺) VARIATION SELECTOR-139	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_479)
{
    // E017B 0062;	
    // (󠅻) VARIATION SELECTOR-140	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_480)
{
    // E017C 0062;	
    // (󠅼) VARIATION SELECTOR-141	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_481)
{
    // E017D 0062;	
    // (󠅽) VARIATION SELECTOR-142	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_482)
{
    // E017E 0062;	
    // (󠅾) VARIATION SELECTOR-143	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_483)
{
    // E017F 0062;	
    // (󠅿) VARIATION SELECTOR-144	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_484)
{
    // E0180 0062;	
    // (󠆀) VARIATION SELECTOR-145	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0180, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_485)
{
    // E0181 0062;	
    // (󠆁) VARIATION SELECTOR-146	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0181, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_486)
{
    // E0182 0062;	
    // (󠆂) VARIATION SELECTOR-147	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0182, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_487)
{
    // E0183 0062;	
    // (󠆃) VARIATION SELECTOR-148	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0183, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_488)
{
    // E0184 0062;	
    // (󠆄) VARIATION SELECTOR-149	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0184, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_489)
{
    // E0185 0062;	
    // (󠆅) VARIATION SELECTOR-150	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0185, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_490)
{
    // E0186 0062;	
    // (󠆆) VARIATION SELECTOR-151	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0186, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_491)
{
    // E0187 0062;	
    // (󠆇) VARIATION SELECTOR-152	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0187, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_492)
{
    // E0188 0062;	
    // (󠆈) VARIATION SELECTOR-153	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0188, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_493)
{
    // E0189 0062;	
    // (󠆉) VARIATION SELECTOR-154	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0189, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_494)
{
    // E018A 0062;	
    // (󠆊) VARIATION SELECTOR-155	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_495)
{
    // E018B 0062;	
    // (󠆋) VARIATION SELECTOR-156	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_496)
{
    // E018C 0062;	
    // (󠆌) VARIATION SELECTOR-157	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_497)
{
    // E018D 0062;	
    // (󠆍) VARIATION SELECTOR-158	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_498)
{
    // E018E 0062;	
    // (󠆎) VARIATION SELECTOR-159	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_100_499)
{
    // E018F 0062;	
    // (󠆏) VARIATION SELECTOR-160	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

