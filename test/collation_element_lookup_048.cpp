// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_048_000)
{
    // 1D8D  ; [.1F69.0020.0002] 
    // LATIN SMALL LETTER X WITH PALATAL HOOK

    uint32_t const cps[1] = { 0x1d8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_001)
{
    // 1D8E  ; [.1F91.0020.0002] 
    // LATIN SMALL LETTER Z WITH PALATAL HOOK

    uint32_t const cps[1] = { 0x1d8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_002)
{
    // 1D8F  ; [.1CB3.0020.0002] 
    // LATIN SMALL LETTER A WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_003)
{
    // 1D90  ; [.1CC0.0020.0002] 
    // LATIN SMALL LETTER ALPHA WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_004)
{
    // 1D91  ; [.1D05.0020.0002] 
    // LATIN SMALL LETTER D WITH HOOK AND TAIL

    uint32_t const cps[1] = { 0x1d91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_005)
{
    // 1D92  ; [.1D1B.0020.0002] 
    // LATIN SMALL LETTER E WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_006)
{
    // 1D93  ; [.1D2C.0020.0002] 
    // LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_007)
{
    // 1D94  ; [.1D39.0020.0002] 
    // LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_008)
{
    // 1D95  ; [.1D27.0020.0002] 
    // LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_009)
{
    // 1D96  ; [.1DAC.0020.0002] 
    // LATIN SMALL LETTER I WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_010)
{
    // 1D97  ; [.1E5D.0020.0002] 
    // LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_011)
{
    // 1D98  ; [.1EF6.0020.0002] 
    // LATIN SMALL LETTER ESH WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ef6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_012)
{
    // 1D99  ; [.1F2C.0020.0002] 
    // LATIN SMALL LETTER U WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_013)
{
    // 1D9A  ; [.1FAD.0020.0002] 
    // LATIN SMALL LETTER EZH WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1d9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_014)
{
    // 1D9B  ; [.1CC1.0020.0014] 
    // MODIFIER LETTER SMALL TURNED ALPHA

    uint32_t const cps[1] = { 0x1d9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc1), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_015)
{
    // 1D9C  ; [.1CE0.0020.0014] 
    // MODIFIER LETTER SMALL C

    uint32_t const cps[1] = { 0x1d9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_016)
{
    // 1D9D  ; [.1CEF.0020.0014] 
    // MODIFIER LETTER SMALL C WITH CURL

    uint32_t const cps[1] = { 0x1d9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cef), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_017)
{
    // 1D9E  ; [.1CF5.0020.0014][.0000.0111.0014] 
    // MODIFIER LETTER SMALL ETH

    uint32_t const cps[1] = { 0x1d9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_018)
{
    // 1D9F  ; [.1D35.0020.0014] 
    // MODIFIER LETTER SMALL REVERSED OPEN E

    uint32_t const cps[1] = { 0x1d9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d35), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_019)
{
    // 1DA0  ; [.1D4B.0020.0014] 
    // MODIFIER LETTER SMALL F

    uint32_t const cps[1] = { 0x1da0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_020)
{
    // 1DA1  ; [.1DC3.0020.0014] 
    // MODIFIER LETTER SMALL DOTLESS J WITH STROKE

    uint32_t const cps[1] = { 0x1da1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dc3), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_021)
{
    // 1DA2  ; [.1D5E.0020.0014] 
    // MODIFIER LETTER SMALL SCRIPT G

    uint32_t const cps[1] = { 0x1da2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5e), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_022)
{
    // 1DA3  ; [.1F2E.0020.0014] 
    // MODIFIER LETTER SMALL TURNED H

    uint32_t const cps[1] = { 0x1da3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f2e), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_023)
{
    // 1DA4  ; [.1DA7.0020.0014] 
    // MODIFIER LETTER SMALL I WITH STROKE

    uint32_t const cps[1] = { 0x1da4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da7), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_024)
{
    // 1DA5  ; [.1DAD.0020.0014] 
    // MODIFIER LETTER SMALL IOTA

    uint32_t const cps[1] = { 0x1da5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dad), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_025)
{
    // 1DA6  ; [.1DA0.0020.0014] 
    // MODIFIER LETTER SMALL CAPITAL I

    uint32_t const cps[1] = { 0x1da6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da0), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_026)
{
    // 1DA7  ; [.1DAB.0020.0014] 
    // MODIFIER LETTER SMALL CAPITAL I WITH STROKE

    uint32_t const cps[1] = { 0x1da7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dab), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_027)
{
    // 1DA8  ; [.1DBF.0020.0014] 
    // MODIFIER LETTER SMALL J WITH CROSSED-TAIL

    uint32_t const cps[1] = { 0x1da8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dbf), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_028)
{
    // 1DA9  ; [.1DF9.0020.0014] 
    // MODIFIER LETTER SMALL L WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1da9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1df9), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_029)
{
    // 1DAA  ; [.1DF8.0020.0014] 
    // MODIFIER LETTER SMALL L WITH PALATAL HOOK

    uint32_t const cps[1] = { 0x1daa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1df8), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_030)
{
    // 1DAB  ; [.1DE1.0020.0014] 
    // MODIFIER LETTER SMALL CAPITAL L

    uint32_t const cps[1] = { 0x1dab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de1), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_031)
{
    // 1DAC  ; [.1E17.0020.0014] 
    // MODIFIER LETTER SMALL M WITH HOOK

    uint32_t const cps[1] = { 0x1dac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e17), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_032)
{
    // 1DAD  ; [.1F40.0020.0014] 
    // MODIFIER LETTER SMALL TURNED M WITH LONG LEG

    uint32_t const cps[1] = { 0x1dad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f40), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_033)
{
    // 1DAE  ; [.1E2A.0020.0014] 
    // MODIFIER LETTER SMALL N WITH LEFT HOOK

    uint32_t const cps[1] = { 0x1dae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e2a), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_034)
{
    // 1DAF  ; [.1E34.0020.0014] 
    // MODIFIER LETTER SMALL N WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1daf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e34), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_035)
{
    // 1DB0  ; [.1E23.0020.0014] 
    // MODIFIER LETTER SMALL CAPITAL N

    uint32_t const cps[1] = { 0x1db0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e23), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_036)
{
    // 1DB1  ; [.1E63.0020.0014] 
    // MODIFIER LETTER SMALL BARRED O

    uint32_t const cps[1] = { 0x1db1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e63), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_037)
{
    // 1DB2  ; [.1E82.0020.0014] 
    // MODIFIER LETTER SMALL PHI

    uint32_t const cps[1] = { 0x1db2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e82), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_038)
{
    // 1DB3  ; [.1EDE.0020.0014] 
    // MODIFIER LETTER SMALL S WITH HOOK

    uint32_t const cps[1] = { 0x1db3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ede), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_039)
{
    // 1DB4  ; [.1EE8.0020.0014] 
    // MODIFIER LETTER SMALL ESH

    uint32_t const cps[1] = { 0x1db4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ee8), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_040)
{
    // 1DB5  ; [.1F06.0020.0014] 
    // MODIFIER LETTER SMALL T WITH PALATAL HOOK

    uint32_t const cps[1] = { 0x1db5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f06), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_041)
{
    // 1DB6  ; [.1F26.0020.0014] 
    // MODIFIER LETTER SMALL U BAR

    uint32_t const cps[1] = { 0x1db6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f26), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_042)
{
    // 1DB7  ; [.1F44.0020.0014] 
    // MODIFIER LETTER SMALL UPSILON

    uint32_t const cps[1] = { 0x1db7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f44), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_043)
{
    // 1DB8  ; [.1F1F.0020.0014] 
    // MODIFIER LETTER SMALL CAPITAL U

    uint32_t const cps[1] = { 0x1db8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1f), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_044)
{
    // 1DB9  ; [.1F50.0020.0014] 
    // MODIFIER LETTER SMALL V WITH HOOK

    uint32_t const cps[1] = { 0x1db9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f50), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_045)
{
    // 1DBA  ; [.1F57.0020.0014] 
    // MODIFIER LETTER SMALL TURNED V

    uint32_t const cps[1] = { 0x1dba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f57), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_046)
{
    // 1DBB  ; [.1F87.0020.0014] 
    // MODIFIER LETTER SMALL Z

    uint32_t const cps[1] = { 0x1dbb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_047)
{
    // 1DBC  ; [.1F96.0020.0014] 
    // MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1dbc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f96), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_048)
{
    // 1DBD  ; [.1F9A.0020.0014] 
    // MODIFIER LETTER SMALL Z WITH CURL

    uint32_t const cps[1] = { 0x1dbd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f9a), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_049)
{
    // 1DBE  ; [.1FA4.0020.0014] 
    // MODIFIER LETTER SMALL EZH

    uint32_t const cps[1] = { 0x1dbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa4), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_050)
{
    // 1DBF  ; [.202B.0020.0014] 
    // MODIFIER LETTER SMALL THETA

    uint32_t const cps[1] = { 0x1dbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_051)
{
    // 1DC0  ; [.0000.0033.0002] 
    // COMBINING DOTTED GRAVE ACCENT

    uint32_t const cps[1] = { 0x1dc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_052)
{
    // 1DC1  ; [.0000.0033.0002] 
    // COMBINING DOTTED ACUTE ACCENT

    uint32_t const cps[1] = { 0x1dc1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_053)
{
    // 1DC2  ; [.0000.0034.0002] 
    // COMBINING SNAKE BELOW

    uint32_t const cps[1] = { 0x1dc2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_054)
{
    // 1DC3  ; [.0000.0033.0002] 
    // COMBINING SUSPENSION MARK

    uint32_t const cps[1] = { 0x1dc3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_055)
{
    // 1DC4  ; [.0000.0033.0002] 
    // COMBINING MACRON-ACUTE

    uint32_t const cps[1] = { 0x1dc4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_056)
{
    // 1DC5  ; [.0000.0033.0002] 
    // COMBINING GRAVE-MACRON

    uint32_t const cps[1] = { 0x1dc5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_057)
{
    // 1DC6  ; [.0000.0033.0002] 
    // COMBINING MACRON-GRAVE

    uint32_t const cps[1] = { 0x1dc6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_058)
{
    // 1DC7  ; [.0000.0033.0002] 
    // COMBINING ACUTE-MACRON

    uint32_t const cps[1] = { 0x1dc7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_059)
{
    // 1DC8  ; [.0000.0033.0002] 
    // COMBINING GRAVE-ACUTE-GRAVE

    uint32_t const cps[1] = { 0x1dc8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_060)
{
    // 1DC9  ; [.0000.0033.0002] 
    // COMBINING ACUTE-GRAVE-ACUTE

    uint32_t const cps[1] = { 0x1dc9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_061)
{
    // 1DCA  ; [.1E99.0020.0004] 
    // COMBINING LATIN SMALL LETTER R BELOW

    uint32_t const cps[1] = { 0x1dca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_062)
{
    // 1DCB  ; [.0000.0033.0002] 
    // COMBINING BREVE-MACRON

    uint32_t const cps[1] = { 0x1dcb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_063)
{
    // 1DCC  ; [.0000.0033.0002] 
    // COMBINING MACRON-BREVE

    uint32_t const cps[1] = { 0x1dcc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_064)
{
    // 1DCD  ; [.0000.0033.0002] 
    // COMBINING DOUBLE CIRCUMFLEX ABOVE

    uint32_t const cps[1] = { 0x1dcd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_065)
{
    // 1DCE  ; [.0000.0033.0002] 
    // COMBINING OGONEK ABOVE

    uint32_t const cps[1] = { 0x1dce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_066)
{
    // 1DCF  ; [.0000.0034.0002] 
    // COMBINING ZIGZAG BELOW

    uint32_t const cps[1] = { 0x1dcf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_067)
{
    // 1DD0  ; [.0000.0034.0002] 
    // COMBINING IS BELOW

    uint32_t const cps[1] = { 0x1dd0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_068)
{
    // 1DD1  ; [.0000.0033.0002] 
    // COMBINING UR ABOVE

    uint32_t const cps[1] = { 0x1dd1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_069)
{
    // 1DD2  ; [.1FC6.0020.0004] 
    // COMBINING US ABOVE

    uint32_t const cps[1] = { 0x1dd2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc6), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_070)
{
    // 1DD3  ; [.1CAD.0020.0004][.0000.0111.0004] 
    // COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE

    uint32_t const cps[1] = { 0x1dd3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_071)
{
    // 1DD4  ; [.1CAD.0020.0004][.0000.0111.0004][.1D10.0020.0004] 
    // COMBINING LATIN SMALL LETTER AE

    uint32_t const cps[1] = { 0x1dd4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_072)
{
    // 1DD5  ; [.1CAD.0020.0004][.1E43.0020.0004] 
    // COMBINING LATIN SMALL LETTER AO

    uint32_t const cps[1] = { 0x1dd5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_073)
{
    // 1DD6  ; [.1CAD.0020.0004][.1F49.0020.0004] 
    // COMBINING LATIN SMALL LETTER AV

    uint32_t const cps[1] = { 0x1dd6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_074)
{
    // 1DD7  ; [.1CE0.0020.0004][.0000.0030.0004] 
    // COMBINING LATIN SMALL LETTER C CEDILLA

    uint32_t const cps[1] = { 0x1dd7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_075)
{
    // 1DD8  ; [.1CF5.0020.0004][.0000.0112.0004] 
    // COMBINING LATIN SMALL LETTER INSULAR D

    uint32_t const cps[1] = { 0x1dd8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_076)
{
    // 1DD9  ; [.1CF5.0020.0004][.0000.0111.0004] 
    // COMBINING LATIN SMALL LETTER ETH

    uint32_t const cps[1] = { 0x1dd9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_077)
{
    // 1DDA  ; [.1D5A.0020.0004] 
    // COMBINING LATIN SMALL LETTER G

    uint32_t const cps[1] = { 0x1dda };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_078)
{
    // 1DDB  ; [.1D63.0020.0004] 
    // COMBINING LATIN LETTER SMALL CAPITAL G

    uint32_t const cps[1] = { 0x1ddb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d63), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_079)
{
    // 1DDC  ; [.1DCB.0020.0004] 
    // COMBINING LATIN SMALL LETTER K

    uint32_t const cps[1] = { 0x1ddc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_080)
{
    // 1DDD  ; [.1DDD.0020.0004] 
    // COMBINING LATIN SMALL LETTER L

    uint32_t const cps[1] = { 0x1ddd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_081)
{
    // 1DDE  ; [.1DE1.0020.0004] 
    // COMBINING LATIN LETTER SMALL CAPITAL L

    uint32_t const cps[1] = { 0x1dde };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de1), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_082)
{
    // 1DDF  ; [.1E14.0020.0004] 
    // COMBINING LATIN LETTER SMALL CAPITAL M

    uint32_t const cps[1] = { 0x1ddf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e14), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_083)
{
    // 1DE0  ; [.1E1F.0020.0004] 
    // COMBINING LATIN SMALL LETTER N

    uint32_t const cps[1] = { 0x1de0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_084)
{
    // 1DE1  ; [.1E23.0020.0004] 
    // COMBINING LATIN LETTER SMALL CAPITAL N

    uint32_t const cps[1] = { 0x1de1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e23), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_085)
{
    // 1DE2  ; [.1E9E.0020.0004] 
    // COMBINING LATIN LETTER SMALL CAPITAL R

    uint32_t const cps[1] = { 0x1de2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e9e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_086)
{
    // 1DE3  ; [.1EA3.0020.0004] 
    // COMBINING LATIN SMALL LETTER R ROTUNDA

    uint32_t const cps[1] = { 0x1de3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ea3), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_087)
{
    // 1DE4  ; [.1ED7.0020.0004] 
    // COMBINING LATIN SMALL LETTER S

    uint32_t const cps[1] = { 0x1de4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_088)
{
    // 1DE5  ; [.1ED7.0020.0004][.0000.0112.0004] 
    // COMBINING LATIN SMALL LETTER LONG S

    uint32_t const cps[1] = { 0x1de5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_089)
{
    // 1DE6  ; [.1F87.0020.0004] 
    // COMBINING LATIN SMALL LETTER Z

    uint32_t const cps[1] = { 0x1de6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_090)
{
    // 1DE7  ; [.1CBB.0020.0004] 
    // COMBINING LATIN SMALL LETTER ALPHA

    uint32_t const cps[1] = { 0x1de7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cbb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_091)
{
    // 1DE8  ; [.1CC6.0020.0004] 
    // COMBINING LATIN SMALL LETTER B

    uint32_t const cps[1] = { 0x1de8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_092)
{
    // 1DE9  ; [.1CDF.0020.0004] 
    // COMBINING LATIN SMALL LETTER BETA

    uint32_t const cps[1] = { 0x1de9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cdf), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_093)
{
    // 1DEA  ; [.1D23.0020.0004] 
    // COMBINING LATIN SMALL LETTER SCHWA

    uint32_t const cps[1] = { 0x1dea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d23), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_094)
{
    // 1DEB  ; [.1D4B.0020.0004] 
    // COMBINING LATIN SMALL LETTER F

    uint32_t const cps[1] = { 0x1deb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_095)
{
    // 1DEC  ; [.1DF1.0020.0004] 
    // COMBINING LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE

    uint32_t const cps[1] = { 0x1dec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1df1), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_096)
{
    // 1DED  ; [.1E43.0020.0004][.0000.0034.0004] 
    // COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE

    uint32_t const cps[1] = { 0x1ded };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x14), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_097)
{
    // 1DEE  ; [.1E72.0020.0004] 
    // COMBINING LATIN SMALL LETTER P

    uint32_t const cps[1] = { 0x1dee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_098)
{
    // 1DEF  ; [.1EE8.0020.0004] 
    // COMBINING LATIN SMALL LETTER ESH

    uint32_t const cps[1] = { 0x1def };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ee8), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_099)
{
    // 1DF0  ; [.1F1B.0020.0004][.0000.0034.0004] 
    // COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE

    uint32_t const cps[1] = { 0x1df0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x14), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_100)
{
    // 1DF1  ; [.1F5B.0020.0004] 
    // COMBINING LATIN SMALL LETTER W

    uint32_t const cps[1] = { 0x1df1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_101)
{
    // 1DF2  ; [.1CAD.0020.0004][.0000.002B.0004] 
    // COMBINING LATIN SMALL LETTER A WITH DIAERESIS

    uint32_t const cps[1] = { 0x1df2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_102)
{
    // 1DF3  ; [.1E43.0020.0004][.0000.002B.0004] 
    // COMBINING LATIN SMALL LETTER O WITH DIAERESIS

    uint32_t const cps[1] = { 0x1df3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_103)
{
    // 1DF4  ; [.1F1B.0020.0004][.0000.002B.0004] 
    // COMBINING LATIN SMALL LETTER U WITH DIAERESIS

    uint32_t const cps[1] = { 0x1df4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_104)
{
    // 1DF5  ; [.0000.0033.0002] 
    // COMBINING UP TACK ABOVE

    uint32_t const cps[1] = { 0x1df5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_105)
{
    // 1DF6  ; [.0000.0033.0002] 
    // COMBINING KAVYKA ABOVE RIGHT

    uint32_t const cps[1] = { 0x1df6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_106)
{
    // 1DF7  ; [.0000.0033.0002] 
    // COMBINING KAVYKA ABOVE LEFT

    uint32_t const cps[1] = { 0x1df7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_107)
{
    // 1DF8  ; [.0000.0033.0002] 
    // COMBINING DOT ABOVE LEFT

    uint32_t const cps[1] = { 0x1df8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_108)
{
    // 1DF9  ; [.0000.0034.0002] 
    // COMBINING WIDE INVERTED BRIDGE BELOW

    uint32_t const cps[1] = { 0x1df9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_109)
{
    // 1DFB  ; [.0000.0033.0002] 
    // COMBINING DELETION MARK

    uint32_t const cps[1] = { 0x1dfb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_110)
{
    // 1DFC  ; [.0000.0034.0002] 
    // COMBINING DOUBLE INVERTED BREVE BELOW

    uint32_t const cps[1] = { 0x1dfc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_111)
{
    // 1DFD  ; [.0000.0034.0002] 
    // COMBINING ALMOST EQUAL TO BELOW

    uint32_t const cps[1] = { 0x1dfd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_112)
{
    // 1DFE  ; [.0000.0033.0002] 
    // COMBINING LEFT ARROWHEAD ABOVE

    uint32_t const cps[1] = { 0x1dfe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_113)
{
    // 1DFF  ; [.0000.0034.0002] 
    // COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW

    uint32_t const cps[1] = { 0x1dff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_048_114)
{
    // 1E00  ; [.1CAD.0020.0008][.0000.0044.0002] 
    // LATIN CAPITAL LETTER A WITH RING BELOW

    uint32_t const cps[1] = { 0x1e00 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x24), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_115)
{
    // 1E01  ; [.1CAD.0020.0002][.0000.0044.0002] 
    // LATIN SMALL LETTER A WITH RING BELOW

    uint32_t const cps[1] = { 0x1e01 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x24), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_116)
{
    // 1E02  ; [.1CC6.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER B WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e02 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_117)
{
    // 1E03  ; [.1CC6.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER B WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e03 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_118)
{
    // 1E04  ; [.1CC6.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER B WITH DOT BELOW

    uint32_t const cps[1] = { 0x1e04 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_119)
{
    // 1E05  ; [.1CC6.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER B WITH DOT BELOW

    uint32_t const cps[1] = { 0x1e05 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_120)
{
    // 1E06  ; [.1CC6.0020.0008][.0000.0049.0002] 
    // LATIN CAPITAL LETTER B WITH LINE BELOW

    uint32_t const cps[1] = { 0x1e06 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x29), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_121)
{
    // 1E07  ; [.1CC6.0020.0002][.0000.0049.0002] 
    // LATIN SMALL LETTER B WITH LINE BELOW

    uint32_t const cps[1] = { 0x1e07 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x29), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_122)
{
    // 1E08  ; [.1CE0.0020.0008][.0000.0030.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE

    uint32_t const cps[1] = { 0x1e08 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_123)
{
    // 1E09  ; [.1CE0.0020.0002][.0000.0030.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER C WITH CEDILLA AND ACUTE

    uint32_t const cps[1] = { 0x1e09 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_124)
{
    // 1E0A  ; [.1CF5.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER D WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e0a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_125)
{
    // 1E0B  ; [.1CF5.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER D WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e0b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_126)
{
    // 1E0C  ; [.1CF5.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER D WITH DOT BELOW

    uint32_t const cps[1] = { 0x1e0c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_127)
{
    // 1E0D  ; [.1CF5.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER D WITH DOT BELOW

    uint32_t const cps[1] = { 0x1e0d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_128)
{
    // 1E0E  ; [.1CF5.0020.0008][.0000.0049.0002] 
    // LATIN CAPITAL LETTER D WITH LINE BELOW

    uint32_t const cps[1] = { 0x1e0e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x29), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_129)
{
    // 1E0F  ; [.1CF5.0020.0002][.0000.0049.0002] 
    // LATIN SMALL LETTER D WITH LINE BELOW

    uint32_t const cps[1] = { 0x1e0f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x29), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_130)
{
    // 1E10  ; [.1CF5.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER D WITH CEDILLA

    uint32_t const cps[1] = { 0x1e10 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_131)
{
    // 1E11  ; [.1CF5.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER D WITH CEDILLA

    uint32_t const cps[1] = { 0x1e11 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_132)
{
    // 1E12  ; [.1CF5.0020.0008][.0000.0046.0002] 
    // LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW

    uint32_t const cps[1] = { 0x1e12 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x26), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_133)
{
    // 1E13  ; [.1CF5.0020.0002][.0000.0046.0002] 
    // LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW

    uint32_t const cps[1] = { 0x1e13 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x26), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_134)
{
    // 1E14  ; [.1D10.0020.0008][.0000.0032.0002][.0000.0025.0002] 
    // LATIN CAPITAL LETTER E WITH MACRON AND GRAVE

    uint32_t const cps[1] = { 0x1e14 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_135)
{
    // 1E15  ; [.1D10.0020.0002][.0000.0032.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER E WITH MACRON AND GRAVE

    uint32_t const cps[1] = { 0x1e15 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_136)
{
    // 1E16  ; [.1D10.0020.0008][.0000.0032.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER E WITH MACRON AND ACUTE

    uint32_t const cps[1] = { 0x1e16 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_137)
{
    // 1E17  ; [.1D10.0020.0002][.0000.0032.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER E WITH MACRON AND ACUTE

    uint32_t const cps[1] = { 0x1e17 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_138)
{
    // 1E18  ; [.1D10.0020.0008][.0000.0046.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW

    uint32_t const cps[1] = { 0x1e18 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x26), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_139)
{
    // 1E19  ; [.1D10.0020.0002][.0000.0046.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW

    uint32_t const cps[1] = { 0x1e19 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x26), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_140)
{
    // 1E1A  ; [.1D10.0020.0008][.0000.0048.0002] 
    // LATIN CAPITAL LETTER E WITH TILDE BELOW

    uint32_t const cps[1] = { 0x1e1a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x28), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_141)
{
    // 1E1B  ; [.1D10.0020.0002][.0000.0048.0002] 
    // LATIN SMALL LETTER E WITH TILDE BELOW

    uint32_t const cps[1] = { 0x1e1b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x28), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_142)
{
    // 1E1C  ; [.1D10.0020.0008][.0000.0030.0002][.0000.0026.0002] 
    // LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE

    uint32_t const cps[1] = { 0x1e1c };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_143)
{
    // 1E1D  ; [.1D10.0020.0002][.0000.0030.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER E WITH CEDILLA AND BREVE

    uint32_t const cps[1] = { 0x1e1d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_048_144)
{
    // 1E1E  ; [.1D4B.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER F WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e1e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_145)
{
    // 1E1F  ; [.1D4B.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER F WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e1f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_146)
{
    // 1E20  ; [.1D5A.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER G WITH MACRON

    uint32_t const cps[1] = { 0x1e20 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_147)
{
    // 1E21  ; [.1D5A.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER G WITH MACRON

    uint32_t const cps[1] = { 0x1e21 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_148)
{
    // 1E22  ; [.1D7E.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER H WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e22 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_048_149)
{
    // 1E23  ; [.1D7E.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER H WITH DOT ABOVE

    uint32_t const cps[1] = { 0x1e23 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

