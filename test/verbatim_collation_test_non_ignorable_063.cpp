// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_063_000)
{
    // 1F907 0041;	
    // (🤇) LEFT HALF CIRCLE	[15CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F907, 0x0041 };
    uint32_t const ces[9] = { 0x15CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_001)
{
    // 1F907 0062;	
    // (🤇) LEFT HALF CIRCLE	[15CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F907, 0x0062 };
    uint32_t const ces[9] = { 0x15CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_002)
{
    // 1F908 0021;	
    // (🤈) DOWNWARD FACING HOOK	[15CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F908, 0x0021 };
    uint32_t const ces[9] = { 0x15CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_003)
{
    // 1F908 003F;	
    // (🤈) DOWNWARD FACING HOOK	[15CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F908, 0x003F };
    uint32_t const ces[9] = { 0x15CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_004)
{
    // 1F908 0061;	
    // (🤈) DOWNWARD FACING HOOK	[15CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F908, 0x0061 };
    uint32_t const ces[9] = { 0x15CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_005)
{
    // 1F908 0041;	
    // (🤈) DOWNWARD FACING HOOK	[15CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F908, 0x0041 };
    uint32_t const ces[9] = { 0x15CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_006)
{
    // 1F908 0062;	
    // (🤈) DOWNWARD FACING HOOK	[15CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F908, 0x0062 };
    uint32_t const ces[9] = { 0x15CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_007)
{
    // 1F909 0021;	
    // (🤉) DOWNWARD FACING NOTCHED HOOK	[15D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F909, 0x0021 };
    uint32_t const ces[9] = { 0x15D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_008)
{
    // 1F909 003F;	
    // (🤉) DOWNWARD FACING NOTCHED HOOK	[15D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F909, 0x003F };
    uint32_t const ces[9] = { 0x15D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_009)
{
    // 1F909 0061;	
    // (🤉) DOWNWARD FACING NOTCHED HOOK	[15D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F909, 0x0061 };
    uint32_t const ces[9] = { 0x15D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_010)
{
    // 1F909 0041;	
    // (🤉) DOWNWARD FACING NOTCHED HOOK	[15D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F909, 0x0041 };
    uint32_t const ces[9] = { 0x15D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_011)
{
    // 1F909 0062;	
    // (🤉) DOWNWARD FACING NOTCHED HOOK	[15D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F909, 0x0062 };
    uint32_t const ces[9] = { 0x15D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_012)
{
    // 1F90A 0021;	
    // (🤊) DOWNWARD FACING HOOK WITH DOT	[15D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90A, 0x0021 };
    uint32_t const ces[9] = { 0x15D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_013)
{
    // 1F90A 003F;	
    // (🤊) DOWNWARD FACING HOOK WITH DOT	[15D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90A, 0x003F };
    uint32_t const ces[9] = { 0x15D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_014)
{
    // 1F90A 0061;	
    // (🤊) DOWNWARD FACING HOOK WITH DOT	[15D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90A, 0x0061 };
    uint32_t const ces[9] = { 0x15D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_015)
{
    // 1F90A 0041;	
    // (🤊) DOWNWARD FACING HOOK WITH DOT	[15D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F90A, 0x0041 };
    uint32_t const ces[9] = { 0x15D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_016)
{
    // 1F90A 0062;	
    // (🤊) DOWNWARD FACING HOOK WITH DOT	[15D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90A, 0x0062 };
    uint32_t const ces[9] = { 0x15D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_017)
{
    // 1F90B 0021;	
    // (🤋) DOWNWARD FACING NOTCHED HOOK WITH DOT	[15D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90B, 0x0021 };
    uint32_t const ces[9] = { 0x15D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_018)
{
    // 1F90B 003F;	
    // (🤋) DOWNWARD FACING NOTCHED HOOK WITH DOT	[15D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90B, 0x003F };
    uint32_t const ces[9] = { 0x15D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_019)
{
    // 1F90B 0061;	
    // (🤋) DOWNWARD FACING NOTCHED HOOK WITH DOT	[15D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90B, 0x0061 };
    uint32_t const ces[9] = { 0x15D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_020)
{
    // 1F90B 0041;	
    // (🤋) DOWNWARD FACING NOTCHED HOOK WITH DOT	[15D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F90B, 0x0041 };
    uint32_t const ces[9] = { 0x15D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_021)
{
    // 1F90B 0062;	
    // (🤋) DOWNWARD FACING NOTCHED HOOK WITH DOT	[15D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F90B, 0x0062 };
    uint32_t const ces[9] = { 0x15D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_022)
{
    // 1F910 0021;	
    // (🤐) ZIPPER-MOUTH FACE	[15D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F910, 0x0021 };
    uint32_t const ces[9] = { 0x15D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_023)
{
    // 1F910 003F;	
    // (🤐) ZIPPER-MOUTH FACE	[15D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F910, 0x003F };
    uint32_t const ces[9] = { 0x15D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_024)
{
    // 1F910 0061;	
    // (🤐) ZIPPER-MOUTH FACE	[15D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F910, 0x0061 };
    uint32_t const ces[9] = { 0x15D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_025)
{
    // 1F910 0041;	
    // (🤐) ZIPPER-MOUTH FACE	[15D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F910, 0x0041 };
    uint32_t const ces[9] = { 0x15D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_026)
{
    // 1F910 0062;	
    // (🤐) ZIPPER-MOUTH FACE	[15D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F910, 0x0062 };
    uint32_t const ces[9] = { 0x15D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_027)
{
    // 1F911 0021;	
    // (🤑) MONEY-MOUTH FACE	[15D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F911, 0x0021 };
    uint32_t const ces[9] = { 0x15D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_028)
{
    // 1F911 003F;	
    // (🤑) MONEY-MOUTH FACE	[15D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F911, 0x003F };
    uint32_t const ces[9] = { 0x15D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_029)
{
    // 1F911 0061;	
    // (🤑) MONEY-MOUTH FACE	[15D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F911, 0x0061 };
    uint32_t const ces[9] = { 0x15D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_030)
{
    // 1F911 0041;	
    // (🤑) MONEY-MOUTH FACE	[15D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F911, 0x0041 };
    uint32_t const ces[9] = { 0x15D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_031)
{
    // 1F911 0062;	
    // (🤑) MONEY-MOUTH FACE	[15D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F911, 0x0062 };
    uint32_t const ces[9] = { 0x15D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_032)
{
    // 1F912 0021;	
    // (🤒) FACE WITH THERMOMETER	[15D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F912, 0x0021 };
    uint32_t const ces[9] = { 0x15D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_033)
{
    // 1F912 003F;	
    // (🤒) FACE WITH THERMOMETER	[15D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F912, 0x003F };
    uint32_t const ces[9] = { 0x15D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_034)
{
    // 1F912 0061;	
    // (🤒) FACE WITH THERMOMETER	[15D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F912, 0x0061 };
    uint32_t const ces[9] = { 0x15D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_035)
{
    // 1F912 0041;	
    // (🤒) FACE WITH THERMOMETER	[15D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F912, 0x0041 };
    uint32_t const ces[9] = { 0x15D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_036)
{
    // 1F912 0062;	
    // (🤒) FACE WITH THERMOMETER	[15D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F912, 0x0062 };
    uint32_t const ces[9] = { 0x15D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_037)
{
    // 1F913 0021;	
    // (🤓) NERD FACE	[15D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F913, 0x0021 };
    uint32_t const ces[9] = { 0x15D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_038)
{
    // 1F913 003F;	
    // (🤓) NERD FACE	[15D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F913, 0x003F };
    uint32_t const ces[9] = { 0x15D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_039)
{
    // 1F913 0061;	
    // (🤓) NERD FACE	[15D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F913, 0x0061 };
    uint32_t const ces[9] = { 0x15D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_040)
{
    // 1F913 0041;	
    // (🤓) NERD FACE	[15D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F913, 0x0041 };
    uint32_t const ces[9] = { 0x15D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_041)
{
    // 1F913 0062;	
    // (🤓) NERD FACE	[15D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F913, 0x0062 };
    uint32_t const ces[9] = { 0x15D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_042)
{
    // 1F914 0021;	
    // (🤔) THINKING FACE	[15D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F914, 0x0021 };
    uint32_t const ces[9] = { 0x15D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_043)
{
    // 1F914 003F;	
    // (🤔) THINKING FACE	[15D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F914, 0x003F };
    uint32_t const ces[9] = { 0x15D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_044)
{
    // 1F914 0061;	
    // (🤔) THINKING FACE	[15D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F914, 0x0061 };
    uint32_t const ces[9] = { 0x15D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_045)
{
    // 1F914 0041;	
    // (🤔) THINKING FACE	[15D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F914, 0x0041 };
    uint32_t const ces[9] = { 0x15D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_046)
{
    // 1F914 0062;	
    // (🤔) THINKING FACE	[15D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F914, 0x0062 };
    uint32_t const ces[9] = { 0x15D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_047)
{
    // 1F915 0021;	
    // (🤕) FACE WITH HEAD-BANDAGE	[15D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F915, 0x0021 };
    uint32_t const ces[9] = { 0x15D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_048)
{
    // 1F915 003F;	
    // (🤕) FACE WITH HEAD-BANDAGE	[15D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F915, 0x003F };
    uint32_t const ces[9] = { 0x15D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_049)
{
    // 1F915 0061;	
    // (🤕) FACE WITH HEAD-BANDAGE	[15D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F915, 0x0061 };
    uint32_t const ces[9] = { 0x15D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_050)
{
    // 1F915 0041;	
    // (🤕) FACE WITH HEAD-BANDAGE	[15D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F915, 0x0041 };
    uint32_t const ces[9] = { 0x15D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_051)
{
    // 1F915 0062;	
    // (🤕) FACE WITH HEAD-BANDAGE	[15D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F915, 0x0062 };
    uint32_t const ces[9] = { 0x15D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_052)
{
    // 1F916 0021;	
    // (🤖) ROBOT FACE	[15D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F916, 0x0021 };
    uint32_t const ces[9] = { 0x15D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_053)
{
    // 1F916 003F;	
    // (🤖) ROBOT FACE	[15D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F916, 0x003F };
    uint32_t const ces[9] = { 0x15D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_054)
{
    // 1F916 0061;	
    // (🤖) ROBOT FACE	[15D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F916, 0x0061 };
    uint32_t const ces[9] = { 0x15D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_055)
{
    // 1F916 0041;	
    // (🤖) ROBOT FACE	[15D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F916, 0x0041 };
    uint32_t const ces[9] = { 0x15D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_056)
{
    // 1F916 0062;	
    // (🤖) ROBOT FACE	[15D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F916, 0x0062 };
    uint32_t const ces[9] = { 0x15D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_057)
{
    // 1F917 0021;	
    // (🤗) HUGGING FACE	[15DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F917, 0x0021 };
    uint32_t const ces[9] = { 0x15DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_058)
{
    // 1F917 003F;	
    // (🤗) HUGGING FACE	[15DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F917, 0x003F };
    uint32_t const ces[9] = { 0x15DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_059)
{
    // 1F917 0061;	
    // (🤗) HUGGING FACE	[15DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F917, 0x0061 };
    uint32_t const ces[9] = { 0x15DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_060)
{
    // 1F917 0041;	
    // (🤗) HUGGING FACE	[15DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F917, 0x0041 };
    uint32_t const ces[9] = { 0x15DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_061)
{
    // 1F917 0062;	
    // (🤗) HUGGING FACE	[15DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F917, 0x0062 };
    uint32_t const ces[9] = { 0x15DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_062)
{
    // 1F918 0021;	
    // (🤘) SIGN OF THE HORNS	[15DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F918, 0x0021 };
    uint32_t const ces[9] = { 0x15DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_063)
{
    // 1F918 003F;	
    // (🤘) SIGN OF THE HORNS	[15DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F918, 0x003F };
    uint32_t const ces[9] = { 0x15DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_064)
{
    // 1F918 0061;	
    // (🤘) SIGN OF THE HORNS	[15DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F918, 0x0061 };
    uint32_t const ces[9] = { 0x15DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_065)
{
    // 1F918 0041;	
    // (🤘) SIGN OF THE HORNS	[15DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F918, 0x0041 };
    uint32_t const ces[9] = { 0x15DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_066)
{
    // 1F918 0062;	
    // (🤘) SIGN OF THE HORNS	[15DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F918, 0x0062 };
    uint32_t const ces[9] = { 0x15DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_067)
{
    // 1F919 0021;	
    // (🤙) CALL ME HAND	[15DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F919, 0x0021 };
    uint32_t const ces[9] = { 0x15DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_068)
{
    // 1F919 003F;	
    // (🤙) CALL ME HAND	[15DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F919, 0x003F };
    uint32_t const ces[9] = { 0x15DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_069)
{
    // 1F919 0061;	
    // (🤙) CALL ME HAND	[15DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F919, 0x0061 };
    uint32_t const ces[9] = { 0x15DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_070)
{
    // 1F919 0041;	
    // (🤙) CALL ME HAND	[15DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F919, 0x0041 };
    uint32_t const ces[9] = { 0x15DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_071)
{
    // 1F919 0062;	
    // (🤙) CALL ME HAND	[15DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F919, 0x0062 };
    uint32_t const ces[9] = { 0x15DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_072)
{
    // 1F91A 0021;	
    // (🤚) RAISED BACK OF HAND	[15DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91A, 0x0021 };
    uint32_t const ces[9] = { 0x15DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_073)
{
    // 1F91A 003F;	
    // (🤚) RAISED BACK OF HAND	[15DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91A, 0x003F };
    uint32_t const ces[9] = { 0x15DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_074)
{
    // 1F91A 0061;	
    // (🤚) RAISED BACK OF HAND	[15DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91A, 0x0061 };
    uint32_t const ces[9] = { 0x15DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_075)
{
    // 1F91A 0041;	
    // (🤚) RAISED BACK OF HAND	[15DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91A, 0x0041 };
    uint32_t const ces[9] = { 0x15DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_076)
{
    // 1F91A 0062;	
    // (🤚) RAISED BACK OF HAND	[15DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91A, 0x0062 };
    uint32_t const ces[9] = { 0x15DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_077)
{
    // 1F91B 0021;	
    // (🤛) LEFT-FACING FIST	[15DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91B, 0x0021 };
    uint32_t const ces[9] = { 0x15DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_078)
{
    // 1F91B 003F;	
    // (🤛) LEFT-FACING FIST	[15DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91B, 0x003F };
    uint32_t const ces[9] = { 0x15DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_079)
{
    // 1F91B 0061;	
    // (🤛) LEFT-FACING FIST	[15DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91B, 0x0061 };
    uint32_t const ces[9] = { 0x15DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_080)
{
    // 1F91B 0041;	
    // (🤛) LEFT-FACING FIST	[15DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91B, 0x0041 };
    uint32_t const ces[9] = { 0x15DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_081)
{
    // 1F91B 0062;	
    // (🤛) LEFT-FACING FIST	[15DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91B, 0x0062 };
    uint32_t const ces[9] = { 0x15DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_082)
{
    // 1F91C 0021;	
    // (🤜) RIGHT-FACING FIST	[15DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91C, 0x0021 };
    uint32_t const ces[9] = { 0x15DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_083)
{
    // 1F91C 003F;	
    // (🤜) RIGHT-FACING FIST	[15DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91C, 0x003F };
    uint32_t const ces[9] = { 0x15DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_084)
{
    // 1F91C 0061;	
    // (🤜) RIGHT-FACING FIST	[15DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91C, 0x0061 };
    uint32_t const ces[9] = { 0x15DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_085)
{
    // 1F91C 0041;	
    // (🤜) RIGHT-FACING FIST	[15DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91C, 0x0041 };
    uint32_t const ces[9] = { 0x15DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_086)
{
    // 1F91C 0062;	
    // (🤜) RIGHT-FACING FIST	[15DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91C, 0x0062 };
    uint32_t const ces[9] = { 0x15DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_087)
{
    // 1F91D 0021;	
    // (🤝) HANDSHAKE	[15E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91D, 0x0021 };
    uint32_t const ces[9] = { 0x15E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_088)
{
    // 1F91D 003F;	
    // (🤝) HANDSHAKE	[15E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91D, 0x003F };
    uint32_t const ces[9] = { 0x15E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_089)
{
    // 1F91D 0061;	
    // (🤝) HANDSHAKE	[15E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91D, 0x0061 };
    uint32_t const ces[9] = { 0x15E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_090)
{
    // 1F91D 0041;	
    // (🤝) HANDSHAKE	[15E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91D, 0x0041 };
    uint32_t const ces[9] = { 0x15E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_091)
{
    // 1F91D 0062;	
    // (🤝) HANDSHAKE	[15E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91D, 0x0062 };
    uint32_t const ces[9] = { 0x15E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_092)
{
    // 1F91E 0021;	
    // (🤞) HAND WITH INDEX AND MIDDLE FINGERS CROSSED	[15E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91E, 0x0021 };
    uint32_t const ces[9] = { 0x15E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_093)
{
    // 1F91E 003F;	
    // (🤞) HAND WITH INDEX AND MIDDLE FINGERS CROSSED	[15E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91E, 0x003F };
    uint32_t const ces[9] = { 0x15E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_094)
{
    // 1F91E 0061;	
    // (🤞) HAND WITH INDEX AND MIDDLE FINGERS CROSSED	[15E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91E, 0x0061 };
    uint32_t const ces[9] = { 0x15E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_095)
{
    // 1F91E 0041;	
    // (🤞) HAND WITH INDEX AND MIDDLE FINGERS CROSSED	[15E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91E, 0x0041 };
    uint32_t const ces[9] = { 0x15E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_096)
{
    // 1F91E 0062;	
    // (🤞) HAND WITH INDEX AND MIDDLE FINGERS CROSSED	[15E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91E, 0x0062 };
    uint32_t const ces[9] = { 0x15E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_097)
{
    // 1F91F 0021;	
    // (🤟) I LOVE YOU HAND SIGN	[15E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91F, 0x0021 };
    uint32_t const ces[9] = { 0x15E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_098)
{
    // 1F91F 003F;	
    // (🤟) I LOVE YOU HAND SIGN	[15E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91F, 0x003F };
    uint32_t const ces[9] = { 0x15E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_099)
{
    // 1F91F 0061;	
    // (🤟) I LOVE YOU HAND SIGN	[15E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91F, 0x0061 };
    uint32_t const ces[9] = { 0x15E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_100)
{
    // 1F91F 0041;	
    // (🤟) I LOVE YOU HAND SIGN	[15E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F91F, 0x0041 };
    uint32_t const ces[9] = { 0x15E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_101)
{
    // 1F91F 0062;	
    // (🤟) I LOVE YOU HAND SIGN	[15E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F91F, 0x0062 };
    uint32_t const ces[9] = { 0x15E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_102)
{
    // 1F920 0021;	
    // (🤠) FACE WITH COWBOY HAT	[15E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F920, 0x0021 };
    uint32_t const ces[9] = { 0x15E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_103)
{
    // 1F920 003F;	
    // (🤠) FACE WITH COWBOY HAT	[15E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F920, 0x003F };
    uint32_t const ces[9] = { 0x15E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_104)
{
    // 1F920 0061;	
    // (🤠) FACE WITH COWBOY HAT	[15E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F920, 0x0061 };
    uint32_t const ces[9] = { 0x15E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_105)
{
    // 1F920 0041;	
    // (🤠) FACE WITH COWBOY HAT	[15E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F920, 0x0041 };
    uint32_t const ces[9] = { 0x15E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_106)
{
    // 1F920 0062;	
    // (🤠) FACE WITH COWBOY HAT	[15E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F920, 0x0062 };
    uint32_t const ces[9] = { 0x15E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_107)
{
    // 1F921 0021;	
    // (🤡) CLOWN FACE	[15E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F921, 0x0021 };
    uint32_t const ces[9] = { 0x15E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_108)
{
    // 1F921 003F;	
    // (🤡) CLOWN FACE	[15E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F921, 0x003F };
    uint32_t const ces[9] = { 0x15E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_109)
{
    // 1F921 0061;	
    // (🤡) CLOWN FACE	[15E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F921, 0x0061 };
    uint32_t const ces[9] = { 0x15E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_110)
{
    // 1F921 0041;	
    // (🤡) CLOWN FACE	[15E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F921, 0x0041 };
    uint32_t const ces[9] = { 0x15E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_111)
{
    // 1F921 0062;	
    // (🤡) CLOWN FACE	[15E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F921, 0x0062 };
    uint32_t const ces[9] = { 0x15E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_112)
{
    // 1F922 0021;	
    // (🤢) NAUSEATED FACE	[15E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F922, 0x0021 };
    uint32_t const ces[9] = { 0x15E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_113)
{
    // 1F922 003F;	
    // (🤢) NAUSEATED FACE	[15E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F922, 0x003F };
    uint32_t const ces[9] = { 0x15E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_114)
{
    // 1F922 0061;	
    // (🤢) NAUSEATED FACE	[15E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F922, 0x0061 };
    uint32_t const ces[9] = { 0x15E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_115)
{
    // 1F922 0041;	
    // (🤢) NAUSEATED FACE	[15E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F922, 0x0041 };
    uint32_t const ces[9] = { 0x15E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_116)
{
    // 1F922 0062;	
    // (🤢) NAUSEATED FACE	[15E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F922, 0x0062 };
    uint32_t const ces[9] = { 0x15E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_117)
{
    // 1F923 0021;	
    // (🤣) ROLLING ON THE FLOOR LAUGHING	[15E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F923, 0x0021 };
    uint32_t const ces[9] = { 0x15E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_118)
{
    // 1F923 003F;	
    // (🤣) ROLLING ON THE FLOOR LAUGHING	[15E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F923, 0x003F };
    uint32_t const ces[9] = { 0x15E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_119)
{
    // 1F923 0061;	
    // (🤣) ROLLING ON THE FLOOR LAUGHING	[15E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F923, 0x0061 };
    uint32_t const ces[9] = { 0x15E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_120)
{
    // 1F923 0041;	
    // (🤣) ROLLING ON THE FLOOR LAUGHING	[15E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F923, 0x0041 };
    uint32_t const ces[9] = { 0x15E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_121)
{
    // 1F923 0062;	
    // (🤣) ROLLING ON THE FLOOR LAUGHING	[15E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F923, 0x0062 };
    uint32_t const ces[9] = { 0x15E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_122)
{
    // 1F924 0021;	
    // (🤤) DROOLING FACE	[15E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F924, 0x0021 };
    uint32_t const ces[9] = { 0x15E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_123)
{
    // 1F924 003F;	
    // (🤤) DROOLING FACE	[15E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F924, 0x003F };
    uint32_t const ces[9] = { 0x15E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_124)
{
    // 1F924 0061;	
    // (🤤) DROOLING FACE	[15E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F924, 0x0061 };
    uint32_t const ces[9] = { 0x15E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_125)
{
    // 1F924 0041;	
    // (🤤) DROOLING FACE	[15E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F924, 0x0041 };
    uint32_t const ces[9] = { 0x15E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_126)
{
    // 1F924 0062;	
    // (🤤) DROOLING FACE	[15E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F924, 0x0062 };
    uint32_t const ces[9] = { 0x15E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_127)
{
    // 1F925 0021;	
    // (🤥) LYING FACE	[15E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F925, 0x0021 };
    uint32_t const ces[9] = { 0x15E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_128)
{
    // 1F925 003F;	
    // (🤥) LYING FACE	[15E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F925, 0x003F };
    uint32_t const ces[9] = { 0x15E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_129)
{
    // 1F925 0061;	
    // (🤥) LYING FACE	[15E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F925, 0x0061 };
    uint32_t const ces[9] = { 0x15E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_130)
{
    // 1F925 0041;	
    // (🤥) LYING FACE	[15E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F925, 0x0041 };
    uint32_t const ces[9] = { 0x15E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_131)
{
    // 1F925 0062;	
    // (🤥) LYING FACE	[15E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F925, 0x0062 };
    uint32_t const ces[9] = { 0x15E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_132)
{
    // 1F926 0021;	
    // (🤦) FACE PALM	[15E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F926, 0x0021 };
    uint32_t const ces[9] = { 0x15E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_133)
{
    // 1F926 003F;	
    // (🤦) FACE PALM	[15E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F926, 0x003F };
    uint32_t const ces[9] = { 0x15E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_134)
{
    // 1F926 0061;	
    // (🤦) FACE PALM	[15E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F926, 0x0061 };
    uint32_t const ces[9] = { 0x15E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_135)
{
    // 1F926 0041;	
    // (🤦) FACE PALM	[15E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F926, 0x0041 };
    uint32_t const ces[9] = { 0x15E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_136)
{
    // 1F926 0062;	
    // (🤦) FACE PALM	[15E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F926, 0x0062 };
    uint32_t const ces[9] = { 0x15E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_137)
{
    // 1F927 0021;	
    // (🤧) SNEEZING FACE	[15EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F927, 0x0021 };
    uint32_t const ces[9] = { 0x15EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_138)
{
    // 1F927 003F;	
    // (🤧) SNEEZING FACE	[15EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F927, 0x003F };
    uint32_t const ces[9] = { 0x15EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_139)
{
    // 1F927 0061;	
    // (🤧) SNEEZING FACE	[15EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F927, 0x0061 };
    uint32_t const ces[9] = { 0x15EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_140)
{
    // 1F927 0041;	
    // (🤧) SNEEZING FACE	[15EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F927, 0x0041 };
    uint32_t const ces[9] = { 0x15EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_141)
{
    // 1F927 0062;	
    // (🤧) SNEEZING FACE	[15EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F927, 0x0062 };
    uint32_t const ces[9] = { 0x15EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_142)
{
    // 1F928 0021;	
    // (🤨) FACE WITH ONE EYEBROW RAISED	[15EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F928, 0x0021 };
    uint32_t const ces[9] = { 0x15EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_143)
{
    // 1F928 003F;	
    // (🤨) FACE WITH ONE EYEBROW RAISED	[15EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F928, 0x003F };
    uint32_t const ces[9] = { 0x15EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_144)
{
    // 1F928 0061;	
    // (🤨) FACE WITH ONE EYEBROW RAISED	[15EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F928, 0x0061 };
    uint32_t const ces[9] = { 0x15EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_145)
{
    // 1F928 0041;	
    // (🤨) FACE WITH ONE EYEBROW RAISED	[15EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F928, 0x0041 };
    uint32_t const ces[9] = { 0x15EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_146)
{
    // 1F928 0062;	
    // (🤨) FACE WITH ONE EYEBROW RAISED	[15EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F928, 0x0062 };
    uint32_t const ces[9] = { 0x15EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_147)
{
    // 1F929 0021;	
    // (🤩) GRINNING FACE WITH STAR EYES	[15EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F929, 0x0021 };
    uint32_t const ces[9] = { 0x15EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_148)
{
    // 1F929 003F;	
    // (🤩) GRINNING FACE WITH STAR EYES	[15EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F929, 0x003F };
    uint32_t const ces[9] = { 0x15EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_149)
{
    // 1F929 0061;	
    // (🤩) GRINNING FACE WITH STAR EYES	[15EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F929, 0x0061 };
    uint32_t const ces[9] = { 0x15EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_150)
{
    // 1F929 0041;	
    // (🤩) GRINNING FACE WITH STAR EYES	[15EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F929, 0x0041 };
    uint32_t const ces[9] = { 0x15EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_151)
{
    // 1F929 0062;	
    // (🤩) GRINNING FACE WITH STAR EYES	[15EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F929, 0x0062 };
    uint32_t const ces[9] = { 0x15EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_152)
{
    // 1F92A 0021;	
    // (🤪) GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE	[15ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92A, 0x0021 };
    uint32_t const ces[9] = { 0x15ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_153)
{
    // 1F92A 003F;	
    // (🤪) GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE	[15ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92A, 0x003F };
    uint32_t const ces[9] = { 0x15ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_154)
{
    // 1F92A 0061;	
    // (🤪) GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE	[15ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92A, 0x0061 };
    uint32_t const ces[9] = { 0x15ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_155)
{
    // 1F92A 0041;	
    // (🤪) GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE	[15ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92A, 0x0041 };
    uint32_t const ces[9] = { 0x15ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_156)
{
    // 1F92A 0062;	
    // (🤪) GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE	[15ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92A, 0x0062 };
    uint32_t const ces[9] = { 0x15ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_157)
{
    // 1F92B 0021;	
    // (🤫) FACE WITH FINGER COVERING CLOSED LIPS	[15EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92B, 0x0021 };
    uint32_t const ces[9] = { 0x15EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_158)
{
    // 1F92B 003F;	
    // (🤫) FACE WITH FINGER COVERING CLOSED LIPS	[15EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92B, 0x003F };
    uint32_t const ces[9] = { 0x15EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_159)
{
    // 1F92B 0061;	
    // (🤫) FACE WITH FINGER COVERING CLOSED LIPS	[15EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92B, 0x0061 };
    uint32_t const ces[9] = { 0x15EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_160)
{
    // 1F92B 0041;	
    // (🤫) FACE WITH FINGER COVERING CLOSED LIPS	[15EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92B, 0x0041 };
    uint32_t const ces[9] = { 0x15EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_161)
{
    // 1F92B 0062;	
    // (🤫) FACE WITH FINGER COVERING CLOSED LIPS	[15EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92B, 0x0062 };
    uint32_t const ces[9] = { 0x15EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_162)
{
    // 1F92C 0021;	
    // (🤬) SERIOUS FACE WITH SYMBOLS COVERING MOUTH	[15EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92C, 0x0021 };
    uint32_t const ces[9] = { 0x15EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_163)
{
    // 1F92C 003F;	
    // (🤬) SERIOUS FACE WITH SYMBOLS COVERING MOUTH	[15EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92C, 0x003F };
    uint32_t const ces[9] = { 0x15EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_164)
{
    // 1F92C 0061;	
    // (🤬) SERIOUS FACE WITH SYMBOLS COVERING MOUTH	[15EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92C, 0x0061 };
    uint32_t const ces[9] = { 0x15EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_165)
{
    // 1F92C 0041;	
    // (🤬) SERIOUS FACE WITH SYMBOLS COVERING MOUTH	[15EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92C, 0x0041 };
    uint32_t const ces[9] = { 0x15EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_166)
{
    // 1F92C 0062;	
    // (🤬) SERIOUS FACE WITH SYMBOLS COVERING MOUTH	[15EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92C, 0x0062 };
    uint32_t const ces[9] = { 0x15EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_167)
{
    // 1F92D 0021;	
    // (🤭) SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH	[15F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92D, 0x0021 };
    uint32_t const ces[9] = { 0x15F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_168)
{
    // 1F92D 003F;	
    // (🤭) SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH	[15F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92D, 0x003F };
    uint32_t const ces[9] = { 0x15F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_169)
{
    // 1F92D 0061;	
    // (🤭) SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH	[15F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92D, 0x0061 };
    uint32_t const ces[9] = { 0x15F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_170)
{
    // 1F92D 0041;	
    // (🤭) SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH	[15F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92D, 0x0041 };
    uint32_t const ces[9] = { 0x15F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_171)
{
    // 1F92D 0062;	
    // (🤭) SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH	[15F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92D, 0x0062 };
    uint32_t const ces[9] = { 0x15F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_172)
{
    // 1F92E 0021;	
    // (🤮) FACE WITH OPEN MOUTH VOMITING	[15F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92E, 0x0021 };
    uint32_t const ces[9] = { 0x15F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_173)
{
    // 1F92E 003F;	
    // (🤮) FACE WITH OPEN MOUTH VOMITING	[15F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92E, 0x003F };
    uint32_t const ces[9] = { 0x15F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_174)
{
    // 1F92E 0061;	
    // (🤮) FACE WITH OPEN MOUTH VOMITING	[15F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92E, 0x0061 };
    uint32_t const ces[9] = { 0x15F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_175)
{
    // 1F92E 0041;	
    // (🤮) FACE WITH OPEN MOUTH VOMITING	[15F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92E, 0x0041 };
    uint32_t const ces[9] = { 0x15F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_176)
{
    // 1F92E 0062;	
    // (🤮) FACE WITH OPEN MOUTH VOMITING	[15F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92E, 0x0062 };
    uint32_t const ces[9] = { 0x15F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_177)
{
    // 1F92F 0021;	
    // (🤯) SHOCKED FACE WITH EXPLODING HEAD	[15F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92F, 0x0021 };
    uint32_t const ces[9] = { 0x15F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_178)
{
    // 1F92F 003F;	
    // (🤯) SHOCKED FACE WITH EXPLODING HEAD	[15F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92F, 0x003F };
    uint32_t const ces[9] = { 0x15F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_179)
{
    // 1F92F 0061;	
    // (🤯) SHOCKED FACE WITH EXPLODING HEAD	[15F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92F, 0x0061 };
    uint32_t const ces[9] = { 0x15F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_180)
{
    // 1F92F 0041;	
    // (🤯) SHOCKED FACE WITH EXPLODING HEAD	[15F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F92F, 0x0041 };
    uint32_t const ces[9] = { 0x15F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_181)
{
    // 1F92F 0062;	
    // (🤯) SHOCKED FACE WITH EXPLODING HEAD	[15F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F92F, 0x0062 };
    uint32_t const ces[9] = { 0x15F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_182)
{
    // 1F930 0021;	
    // (🤰) PREGNANT WOMAN	[15F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F930, 0x0021 };
    uint32_t const ces[9] = { 0x15F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_183)
{
    // 1F930 003F;	
    // (🤰) PREGNANT WOMAN	[15F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F930, 0x003F };
    uint32_t const ces[9] = { 0x15F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_184)
{
    // 1F930 0061;	
    // (🤰) PREGNANT WOMAN	[15F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F930, 0x0061 };
    uint32_t const ces[9] = { 0x15F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_185)
{
    // 1F930 0041;	
    // (🤰) PREGNANT WOMAN	[15F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F930, 0x0041 };
    uint32_t const ces[9] = { 0x15F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_186)
{
    // 1F930 0062;	
    // (🤰) PREGNANT WOMAN	[15F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F930, 0x0062 };
    uint32_t const ces[9] = { 0x15F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_187)
{
    // 1F931 0021;	
    // (🤱) BREAST-FEEDING	[15F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F931, 0x0021 };
    uint32_t const ces[9] = { 0x15F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_188)
{
    // 1F931 003F;	
    // (🤱) BREAST-FEEDING	[15F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F931, 0x003F };
    uint32_t const ces[9] = { 0x15F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_189)
{
    // 1F931 0061;	
    // (🤱) BREAST-FEEDING	[15F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F931, 0x0061 };
    uint32_t const ces[9] = { 0x15F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_190)
{
    // 1F931 0041;	
    // (🤱) BREAST-FEEDING	[15F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F931, 0x0041 };
    uint32_t const ces[9] = { 0x15F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_191)
{
    // 1F931 0062;	
    // (🤱) BREAST-FEEDING	[15F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F931, 0x0062 };
    uint32_t const ces[9] = { 0x15F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_192)
{
    // 1F932 0021;	
    // (🤲) PALMS UP TOGETHER	[15F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F932, 0x0021 };
    uint32_t const ces[9] = { 0x15F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_193)
{
    // 1F932 003F;	
    // (🤲) PALMS UP TOGETHER	[15F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F932, 0x003F };
    uint32_t const ces[9] = { 0x15F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_194)
{
    // 1F932 0061;	
    // (🤲) PALMS UP TOGETHER	[15F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F932, 0x0061 };
    uint32_t const ces[9] = { 0x15F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_195)
{
    // 1F932 0041;	
    // (🤲) PALMS UP TOGETHER	[15F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F932, 0x0041 };
    uint32_t const ces[9] = { 0x15F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_196)
{
    // 1F932 0062;	
    // (🤲) PALMS UP TOGETHER	[15F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F932, 0x0062 };
    uint32_t const ces[9] = { 0x15F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_197)
{
    // 1F933 0021;	
    // (🤳) SELFIE	[15F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F933, 0x0021 };
    uint32_t const ces[9] = { 0x15F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_198)
{
    // 1F933 003F;	
    // (🤳) SELFIE	[15F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F933, 0x003F };
    uint32_t const ces[9] = { 0x15F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_199)
{
    // 1F933 0061;	
    // (🤳) SELFIE	[15F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F933, 0x0061 };
    uint32_t const ces[9] = { 0x15F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_200)
{
    // 1F933 0041;	
    // (🤳) SELFIE	[15F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F933, 0x0041 };
    uint32_t const ces[9] = { 0x15F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_201)
{
    // 1F933 0062;	
    // (🤳) SELFIE	[15F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F933, 0x0062 };
    uint32_t const ces[9] = { 0x15F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_202)
{
    // 1F934 0021;	
    // (🤴) PRINCE	[15F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F934, 0x0021 };
    uint32_t const ces[9] = { 0x15F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_203)
{
    // 1F934 003F;	
    // (🤴) PRINCE	[15F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F934, 0x003F };
    uint32_t const ces[9] = { 0x15F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_204)
{
    // 1F934 0061;	
    // (🤴) PRINCE	[15F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F934, 0x0061 };
    uint32_t const ces[9] = { 0x15F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_205)
{
    // 1F934 0041;	
    // (🤴) PRINCE	[15F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F934, 0x0041 };
    uint32_t const ces[9] = { 0x15F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_206)
{
    // 1F934 0062;	
    // (🤴) PRINCE	[15F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F934, 0x0062 };
    uint32_t const ces[9] = { 0x15F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_207)
{
    // 1F935 0021;	
    // (🤵) MAN IN TUXEDO	[15F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F935, 0x0021 };
    uint32_t const ces[9] = { 0x15F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_208)
{
    // 1F935 003F;	
    // (🤵) MAN IN TUXEDO	[15F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F935, 0x003F };
    uint32_t const ces[9] = { 0x15F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_209)
{
    // 1F935 0061;	
    // (🤵) MAN IN TUXEDO	[15F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F935, 0x0061 };
    uint32_t const ces[9] = { 0x15F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_210)
{
    // 1F935 0041;	
    // (🤵) MAN IN TUXEDO	[15F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F935, 0x0041 };
    uint32_t const ces[9] = { 0x15F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_211)
{
    // 1F935 0062;	
    // (🤵) MAN IN TUXEDO	[15F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F935, 0x0062 };
    uint32_t const ces[9] = { 0x15F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_212)
{
    // 1F936 0021;	
    // (🤶) MOTHER CHRISTMAS	[15F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F936, 0x0021 };
    uint32_t const ces[9] = { 0x15F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_213)
{
    // 1F936 003F;	
    // (🤶) MOTHER CHRISTMAS	[15F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F936, 0x003F };
    uint32_t const ces[9] = { 0x15F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_214)
{
    // 1F936 0061;	
    // (🤶) MOTHER CHRISTMAS	[15F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F936, 0x0061 };
    uint32_t const ces[9] = { 0x15F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_215)
{
    // 1F936 0041;	
    // (🤶) MOTHER CHRISTMAS	[15F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F936, 0x0041 };
    uint32_t const ces[9] = { 0x15F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_216)
{
    // 1F936 0062;	
    // (🤶) MOTHER CHRISTMAS	[15F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F936, 0x0062 };
    uint32_t const ces[9] = { 0x15F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_217)
{
    // 1F937 0021;	
    // (🤷) SHRUG	[15FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F937, 0x0021 };
    uint32_t const ces[9] = { 0x15FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_218)
{
    // 1F937 003F;	
    // (🤷) SHRUG	[15FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F937, 0x003F };
    uint32_t const ces[9] = { 0x15FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_219)
{
    // 1F937 0061;	
    // (🤷) SHRUG	[15FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F937, 0x0061 };
    uint32_t const ces[9] = { 0x15FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_220)
{
    // 1F937 0041;	
    // (🤷) SHRUG	[15FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F937, 0x0041 };
    uint32_t const ces[9] = { 0x15FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_221)
{
    // 1F937 0062;	
    // (🤷) SHRUG	[15FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F937, 0x0062 };
    uint32_t const ces[9] = { 0x15FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_222)
{
    // 1F938 0021;	
    // (🤸) PERSON DOING CARTWHEEL	[15FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F938, 0x0021 };
    uint32_t const ces[9] = { 0x15FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_223)
{
    // 1F938 003F;	
    // (🤸) PERSON DOING CARTWHEEL	[15FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F938, 0x003F };
    uint32_t const ces[9] = { 0x15FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_224)
{
    // 1F938 0061;	
    // (🤸) PERSON DOING CARTWHEEL	[15FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F938, 0x0061 };
    uint32_t const ces[9] = { 0x15FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_225)
{
    // 1F938 0041;	
    // (🤸) PERSON DOING CARTWHEEL	[15FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F938, 0x0041 };
    uint32_t const ces[9] = { 0x15FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_226)
{
    // 1F938 0062;	
    // (🤸) PERSON DOING CARTWHEEL	[15FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F938, 0x0062 };
    uint32_t const ces[9] = { 0x15FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_227)
{
    // 1F939 0021;	
    // (🤹) JUGGLING	[15FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F939, 0x0021 };
    uint32_t const ces[9] = { 0x15FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_228)
{
    // 1F939 003F;	
    // (🤹) JUGGLING	[15FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F939, 0x003F };
    uint32_t const ces[9] = { 0x15FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_229)
{
    // 1F939 0061;	
    // (🤹) JUGGLING	[15FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F939, 0x0061 };
    uint32_t const ces[9] = { 0x15FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_230)
{
    // 1F939 0041;	
    // (🤹) JUGGLING	[15FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F939, 0x0041 };
    uint32_t const ces[9] = { 0x15FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_231)
{
    // 1F939 0062;	
    // (🤹) JUGGLING	[15FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F939, 0x0062 };
    uint32_t const ces[9] = { 0x15FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_232)
{
    // 1F93A 0021;	
    // (🤺) FENCER	[15FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93A, 0x0021 };
    uint32_t const ces[9] = { 0x15FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_233)
{
    // 1F93A 003F;	
    // (🤺) FENCER	[15FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93A, 0x003F };
    uint32_t const ces[9] = { 0x15FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_234)
{
    // 1F93A 0061;	
    // (🤺) FENCER	[15FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93A, 0x0061 };
    uint32_t const ces[9] = { 0x15FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_235)
{
    // 1F93A 0041;	
    // (🤺) FENCER	[15FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F93A, 0x0041 };
    uint32_t const ces[9] = { 0x15FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_236)
{
    // 1F93A 0062;	
    // (🤺) FENCER	[15FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93A, 0x0062 };
    uint32_t const ces[9] = { 0x15FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_237)
{
    // 1F93B 0021;	
    // (🤻) MODERN PENTATHLON	[15FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93B, 0x0021 };
    uint32_t const ces[9] = { 0x15FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_238)
{
    // 1F93B 003F;	
    // (🤻) MODERN PENTATHLON	[15FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93B, 0x003F };
    uint32_t const ces[9] = { 0x15FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_239)
{
    // 1F93B 0061;	
    // (🤻) MODERN PENTATHLON	[15FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93B, 0x0061 };
    uint32_t const ces[9] = { 0x15FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_240)
{
    // 1F93B 0041;	
    // (🤻) MODERN PENTATHLON	[15FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F93B, 0x0041 };
    uint32_t const ces[9] = { 0x15FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_241)
{
    // 1F93B 0062;	
    // (🤻) MODERN PENTATHLON	[15FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93B, 0x0062 };
    uint32_t const ces[9] = { 0x15FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_242)
{
    // 1F93C 0021;	
    // (🤼) WRESTLERS	[15FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93C, 0x0021 };
    uint32_t const ces[9] = { 0x15FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_243)
{
    // 1F93C 003F;	
    // (🤼) WRESTLERS	[15FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93C, 0x003F };
    uint32_t const ces[9] = { 0x15FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_244)
{
    // 1F93C 0061;	
    // (🤼) WRESTLERS	[15FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93C, 0x0061 };
    uint32_t const ces[9] = { 0x15FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_245)
{
    // 1F93C 0041;	
    // (🤼) WRESTLERS	[15FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F93C, 0x0041 };
    uint32_t const ces[9] = { 0x15FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_246)
{
    // 1F93C 0062;	
    // (🤼) WRESTLERS	[15FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93C, 0x0062 };
    uint32_t const ces[9] = { 0x15FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_247)
{
    // 1F93D 0021;	
    // (🤽) WATER POLO	[1600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93D, 0x0021 };
    uint32_t const ces[9] = { 0x1600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_248)
{
    // 1F93D 003F;	
    // (🤽) WATER POLO	[1600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93D, 0x003F };
    uint32_t const ces[9] = { 0x1600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_249)
{
    // 1F93D 0061;	
    // (🤽) WATER POLO	[1600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93D, 0x0061 };
    uint32_t const ces[9] = { 0x1600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_250)
{
    // 1F93D 0041;	
    // (🤽) WATER POLO	[1600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F93D, 0x0041 };
    uint32_t const ces[9] = { 0x1600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_251)
{
    // 1F93D 0062;	
    // (🤽) WATER POLO	[1600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93D, 0x0062 };
    uint32_t const ces[9] = { 0x1600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_252)
{
    // 1F93E 0021;	
    // (🤾) HANDBALL	[1601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93E, 0x0021 };
    uint32_t const ces[9] = { 0x1601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_253)
{
    // 1F93E 003F;	
    // (🤾) HANDBALL	[1601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93E, 0x003F };
    uint32_t const ces[9] = { 0x1601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_254)
{
    // 1F93E 0061;	
    // (🤾) HANDBALL	[1601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93E, 0x0061 };
    uint32_t const ces[9] = { 0x1601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_255)
{
    // 1F93E 0041;	
    // (🤾) HANDBALL	[1601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F93E, 0x0041 };
    uint32_t const ces[9] = { 0x1601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_256)
{
    // 1F93E 0062;	
    // (🤾) HANDBALL	[1601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F93E, 0x0062 };
    uint32_t const ces[9] = { 0x1601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_257)
{
    // 1F940 0021;	
    // (🥀) WILTED FLOWER	[1602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F940, 0x0021 };
    uint32_t const ces[9] = { 0x1602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_258)
{
    // 1F940 003F;	
    // (🥀) WILTED FLOWER	[1602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F940, 0x003F };
    uint32_t const ces[9] = { 0x1602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_259)
{
    // 1F940 0061;	
    // (🥀) WILTED FLOWER	[1602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F940, 0x0061 };
    uint32_t const ces[9] = { 0x1602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_260)
{
    // 1F940 0041;	
    // (🥀) WILTED FLOWER	[1602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F940, 0x0041 };
    uint32_t const ces[9] = { 0x1602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_261)
{
    // 1F940 0062;	
    // (🥀) WILTED FLOWER	[1602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F940, 0x0062 };
    uint32_t const ces[9] = { 0x1602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_262)
{
    // 1F941 0021;	
    // (🥁) DRUM WITH DRUMSTICKS	[1603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F941, 0x0021 };
    uint32_t const ces[9] = { 0x1603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_263)
{
    // 1F941 003F;	
    // (🥁) DRUM WITH DRUMSTICKS	[1603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F941, 0x003F };
    uint32_t const ces[9] = { 0x1603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_264)
{
    // 1F941 0061;	
    // (🥁) DRUM WITH DRUMSTICKS	[1603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F941, 0x0061 };
    uint32_t const ces[9] = { 0x1603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_265)
{
    // 1F941 0041;	
    // (🥁) DRUM WITH DRUMSTICKS	[1603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F941, 0x0041 };
    uint32_t const ces[9] = { 0x1603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_266)
{
    // 1F941 0062;	
    // (🥁) DRUM WITH DRUMSTICKS	[1603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F941, 0x0062 };
    uint32_t const ces[9] = { 0x1603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_267)
{
    // 1F942 0021;	
    // (🥂) CLINKING GLASSES	[1604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F942, 0x0021 };
    uint32_t const ces[9] = { 0x1604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_268)
{
    // 1F942 003F;	
    // (🥂) CLINKING GLASSES	[1604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F942, 0x003F };
    uint32_t const ces[9] = { 0x1604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_269)
{
    // 1F942 0061;	
    // (🥂) CLINKING GLASSES	[1604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F942, 0x0061 };
    uint32_t const ces[9] = { 0x1604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_270)
{
    // 1F942 0041;	
    // (🥂) CLINKING GLASSES	[1604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F942, 0x0041 };
    uint32_t const ces[9] = { 0x1604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_271)
{
    // 1F942 0062;	
    // (🥂) CLINKING GLASSES	[1604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F942, 0x0062 };
    uint32_t const ces[9] = { 0x1604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_272)
{
    // 1F943 0021;	
    // (🥃) TUMBLER GLASS	[1605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F943, 0x0021 };
    uint32_t const ces[9] = { 0x1605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_273)
{
    // 1F943 003F;	
    // (🥃) TUMBLER GLASS	[1605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F943, 0x003F };
    uint32_t const ces[9] = { 0x1605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_274)
{
    // 1F943 0061;	
    // (🥃) TUMBLER GLASS	[1605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F943, 0x0061 };
    uint32_t const ces[9] = { 0x1605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_275)
{
    // 1F943 0041;	
    // (🥃) TUMBLER GLASS	[1605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F943, 0x0041 };
    uint32_t const ces[9] = { 0x1605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_276)
{
    // 1F943 0062;	
    // (🥃) TUMBLER GLASS	[1605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F943, 0x0062 };
    uint32_t const ces[9] = { 0x1605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_277)
{
    // 1F944 0021;	
    // (🥄) SPOON	[1606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F944, 0x0021 };
    uint32_t const ces[9] = { 0x1606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_278)
{
    // 1F944 003F;	
    // (🥄) SPOON	[1606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F944, 0x003F };
    uint32_t const ces[9] = { 0x1606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_279)
{
    // 1F944 0061;	
    // (🥄) SPOON	[1606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F944, 0x0061 };
    uint32_t const ces[9] = { 0x1606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_280)
{
    // 1F944 0041;	
    // (🥄) SPOON	[1606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F944, 0x0041 };
    uint32_t const ces[9] = { 0x1606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_281)
{
    // 1F944 0062;	
    // (🥄) SPOON	[1606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F944, 0x0062 };
    uint32_t const ces[9] = { 0x1606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_282)
{
    // 1F945 0021;	
    // (🥅) GOAL NET	[1607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F945, 0x0021 };
    uint32_t const ces[9] = { 0x1607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_283)
{
    // 1F945 003F;	
    // (🥅) GOAL NET	[1607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F945, 0x003F };
    uint32_t const ces[9] = { 0x1607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_284)
{
    // 1F945 0061;	
    // (🥅) GOAL NET	[1607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F945, 0x0061 };
    uint32_t const ces[9] = { 0x1607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_285)
{
    // 1F945 0041;	
    // (🥅) GOAL NET	[1607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F945, 0x0041 };
    uint32_t const ces[9] = { 0x1607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_286)
{
    // 1F945 0062;	
    // (🥅) GOAL NET	[1607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F945, 0x0062 };
    uint32_t const ces[9] = { 0x1607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_287)
{
    // 1F946 0021;	
    // (🥆) RIFLE	[1608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F946, 0x0021 };
    uint32_t const ces[9] = { 0x1608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_288)
{
    // 1F946 003F;	
    // (🥆) RIFLE	[1608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F946, 0x003F };
    uint32_t const ces[9] = { 0x1608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_289)
{
    // 1F946 0061;	
    // (🥆) RIFLE	[1608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F946, 0x0061 };
    uint32_t const ces[9] = { 0x1608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_290)
{
    // 1F946 0041;	
    // (🥆) RIFLE	[1608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F946, 0x0041 };
    uint32_t const ces[9] = { 0x1608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_291)
{
    // 1F946 0062;	
    // (🥆) RIFLE	[1608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F946, 0x0062 };
    uint32_t const ces[9] = { 0x1608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_292)
{
    // 1F947 0021;	
    // (🥇) FIRST PLACE MEDAL	[1609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F947, 0x0021 };
    uint32_t const ces[9] = { 0x1609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_293)
{
    // 1F947 003F;	
    // (🥇) FIRST PLACE MEDAL	[1609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F947, 0x003F };
    uint32_t const ces[9] = { 0x1609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_294)
{
    // 1F947 0061;	
    // (🥇) FIRST PLACE MEDAL	[1609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F947, 0x0061 };
    uint32_t const ces[9] = { 0x1609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_295)
{
    // 1F947 0041;	
    // (🥇) FIRST PLACE MEDAL	[1609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F947, 0x0041 };
    uint32_t const ces[9] = { 0x1609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_296)
{
    // 1F947 0062;	
    // (🥇) FIRST PLACE MEDAL	[1609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F947, 0x0062 };
    uint32_t const ces[9] = { 0x1609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_297)
{
    // 1F948 0021;	
    // (🥈) SECOND PLACE MEDAL	[160A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F948, 0x0021 };
    uint32_t const ces[9] = { 0x160A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_298)
{
    // 1F948 003F;	
    // (🥈) SECOND PLACE MEDAL	[160A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F948, 0x003F };
    uint32_t const ces[9] = { 0x160A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_299)
{
    // 1F948 0061;	
    // (🥈) SECOND PLACE MEDAL	[160A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F948, 0x0061 };
    uint32_t const ces[9] = { 0x160A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_300)
{
    // 1F948 0041;	
    // (🥈) SECOND PLACE MEDAL	[160A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F948, 0x0041 };
    uint32_t const ces[9] = { 0x160A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_301)
{
    // 1F948 0062;	
    // (🥈) SECOND PLACE MEDAL	[160A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F948, 0x0062 };
    uint32_t const ces[9] = { 0x160A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_302)
{
    // 1F949 0021;	
    // (🥉) THIRD PLACE MEDAL	[160B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F949, 0x0021 };
    uint32_t const ces[9] = { 0x160B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_303)
{
    // 1F949 003F;	
    // (🥉) THIRD PLACE MEDAL	[160B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F949, 0x003F };
    uint32_t const ces[9] = { 0x160B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_304)
{
    // 1F949 0061;	
    // (🥉) THIRD PLACE MEDAL	[160B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F949, 0x0061 };
    uint32_t const ces[9] = { 0x160B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_305)
{
    // 1F949 0041;	
    // (🥉) THIRD PLACE MEDAL	[160B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F949, 0x0041 };
    uint32_t const ces[9] = { 0x160B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_306)
{
    // 1F949 0062;	
    // (🥉) THIRD PLACE MEDAL	[160B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F949, 0x0062 };
    uint32_t const ces[9] = { 0x160B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_307)
{
    // 1F94A 0021;	
    // (🥊) BOXING GLOVE	[160C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94A, 0x0021 };
    uint32_t const ces[9] = { 0x160C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_308)
{
    // 1F94A 003F;	
    // (🥊) BOXING GLOVE	[160C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94A, 0x003F };
    uint32_t const ces[9] = { 0x160C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_309)
{
    // 1F94A 0061;	
    // (🥊) BOXING GLOVE	[160C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94A, 0x0061 };
    uint32_t const ces[9] = { 0x160C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_310)
{
    // 1F94A 0041;	
    // (🥊) BOXING GLOVE	[160C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F94A, 0x0041 };
    uint32_t const ces[9] = { 0x160C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_311)
{
    // 1F94A 0062;	
    // (🥊) BOXING GLOVE	[160C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94A, 0x0062 };
    uint32_t const ces[9] = { 0x160C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_312)
{
    // 1F94B 0021;	
    // (🥋) MARTIAL ARTS UNIFORM	[160D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94B, 0x0021 };
    uint32_t const ces[9] = { 0x160D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_313)
{
    // 1F94B 003F;	
    // (🥋) MARTIAL ARTS UNIFORM	[160D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94B, 0x003F };
    uint32_t const ces[9] = { 0x160D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_314)
{
    // 1F94B 0061;	
    // (🥋) MARTIAL ARTS UNIFORM	[160D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94B, 0x0061 };
    uint32_t const ces[9] = { 0x160D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_315)
{
    // 1F94B 0041;	
    // (🥋) MARTIAL ARTS UNIFORM	[160D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F94B, 0x0041 };
    uint32_t const ces[9] = { 0x160D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_316)
{
    // 1F94B 0062;	
    // (🥋) MARTIAL ARTS UNIFORM	[160D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94B, 0x0062 };
    uint32_t const ces[9] = { 0x160D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_317)
{
    // 1F94C 0021;	
    // (🥌) CURLING STONE	[160E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94C, 0x0021 };
    uint32_t const ces[9] = { 0x160E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_318)
{
    // 1F94C 003F;	
    // (🥌) CURLING STONE	[160E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94C, 0x003F };
    uint32_t const ces[9] = { 0x160E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_319)
{
    // 1F94C 0061;	
    // (🥌) CURLING STONE	[160E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94C, 0x0061 };
    uint32_t const ces[9] = { 0x160E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_320)
{
    // 1F94C 0041;	
    // (🥌) CURLING STONE	[160E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F94C, 0x0041 };
    uint32_t const ces[9] = { 0x160E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_321)
{
    // 1F94C 0062;	
    // (🥌) CURLING STONE	[160E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F94C, 0x0062 };
    uint32_t const ces[9] = { 0x160E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_322)
{
    // 1F950 0021;	
    // (🥐) CROISSANT	[160F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F950, 0x0021 };
    uint32_t const ces[9] = { 0x160F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_323)
{
    // 1F950 003F;	
    // (🥐) CROISSANT	[160F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F950, 0x003F };
    uint32_t const ces[9] = { 0x160F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_324)
{
    // 1F950 0061;	
    // (🥐) CROISSANT	[160F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F950, 0x0061 };
    uint32_t const ces[9] = { 0x160F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_325)
{
    // 1F950 0041;	
    // (🥐) CROISSANT	[160F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F950, 0x0041 };
    uint32_t const ces[9] = { 0x160F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_326)
{
    // 1F950 0062;	
    // (🥐) CROISSANT	[160F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F950, 0x0062 };
    uint32_t const ces[9] = { 0x160F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_327)
{
    // 1F951 0021;	
    // (🥑) AVOCADO	[1610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F951, 0x0021 };
    uint32_t const ces[9] = { 0x1610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_328)
{
    // 1F951 003F;	
    // (🥑) AVOCADO	[1610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F951, 0x003F };
    uint32_t const ces[9] = { 0x1610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_329)
{
    // 1F951 0061;	
    // (🥑) AVOCADO	[1610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F951, 0x0061 };
    uint32_t const ces[9] = { 0x1610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_330)
{
    // 1F951 0041;	
    // (🥑) AVOCADO	[1610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F951, 0x0041 };
    uint32_t const ces[9] = { 0x1610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_331)
{
    // 1F951 0062;	
    // (🥑) AVOCADO	[1610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F951, 0x0062 };
    uint32_t const ces[9] = { 0x1610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_332)
{
    // 1F952 0021;	
    // (🥒) CUCUMBER	[1611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F952, 0x0021 };
    uint32_t const ces[9] = { 0x1611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_333)
{
    // 1F952 003F;	
    // (🥒) CUCUMBER	[1611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F952, 0x003F };
    uint32_t const ces[9] = { 0x1611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_334)
{
    // 1F952 0061;	
    // (🥒) CUCUMBER	[1611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F952, 0x0061 };
    uint32_t const ces[9] = { 0x1611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_335)
{
    // 1F952 0041;	
    // (🥒) CUCUMBER	[1611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F952, 0x0041 };
    uint32_t const ces[9] = { 0x1611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_336)
{
    // 1F952 0062;	
    // (🥒) CUCUMBER	[1611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F952, 0x0062 };
    uint32_t const ces[9] = { 0x1611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_337)
{
    // 1F953 0021;	
    // (🥓) BACON	[1612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F953, 0x0021 };
    uint32_t const ces[9] = { 0x1612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_338)
{
    // 1F953 003F;	
    // (🥓) BACON	[1612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F953, 0x003F };
    uint32_t const ces[9] = { 0x1612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_339)
{
    // 1F953 0061;	
    // (🥓) BACON	[1612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F953, 0x0061 };
    uint32_t const ces[9] = { 0x1612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_340)
{
    // 1F953 0041;	
    // (🥓) BACON	[1612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F953, 0x0041 };
    uint32_t const ces[9] = { 0x1612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_341)
{
    // 1F953 0062;	
    // (🥓) BACON	[1612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F953, 0x0062 };
    uint32_t const ces[9] = { 0x1612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_342)
{
    // 1F954 0021;	
    // (🥔) POTATO	[1613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F954, 0x0021 };
    uint32_t const ces[9] = { 0x1613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_343)
{
    // 1F954 003F;	
    // (🥔) POTATO	[1613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F954, 0x003F };
    uint32_t const ces[9] = { 0x1613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_344)
{
    // 1F954 0061;	
    // (🥔) POTATO	[1613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F954, 0x0061 };
    uint32_t const ces[9] = { 0x1613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_345)
{
    // 1F954 0041;	
    // (🥔) POTATO	[1613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F954, 0x0041 };
    uint32_t const ces[9] = { 0x1613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_346)
{
    // 1F954 0062;	
    // (🥔) POTATO	[1613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F954, 0x0062 };
    uint32_t const ces[9] = { 0x1613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_347)
{
    // 1F955 0021;	
    // (🥕) CARROT	[1614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F955, 0x0021 };
    uint32_t const ces[9] = { 0x1614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_348)
{
    // 1F955 003F;	
    // (🥕) CARROT	[1614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F955, 0x003F };
    uint32_t const ces[9] = { 0x1614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_349)
{
    // 1F955 0061;	
    // (🥕) CARROT	[1614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F955, 0x0061 };
    uint32_t const ces[9] = { 0x1614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_350)
{
    // 1F955 0041;	
    // (🥕) CARROT	[1614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F955, 0x0041 };
    uint32_t const ces[9] = { 0x1614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_351)
{
    // 1F955 0062;	
    // (🥕) CARROT	[1614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F955, 0x0062 };
    uint32_t const ces[9] = { 0x1614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_352)
{
    // 1F956 0021;	
    // (🥖) BAGUETTE BREAD	[1615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F956, 0x0021 };
    uint32_t const ces[9] = { 0x1615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_353)
{
    // 1F956 003F;	
    // (🥖) BAGUETTE BREAD	[1615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F956, 0x003F };
    uint32_t const ces[9] = { 0x1615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_354)
{
    // 1F956 0061;	
    // (🥖) BAGUETTE BREAD	[1615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F956, 0x0061 };
    uint32_t const ces[9] = { 0x1615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_355)
{
    // 1F956 0041;	
    // (🥖) BAGUETTE BREAD	[1615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F956, 0x0041 };
    uint32_t const ces[9] = { 0x1615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_356)
{
    // 1F956 0062;	
    // (🥖) BAGUETTE BREAD	[1615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F956, 0x0062 };
    uint32_t const ces[9] = { 0x1615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_357)
{
    // 1F957 0021;	
    // (🥗) GREEN SALAD	[1616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F957, 0x0021 };
    uint32_t const ces[9] = { 0x1616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_358)
{
    // 1F957 003F;	
    // (🥗) GREEN SALAD	[1616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F957, 0x003F };
    uint32_t const ces[9] = { 0x1616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_359)
{
    // 1F957 0061;	
    // (🥗) GREEN SALAD	[1616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F957, 0x0061 };
    uint32_t const ces[9] = { 0x1616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_360)
{
    // 1F957 0041;	
    // (🥗) GREEN SALAD	[1616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F957, 0x0041 };
    uint32_t const ces[9] = { 0x1616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_361)
{
    // 1F957 0062;	
    // (🥗) GREEN SALAD	[1616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F957, 0x0062 };
    uint32_t const ces[9] = { 0x1616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_362)
{
    // 1F958 0021;	
    // (🥘) SHALLOW PAN OF FOOD	[1617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F958, 0x0021 };
    uint32_t const ces[9] = { 0x1617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_363)
{
    // 1F958 003F;	
    // (🥘) SHALLOW PAN OF FOOD	[1617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F958, 0x003F };
    uint32_t const ces[9] = { 0x1617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_364)
{
    // 1F958 0061;	
    // (🥘) SHALLOW PAN OF FOOD	[1617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F958, 0x0061 };
    uint32_t const ces[9] = { 0x1617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_365)
{
    // 1F958 0041;	
    // (🥘) SHALLOW PAN OF FOOD	[1617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F958, 0x0041 };
    uint32_t const ces[9] = { 0x1617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_366)
{
    // 1F958 0062;	
    // (🥘) SHALLOW PAN OF FOOD	[1617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F958, 0x0062 };
    uint32_t const ces[9] = { 0x1617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_367)
{
    // 1F959 0021;	
    // (🥙) STUFFED FLATBREAD	[1618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F959, 0x0021 };
    uint32_t const ces[9] = { 0x1618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_368)
{
    // 1F959 003F;	
    // (🥙) STUFFED FLATBREAD	[1618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F959, 0x003F };
    uint32_t const ces[9] = { 0x1618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_369)
{
    // 1F959 0061;	
    // (🥙) STUFFED FLATBREAD	[1618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F959, 0x0061 };
    uint32_t const ces[9] = { 0x1618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_370)
{
    // 1F959 0041;	
    // (🥙) STUFFED FLATBREAD	[1618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F959, 0x0041 };
    uint32_t const ces[9] = { 0x1618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_371)
{
    // 1F959 0062;	
    // (🥙) STUFFED FLATBREAD	[1618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F959, 0x0062 };
    uint32_t const ces[9] = { 0x1618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_372)
{
    // 1F95A 0021;	
    // (🥚) EGG	[1619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95A, 0x0021 };
    uint32_t const ces[9] = { 0x1619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_373)
{
    // 1F95A 003F;	
    // (🥚) EGG	[1619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95A, 0x003F };
    uint32_t const ces[9] = { 0x1619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_374)
{
    // 1F95A 0061;	
    // (🥚) EGG	[1619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95A, 0x0061 };
    uint32_t const ces[9] = { 0x1619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_375)
{
    // 1F95A 0041;	
    // (🥚) EGG	[1619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95A, 0x0041 };
    uint32_t const ces[9] = { 0x1619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_376)
{
    // 1F95A 0062;	
    // (🥚) EGG	[1619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95A, 0x0062 };
    uint32_t const ces[9] = { 0x1619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_377)
{
    // 1F95B 0021;	
    // (🥛) GLASS OF MILK	[161A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95B, 0x0021 };
    uint32_t const ces[9] = { 0x161A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_378)
{
    // 1F95B 003F;	
    // (🥛) GLASS OF MILK	[161A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95B, 0x003F };
    uint32_t const ces[9] = { 0x161A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_379)
{
    // 1F95B 0061;	
    // (🥛) GLASS OF MILK	[161A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95B, 0x0061 };
    uint32_t const ces[9] = { 0x161A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_380)
{
    // 1F95B 0041;	
    // (🥛) GLASS OF MILK	[161A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95B, 0x0041 };
    uint32_t const ces[9] = { 0x161A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_381)
{
    // 1F95B 0062;	
    // (🥛) GLASS OF MILK	[161A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95B, 0x0062 };
    uint32_t const ces[9] = { 0x161A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_382)
{
    // 1F95C 0021;	
    // (🥜) PEANUTS	[161B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95C, 0x0021 };
    uint32_t const ces[9] = { 0x161B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_383)
{
    // 1F95C 003F;	
    // (🥜) PEANUTS	[161B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95C, 0x003F };
    uint32_t const ces[9] = { 0x161B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_384)
{
    // 1F95C 0061;	
    // (🥜) PEANUTS	[161B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95C, 0x0061 };
    uint32_t const ces[9] = { 0x161B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_385)
{
    // 1F95C 0041;	
    // (🥜) PEANUTS	[161B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95C, 0x0041 };
    uint32_t const ces[9] = { 0x161B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_386)
{
    // 1F95C 0062;	
    // (🥜) PEANUTS	[161B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95C, 0x0062 };
    uint32_t const ces[9] = { 0x161B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_387)
{
    // 1F95D 0021;	
    // (🥝) KIWIFRUIT	[161C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95D, 0x0021 };
    uint32_t const ces[9] = { 0x161C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_388)
{
    // 1F95D 003F;	
    // (🥝) KIWIFRUIT	[161C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95D, 0x003F };
    uint32_t const ces[9] = { 0x161C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_389)
{
    // 1F95D 0061;	
    // (🥝) KIWIFRUIT	[161C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95D, 0x0061 };
    uint32_t const ces[9] = { 0x161C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_390)
{
    // 1F95D 0041;	
    // (🥝) KIWIFRUIT	[161C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95D, 0x0041 };
    uint32_t const ces[9] = { 0x161C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_391)
{
    // 1F95D 0062;	
    // (🥝) KIWIFRUIT	[161C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95D, 0x0062 };
    uint32_t const ces[9] = { 0x161C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_392)
{
    // 1F95E 0021;	
    // (🥞) PANCAKES	[161D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95E, 0x0021 };
    uint32_t const ces[9] = { 0x161D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_393)
{
    // 1F95E 003F;	
    // (🥞) PANCAKES	[161D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95E, 0x003F };
    uint32_t const ces[9] = { 0x161D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_394)
{
    // 1F95E 0061;	
    // (🥞) PANCAKES	[161D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95E, 0x0061 };
    uint32_t const ces[9] = { 0x161D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_395)
{
    // 1F95E 0041;	
    // (🥞) PANCAKES	[161D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95E, 0x0041 };
    uint32_t const ces[9] = { 0x161D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_396)
{
    // 1F95E 0062;	
    // (🥞) PANCAKES	[161D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95E, 0x0062 };
    uint32_t const ces[9] = { 0x161D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_397)
{
    // 1F95F 0021;	
    // (🥟) DUMPLING	[161E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95F, 0x0021 };
    uint32_t const ces[9] = { 0x161E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_398)
{
    // 1F95F 003F;	
    // (🥟) DUMPLING	[161E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95F, 0x003F };
    uint32_t const ces[9] = { 0x161E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_399)
{
    // 1F95F 0061;	
    // (🥟) DUMPLING	[161E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95F, 0x0061 };
    uint32_t const ces[9] = { 0x161E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_400)
{
    // 1F95F 0041;	
    // (🥟) DUMPLING	[161E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F95F, 0x0041 };
    uint32_t const ces[9] = { 0x161E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_401)
{
    // 1F95F 0062;	
    // (🥟) DUMPLING	[161E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F95F, 0x0062 };
    uint32_t const ces[9] = { 0x161E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_402)
{
    // 1F960 0021;	
    // (🥠) FORTUNE COOKIE	[161F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F960, 0x0021 };
    uint32_t const ces[9] = { 0x161F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_403)
{
    // 1F960 003F;	
    // (🥠) FORTUNE COOKIE	[161F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F960, 0x003F };
    uint32_t const ces[9] = { 0x161F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_404)
{
    // 1F960 0061;	
    // (🥠) FORTUNE COOKIE	[161F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F960, 0x0061 };
    uint32_t const ces[9] = { 0x161F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_405)
{
    // 1F960 0041;	
    // (🥠) FORTUNE COOKIE	[161F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F960, 0x0041 };
    uint32_t const ces[9] = { 0x161F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_406)
{
    // 1F960 0062;	
    // (🥠) FORTUNE COOKIE	[161F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F960, 0x0062 };
    uint32_t const ces[9] = { 0x161F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_407)
{
    // 1F961 0021;	
    // (🥡) TAKEOUT BOX	[1620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F961, 0x0021 };
    uint32_t const ces[9] = { 0x1620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_408)
{
    // 1F961 003F;	
    // (🥡) TAKEOUT BOX	[1620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F961, 0x003F };
    uint32_t const ces[9] = { 0x1620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_409)
{
    // 1F961 0061;	
    // (🥡) TAKEOUT BOX	[1620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F961, 0x0061 };
    uint32_t const ces[9] = { 0x1620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_410)
{
    // 1F961 0041;	
    // (🥡) TAKEOUT BOX	[1620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F961, 0x0041 };
    uint32_t const ces[9] = { 0x1620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_411)
{
    // 1F961 0062;	
    // (🥡) TAKEOUT BOX	[1620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F961, 0x0062 };
    uint32_t const ces[9] = { 0x1620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_412)
{
    // 1F962 0021;	
    // (🥢) CHOPSTICKS	[1621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F962, 0x0021 };
    uint32_t const ces[9] = { 0x1621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_413)
{
    // 1F962 003F;	
    // (🥢) CHOPSTICKS	[1621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F962, 0x003F };
    uint32_t const ces[9] = { 0x1621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_414)
{
    // 1F962 0061;	
    // (🥢) CHOPSTICKS	[1621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F962, 0x0061 };
    uint32_t const ces[9] = { 0x1621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_415)
{
    // 1F962 0041;	
    // (🥢) CHOPSTICKS	[1621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F962, 0x0041 };
    uint32_t const ces[9] = { 0x1621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_416)
{
    // 1F962 0062;	
    // (🥢) CHOPSTICKS	[1621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F962, 0x0062 };
    uint32_t const ces[9] = { 0x1621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_417)
{
    // 1F963 0021;	
    // (🥣) BOWL WITH SPOON	[1622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F963, 0x0021 };
    uint32_t const ces[9] = { 0x1622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_418)
{
    // 1F963 003F;	
    // (🥣) BOWL WITH SPOON	[1622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F963, 0x003F };
    uint32_t const ces[9] = { 0x1622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_419)
{
    // 1F963 0061;	
    // (🥣) BOWL WITH SPOON	[1622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F963, 0x0061 };
    uint32_t const ces[9] = { 0x1622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_420)
{
    // 1F963 0041;	
    // (🥣) BOWL WITH SPOON	[1622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F963, 0x0041 };
    uint32_t const ces[9] = { 0x1622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_421)
{
    // 1F963 0062;	
    // (🥣) BOWL WITH SPOON	[1622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F963, 0x0062 };
    uint32_t const ces[9] = { 0x1622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_422)
{
    // 1F964 0021;	
    // (🥤) CUP WITH STRAW	[1623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F964, 0x0021 };
    uint32_t const ces[9] = { 0x1623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_423)
{
    // 1F964 003F;	
    // (🥤) CUP WITH STRAW	[1623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F964, 0x003F };
    uint32_t const ces[9] = { 0x1623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_424)
{
    // 1F964 0061;	
    // (🥤) CUP WITH STRAW	[1623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F964, 0x0061 };
    uint32_t const ces[9] = { 0x1623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_425)
{
    // 1F964 0041;	
    // (🥤) CUP WITH STRAW	[1623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F964, 0x0041 };
    uint32_t const ces[9] = { 0x1623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_426)
{
    // 1F964 0062;	
    // (🥤) CUP WITH STRAW	[1623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F964, 0x0062 };
    uint32_t const ces[9] = { 0x1623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_427)
{
    // 1F965 0021;	
    // (🥥) COCONUT	[1624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F965, 0x0021 };
    uint32_t const ces[9] = { 0x1624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_428)
{
    // 1F965 003F;	
    // (🥥) COCONUT	[1624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F965, 0x003F };
    uint32_t const ces[9] = { 0x1624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_429)
{
    // 1F965 0061;	
    // (🥥) COCONUT	[1624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F965, 0x0061 };
    uint32_t const ces[9] = { 0x1624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_430)
{
    // 1F965 0041;	
    // (🥥) COCONUT	[1624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F965, 0x0041 };
    uint32_t const ces[9] = { 0x1624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_431)
{
    // 1F965 0062;	
    // (🥥) COCONUT	[1624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F965, 0x0062 };
    uint32_t const ces[9] = { 0x1624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_432)
{
    // 1F966 0021;	
    // (🥦) BROCCOLI	[1625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F966, 0x0021 };
    uint32_t const ces[9] = { 0x1625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_433)
{
    // 1F966 003F;	
    // (🥦) BROCCOLI	[1625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F966, 0x003F };
    uint32_t const ces[9] = { 0x1625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_434)
{
    // 1F966 0061;	
    // (🥦) BROCCOLI	[1625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F966, 0x0061 };
    uint32_t const ces[9] = { 0x1625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_435)
{
    // 1F966 0041;	
    // (🥦) BROCCOLI	[1625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F966, 0x0041 };
    uint32_t const ces[9] = { 0x1625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_436)
{
    // 1F966 0062;	
    // (🥦) BROCCOLI	[1625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F966, 0x0062 };
    uint32_t const ces[9] = { 0x1625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_437)
{
    // 1F967 0021;	
    // (🥧) PIE	[1626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F967, 0x0021 };
    uint32_t const ces[9] = { 0x1626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_438)
{
    // 1F967 003F;	
    // (🥧) PIE	[1626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F967, 0x003F };
    uint32_t const ces[9] = { 0x1626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_439)
{
    // 1F967 0061;	
    // (🥧) PIE	[1626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F967, 0x0061 };
    uint32_t const ces[9] = { 0x1626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_440)
{
    // 1F967 0041;	
    // (🥧) PIE	[1626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F967, 0x0041 };
    uint32_t const ces[9] = { 0x1626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_441)
{
    // 1F967 0062;	
    // (🥧) PIE	[1626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F967, 0x0062 };
    uint32_t const ces[9] = { 0x1626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_442)
{
    // 1F968 0021;	
    // (🥨) PRETZEL	[1627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F968, 0x0021 };
    uint32_t const ces[9] = { 0x1627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_443)
{
    // 1F968 003F;	
    // (🥨) PRETZEL	[1627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F968, 0x003F };
    uint32_t const ces[9] = { 0x1627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_444)
{
    // 1F968 0061;	
    // (🥨) PRETZEL	[1627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F968, 0x0061 };
    uint32_t const ces[9] = { 0x1627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_445)
{
    // 1F968 0041;	
    // (🥨) PRETZEL	[1627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F968, 0x0041 };
    uint32_t const ces[9] = { 0x1627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_446)
{
    // 1F968 0062;	
    // (🥨) PRETZEL	[1627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F968, 0x0062 };
    uint32_t const ces[9] = { 0x1627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_447)
{
    // 1F969 0021;	
    // (🥩) CUT OF MEAT	[1628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F969, 0x0021 };
    uint32_t const ces[9] = { 0x1628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_448)
{
    // 1F969 003F;	
    // (🥩) CUT OF MEAT	[1628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F969, 0x003F };
    uint32_t const ces[9] = { 0x1628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_449)
{
    // 1F969 0061;	
    // (🥩) CUT OF MEAT	[1628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F969, 0x0061 };
    uint32_t const ces[9] = { 0x1628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_450)
{
    // 1F969 0041;	
    // (🥩) CUT OF MEAT	[1628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F969, 0x0041 };
    uint32_t const ces[9] = { 0x1628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_451)
{
    // 1F969 0062;	
    // (🥩) CUT OF MEAT	[1628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F969, 0x0062 };
    uint32_t const ces[9] = { 0x1628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_452)
{
    // 1F96A 0021;	
    // (🥪) SANDWICH	[1629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96A, 0x0021 };
    uint32_t const ces[9] = { 0x1629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_453)
{
    // 1F96A 003F;	
    // (🥪) SANDWICH	[1629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96A, 0x003F };
    uint32_t const ces[9] = { 0x1629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_454)
{
    // 1F96A 0061;	
    // (🥪) SANDWICH	[1629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96A, 0x0061 };
    uint32_t const ces[9] = { 0x1629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_455)
{
    // 1F96A 0041;	
    // (🥪) SANDWICH	[1629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F96A, 0x0041 };
    uint32_t const ces[9] = { 0x1629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_456)
{
    // 1F96A 0062;	
    // (🥪) SANDWICH	[1629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96A, 0x0062 };
    uint32_t const ces[9] = { 0x1629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_457)
{
    // 1F96B 0021;	
    // (🥫) CANNED FOOD	[162A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96B, 0x0021 };
    uint32_t const ces[9] = { 0x162A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_458)
{
    // 1F96B 003F;	
    // (🥫) CANNED FOOD	[162A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96B, 0x003F };
    uint32_t const ces[9] = { 0x162A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_459)
{
    // 1F96B 0061;	
    // (🥫) CANNED FOOD	[162A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96B, 0x0061 };
    uint32_t const ces[9] = { 0x162A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_460)
{
    // 1F96B 0041;	
    // (🥫) CANNED FOOD	[162A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F96B, 0x0041 };
    uint32_t const ces[9] = { 0x162A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_461)
{
    // 1F96B 0062;	
    // (🥫) CANNED FOOD	[162A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F96B, 0x0062 };
    uint32_t const ces[9] = { 0x162A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_462)
{
    // 1F980 0021;	
    // (🦀) CRAB	[162B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F980, 0x0021 };
    uint32_t const ces[9] = { 0x162B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_463)
{
    // 1F980 003F;	
    // (🦀) CRAB	[162B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F980, 0x003F };
    uint32_t const ces[9] = { 0x162B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_464)
{
    // 1F980 0061;	
    // (🦀) CRAB	[162B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F980, 0x0061 };
    uint32_t const ces[9] = { 0x162B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_465)
{
    // 1F980 0041;	
    // (🦀) CRAB	[162B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F980, 0x0041 };
    uint32_t const ces[9] = { 0x162B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_466)
{
    // 1F980 0062;	
    // (🦀) CRAB	[162B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F980, 0x0062 };
    uint32_t const ces[9] = { 0x162B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_467)
{
    // 1F981 0021;	
    // (🦁) LION FACE	[162C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F981, 0x0021 };
    uint32_t const ces[9] = { 0x162C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_468)
{
    // 1F981 003F;	
    // (🦁) LION FACE	[162C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F981, 0x003F };
    uint32_t const ces[9] = { 0x162C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_469)
{
    // 1F981 0061;	
    // (🦁) LION FACE	[162C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F981, 0x0061 };
    uint32_t const ces[9] = { 0x162C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_470)
{
    // 1F981 0041;	
    // (🦁) LION FACE	[162C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F981, 0x0041 };
    uint32_t const ces[9] = { 0x162C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_471)
{
    // 1F981 0062;	
    // (🦁) LION FACE	[162C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F981, 0x0062 };
    uint32_t const ces[9] = { 0x162C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_472)
{
    // 1F982 0021;	
    // (🦂) SCORPION	[162D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F982, 0x0021 };
    uint32_t const ces[9] = { 0x162D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_473)
{
    // 1F982 003F;	
    // (🦂) SCORPION	[162D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F982, 0x003F };
    uint32_t const ces[9] = { 0x162D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_474)
{
    // 1F982 0061;	
    // (🦂) SCORPION	[162D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F982, 0x0061 };
    uint32_t const ces[9] = { 0x162D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_475)
{
    // 1F982 0041;	
    // (🦂) SCORPION	[162D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F982, 0x0041 };
    uint32_t const ces[9] = { 0x162D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_476)
{
    // 1F982 0062;	
    // (🦂) SCORPION	[162D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F982, 0x0062 };
    uint32_t const ces[9] = { 0x162D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_477)
{
    // 1F983 0021;	
    // (🦃) TURKEY	[162E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F983, 0x0021 };
    uint32_t const ces[9] = { 0x162E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_478)
{
    // 1F983 003F;	
    // (🦃) TURKEY	[162E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F983, 0x003F };
    uint32_t const ces[9] = { 0x162E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_479)
{
    // 1F983 0061;	
    // (🦃) TURKEY	[162E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F983, 0x0061 };
    uint32_t const ces[9] = { 0x162E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_480)
{
    // 1F983 0041;	
    // (🦃) TURKEY	[162E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F983, 0x0041 };
    uint32_t const ces[9] = { 0x162E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_481)
{
    // 1F983 0062;	
    // (🦃) TURKEY	[162E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F983, 0x0062 };
    uint32_t const ces[9] = { 0x162E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_482)
{
    // 1F984 0021;	
    // (🦄) UNICORN FACE	[162F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F984, 0x0021 };
    uint32_t const ces[9] = { 0x162F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_483)
{
    // 1F984 003F;	
    // (🦄) UNICORN FACE	[162F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F984, 0x003F };
    uint32_t const ces[9] = { 0x162F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_484)
{
    // 1F984 0061;	
    // (🦄) UNICORN FACE	[162F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F984, 0x0061 };
    uint32_t const ces[9] = { 0x162F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_485)
{
    // 1F984 0041;	
    // (🦄) UNICORN FACE	[162F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F984, 0x0041 };
    uint32_t const ces[9] = { 0x162F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_486)
{
    // 1F984 0062;	
    // (🦄) UNICORN FACE	[162F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F984, 0x0062 };
    uint32_t const ces[9] = { 0x162F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_487)
{
    // 1F985 0021;	
    // (🦅) EAGLE	[1630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F985, 0x0021 };
    uint32_t const ces[9] = { 0x1630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_488)
{
    // 1F985 003F;	
    // (🦅) EAGLE	[1630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F985, 0x003F };
    uint32_t const ces[9] = { 0x1630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_489)
{
    // 1F985 0061;	
    // (🦅) EAGLE	[1630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F985, 0x0061 };
    uint32_t const ces[9] = { 0x1630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_490)
{
    // 1F985 0041;	
    // (🦅) EAGLE	[1630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F985, 0x0041 };
    uint32_t const ces[9] = { 0x1630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_491)
{
    // 1F985 0062;	
    // (🦅) EAGLE	[1630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F985, 0x0062 };
    uint32_t const ces[9] = { 0x1630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_492)
{
    // 1F986 0021;	
    // (🦆) DUCK	[1631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F986, 0x0021 };
    uint32_t const ces[9] = { 0x1631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_493)
{
    // 1F986 003F;	
    // (🦆) DUCK	[1631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F986, 0x003F };
    uint32_t const ces[9] = { 0x1631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_494)
{
    // 1F986 0061;	
    // (🦆) DUCK	[1631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F986, 0x0061 };
    uint32_t const ces[9] = { 0x1631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_495)
{
    // 1F986 0041;	
    // (🦆) DUCK	[1631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F986, 0x0041 };
    uint32_t const ces[9] = { 0x1631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_496)
{
    // 1F986 0062;	
    // (🦆) DUCK	[1631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F986, 0x0062 };
    uint32_t const ces[9] = { 0x1631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_497)
{
    // 1F987 0021;	
    // (🦇) BAT	[1632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F987, 0x0021 };
    uint32_t const ces[9] = { 0x1632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_498)
{
    // 1F987 003F;	
    // (🦇) BAT	[1632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F987, 0x003F };
    uint32_t const ces[9] = { 0x1632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_063_499)
{
    // 1F987 0061;	
    // (🦇) BAT	[1632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F987, 0x0061 };
    uint32_t const ces[9] = { 0x1632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

