// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_362_000)
{
    // 419F 003F;	
    // (䆟) CJK UNIFIED IDEOGRAPH-419F	[FB80 C19F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_001)
{
    // 419F 0061;	
    // (䆟) CJK UNIFIED IDEOGRAPH-419F	[FB80 C19F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_002)
{
    // 419F 0041;	
    // (䆟) CJK UNIFIED IDEOGRAPH-419F	[FB80 C19F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_003)
{
    // 419F 0062;	
    // (䆟) CJK UNIFIED IDEOGRAPH-419F	[FB80 C19F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_004)
{
    // 41A0 0021;	
    // (䆠) CJK UNIFIED IDEOGRAPH-41A0	[FB80 C1A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_005)
{
    // 41A0 003F;	
    // (䆠) CJK UNIFIED IDEOGRAPH-41A0	[FB80 C1A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_006)
{
    // 41A0 0061;	
    // (䆠) CJK UNIFIED IDEOGRAPH-41A0	[FB80 C1A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_007)
{
    // 41A0 0041;	
    // (䆠) CJK UNIFIED IDEOGRAPH-41A0	[FB80 C1A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_008)
{
    // 41A0 0062;	
    // (䆠) CJK UNIFIED IDEOGRAPH-41A0	[FB80 C1A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_009)
{
    // 41A1 0021;	
    // (䆡) CJK UNIFIED IDEOGRAPH-41A1	[FB80 C1A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_010)
{
    // 41A1 003F;	
    // (䆡) CJK UNIFIED IDEOGRAPH-41A1	[FB80 C1A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_011)
{
    // 41A1 0061;	
    // (䆡) CJK UNIFIED IDEOGRAPH-41A1	[FB80 C1A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_012)
{
    // 41A1 0041;	
    // (䆡) CJK UNIFIED IDEOGRAPH-41A1	[FB80 C1A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_013)
{
    // 41A1 0062;	
    // (䆡) CJK UNIFIED IDEOGRAPH-41A1	[FB80 C1A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_014)
{
    // 41A2 0021;	
    // (䆢) CJK UNIFIED IDEOGRAPH-41A2	[FB80 C1A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_015)
{
    // 41A2 003F;	
    // (䆢) CJK UNIFIED IDEOGRAPH-41A2	[FB80 C1A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_016)
{
    // 41A2 0061;	
    // (䆢) CJK UNIFIED IDEOGRAPH-41A2	[FB80 C1A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_017)
{
    // 41A2 0041;	
    // (䆢) CJK UNIFIED IDEOGRAPH-41A2	[FB80 C1A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_018)
{
    // 41A2 0062;	
    // (䆢) CJK UNIFIED IDEOGRAPH-41A2	[FB80 C1A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_019)
{
    // 41A3 0021;	
    // (䆣) CJK UNIFIED IDEOGRAPH-41A3	[FB80 C1A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_020)
{
    // 41A3 003F;	
    // (䆣) CJK UNIFIED IDEOGRAPH-41A3	[FB80 C1A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_021)
{
    // 41A3 0061;	
    // (䆣) CJK UNIFIED IDEOGRAPH-41A3	[FB80 C1A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_022)
{
    // 41A3 0041;	
    // (䆣) CJK UNIFIED IDEOGRAPH-41A3	[FB80 C1A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_023)
{
    // 41A3 0062;	
    // (䆣) CJK UNIFIED IDEOGRAPH-41A3	[FB80 C1A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_024)
{
    // 41A4 0021;	
    // (䆤) CJK UNIFIED IDEOGRAPH-41A4	[FB80 C1A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_025)
{
    // 41A4 003F;	
    // (䆤) CJK UNIFIED IDEOGRAPH-41A4	[FB80 C1A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_026)
{
    // 41A4 0061;	
    // (䆤) CJK UNIFIED IDEOGRAPH-41A4	[FB80 C1A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_027)
{
    // 41A4 0041;	
    // (䆤) CJK UNIFIED IDEOGRAPH-41A4	[FB80 C1A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_028)
{
    // 41A4 0062;	
    // (䆤) CJK UNIFIED IDEOGRAPH-41A4	[FB80 C1A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_029)
{
    // 41A5 0021;	
    // (䆥) CJK UNIFIED IDEOGRAPH-41A5	[FB80 C1A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_030)
{
    // 41A5 003F;	
    // (䆥) CJK UNIFIED IDEOGRAPH-41A5	[FB80 C1A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_031)
{
    // 41A5 0061;	
    // (䆥) CJK UNIFIED IDEOGRAPH-41A5	[FB80 C1A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_032)
{
    // 41A5 0041;	
    // (䆥) CJK UNIFIED IDEOGRAPH-41A5	[FB80 C1A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_033)
{
    // 41A5 0062;	
    // (䆥) CJK UNIFIED IDEOGRAPH-41A5	[FB80 C1A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_034)
{
    // 41A6 0021;	
    // (䆦) CJK UNIFIED IDEOGRAPH-41A6	[FB80 C1A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_035)
{
    // 41A6 003F;	
    // (䆦) CJK UNIFIED IDEOGRAPH-41A6	[FB80 C1A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_036)
{
    // 41A6 0061;	
    // (䆦) CJK UNIFIED IDEOGRAPH-41A6	[FB80 C1A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_037)
{
    // 41A6 0041;	
    // (䆦) CJK UNIFIED IDEOGRAPH-41A6	[FB80 C1A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_038)
{
    // 41A6 0062;	
    // (䆦) CJK UNIFIED IDEOGRAPH-41A6	[FB80 C1A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_039)
{
    // 41A7 0021;	
    // (䆧) CJK UNIFIED IDEOGRAPH-41A7	[FB80 C1A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_040)
{
    // 41A7 003F;	
    // (䆧) CJK UNIFIED IDEOGRAPH-41A7	[FB80 C1A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_041)
{
    // 41A7 0061;	
    // (䆧) CJK UNIFIED IDEOGRAPH-41A7	[FB80 C1A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_042)
{
    // 41A7 0041;	
    // (䆧) CJK UNIFIED IDEOGRAPH-41A7	[FB80 C1A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_043)
{
    // 41A7 0062;	
    // (䆧) CJK UNIFIED IDEOGRAPH-41A7	[FB80 C1A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_044)
{
    // 41A8 0021;	
    // (䆨) CJK UNIFIED IDEOGRAPH-41A8	[FB80 C1A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_045)
{
    // 41A8 003F;	
    // (䆨) CJK UNIFIED IDEOGRAPH-41A8	[FB80 C1A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_046)
{
    // 41A8 0061;	
    // (䆨) CJK UNIFIED IDEOGRAPH-41A8	[FB80 C1A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_047)
{
    // 41A8 0041;	
    // (䆨) CJK UNIFIED IDEOGRAPH-41A8	[FB80 C1A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_048)
{
    // 41A8 0062;	
    // (䆨) CJK UNIFIED IDEOGRAPH-41A8	[FB80 C1A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_049)
{
    // 41A9 0021;	
    // (䆩) CJK UNIFIED IDEOGRAPH-41A9	[FB80 C1A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_050)
{
    // 41A9 003F;	
    // (䆩) CJK UNIFIED IDEOGRAPH-41A9	[FB80 C1A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_051)
{
    // 41A9 0061;	
    // (䆩) CJK UNIFIED IDEOGRAPH-41A9	[FB80 C1A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_052)
{
    // 41A9 0041;	
    // (䆩) CJK UNIFIED IDEOGRAPH-41A9	[FB80 C1A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_053)
{
    // 41A9 0062;	
    // (䆩) CJK UNIFIED IDEOGRAPH-41A9	[FB80 C1A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_054)
{
    // 41AA 0021;	
    // (䆪) CJK UNIFIED IDEOGRAPH-41AA	[FB80 C1AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_055)
{
    // 41AA 003F;	
    // (䆪) CJK UNIFIED IDEOGRAPH-41AA	[FB80 C1AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_056)
{
    // 41AA 0061;	
    // (䆪) CJK UNIFIED IDEOGRAPH-41AA	[FB80 C1AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_057)
{
    // 41AA 0041;	
    // (䆪) CJK UNIFIED IDEOGRAPH-41AA	[FB80 C1AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_058)
{
    // 41AA 0062;	
    // (䆪) CJK UNIFIED IDEOGRAPH-41AA	[FB80 C1AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_059)
{
    // 41AB 0021;	
    // (䆫) CJK UNIFIED IDEOGRAPH-41AB	[FB80 C1AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_060)
{
    // 41AB 003F;	
    // (䆫) CJK UNIFIED IDEOGRAPH-41AB	[FB80 C1AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_061)
{
    // 41AB 0061;	
    // (䆫) CJK UNIFIED IDEOGRAPH-41AB	[FB80 C1AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_062)
{
    // 41AB 0041;	
    // (䆫) CJK UNIFIED IDEOGRAPH-41AB	[FB80 C1AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_063)
{
    // 41AB 0062;	
    // (䆫) CJK UNIFIED IDEOGRAPH-41AB	[FB80 C1AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_064)
{
    // 41AC 0021;	
    // (䆬) CJK UNIFIED IDEOGRAPH-41AC	[FB80 C1AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_065)
{
    // 41AC 003F;	
    // (䆬) CJK UNIFIED IDEOGRAPH-41AC	[FB80 C1AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_066)
{
    // 41AC 0061;	
    // (䆬) CJK UNIFIED IDEOGRAPH-41AC	[FB80 C1AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_067)
{
    // 41AC 0041;	
    // (䆬) CJK UNIFIED IDEOGRAPH-41AC	[FB80 C1AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_068)
{
    // 41AC 0062;	
    // (䆬) CJK UNIFIED IDEOGRAPH-41AC	[FB80 C1AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_069)
{
    // 41AD 0021;	
    // (䆭) CJK UNIFIED IDEOGRAPH-41AD	[FB80 C1AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_070)
{
    // 41AD 003F;	
    // (䆭) CJK UNIFIED IDEOGRAPH-41AD	[FB80 C1AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_071)
{
    // 41AD 0061;	
    // (䆭) CJK UNIFIED IDEOGRAPH-41AD	[FB80 C1AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_072)
{
    // 41AD 0041;	
    // (䆭) CJK UNIFIED IDEOGRAPH-41AD	[FB80 C1AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_073)
{
    // 41AD 0062;	
    // (䆭) CJK UNIFIED IDEOGRAPH-41AD	[FB80 C1AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_074)
{
    // 41AE 0021;	
    // (䆮) CJK UNIFIED IDEOGRAPH-41AE	[FB80 C1AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_075)
{
    // 41AE 003F;	
    // (䆮) CJK UNIFIED IDEOGRAPH-41AE	[FB80 C1AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_076)
{
    // 41AE 0061;	
    // (䆮) CJK UNIFIED IDEOGRAPH-41AE	[FB80 C1AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_077)
{
    // 41AE 0041;	
    // (䆮) CJK UNIFIED IDEOGRAPH-41AE	[FB80 C1AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_078)
{
    // 41AE 0062;	
    // (䆮) CJK UNIFIED IDEOGRAPH-41AE	[FB80 C1AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_079)
{
    // 41AF 0021;	
    // (䆯) CJK UNIFIED IDEOGRAPH-41AF	[FB80 C1AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_080)
{
    // 41AF 003F;	
    // (䆯) CJK UNIFIED IDEOGRAPH-41AF	[FB80 C1AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_081)
{
    // 41AF 0061;	
    // (䆯) CJK UNIFIED IDEOGRAPH-41AF	[FB80 C1AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_082)
{
    // 41AF 0041;	
    // (䆯) CJK UNIFIED IDEOGRAPH-41AF	[FB80 C1AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_083)
{
    // 41AF 0062;	
    // (䆯) CJK UNIFIED IDEOGRAPH-41AF	[FB80 C1AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_084)
{
    // 41B0 0021;	
    // (䆰) CJK UNIFIED IDEOGRAPH-41B0	[FB80 C1B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_085)
{
    // 41B0 003F;	
    // (䆰) CJK UNIFIED IDEOGRAPH-41B0	[FB80 C1B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_086)
{
    // 41B0 0061;	
    // (䆰) CJK UNIFIED IDEOGRAPH-41B0	[FB80 C1B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_087)
{
    // 41B0 0041;	
    // (䆰) CJK UNIFIED IDEOGRAPH-41B0	[FB80 C1B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_088)
{
    // 41B0 0062;	
    // (䆰) CJK UNIFIED IDEOGRAPH-41B0	[FB80 C1B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_089)
{
    // 41B1 0021;	
    // (䆱) CJK UNIFIED IDEOGRAPH-41B1	[FB80 C1B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_090)
{
    // 41B1 003F;	
    // (䆱) CJK UNIFIED IDEOGRAPH-41B1	[FB80 C1B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_091)
{
    // 41B1 0061;	
    // (䆱) CJK UNIFIED IDEOGRAPH-41B1	[FB80 C1B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_092)
{
    // 41B1 0041;	
    // (䆱) CJK UNIFIED IDEOGRAPH-41B1	[FB80 C1B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_093)
{
    // 41B1 0062;	
    // (䆱) CJK UNIFIED IDEOGRAPH-41B1	[FB80 C1B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_094)
{
    // 41B2 0021;	
    // (䆲) CJK UNIFIED IDEOGRAPH-41B2	[FB80 C1B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_095)
{
    // 41B2 003F;	
    // (䆲) CJK UNIFIED IDEOGRAPH-41B2	[FB80 C1B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_096)
{
    // 41B2 0061;	
    // (䆲) CJK UNIFIED IDEOGRAPH-41B2	[FB80 C1B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_097)
{
    // 41B2 0041;	
    // (䆲) CJK UNIFIED IDEOGRAPH-41B2	[FB80 C1B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_098)
{
    // 41B2 0062;	
    // (䆲) CJK UNIFIED IDEOGRAPH-41B2	[FB80 C1B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_099)
{
    // 41B3 0021;	
    // (䆳) CJK UNIFIED IDEOGRAPH-41B3	[FB80 C1B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_100)
{
    // 41B3 003F;	
    // (䆳) CJK UNIFIED IDEOGRAPH-41B3	[FB80 C1B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_101)
{
    // 41B3 0061;	
    // (䆳) CJK UNIFIED IDEOGRAPH-41B3	[FB80 C1B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_102)
{
    // 41B3 0041;	
    // (䆳) CJK UNIFIED IDEOGRAPH-41B3	[FB80 C1B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_103)
{
    // 41B3 0062;	
    // (䆳) CJK UNIFIED IDEOGRAPH-41B3	[FB80 C1B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_104)
{
    // 41B4 0021;	
    // (䆴) CJK UNIFIED IDEOGRAPH-41B4	[FB80 C1B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_105)
{
    // 41B4 003F;	
    // (䆴) CJK UNIFIED IDEOGRAPH-41B4	[FB80 C1B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_106)
{
    // 41B4 0061;	
    // (䆴) CJK UNIFIED IDEOGRAPH-41B4	[FB80 C1B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_107)
{
    // 41B4 0041;	
    // (䆴) CJK UNIFIED IDEOGRAPH-41B4	[FB80 C1B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_108)
{
    // 41B4 0062;	
    // (䆴) CJK UNIFIED IDEOGRAPH-41B4	[FB80 C1B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_109)
{
    // 41B5 0021;	
    // (䆵) CJK UNIFIED IDEOGRAPH-41B5	[FB80 C1B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_110)
{
    // 41B5 003F;	
    // (䆵) CJK UNIFIED IDEOGRAPH-41B5	[FB80 C1B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_111)
{
    // 41B5 0061;	
    // (䆵) CJK UNIFIED IDEOGRAPH-41B5	[FB80 C1B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_112)
{
    // 41B5 0041;	
    // (䆵) CJK UNIFIED IDEOGRAPH-41B5	[FB80 C1B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_113)
{
    // 41B5 0062;	
    // (䆵) CJK UNIFIED IDEOGRAPH-41B5	[FB80 C1B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_114)
{
    // 41B6 0021;	
    // (䆶) CJK UNIFIED IDEOGRAPH-41B6	[FB80 C1B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_115)
{
    // 41B6 003F;	
    // (䆶) CJK UNIFIED IDEOGRAPH-41B6	[FB80 C1B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_116)
{
    // 41B6 0061;	
    // (䆶) CJK UNIFIED IDEOGRAPH-41B6	[FB80 C1B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_117)
{
    // 41B6 0041;	
    // (䆶) CJK UNIFIED IDEOGRAPH-41B6	[FB80 C1B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_118)
{
    // 41B6 0062;	
    // (䆶) CJK UNIFIED IDEOGRAPH-41B6	[FB80 C1B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_119)
{
    // 41B7 0021;	
    // (䆷) CJK UNIFIED IDEOGRAPH-41B7	[FB80 C1B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_120)
{
    // 41B7 003F;	
    // (䆷) CJK UNIFIED IDEOGRAPH-41B7	[FB80 C1B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_121)
{
    // 41B7 0061;	
    // (䆷) CJK UNIFIED IDEOGRAPH-41B7	[FB80 C1B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_122)
{
    // 41B7 0041;	
    // (䆷) CJK UNIFIED IDEOGRAPH-41B7	[FB80 C1B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_123)
{
    // 41B7 0062;	
    // (䆷) CJK UNIFIED IDEOGRAPH-41B7	[FB80 C1B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_124)
{
    // 41B8 0021;	
    // (䆸) CJK UNIFIED IDEOGRAPH-41B8	[FB80 C1B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_125)
{
    // 41B8 003F;	
    // (䆸) CJK UNIFIED IDEOGRAPH-41B8	[FB80 C1B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_126)
{
    // 41B8 0061;	
    // (䆸) CJK UNIFIED IDEOGRAPH-41B8	[FB80 C1B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_127)
{
    // 41B8 0041;	
    // (䆸) CJK UNIFIED IDEOGRAPH-41B8	[FB80 C1B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_128)
{
    // 41B8 0062;	
    // (䆸) CJK UNIFIED IDEOGRAPH-41B8	[FB80 C1B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_129)
{
    // 41B9 0021;	
    // (䆹) CJK UNIFIED IDEOGRAPH-41B9	[FB80 C1B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_130)
{
    // 41B9 003F;	
    // (䆹) CJK UNIFIED IDEOGRAPH-41B9	[FB80 C1B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_131)
{
    // 41B9 0061;	
    // (䆹) CJK UNIFIED IDEOGRAPH-41B9	[FB80 C1B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_132)
{
    // 41B9 0041;	
    // (䆹) CJK UNIFIED IDEOGRAPH-41B9	[FB80 C1B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_133)
{
    // 41B9 0062;	
    // (䆹) CJK UNIFIED IDEOGRAPH-41B9	[FB80 C1B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_134)
{
    // 41BA 0021;	
    // (䆺) CJK UNIFIED IDEOGRAPH-41BA	[FB80 C1BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_135)
{
    // 41BA 003F;	
    // (䆺) CJK UNIFIED IDEOGRAPH-41BA	[FB80 C1BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_136)
{
    // 41BA 0061;	
    // (䆺) CJK UNIFIED IDEOGRAPH-41BA	[FB80 C1BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_137)
{
    // 41BA 0041;	
    // (䆺) CJK UNIFIED IDEOGRAPH-41BA	[FB80 C1BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_138)
{
    // 41BA 0062;	
    // (䆺) CJK UNIFIED IDEOGRAPH-41BA	[FB80 C1BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_139)
{
    // 41BB 0021;	
    // (䆻) CJK UNIFIED IDEOGRAPH-41BB	[FB80 C1BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_140)
{
    // 41BB 003F;	
    // (䆻) CJK UNIFIED IDEOGRAPH-41BB	[FB80 C1BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_141)
{
    // 41BB 0061;	
    // (䆻) CJK UNIFIED IDEOGRAPH-41BB	[FB80 C1BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_142)
{
    // 41BB 0041;	
    // (䆻) CJK UNIFIED IDEOGRAPH-41BB	[FB80 C1BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_143)
{
    // 41BB 0062;	
    // (䆻) CJK UNIFIED IDEOGRAPH-41BB	[FB80 C1BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_144)
{
    // 41BC 0021;	
    // (䆼) CJK UNIFIED IDEOGRAPH-41BC	[FB80 C1BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_145)
{
    // 41BC 003F;	
    // (䆼) CJK UNIFIED IDEOGRAPH-41BC	[FB80 C1BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_146)
{
    // 41BC 0061;	
    // (䆼) CJK UNIFIED IDEOGRAPH-41BC	[FB80 C1BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_147)
{
    // 41BC 0041;	
    // (䆼) CJK UNIFIED IDEOGRAPH-41BC	[FB80 C1BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_148)
{
    // 41BC 0062;	
    // (䆼) CJK UNIFIED IDEOGRAPH-41BC	[FB80 C1BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_149)
{
    // 41BD 0021;	
    // (䆽) CJK UNIFIED IDEOGRAPH-41BD	[FB80 C1BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_150)
{
    // 41BD 003F;	
    // (䆽) CJK UNIFIED IDEOGRAPH-41BD	[FB80 C1BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_151)
{
    // 41BD 0061;	
    // (䆽) CJK UNIFIED IDEOGRAPH-41BD	[FB80 C1BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_152)
{
    // 41BD 0041;	
    // (䆽) CJK UNIFIED IDEOGRAPH-41BD	[FB80 C1BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_153)
{
    // 41BD 0062;	
    // (䆽) CJK UNIFIED IDEOGRAPH-41BD	[FB80 C1BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_154)
{
    // 41BE 0021;	
    // (䆾) CJK UNIFIED IDEOGRAPH-41BE	[FB80 C1BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_155)
{
    // 41BE 003F;	
    // (䆾) CJK UNIFIED IDEOGRAPH-41BE	[FB80 C1BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_156)
{
    // 41BE 0061;	
    // (䆾) CJK UNIFIED IDEOGRAPH-41BE	[FB80 C1BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_157)
{
    // 41BE 0041;	
    // (䆾) CJK UNIFIED IDEOGRAPH-41BE	[FB80 C1BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_158)
{
    // 41BE 0062;	
    // (䆾) CJK UNIFIED IDEOGRAPH-41BE	[FB80 C1BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_159)
{
    // 41BF 0021;	
    // (䆿) CJK UNIFIED IDEOGRAPH-41BF	[FB80 C1BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_160)
{
    // 41BF 003F;	
    // (䆿) CJK UNIFIED IDEOGRAPH-41BF	[FB80 C1BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_161)
{
    // 41BF 0061;	
    // (䆿) CJK UNIFIED IDEOGRAPH-41BF	[FB80 C1BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_162)
{
    // 41BF 0041;	
    // (䆿) CJK UNIFIED IDEOGRAPH-41BF	[FB80 C1BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_163)
{
    // 41BF 0062;	
    // (䆿) CJK UNIFIED IDEOGRAPH-41BF	[FB80 C1BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_164)
{
    // 41C0 0021;	
    // (䇀) CJK UNIFIED IDEOGRAPH-41C0	[FB80 C1C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_165)
{
    // 41C0 003F;	
    // (䇀) CJK UNIFIED IDEOGRAPH-41C0	[FB80 C1C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_166)
{
    // 41C0 0061;	
    // (䇀) CJK UNIFIED IDEOGRAPH-41C0	[FB80 C1C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_167)
{
    // 41C0 0041;	
    // (䇀) CJK UNIFIED IDEOGRAPH-41C0	[FB80 C1C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_168)
{
    // 41C0 0062;	
    // (䇀) CJK UNIFIED IDEOGRAPH-41C0	[FB80 C1C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_169)
{
    // 41C1 0021;	
    // (䇁) CJK UNIFIED IDEOGRAPH-41C1	[FB80 C1C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_170)
{
    // 41C1 003F;	
    // (䇁) CJK UNIFIED IDEOGRAPH-41C1	[FB80 C1C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_171)
{
    // 41C1 0061;	
    // (䇁) CJK UNIFIED IDEOGRAPH-41C1	[FB80 C1C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_172)
{
    // 41C1 0041;	
    // (䇁) CJK UNIFIED IDEOGRAPH-41C1	[FB80 C1C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_173)
{
    // 41C1 0062;	
    // (䇁) CJK UNIFIED IDEOGRAPH-41C1	[FB80 C1C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_174)
{
    // 41C2 0021;	
    // (䇂) CJK UNIFIED IDEOGRAPH-41C2	[FB80 C1C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_175)
{
    // 41C2 003F;	
    // (䇂) CJK UNIFIED IDEOGRAPH-41C2	[FB80 C1C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_176)
{
    // 41C2 0061;	
    // (䇂) CJK UNIFIED IDEOGRAPH-41C2	[FB80 C1C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_177)
{
    // 41C2 0041;	
    // (䇂) CJK UNIFIED IDEOGRAPH-41C2	[FB80 C1C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_178)
{
    // 41C2 0062;	
    // (䇂) CJK UNIFIED IDEOGRAPH-41C2	[FB80 C1C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_179)
{
    // 41C3 0021;	
    // (䇃) CJK UNIFIED IDEOGRAPH-41C3	[FB80 C1C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_180)
{
    // 41C3 003F;	
    // (䇃) CJK UNIFIED IDEOGRAPH-41C3	[FB80 C1C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_181)
{
    // 41C3 0061;	
    // (䇃) CJK UNIFIED IDEOGRAPH-41C3	[FB80 C1C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_182)
{
    // 41C3 0041;	
    // (䇃) CJK UNIFIED IDEOGRAPH-41C3	[FB80 C1C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_183)
{
    // 41C3 0062;	
    // (䇃) CJK UNIFIED IDEOGRAPH-41C3	[FB80 C1C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_184)
{
    // 41C4 0021;	
    // (䇄) CJK UNIFIED IDEOGRAPH-41C4	[FB80 C1C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_185)
{
    // 41C4 003F;	
    // (䇄) CJK UNIFIED IDEOGRAPH-41C4	[FB80 C1C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_186)
{
    // 41C4 0061;	
    // (䇄) CJK UNIFIED IDEOGRAPH-41C4	[FB80 C1C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_187)
{
    // 41C4 0041;	
    // (䇄) CJK UNIFIED IDEOGRAPH-41C4	[FB80 C1C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_188)
{
    // 41C4 0062;	
    // (䇄) CJK UNIFIED IDEOGRAPH-41C4	[FB80 C1C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_189)
{
    // 41C5 0021;	
    // (䇅) CJK UNIFIED IDEOGRAPH-41C5	[FB80 C1C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_190)
{
    // 41C5 003F;	
    // (䇅) CJK UNIFIED IDEOGRAPH-41C5	[FB80 C1C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_191)
{
    // 41C5 0061;	
    // (䇅) CJK UNIFIED IDEOGRAPH-41C5	[FB80 C1C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_192)
{
    // 41C5 0041;	
    // (䇅) CJK UNIFIED IDEOGRAPH-41C5	[FB80 C1C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_193)
{
    // 41C5 0062;	
    // (䇅) CJK UNIFIED IDEOGRAPH-41C5	[FB80 C1C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_194)
{
    // 41C6 0021;	
    // (䇆) CJK UNIFIED IDEOGRAPH-41C6	[FB80 C1C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_195)
{
    // 41C6 003F;	
    // (䇆) CJK UNIFIED IDEOGRAPH-41C6	[FB80 C1C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_196)
{
    // 41C6 0061;	
    // (䇆) CJK UNIFIED IDEOGRAPH-41C6	[FB80 C1C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_197)
{
    // 41C6 0041;	
    // (䇆) CJK UNIFIED IDEOGRAPH-41C6	[FB80 C1C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_198)
{
    // 41C6 0062;	
    // (䇆) CJK UNIFIED IDEOGRAPH-41C6	[FB80 C1C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_199)
{
    // 41C7 0021;	
    // (䇇) CJK UNIFIED IDEOGRAPH-41C7	[FB80 C1C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_200)
{
    // 41C7 003F;	
    // (䇇) CJK UNIFIED IDEOGRAPH-41C7	[FB80 C1C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_201)
{
    // 41C7 0061;	
    // (䇇) CJK UNIFIED IDEOGRAPH-41C7	[FB80 C1C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_202)
{
    // 41C7 0041;	
    // (䇇) CJK UNIFIED IDEOGRAPH-41C7	[FB80 C1C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_203)
{
    // 41C7 0062;	
    // (䇇) CJK UNIFIED IDEOGRAPH-41C7	[FB80 C1C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_204)
{
    // 41C8 0021;	
    // (䇈) CJK UNIFIED IDEOGRAPH-41C8	[FB80 C1C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_205)
{
    // 41C8 003F;	
    // (䇈) CJK UNIFIED IDEOGRAPH-41C8	[FB80 C1C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_206)
{
    // 41C8 0061;	
    // (䇈) CJK UNIFIED IDEOGRAPH-41C8	[FB80 C1C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_207)
{
    // 41C8 0041;	
    // (䇈) CJK UNIFIED IDEOGRAPH-41C8	[FB80 C1C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_208)
{
    // 41C8 0062;	
    // (䇈) CJK UNIFIED IDEOGRAPH-41C8	[FB80 C1C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_209)
{
    // 41C9 0021;	
    // (䇉) CJK UNIFIED IDEOGRAPH-41C9	[FB80 C1C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_210)
{
    // 41C9 003F;	
    // (䇉) CJK UNIFIED IDEOGRAPH-41C9	[FB80 C1C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_211)
{
    // 41C9 0061;	
    // (䇉) CJK UNIFIED IDEOGRAPH-41C9	[FB80 C1C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_212)
{
    // 41C9 0041;	
    // (䇉) CJK UNIFIED IDEOGRAPH-41C9	[FB80 C1C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_213)
{
    // 41C9 0062;	
    // (䇉) CJK UNIFIED IDEOGRAPH-41C9	[FB80 C1C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_214)
{
    // 41CA 0021;	
    // (䇊) CJK UNIFIED IDEOGRAPH-41CA	[FB80 C1CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_215)
{
    // 41CA 003F;	
    // (䇊) CJK UNIFIED IDEOGRAPH-41CA	[FB80 C1CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_216)
{
    // 41CA 0061;	
    // (䇊) CJK UNIFIED IDEOGRAPH-41CA	[FB80 C1CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_217)
{
    // 41CA 0041;	
    // (䇊) CJK UNIFIED IDEOGRAPH-41CA	[FB80 C1CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_218)
{
    // 41CA 0062;	
    // (䇊) CJK UNIFIED IDEOGRAPH-41CA	[FB80 C1CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_219)
{
    // 41CB 0021;	
    // (䇋) CJK UNIFIED IDEOGRAPH-41CB	[FB80 C1CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_220)
{
    // 41CB 003F;	
    // (䇋) CJK UNIFIED IDEOGRAPH-41CB	[FB80 C1CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_221)
{
    // 41CB 0061;	
    // (䇋) CJK UNIFIED IDEOGRAPH-41CB	[FB80 C1CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_222)
{
    // 41CB 0041;	
    // (䇋) CJK UNIFIED IDEOGRAPH-41CB	[FB80 C1CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_223)
{
    // 41CB 0062;	
    // (䇋) CJK UNIFIED IDEOGRAPH-41CB	[FB80 C1CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_224)
{
    // 41CC 0021;	
    // (䇌) CJK UNIFIED IDEOGRAPH-41CC	[FB80 C1CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_225)
{
    // 41CC 003F;	
    // (䇌) CJK UNIFIED IDEOGRAPH-41CC	[FB80 C1CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_226)
{
    // 41CC 0061;	
    // (䇌) CJK UNIFIED IDEOGRAPH-41CC	[FB80 C1CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_227)
{
    // 41CC 0041;	
    // (䇌) CJK UNIFIED IDEOGRAPH-41CC	[FB80 C1CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_228)
{
    // 41CC 0062;	
    // (䇌) CJK UNIFIED IDEOGRAPH-41CC	[FB80 C1CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_229)
{
    // 41CD 0021;	
    // (䇍) CJK UNIFIED IDEOGRAPH-41CD	[FB80 C1CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_230)
{
    // 41CD 003F;	
    // (䇍) CJK UNIFIED IDEOGRAPH-41CD	[FB80 C1CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_231)
{
    // 41CD 0061;	
    // (䇍) CJK UNIFIED IDEOGRAPH-41CD	[FB80 C1CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_232)
{
    // 41CD 0041;	
    // (䇍) CJK UNIFIED IDEOGRAPH-41CD	[FB80 C1CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_233)
{
    // 41CD 0062;	
    // (䇍) CJK UNIFIED IDEOGRAPH-41CD	[FB80 C1CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_234)
{
    // 41CE 0021;	
    // (䇎) CJK UNIFIED IDEOGRAPH-41CE	[FB80 C1CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_235)
{
    // 41CE 003F;	
    // (䇎) CJK UNIFIED IDEOGRAPH-41CE	[FB80 C1CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_236)
{
    // 41CE 0061;	
    // (䇎) CJK UNIFIED IDEOGRAPH-41CE	[FB80 C1CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_237)
{
    // 41CE 0041;	
    // (䇎) CJK UNIFIED IDEOGRAPH-41CE	[FB80 C1CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_238)
{
    // 41CE 0062;	
    // (䇎) CJK UNIFIED IDEOGRAPH-41CE	[FB80 C1CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_239)
{
    // 41CF 0021;	
    // (䇏) CJK UNIFIED IDEOGRAPH-41CF	[FB80 C1CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_240)
{
    // 41CF 003F;	
    // (䇏) CJK UNIFIED IDEOGRAPH-41CF	[FB80 C1CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_241)
{
    // 41CF 0061;	
    // (䇏) CJK UNIFIED IDEOGRAPH-41CF	[FB80 C1CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_242)
{
    // 41CF 0041;	
    // (䇏) CJK UNIFIED IDEOGRAPH-41CF	[FB80 C1CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_243)
{
    // 41CF 0062;	
    // (䇏) CJK UNIFIED IDEOGRAPH-41CF	[FB80 C1CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_244)
{
    // 41D0 0021;	
    // (䇐) CJK UNIFIED IDEOGRAPH-41D0	[FB80 C1D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_245)
{
    // 41D0 003F;	
    // (䇐) CJK UNIFIED IDEOGRAPH-41D0	[FB80 C1D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_246)
{
    // 41D0 0061;	
    // (䇐) CJK UNIFIED IDEOGRAPH-41D0	[FB80 C1D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_247)
{
    // 41D0 0041;	
    // (䇐) CJK UNIFIED IDEOGRAPH-41D0	[FB80 C1D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_248)
{
    // 41D0 0062;	
    // (䇐) CJK UNIFIED IDEOGRAPH-41D0	[FB80 C1D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_249)
{
    // 41D1 0021;	
    // (䇑) CJK UNIFIED IDEOGRAPH-41D1	[FB80 C1D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_250)
{
    // 41D1 003F;	
    // (䇑) CJK UNIFIED IDEOGRAPH-41D1	[FB80 C1D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_251)
{
    // 41D1 0061;	
    // (䇑) CJK UNIFIED IDEOGRAPH-41D1	[FB80 C1D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_252)
{
    // 41D1 0041;	
    // (䇑) CJK UNIFIED IDEOGRAPH-41D1	[FB80 C1D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_253)
{
    // 41D1 0062;	
    // (䇑) CJK UNIFIED IDEOGRAPH-41D1	[FB80 C1D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_254)
{
    // 41D2 0021;	
    // (䇒) CJK UNIFIED IDEOGRAPH-41D2	[FB80 C1D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_255)
{
    // 41D2 003F;	
    // (䇒) CJK UNIFIED IDEOGRAPH-41D2	[FB80 C1D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_256)
{
    // 41D2 0061;	
    // (䇒) CJK UNIFIED IDEOGRAPH-41D2	[FB80 C1D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_257)
{
    // 41D2 0041;	
    // (䇒) CJK UNIFIED IDEOGRAPH-41D2	[FB80 C1D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_258)
{
    // 41D2 0062;	
    // (䇒) CJK UNIFIED IDEOGRAPH-41D2	[FB80 C1D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_259)
{
    // 41D3 0021;	
    // (䇓) CJK UNIFIED IDEOGRAPH-41D3	[FB80 C1D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_260)
{
    // 41D3 003F;	
    // (䇓) CJK UNIFIED IDEOGRAPH-41D3	[FB80 C1D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_261)
{
    // 41D3 0061;	
    // (䇓) CJK UNIFIED IDEOGRAPH-41D3	[FB80 C1D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_262)
{
    // 41D3 0041;	
    // (䇓) CJK UNIFIED IDEOGRAPH-41D3	[FB80 C1D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_263)
{
    // 41D3 0062;	
    // (䇓) CJK UNIFIED IDEOGRAPH-41D3	[FB80 C1D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_264)
{
    // 41D4 0021;	
    // (䇔) CJK UNIFIED IDEOGRAPH-41D4	[FB80 C1D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_265)
{
    // 41D4 003F;	
    // (䇔) CJK UNIFIED IDEOGRAPH-41D4	[FB80 C1D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_266)
{
    // 41D4 0061;	
    // (䇔) CJK UNIFIED IDEOGRAPH-41D4	[FB80 C1D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_267)
{
    // 41D4 0041;	
    // (䇔) CJK UNIFIED IDEOGRAPH-41D4	[FB80 C1D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_268)
{
    // 41D4 0062;	
    // (䇔) CJK UNIFIED IDEOGRAPH-41D4	[FB80 C1D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_269)
{
    // 41D5 0021;	
    // (䇕) CJK UNIFIED IDEOGRAPH-41D5	[FB80 C1D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_270)
{
    // 41D5 003F;	
    // (䇕) CJK UNIFIED IDEOGRAPH-41D5	[FB80 C1D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_271)
{
    // 41D5 0061;	
    // (䇕) CJK UNIFIED IDEOGRAPH-41D5	[FB80 C1D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_272)
{
    // 41D5 0041;	
    // (䇕) CJK UNIFIED IDEOGRAPH-41D5	[FB80 C1D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_273)
{
    // 41D5 0062;	
    // (䇕) CJK UNIFIED IDEOGRAPH-41D5	[FB80 C1D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_274)
{
    // 41D6 0021;	
    // (䇖) CJK UNIFIED IDEOGRAPH-41D6	[FB80 C1D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_275)
{
    // 41D6 003F;	
    // (䇖) CJK UNIFIED IDEOGRAPH-41D6	[FB80 C1D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_276)
{
    // 41D6 0061;	
    // (䇖) CJK UNIFIED IDEOGRAPH-41D6	[FB80 C1D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_277)
{
    // 41D6 0041;	
    // (䇖) CJK UNIFIED IDEOGRAPH-41D6	[FB80 C1D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_278)
{
    // 41D6 0062;	
    // (䇖) CJK UNIFIED IDEOGRAPH-41D6	[FB80 C1D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_279)
{
    // 41D7 0021;	
    // (䇗) CJK UNIFIED IDEOGRAPH-41D7	[FB80 C1D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_280)
{
    // 41D7 003F;	
    // (䇗) CJK UNIFIED IDEOGRAPH-41D7	[FB80 C1D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_281)
{
    // 41D7 0061;	
    // (䇗) CJK UNIFIED IDEOGRAPH-41D7	[FB80 C1D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_282)
{
    // 41D7 0041;	
    // (䇗) CJK UNIFIED IDEOGRAPH-41D7	[FB80 C1D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_283)
{
    // 41D7 0062;	
    // (䇗) CJK UNIFIED IDEOGRAPH-41D7	[FB80 C1D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_284)
{
    // 41D8 0021;	
    // (䇘) CJK UNIFIED IDEOGRAPH-41D8	[FB80 C1D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_285)
{
    // 41D8 003F;	
    // (䇘) CJK UNIFIED IDEOGRAPH-41D8	[FB80 C1D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_286)
{
    // 41D8 0061;	
    // (䇘) CJK UNIFIED IDEOGRAPH-41D8	[FB80 C1D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_287)
{
    // 41D8 0041;	
    // (䇘) CJK UNIFIED IDEOGRAPH-41D8	[FB80 C1D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_288)
{
    // 41D8 0062;	
    // (䇘) CJK UNIFIED IDEOGRAPH-41D8	[FB80 C1D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_289)
{
    // 41D9 0021;	
    // (䇙) CJK UNIFIED IDEOGRAPH-41D9	[FB80 C1D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_290)
{
    // 41D9 003F;	
    // (䇙) CJK UNIFIED IDEOGRAPH-41D9	[FB80 C1D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_291)
{
    // 41D9 0061;	
    // (䇙) CJK UNIFIED IDEOGRAPH-41D9	[FB80 C1D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_292)
{
    // 41D9 0041;	
    // (䇙) CJK UNIFIED IDEOGRAPH-41D9	[FB80 C1D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_293)
{
    // 41D9 0062;	
    // (䇙) CJK UNIFIED IDEOGRAPH-41D9	[FB80 C1D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_294)
{
    // 41DA 0021;	
    // (䇚) CJK UNIFIED IDEOGRAPH-41DA	[FB80 C1DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_295)
{
    // 41DA 003F;	
    // (䇚) CJK UNIFIED IDEOGRAPH-41DA	[FB80 C1DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_296)
{
    // 41DA 0061;	
    // (䇚) CJK UNIFIED IDEOGRAPH-41DA	[FB80 C1DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_297)
{
    // 41DA 0041;	
    // (䇚) CJK UNIFIED IDEOGRAPH-41DA	[FB80 C1DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_298)
{
    // 41DA 0062;	
    // (䇚) CJK UNIFIED IDEOGRAPH-41DA	[FB80 C1DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_299)
{
    // 41DB 0021;	
    // (䇛) CJK UNIFIED IDEOGRAPH-41DB	[FB80 C1DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_300)
{
    // 41DB 003F;	
    // (䇛) CJK UNIFIED IDEOGRAPH-41DB	[FB80 C1DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_301)
{
    // 41DB 0061;	
    // (䇛) CJK UNIFIED IDEOGRAPH-41DB	[FB80 C1DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_302)
{
    // 41DB 0041;	
    // (䇛) CJK UNIFIED IDEOGRAPH-41DB	[FB80 C1DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_303)
{
    // 41DB 0062;	
    // (䇛) CJK UNIFIED IDEOGRAPH-41DB	[FB80 C1DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_304)
{
    // 41DC 0021;	
    // (䇜) CJK UNIFIED IDEOGRAPH-41DC	[FB80 C1DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_305)
{
    // 41DC 003F;	
    // (䇜) CJK UNIFIED IDEOGRAPH-41DC	[FB80 C1DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_306)
{
    // 41DC 0061;	
    // (䇜) CJK UNIFIED IDEOGRAPH-41DC	[FB80 C1DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_307)
{
    // 41DC 0041;	
    // (䇜) CJK UNIFIED IDEOGRAPH-41DC	[FB80 C1DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_308)
{
    // 41DC 0062;	
    // (䇜) CJK UNIFIED IDEOGRAPH-41DC	[FB80 C1DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_309)
{
    // 41DD 0021;	
    // (䇝) CJK UNIFIED IDEOGRAPH-41DD	[FB80 C1DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_310)
{
    // 41DD 003F;	
    // (䇝) CJK UNIFIED IDEOGRAPH-41DD	[FB80 C1DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_311)
{
    // 41DD 0061;	
    // (䇝) CJK UNIFIED IDEOGRAPH-41DD	[FB80 C1DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_312)
{
    // 41DD 0041;	
    // (䇝) CJK UNIFIED IDEOGRAPH-41DD	[FB80 C1DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_313)
{
    // 41DD 0062;	
    // (䇝) CJK UNIFIED IDEOGRAPH-41DD	[FB80 C1DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_314)
{
    // 41DE 0021;	
    // (䇞) CJK UNIFIED IDEOGRAPH-41DE	[FB80 C1DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_315)
{
    // 41DE 003F;	
    // (䇞) CJK UNIFIED IDEOGRAPH-41DE	[FB80 C1DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_316)
{
    // 41DE 0061;	
    // (䇞) CJK UNIFIED IDEOGRAPH-41DE	[FB80 C1DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_317)
{
    // 41DE 0041;	
    // (䇞) CJK UNIFIED IDEOGRAPH-41DE	[FB80 C1DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_318)
{
    // 41DE 0062;	
    // (䇞) CJK UNIFIED IDEOGRAPH-41DE	[FB80 C1DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_319)
{
    // 41DF 0021;	
    // (䇟) CJK UNIFIED IDEOGRAPH-41DF	[FB80 C1DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_320)
{
    // 41DF 003F;	
    // (䇟) CJK UNIFIED IDEOGRAPH-41DF	[FB80 C1DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_321)
{
    // 41DF 0061;	
    // (䇟) CJK UNIFIED IDEOGRAPH-41DF	[FB80 C1DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_322)
{
    // 41DF 0041;	
    // (䇟) CJK UNIFIED IDEOGRAPH-41DF	[FB80 C1DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_323)
{
    // 41DF 0062;	
    // (䇟) CJK UNIFIED IDEOGRAPH-41DF	[FB80 C1DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_324)
{
    // 41E0 0021;	
    // (䇠) CJK UNIFIED IDEOGRAPH-41E0	[FB80 C1E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_325)
{
    // 41E0 003F;	
    // (䇠) CJK UNIFIED IDEOGRAPH-41E0	[FB80 C1E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_326)
{
    // 41E0 0061;	
    // (䇠) CJK UNIFIED IDEOGRAPH-41E0	[FB80 C1E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_327)
{
    // 41E0 0041;	
    // (䇠) CJK UNIFIED IDEOGRAPH-41E0	[FB80 C1E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_328)
{
    // 41E0 0062;	
    // (䇠) CJK UNIFIED IDEOGRAPH-41E0	[FB80 C1E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_329)
{
    // 41E1 0021;	
    // (䇡) CJK UNIFIED IDEOGRAPH-41E1	[FB80 C1E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_330)
{
    // 41E1 003F;	
    // (䇡) CJK UNIFIED IDEOGRAPH-41E1	[FB80 C1E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_331)
{
    // 41E1 0061;	
    // (䇡) CJK UNIFIED IDEOGRAPH-41E1	[FB80 C1E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_332)
{
    // 41E1 0041;	
    // (䇡) CJK UNIFIED IDEOGRAPH-41E1	[FB80 C1E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_333)
{
    // 41E1 0062;	
    // (䇡) CJK UNIFIED IDEOGRAPH-41E1	[FB80 C1E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_334)
{
    // 41E2 0021;	
    // (䇢) CJK UNIFIED IDEOGRAPH-41E2	[FB80 C1E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_335)
{
    // 41E2 003F;	
    // (䇢) CJK UNIFIED IDEOGRAPH-41E2	[FB80 C1E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_336)
{
    // 41E2 0061;	
    // (䇢) CJK UNIFIED IDEOGRAPH-41E2	[FB80 C1E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_337)
{
    // 41E2 0041;	
    // (䇢) CJK UNIFIED IDEOGRAPH-41E2	[FB80 C1E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_338)
{
    // 41E2 0062;	
    // (䇢) CJK UNIFIED IDEOGRAPH-41E2	[FB80 C1E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_339)
{
    // 41E3 0021;	
    // (䇣) CJK UNIFIED IDEOGRAPH-41E3	[FB80 C1E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_340)
{
    // 41E3 003F;	
    // (䇣) CJK UNIFIED IDEOGRAPH-41E3	[FB80 C1E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_341)
{
    // 41E3 0061;	
    // (䇣) CJK UNIFIED IDEOGRAPH-41E3	[FB80 C1E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_342)
{
    // 41E3 0041;	
    // (䇣) CJK UNIFIED IDEOGRAPH-41E3	[FB80 C1E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_343)
{
    // 41E3 0062;	
    // (䇣) CJK UNIFIED IDEOGRAPH-41E3	[FB80 C1E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_344)
{
    // 41E4 0021;	
    // (䇤) CJK UNIFIED IDEOGRAPH-41E4	[FB80 C1E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_345)
{
    // 41E4 003F;	
    // (䇤) CJK UNIFIED IDEOGRAPH-41E4	[FB80 C1E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_346)
{
    // 41E4 0061;	
    // (䇤) CJK UNIFIED IDEOGRAPH-41E4	[FB80 C1E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_347)
{
    // 41E4 0041;	
    // (䇤) CJK UNIFIED IDEOGRAPH-41E4	[FB80 C1E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_348)
{
    // 41E4 0062;	
    // (䇤) CJK UNIFIED IDEOGRAPH-41E4	[FB80 C1E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_349)
{
    // 41E5 0021;	
    // (䇥) CJK UNIFIED IDEOGRAPH-41E5	[FB80 C1E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_350)
{
    // 41E5 003F;	
    // (䇥) CJK UNIFIED IDEOGRAPH-41E5	[FB80 C1E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_351)
{
    // 41E5 0061;	
    // (䇥) CJK UNIFIED IDEOGRAPH-41E5	[FB80 C1E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_352)
{
    // 41E5 0041;	
    // (䇥) CJK UNIFIED IDEOGRAPH-41E5	[FB80 C1E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_353)
{
    // 41E5 0062;	
    // (䇥) CJK UNIFIED IDEOGRAPH-41E5	[FB80 C1E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_354)
{
    // 41E6 0021;	
    // (䇦) CJK UNIFIED IDEOGRAPH-41E6	[FB80 C1E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_355)
{
    // 41E6 003F;	
    // (䇦) CJK UNIFIED IDEOGRAPH-41E6	[FB80 C1E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_356)
{
    // 41E6 0061;	
    // (䇦) CJK UNIFIED IDEOGRAPH-41E6	[FB80 C1E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_357)
{
    // 41E6 0041;	
    // (䇦) CJK UNIFIED IDEOGRAPH-41E6	[FB80 C1E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_358)
{
    // 41E6 0062;	
    // (䇦) CJK UNIFIED IDEOGRAPH-41E6	[FB80 C1E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_359)
{
    // 41E7 0021;	
    // (䇧) CJK UNIFIED IDEOGRAPH-41E7	[FB80 C1E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_360)
{
    // 41E7 003F;	
    // (䇧) CJK UNIFIED IDEOGRAPH-41E7	[FB80 C1E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_361)
{
    // 41E7 0061;	
    // (䇧) CJK UNIFIED IDEOGRAPH-41E7	[FB80 C1E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_362)
{
    // 41E7 0041;	
    // (䇧) CJK UNIFIED IDEOGRAPH-41E7	[FB80 C1E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_363)
{
    // 41E7 0062;	
    // (䇧) CJK UNIFIED IDEOGRAPH-41E7	[FB80 C1E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_364)
{
    // 41E8 0021;	
    // (䇨) CJK UNIFIED IDEOGRAPH-41E8	[FB80 C1E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_365)
{
    // 41E8 003F;	
    // (䇨) CJK UNIFIED IDEOGRAPH-41E8	[FB80 C1E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_366)
{
    // 41E8 0061;	
    // (䇨) CJK UNIFIED IDEOGRAPH-41E8	[FB80 C1E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_367)
{
    // 41E8 0041;	
    // (䇨) CJK UNIFIED IDEOGRAPH-41E8	[FB80 C1E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_368)
{
    // 41E8 0062;	
    // (䇨) CJK UNIFIED IDEOGRAPH-41E8	[FB80 C1E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_369)
{
    // 41E9 0021;	
    // (䇩) CJK UNIFIED IDEOGRAPH-41E9	[FB80 C1E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_370)
{
    // 41E9 003F;	
    // (䇩) CJK UNIFIED IDEOGRAPH-41E9	[FB80 C1E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_371)
{
    // 41E9 0061;	
    // (䇩) CJK UNIFIED IDEOGRAPH-41E9	[FB80 C1E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_372)
{
    // 41E9 0041;	
    // (䇩) CJK UNIFIED IDEOGRAPH-41E9	[FB80 C1E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_373)
{
    // 41E9 0062;	
    // (䇩) CJK UNIFIED IDEOGRAPH-41E9	[FB80 C1E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_374)
{
    // 41EA 0021;	
    // (䇪) CJK UNIFIED IDEOGRAPH-41EA	[FB80 C1EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_375)
{
    // 41EA 003F;	
    // (䇪) CJK UNIFIED IDEOGRAPH-41EA	[FB80 C1EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_376)
{
    // 41EA 0061;	
    // (䇪) CJK UNIFIED IDEOGRAPH-41EA	[FB80 C1EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_377)
{
    // 41EA 0041;	
    // (䇪) CJK UNIFIED IDEOGRAPH-41EA	[FB80 C1EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_378)
{
    // 41EA 0062;	
    // (䇪) CJK UNIFIED IDEOGRAPH-41EA	[FB80 C1EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_379)
{
    // 41EB 0021;	
    // (䇫) CJK UNIFIED IDEOGRAPH-41EB	[FB80 C1EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_380)
{
    // 41EB 003F;	
    // (䇫) CJK UNIFIED IDEOGRAPH-41EB	[FB80 C1EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_381)
{
    // 41EB 0061;	
    // (䇫) CJK UNIFIED IDEOGRAPH-41EB	[FB80 C1EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_382)
{
    // 41EB 0041;	
    // (䇫) CJK UNIFIED IDEOGRAPH-41EB	[FB80 C1EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_383)
{
    // 41EB 0062;	
    // (䇫) CJK UNIFIED IDEOGRAPH-41EB	[FB80 C1EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_384)
{
    // 41EC 0021;	
    // (䇬) CJK UNIFIED IDEOGRAPH-41EC	[FB80 C1EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_385)
{
    // 41EC 003F;	
    // (䇬) CJK UNIFIED IDEOGRAPH-41EC	[FB80 C1EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_386)
{
    // 41EC 0061;	
    // (䇬) CJK UNIFIED IDEOGRAPH-41EC	[FB80 C1EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_387)
{
    // 41EC 0041;	
    // (䇬) CJK UNIFIED IDEOGRAPH-41EC	[FB80 C1EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_388)
{
    // 41EC 0062;	
    // (䇬) CJK UNIFIED IDEOGRAPH-41EC	[FB80 C1EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_389)
{
    // 41ED 0021;	
    // (䇭) CJK UNIFIED IDEOGRAPH-41ED	[FB80 C1ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_390)
{
    // 41ED 003F;	
    // (䇭) CJK UNIFIED IDEOGRAPH-41ED	[FB80 C1ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_391)
{
    // 41ED 0061;	
    // (䇭) CJK UNIFIED IDEOGRAPH-41ED	[FB80 C1ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_392)
{
    // 41ED 0041;	
    // (䇭) CJK UNIFIED IDEOGRAPH-41ED	[FB80 C1ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_393)
{
    // 41ED 0062;	
    // (䇭) CJK UNIFIED IDEOGRAPH-41ED	[FB80 C1ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_394)
{
    // 41EE 0021;	
    // (䇮) CJK UNIFIED IDEOGRAPH-41EE	[FB80 C1EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_395)
{
    // 41EE 003F;	
    // (䇮) CJK UNIFIED IDEOGRAPH-41EE	[FB80 C1EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_396)
{
    // 41EE 0061;	
    // (䇮) CJK UNIFIED IDEOGRAPH-41EE	[FB80 C1EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_397)
{
    // 41EE 0041;	
    // (䇮) CJK UNIFIED IDEOGRAPH-41EE	[FB80 C1EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_398)
{
    // 41EE 0062;	
    // (䇮) CJK UNIFIED IDEOGRAPH-41EE	[FB80 C1EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_399)
{
    // 41EF 0021;	
    // (䇯) CJK UNIFIED IDEOGRAPH-41EF	[FB80 C1EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_400)
{
    // 41EF 003F;	
    // (䇯) CJK UNIFIED IDEOGRAPH-41EF	[FB80 C1EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_401)
{
    // 41EF 0061;	
    // (䇯) CJK UNIFIED IDEOGRAPH-41EF	[FB80 C1EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_402)
{
    // 41EF 0041;	
    // (䇯) CJK UNIFIED IDEOGRAPH-41EF	[FB80 C1EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_403)
{
    // 41EF 0062;	
    // (䇯) CJK UNIFIED IDEOGRAPH-41EF	[FB80 C1EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_404)
{
    // 41F0 0021;	
    // (䇰) CJK UNIFIED IDEOGRAPH-41F0	[FB80 C1F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_405)
{
    // 41F0 003F;	
    // (䇰) CJK UNIFIED IDEOGRAPH-41F0	[FB80 C1F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_406)
{
    // 41F0 0061;	
    // (䇰) CJK UNIFIED IDEOGRAPH-41F0	[FB80 C1F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_407)
{
    // 41F0 0041;	
    // (䇰) CJK UNIFIED IDEOGRAPH-41F0	[FB80 C1F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_408)
{
    // 41F0 0062;	
    // (䇰) CJK UNIFIED IDEOGRAPH-41F0	[FB80 C1F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_409)
{
    // 41F1 0021;	
    // (䇱) CJK UNIFIED IDEOGRAPH-41F1	[FB80 C1F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_410)
{
    // 41F1 003F;	
    // (䇱) CJK UNIFIED IDEOGRAPH-41F1	[FB80 C1F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_411)
{
    // 41F1 0061;	
    // (䇱) CJK UNIFIED IDEOGRAPH-41F1	[FB80 C1F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_412)
{
    // 41F1 0041;	
    // (䇱) CJK UNIFIED IDEOGRAPH-41F1	[FB80 C1F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_413)
{
    // 41F1 0062;	
    // (䇱) CJK UNIFIED IDEOGRAPH-41F1	[FB80 C1F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_414)
{
    // 41F2 0021;	
    // (䇲) CJK UNIFIED IDEOGRAPH-41F2	[FB80 C1F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_415)
{
    // 41F2 003F;	
    // (䇲) CJK UNIFIED IDEOGRAPH-41F2	[FB80 C1F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_416)
{
    // 41F2 0061;	
    // (䇲) CJK UNIFIED IDEOGRAPH-41F2	[FB80 C1F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_417)
{
    // 41F2 0041;	
    // (䇲) CJK UNIFIED IDEOGRAPH-41F2	[FB80 C1F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_418)
{
    // 41F2 0062;	
    // (䇲) CJK UNIFIED IDEOGRAPH-41F2	[FB80 C1F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_419)
{
    // 41F3 0021;	
    // (䇳) CJK UNIFIED IDEOGRAPH-41F3	[FB80 C1F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_420)
{
    // 41F3 003F;	
    // (䇳) CJK UNIFIED IDEOGRAPH-41F3	[FB80 C1F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_421)
{
    // 41F3 0061;	
    // (䇳) CJK UNIFIED IDEOGRAPH-41F3	[FB80 C1F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_422)
{
    // 41F3 0041;	
    // (䇳) CJK UNIFIED IDEOGRAPH-41F3	[FB80 C1F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_423)
{
    // 41F3 0062;	
    // (䇳) CJK UNIFIED IDEOGRAPH-41F3	[FB80 C1F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_424)
{
    // 41F4 0021;	
    // (䇴) CJK UNIFIED IDEOGRAPH-41F4	[FB80 C1F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_425)
{
    // 41F4 003F;	
    // (䇴) CJK UNIFIED IDEOGRAPH-41F4	[FB80 C1F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_426)
{
    // 41F4 0061;	
    // (䇴) CJK UNIFIED IDEOGRAPH-41F4	[FB80 C1F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_427)
{
    // 41F4 0041;	
    // (䇴) CJK UNIFIED IDEOGRAPH-41F4	[FB80 C1F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_428)
{
    // 41F4 0062;	
    // (䇴) CJK UNIFIED IDEOGRAPH-41F4	[FB80 C1F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_429)
{
    // 41F5 0021;	
    // (䇵) CJK UNIFIED IDEOGRAPH-41F5	[FB80 C1F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_430)
{
    // 41F5 003F;	
    // (䇵) CJK UNIFIED IDEOGRAPH-41F5	[FB80 C1F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_431)
{
    // 41F5 0061;	
    // (䇵) CJK UNIFIED IDEOGRAPH-41F5	[FB80 C1F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_432)
{
    // 41F5 0041;	
    // (䇵) CJK UNIFIED IDEOGRAPH-41F5	[FB80 C1F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_433)
{
    // 41F5 0062;	
    // (䇵) CJK UNIFIED IDEOGRAPH-41F5	[FB80 C1F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_434)
{
    // 41F6 0021;	
    // (䇶) CJK UNIFIED IDEOGRAPH-41F6	[FB80 C1F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_435)
{
    // 41F6 003F;	
    // (䇶) CJK UNIFIED IDEOGRAPH-41F6	[FB80 C1F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_436)
{
    // 41F6 0061;	
    // (䇶) CJK UNIFIED IDEOGRAPH-41F6	[FB80 C1F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_437)
{
    // 41F6 0041;	
    // (䇶) CJK UNIFIED IDEOGRAPH-41F6	[FB80 C1F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_438)
{
    // 41F6 0062;	
    // (䇶) CJK UNIFIED IDEOGRAPH-41F6	[FB80 C1F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_439)
{
    // 41F7 0021;	
    // (䇷) CJK UNIFIED IDEOGRAPH-41F7	[FB80 C1F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_440)
{
    // 41F7 003F;	
    // (䇷) CJK UNIFIED IDEOGRAPH-41F7	[FB80 C1F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_441)
{
    // 41F7 0061;	
    // (䇷) CJK UNIFIED IDEOGRAPH-41F7	[FB80 C1F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_442)
{
    // 41F7 0041;	
    // (䇷) CJK UNIFIED IDEOGRAPH-41F7	[FB80 C1F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_443)
{
    // 41F7 0062;	
    // (䇷) CJK UNIFIED IDEOGRAPH-41F7	[FB80 C1F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_444)
{
    // 41F8 0021;	
    // (䇸) CJK UNIFIED IDEOGRAPH-41F8	[FB80 C1F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_445)
{
    // 41F8 003F;	
    // (䇸) CJK UNIFIED IDEOGRAPH-41F8	[FB80 C1F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_446)
{
    // 41F8 0061;	
    // (䇸) CJK UNIFIED IDEOGRAPH-41F8	[FB80 C1F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_447)
{
    // 41F8 0041;	
    // (䇸) CJK UNIFIED IDEOGRAPH-41F8	[FB80 C1F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_448)
{
    // 41F8 0062;	
    // (䇸) CJK UNIFIED IDEOGRAPH-41F8	[FB80 C1F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_449)
{
    // 41F9 0021;	
    // (䇹) CJK UNIFIED IDEOGRAPH-41F9	[FB80 C1F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_450)
{
    // 41F9 003F;	
    // (䇹) CJK UNIFIED IDEOGRAPH-41F9	[FB80 C1F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_451)
{
    // 41F9 0061;	
    // (䇹) CJK UNIFIED IDEOGRAPH-41F9	[FB80 C1F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_452)
{
    // 41F9 0041;	
    // (䇹) CJK UNIFIED IDEOGRAPH-41F9	[FB80 C1F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_453)
{
    // 41F9 0062;	
    // (䇹) CJK UNIFIED IDEOGRAPH-41F9	[FB80 C1F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_454)
{
    // 41FA 0021;	
    // (䇺) CJK UNIFIED IDEOGRAPH-41FA	[FB80 C1FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_455)
{
    // 41FA 003F;	
    // (䇺) CJK UNIFIED IDEOGRAPH-41FA	[FB80 C1FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_456)
{
    // 41FA 0061;	
    // (䇺) CJK UNIFIED IDEOGRAPH-41FA	[FB80 C1FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_457)
{
    // 41FA 0041;	
    // (䇺) CJK UNIFIED IDEOGRAPH-41FA	[FB80 C1FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_458)
{
    // 41FA 0062;	
    // (䇺) CJK UNIFIED IDEOGRAPH-41FA	[FB80 C1FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_459)
{
    // 41FB 0021;	
    // (䇻) CJK UNIFIED IDEOGRAPH-41FB	[FB80 C1FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_460)
{
    // 41FB 003F;	
    // (䇻) CJK UNIFIED IDEOGRAPH-41FB	[FB80 C1FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_461)
{
    // 41FB 0061;	
    // (䇻) CJK UNIFIED IDEOGRAPH-41FB	[FB80 C1FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_462)
{
    // 41FB 0041;	
    // (䇻) CJK UNIFIED IDEOGRAPH-41FB	[FB80 C1FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_463)
{
    // 41FB 0062;	
    // (䇻) CJK UNIFIED IDEOGRAPH-41FB	[FB80 C1FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_464)
{
    // 41FC 0021;	
    // (䇼) CJK UNIFIED IDEOGRAPH-41FC	[FB80 C1FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_465)
{
    // 41FC 003F;	
    // (䇼) CJK UNIFIED IDEOGRAPH-41FC	[FB80 C1FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_466)
{
    // 41FC 0061;	
    // (䇼) CJK UNIFIED IDEOGRAPH-41FC	[FB80 C1FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_467)
{
    // 41FC 0041;	
    // (䇼) CJK UNIFIED IDEOGRAPH-41FC	[FB80 C1FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_468)
{
    // 41FC 0062;	
    // (䇼) CJK UNIFIED IDEOGRAPH-41FC	[FB80 C1FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_469)
{
    // 41FD 0021;	
    // (䇽) CJK UNIFIED IDEOGRAPH-41FD	[FB80 C1FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_470)
{
    // 41FD 003F;	
    // (䇽) CJK UNIFIED IDEOGRAPH-41FD	[FB80 C1FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_471)
{
    // 41FD 0061;	
    // (䇽) CJK UNIFIED IDEOGRAPH-41FD	[FB80 C1FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_472)
{
    // 41FD 0041;	
    // (䇽) CJK UNIFIED IDEOGRAPH-41FD	[FB80 C1FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_473)
{
    // 41FD 0062;	
    // (䇽) CJK UNIFIED IDEOGRAPH-41FD	[FB80 C1FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_474)
{
    // 41FE 0021;	
    // (䇾) CJK UNIFIED IDEOGRAPH-41FE	[FB80 C1FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_475)
{
    // 41FE 003F;	
    // (䇾) CJK UNIFIED IDEOGRAPH-41FE	[FB80 C1FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_476)
{
    // 41FE 0061;	
    // (䇾) CJK UNIFIED IDEOGRAPH-41FE	[FB80 C1FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_477)
{
    // 41FE 0041;	
    // (䇾) CJK UNIFIED IDEOGRAPH-41FE	[FB80 C1FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_478)
{
    // 41FE 0062;	
    // (䇾) CJK UNIFIED IDEOGRAPH-41FE	[FB80 C1FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_479)
{
    // 41FF 0021;	
    // (䇿) CJK UNIFIED IDEOGRAPH-41FF	[FB80 C1FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_480)
{
    // 41FF 003F;	
    // (䇿) CJK UNIFIED IDEOGRAPH-41FF	[FB80 C1FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC1FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_481)
{
    // 41FF 0061;	
    // (䇿) CJK UNIFIED IDEOGRAPH-41FF	[FB80 C1FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_482)
{
    // 41FF 0041;	
    // (䇿) CJK UNIFIED IDEOGRAPH-41FF	[FB80 C1FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x41FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_483)
{
    // 41FF 0062;	
    // (䇿) CJK UNIFIED IDEOGRAPH-41FF	[FB80 C1FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x41FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC1FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_484)
{
    // 4200 0021;	
    // (䈀) CJK UNIFIED IDEOGRAPH-4200	[FB80 C200 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4200, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_485)
{
    // 4200 003F;	
    // (䈀) CJK UNIFIED IDEOGRAPH-4200	[FB80 C200 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4200, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_486)
{
    // 4200 0061;	
    // (䈀) CJK UNIFIED IDEOGRAPH-4200	[FB80 C200 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4200, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_487)
{
    // 4200 0041;	
    // (䈀) CJK UNIFIED IDEOGRAPH-4200	[FB80 C200 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4200, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_488)
{
    // 4200 0062;	
    // (䈀) CJK UNIFIED IDEOGRAPH-4200	[FB80 C200 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4200, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_489)
{
    // 4201 0021;	
    // (䈁) CJK UNIFIED IDEOGRAPH-4201	[FB80 C201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4201, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_490)
{
    // 4201 003F;	
    // (䈁) CJK UNIFIED IDEOGRAPH-4201	[FB80 C201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4201, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_491)
{
    // 4201 0061;	
    // (䈁) CJK UNIFIED IDEOGRAPH-4201	[FB80 C201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4201, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_492)
{
    // 4201 0041;	
    // (䈁) CJK UNIFIED IDEOGRAPH-4201	[FB80 C201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4201, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_493)
{
    // 4201 0062;	
    // (䈁) CJK UNIFIED IDEOGRAPH-4201	[FB80 C201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4201, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_494)
{
    // 4202 0021;	
    // (䈂) CJK UNIFIED IDEOGRAPH-4202	[FB80 C202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4202, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_495)
{
    // 2F960 0021;	
    // (䈂) CJK COMPATIBILITY IDEOGRAPH-2F960	[FB80 C202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F960, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_496)
{
    // 4202 003F;	
    // (䈂) CJK UNIFIED IDEOGRAPH-4202	[FB80 C202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4202, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_497)
{
    // 2F960 003F;	
    // (䈂) CJK COMPATIBILITY IDEOGRAPH-2F960	[FB80 C202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F960, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_498)
{
    // 4202 0061;	
    // (䈂) CJK UNIFIED IDEOGRAPH-4202	[FB80 C202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4202, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_362_499)
{
    // 2F960 0061;	
    // (䈂) CJK COMPATIBILITY IDEOGRAPH-2F960	[FB80 C202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F960, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

