// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_003_000)
{
    // 301C 0041;	
    // (〜) WAVE DASH	[021E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x301C, 0x0041 };
    uint32_t const ces[9] = { 0x021E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_001)
{
    // 301C 0062;	
    // (〜) WAVE DASH	[021E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301C, 0x0062 };
    uint32_t const ces[9] = { 0x021E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_002)
{
    // 3030 0021;	
    // (〰) WAVY DASH	[021F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3030, 0x0021 };
    uint32_t const ces[9] = { 0x021F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_003)
{
    // 3030 003F;	
    // (〰) WAVY DASH	[021F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3030, 0x003F };
    uint32_t const ces[9] = { 0x021F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_004)
{
    // 3030 0061;	
    // (〰) WAVY DASH	[021F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3030, 0x0061 };
    uint32_t const ces[9] = { 0x021F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_005)
{
    // 3030 0041;	
    // (〰) WAVY DASH	[021F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3030, 0x0041 };
    uint32_t const ces[9] = { 0x021F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_006)
{
    // 3030 0062;	
    // (〰) WAVY DASH	[021F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3030, 0x0062 };
    uint32_t const ces[9] = { 0x021F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_007)
{
    // 30A0 0021;	
    // (゠) KATAKANA-HIRAGANA DOUBLE HYPHEN	[0220 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30A0, 0x0021 };
    uint32_t const ces[9] = { 0x0220, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_008)
{
    // 30A0 003F;	
    // (゠) KATAKANA-HIRAGANA DOUBLE HYPHEN	[0220 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30A0, 0x003F };
    uint32_t const ces[9] = { 0x0220, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_009)
{
    // 30A0 0061;	
    // (゠) KATAKANA-HIRAGANA DOUBLE HYPHEN	[0220 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30A0, 0x0061 };
    uint32_t const ces[9] = { 0x0220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_010)
{
    // 30A0 0041;	
    // (゠) KATAKANA-HIRAGANA DOUBLE HYPHEN	[0220 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x30A0, 0x0041 };
    uint32_t const ces[9] = { 0x0220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_011)
{
    // 30A0 0062;	
    // (゠) KATAKANA-HIRAGANA DOUBLE HYPHEN	[0220 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30A0, 0x0062 };
    uint32_t const ces[9] = { 0x0220, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_012)
{
    // 30FB 0021;	
    // (・) KATAKANA MIDDLE DOT	[0221 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FB, 0x0021 };
    uint32_t const ces[9] = { 0x0221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_013)
{
    // FF65 0021;	
    // (･) HALFWIDTH KATAKANA MIDDLE DOT	[0221 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF65, 0x0021 };
    uint32_t const ces[9] = { 0x0221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_014)
{
    // 30FB 003F;	
    // (・) KATAKANA MIDDLE DOT	[0221 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FB, 0x003F };
    uint32_t const ces[9] = { 0x0221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_015)
{
    // FF65 003F;	
    // (･) HALFWIDTH KATAKANA MIDDLE DOT	[0221 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF65, 0x003F };
    uint32_t const ces[9] = { 0x0221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_016)
{
    // 30FB 0061;	
    // (・) KATAKANA MIDDLE DOT	[0221 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FB, 0x0061 };
    uint32_t const ces[9] = { 0x0221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_017)
{
    // 30FB 0041;	
    // (・) KATAKANA MIDDLE DOT	[0221 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x30FB, 0x0041 };
    uint32_t const ces[9] = { 0x0221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_018)
{
    // FF65 0061;	
    // (･) HALFWIDTH KATAKANA MIDDLE DOT	[0221 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF65, 0x0061 };
    uint32_t const ces[9] = { 0x0221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_019)
{
    // FF65 0041;	
    // (･) HALFWIDTH KATAKANA MIDDLE DOT	[0221 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF65, 0x0041 };
    uint32_t const ces[9] = { 0x0221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_020)
{
    // 30FB 0062;	
    // (・) KATAKANA MIDDLE DOT	[0221 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FB, 0x0062 };
    uint32_t const ces[9] = { 0x0221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_021)
{
    // FF65 0062;	
    // (･) HALFWIDTH KATAKANA MIDDLE DOT	[0221 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF65, 0x0062 };
    uint32_t const ces[9] = { 0x0221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_022)
{
    // 002C 0021;	
    // (',') COMMA	[0222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002C, 0x0021 };
    uint32_t const ces[9] = { 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_023)
{
    // FF0C 0021;	
    // (，) FULLWIDTH COMMA	[0222 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0C, 0x0021 };
    uint32_t const ces[9] = { 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_024)
{
    // FE50 0021;	
    // (﹐) SMALL COMMA	[0222 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE50, 0x0021 };
    uint32_t const ces[9] = { 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_025)
{
    // FE10 0021;	
    // (︐) PRESENTATION FORM FOR VERTICAL COMMA	[0222 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE10, 0x0021 };
    uint32_t const ces[9] = { 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_026)
{
    // 002C 003F;	
    // (',') COMMA	[0222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002C, 0x003F };
    uint32_t const ces[9] = { 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_027)
{
    // FF0C 003F;	
    // (，) FULLWIDTH COMMA	[0222 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0C, 0x003F };
    uint32_t const ces[9] = { 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_028)
{
    // FE50 003F;	
    // (﹐) SMALL COMMA	[0222 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE50, 0x003F };
    uint32_t const ces[9] = { 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_029)
{
    // FE10 003F;	
    // (︐) PRESENTATION FORM FOR VERTICAL COMMA	[0222 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE10, 0x003F };
    uint32_t const ces[9] = { 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_030)
{
    // 002C 0061;	
    // (',') COMMA	[0222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002C, 0x0061 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_031)
{
    // 002C 0041;	
    // (',') COMMA	[0222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002C, 0x0041 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_032)
{
    // FF0C 0061;	
    // (，) FULLWIDTH COMMA	[0222 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0C, 0x0061 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_033)
{
    // FF0C 0041;	
    // (，) FULLWIDTH COMMA	[0222 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0C, 0x0041 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_034)
{
    // FE50 0061;	
    // (﹐) SMALL COMMA	[0222 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE50, 0x0061 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_035)
{
    // FE50 0041;	
    // (﹐) SMALL COMMA	[0222 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE50, 0x0041 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_036)
{
    // FE10 0061;	
    // (︐) PRESENTATION FORM FOR VERTICAL COMMA	[0222 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE10, 0x0061 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_037)
{
    // FE10 0041;	
    // (︐) PRESENTATION FORM FOR VERTICAL COMMA	[0222 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE10, 0x0041 };
    uint32_t const ces[9] = { 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_038)
{
    // 002C 0062;	
    // (',') COMMA	[0222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002C, 0x0062 };
    uint32_t const ces[9] = { 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_039)
{
    // FF0C 0062;	
    // (，) FULLWIDTH COMMA	[0222 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0C, 0x0062 };
    uint32_t const ces[9] = { 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_040)
{
    // FE50 0062;	
    // (﹐) SMALL COMMA	[0222 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE50, 0x0062 };
    uint32_t const ces[9] = { 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_041)
{
    // FE10 0062;	
    // (︐) PRESENTATION FORM FOR VERTICAL COMMA	[0222 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE10, 0x0062 };
    uint32_t const ces[9] = { 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_042)
{
    // 2E34 0021;	
    // (⸴) RAISED COMMA	[0223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E34, 0x0021 };
    uint32_t const ces[9] = { 0x0223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_043)
{
    // 2E34 003F;	
    // (⸴) RAISED COMMA	[0223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E34, 0x003F };
    uint32_t const ces[9] = { 0x0223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_044)
{
    // 2E34 0061;	
    // (⸴) RAISED COMMA	[0223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E34, 0x0061 };
    uint32_t const ces[9] = { 0x0223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_045)
{
    // 2E34 0041;	
    // (⸴) RAISED COMMA	[0223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E34, 0x0041 };
    uint32_t const ces[9] = { 0x0223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_046)
{
    // 2E34 0062;	
    // (⸴) RAISED COMMA	[0223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E34, 0x0062 };
    uint32_t const ces[9] = { 0x0223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_047)
{
    // 2E32 0021;	
    // (⸲) TURNED COMMA	[0224 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E32, 0x0021 };
    uint32_t const ces[9] = { 0x0224, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_048)
{
    // 2E32 003F;	
    // (⸲) TURNED COMMA	[0224 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E32, 0x003F };
    uint32_t const ces[9] = { 0x0224, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_049)
{
    // 2E32 0061;	
    // (⸲) TURNED COMMA	[0224 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E32, 0x0061 };
    uint32_t const ces[9] = { 0x0224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_050)
{
    // 2E32 0041;	
    // (⸲) TURNED COMMA	[0224 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E32, 0x0041 };
    uint32_t const ces[9] = { 0x0224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_051)
{
    // 2E32 0062;	
    // (⸲) TURNED COMMA	[0224 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E32, 0x0062 };
    uint32_t const ces[9] = { 0x0224, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_052)
{
    // 2E41 0021;	
    // (⹁) REVERSED COMMA	[0225 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E41, 0x0021 };
    uint32_t const ces[9] = { 0x0225, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_053)
{
    // 2E41 003F;	
    // (⹁) REVERSED COMMA	[0225 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E41, 0x003F };
    uint32_t const ces[9] = { 0x0225, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_054)
{
    // 2E41 0061;	
    // (⹁) REVERSED COMMA	[0225 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E41, 0x0061 };
    uint32_t const ces[9] = { 0x0225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_055)
{
    // 2E41 0041;	
    // (⹁) REVERSED COMMA	[0225 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E41, 0x0041 };
    uint32_t const ces[9] = { 0x0225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_056)
{
    // 2E41 0062;	
    // (⹁) REVERSED COMMA	[0225 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E41, 0x0062 };
    uint32_t const ces[9] = { 0x0225, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_057)
{
    // 055D 0021;	
    // (՝) ARMENIAN COMMA	[0226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055D, 0x0021 };
    uint32_t const ces[9] = { 0x0226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_058)
{
    // 055D 003F;	
    // (՝) ARMENIAN COMMA	[0226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055D, 0x003F };
    uint32_t const ces[9] = { 0x0226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_059)
{
    // 055D 0061;	
    // (՝) ARMENIAN COMMA	[0226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055D, 0x0061 };
    uint32_t const ces[9] = { 0x0226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_060)
{
    // 055D 0041;	
    // (՝) ARMENIAN COMMA	[0226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055D, 0x0041 };
    uint32_t const ces[9] = { 0x0226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_061)
{
    // 055D 0062;	
    // (՝) ARMENIAN COMMA	[0226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055D, 0x0062 };
    uint32_t const ces[9] = { 0x0226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_062)
{
    // 060C 0021;	
    // (،) ARABIC COMMA	[0227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060C, 0x0021 };
    uint32_t const ces[9] = { 0x0227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_063)
{
    // 060C 003F;	
    // (،) ARABIC COMMA	[0227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060C, 0x003F };
    uint32_t const ces[9] = { 0x0227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_064)
{
    // 060C 0061;	
    // (،) ARABIC COMMA	[0227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060C, 0x0061 };
    uint32_t const ces[9] = { 0x0227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_065)
{
    // 060C 0041;	
    // (،) ARABIC COMMA	[0227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x060C, 0x0041 };
    uint32_t const ces[9] = { 0x0227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_066)
{
    // 060C 0062;	
    // (،) ARABIC COMMA	[0227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060C, 0x0062 };
    uint32_t const ces[9] = { 0x0227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_067)
{
    // 060D 0021;	
    // (‎‎؍‎‎) ARABIC DATE SEPARATOR	[0228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060D, 0x0021 };
    uint32_t const ces[9] = { 0x0228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_068)
{
    // 060D 003F;	
    // (‎‎؍‎‎) ARABIC DATE SEPARATOR	[0228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060D, 0x003F };
    uint32_t const ces[9] = { 0x0228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_069)
{
    // 060D 0061;	
    // (‎‎؍‎‎) ARABIC DATE SEPARATOR	[0228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060D, 0x0061 };
    uint32_t const ces[9] = { 0x0228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_070)
{
    // 060D 0041;	
    // (‎‎؍‎‎) ARABIC DATE SEPARATOR	[0228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x060D, 0x0041 };
    uint32_t const ces[9] = { 0x0228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_071)
{
    // 060D 0062;	
    // (‎‎؍‎‎) ARABIC DATE SEPARATOR	[0228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060D, 0x0062 };
    uint32_t const ces[9] = { 0x0228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_072)
{
    // 066B 0021;	
    // (‎٫‎) ARABIC DECIMAL SEPARATOR	[0229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066B, 0x0021 };
    uint32_t const ces[9] = { 0x0229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_073)
{
    // 066B 003F;	
    // (‎٫‎) ARABIC DECIMAL SEPARATOR	[0229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066B, 0x003F };
    uint32_t const ces[9] = { 0x0229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_074)
{
    // 066B 0061;	
    // (‎٫‎) ARABIC DECIMAL SEPARATOR	[0229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066B, 0x0061 };
    uint32_t const ces[9] = { 0x0229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_075)
{
    // 066B 0041;	
    // (‎٫‎) ARABIC DECIMAL SEPARATOR	[0229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x066B, 0x0041 };
    uint32_t const ces[9] = { 0x0229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_076)
{
    // 066B 0062;	
    // (‎٫‎) ARABIC DECIMAL SEPARATOR	[0229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066B, 0x0062 };
    uint32_t const ces[9] = { 0x0229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_077)
{
    // 066C 0021;	
    // (‎٬‎) ARABIC THOUSANDS SEPARATOR	[022A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066C, 0x0021 };
    uint32_t const ces[9] = { 0x022A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_078)
{
    // 066C 003F;	
    // (‎٬‎) ARABIC THOUSANDS SEPARATOR	[022A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066C, 0x003F };
    uint32_t const ces[9] = { 0x022A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_079)
{
    // 066C 0061;	
    // (‎٬‎) ARABIC THOUSANDS SEPARATOR	[022A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066C, 0x0061 };
    uint32_t const ces[9] = { 0x022A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_080)
{
    // 066C 0041;	
    // (‎٬‎) ARABIC THOUSANDS SEPARATOR	[022A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x066C, 0x0041 };
    uint32_t const ces[9] = { 0x022A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_081)
{
    // 066C 0062;	
    // (‎٬‎) ARABIC THOUSANDS SEPARATOR	[022A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066C, 0x0062 };
    uint32_t const ces[9] = { 0x022A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_082)
{
    // 07F8 0021;	
    // (߸) NKO COMMA	[022B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F8, 0x0021 };
    uint32_t const ces[9] = { 0x022B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_083)
{
    // 07F8 003F;	
    // (߸) NKO COMMA	[022B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F8, 0x003F };
    uint32_t const ces[9] = { 0x022B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_084)
{
    // 07F8 0061;	
    // (߸) NKO COMMA	[022B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F8, 0x0061 };
    uint32_t const ces[9] = { 0x022B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_085)
{
    // 07F8 0041;	
    // (߸) NKO COMMA	[022B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07F8, 0x0041 };
    uint32_t const ces[9] = { 0x022B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_086)
{
    // 07F8 0062;	
    // (߸) NKO COMMA	[022B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F8, 0x0062 };
    uint32_t const ces[9] = { 0x022B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_087)
{
    // 1802 0021;	
    // (᠂) MONGOLIAN COMMA	[022C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1802, 0x0021 };
    uint32_t const ces[9] = { 0x022C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_088)
{
    // 1802 003F;	
    // (᠂) MONGOLIAN COMMA	[022C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1802, 0x003F };
    uint32_t const ces[9] = { 0x022C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_089)
{
    // 1802 0061;	
    // (᠂) MONGOLIAN COMMA	[022C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1802, 0x0061 };
    uint32_t const ces[9] = { 0x022C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_090)
{
    // 1802 0041;	
    // (᠂) MONGOLIAN COMMA	[022C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1802, 0x0041 };
    uint32_t const ces[9] = { 0x022C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_091)
{
    // 1802 0062;	
    // (᠂) MONGOLIAN COMMA	[022C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1802, 0x0062 };
    uint32_t const ces[9] = { 0x022C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_092)
{
    // 1808 0021;	
    // (᠈) MONGOLIAN MANCHU COMMA	[022D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1808, 0x0021 };
    uint32_t const ces[9] = { 0x022D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_093)
{
    // 1808 003F;	
    // (᠈) MONGOLIAN MANCHU COMMA	[022D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1808, 0x003F };
    uint32_t const ces[9] = { 0x022D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_094)
{
    // 1808 0061;	
    // (᠈) MONGOLIAN MANCHU COMMA	[022D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1808, 0x0061 };
    uint32_t const ces[9] = { 0x022D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_095)
{
    // 1808 0041;	
    // (᠈) MONGOLIAN MANCHU COMMA	[022D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1808, 0x0041 };
    uint32_t const ces[9] = { 0x022D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_096)
{
    // 1808 0062;	
    // (᠈) MONGOLIAN MANCHU COMMA	[022D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1808, 0x0062 };
    uint32_t const ces[9] = { 0x022D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_097)
{
    // A4FE 0021;	
    // (꓾) LISU PUNCTUATION COMMA	[022E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FE, 0x0021 };
    uint32_t const ces[9] = { 0x022E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_098)
{
    // A4FE 003F;	
    // (꓾) LISU PUNCTUATION COMMA	[022E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FE, 0x003F };
    uint32_t const ces[9] = { 0x022E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_099)
{
    // A4FE 0061;	
    // (꓾) LISU PUNCTUATION COMMA	[022E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FE, 0x0061 };
    uint32_t const ces[9] = { 0x022E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_100)
{
    // A4FE 0041;	
    // (꓾) LISU PUNCTUATION COMMA	[022E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4FE, 0x0041 };
    uint32_t const ces[9] = { 0x022E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_101)
{
    // A4FE 0062;	
    // (꓾) LISU PUNCTUATION COMMA	[022E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FE, 0x0062 };
    uint32_t const ces[9] = { 0x022E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_102)
{
    // A60D 0021;	
    // (꘍) VAI COMMA	[022F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60D, 0x0021 };
    uint32_t const ces[9] = { 0x022F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_103)
{
    // A60D 003F;	
    // (꘍) VAI COMMA	[022F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60D, 0x003F };
    uint32_t const ces[9] = { 0x022F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_104)
{
    // A60D 0061;	
    // (꘍) VAI COMMA	[022F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60D, 0x0061 };
    uint32_t const ces[9] = { 0x022F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_105)
{
    // A60D 0041;	
    // (꘍) VAI COMMA	[022F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA60D, 0x0041 };
    uint32_t const ces[9] = { 0x022F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_106)
{
    // A60D 0062;	
    // (꘍) VAI COMMA	[022F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60D, 0x0062 };
    uint32_t const ces[9] = { 0x022F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_107)
{
    // A6F5 0021;	
    // (꛵) BAMUM COMMA	[0230 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F5, 0x0021 };
    uint32_t const ces[9] = { 0x0230, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_108)
{
    // A6F5 003F;	
    // (꛵) BAMUM COMMA	[0230 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F5, 0x003F };
    uint32_t const ces[9] = { 0x0230, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_109)
{
    // A6F5 0061;	
    // (꛵) BAMUM COMMA	[0230 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F5, 0x0061 };
    uint32_t const ces[9] = { 0x0230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_110)
{
    // A6F5 0041;	
    // (꛵) BAMUM COMMA	[0230 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6F5, 0x0041 };
    uint32_t const ces[9] = { 0x0230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_111)
{
    // A6F5 0062;	
    // (꛵) BAMUM COMMA	[0230 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F5, 0x0062 };
    uint32_t const ces[9] = { 0x0230, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_112)
{
    // 3001 0021;	
    // (、) IDEOGRAPHIC COMMA	[0231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3001, 0x0021 };
    uint32_t const ces[9] = { 0x0231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_113)
{
    // FE51 0021;	
    // (﹑) SMALL IDEOGRAPHIC COMMA	[0231 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE51, 0x0021 };
    uint32_t const ces[9] = { 0x0231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_114)
{
    // FF64 0021;	
    // (､) HALFWIDTH IDEOGRAPHIC COMMA	[0231 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF64, 0x0021 };
    uint32_t const ces[9] = { 0x0231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_115)
{
    // FE11 0021;	
    // (︑) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA	[0231 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE11, 0x0021 };
    uint32_t const ces[9] = { 0x0231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_116)
{
    // 3001 003F;	
    // (、) IDEOGRAPHIC COMMA	[0231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3001, 0x003F };
    uint32_t const ces[9] = { 0x0231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_117)
{
    // FE51 003F;	
    // (﹑) SMALL IDEOGRAPHIC COMMA	[0231 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE51, 0x003F };
    uint32_t const ces[9] = { 0x0231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_118)
{
    // FF64 003F;	
    // (､) HALFWIDTH IDEOGRAPHIC COMMA	[0231 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF64, 0x003F };
    uint32_t const ces[9] = { 0x0231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_119)
{
    // FE11 003F;	
    // (︑) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA	[0231 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE11, 0x003F };
    uint32_t const ces[9] = { 0x0231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_120)
{
    // 3001 0061;	
    // (、) IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3001, 0x0061 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_121)
{
    // 3001 0041;	
    // (、) IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3001, 0x0041 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_122)
{
    // FE51 0061;	
    // (﹑) SMALL IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE51, 0x0061 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_123)
{
    // FE51 0041;	
    // (﹑) SMALL IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE51, 0x0041 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_124)
{
    // FF64 0061;	
    // (､) HALFWIDTH IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF64, 0x0061 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_125)
{
    // FF64 0041;	
    // (､) HALFWIDTH IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF64, 0x0041 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_126)
{
    // FE11 0061;	
    // (︑) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE11, 0x0061 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_127)
{
    // FE11 0041;	
    // (︑) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA	[0231 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE11, 0x0041 };
    uint32_t const ces[9] = { 0x0231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_128)
{
    // 3001 0062;	
    // (、) IDEOGRAPHIC COMMA	[0231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3001, 0x0062 };
    uint32_t const ces[9] = { 0x0231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_129)
{
    // FE51 0062;	
    // (﹑) SMALL IDEOGRAPHIC COMMA	[0231 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE51, 0x0062 };
    uint32_t const ces[9] = { 0x0231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_130)
{
    // FF64 0062;	
    // (､) HALFWIDTH IDEOGRAPHIC COMMA	[0231 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF64, 0x0062 };
    uint32_t const ces[9] = { 0x0231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_131)
{
    // FE11 0062;	
    // (︑) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA	[0231 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE11, 0x0062 };
    uint32_t const ces[9] = { 0x0231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_132)
{
    // FE45 0021;	
    // (﹅) SESAME DOT	[0232 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE45, 0x0021 };
    uint32_t const ces[9] = { 0x0232, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_133)
{
    // FE45 003F;	
    // (﹅) SESAME DOT	[0232 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE45, 0x003F };
    uint32_t const ces[9] = { 0x0232, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_134)
{
    // FE45 0061;	
    // (﹅) SESAME DOT	[0232 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE45, 0x0061 };
    uint32_t const ces[9] = { 0x0232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_135)
{
    // FE45 0041;	
    // (﹅) SESAME DOT	[0232 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE45, 0x0041 };
    uint32_t const ces[9] = { 0x0232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_136)
{
    // FE45 0062;	
    // (﹅) SESAME DOT	[0232 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE45, 0x0062 };
    uint32_t const ces[9] = { 0x0232, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_137)
{
    // FE46 0021;	
    // (﹆) WHITE SESAME DOT	[0233 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE46, 0x0021 };
    uint32_t const ces[9] = { 0x0233, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_138)
{
    // FE46 003F;	
    // (﹆) WHITE SESAME DOT	[0233 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE46, 0x003F };
    uint32_t const ces[9] = { 0x0233, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_139)
{
    // FE46 0061;	
    // (﹆) WHITE SESAME DOT	[0233 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE46, 0x0061 };
    uint32_t const ces[9] = { 0x0233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_140)
{
    // FE46 0041;	
    // (﹆) WHITE SESAME DOT	[0233 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE46, 0x0041 };
    uint32_t const ces[9] = { 0x0233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_141)
{
    // FE46 0062;	
    // (﹆) WHITE SESAME DOT	[0233 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE46, 0x0062 };
    uint32_t const ces[9] = { 0x0233, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_142)
{
    // 003B 0021;	
    // (';') SEMICOLON	[0234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003B, 0x0021 };
    uint32_t const ces[9] = { 0x0234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_143)
{
    // 037E 0021;	
    // (';') GREEK QUESTION MARK	[0234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037E, 0x0021 };
    uint32_t const ces[9] = { 0x0234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_144)
{
    // FF1B 0021;	
    // (；) FULLWIDTH SEMICOLON	[0234 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1B, 0x0021 };
    uint32_t const ces[9] = { 0x0234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_145)
{
    // FE54 0021;	
    // (﹔) SMALL SEMICOLON	[0234 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE54, 0x0021 };
    uint32_t const ces[9] = { 0x0234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_146)
{
    // FE14 0021;	
    // (︔) PRESENTATION FORM FOR VERTICAL SEMICOLON	[0234 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE14, 0x0021 };
    uint32_t const ces[9] = { 0x0234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_147)
{
    // 003B 003F;	
    // (';') SEMICOLON	[0234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003B, 0x003F };
    uint32_t const ces[9] = { 0x0234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_148)
{
    // 037E 003F;	
    // (';') GREEK QUESTION MARK	[0234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037E, 0x003F };
    uint32_t const ces[9] = { 0x0234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_149)
{
    // FF1B 003F;	
    // (；) FULLWIDTH SEMICOLON	[0234 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1B, 0x003F };
    uint32_t const ces[9] = { 0x0234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_150)
{
    // FE54 003F;	
    // (﹔) SMALL SEMICOLON	[0234 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE54, 0x003F };
    uint32_t const ces[9] = { 0x0234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_151)
{
    // FE14 003F;	
    // (︔) PRESENTATION FORM FOR VERTICAL SEMICOLON	[0234 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE14, 0x003F };
    uint32_t const ces[9] = { 0x0234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_152)
{
    // 003B 0061;	
    // (';') SEMICOLON	[0234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003B, 0x0061 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_153)
{
    // 037E 0061;	
    // (';') GREEK QUESTION MARK	[0234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037E, 0x0061 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_154)
{
    // 003B 0041;	
    // (';') SEMICOLON	[0234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003B, 0x0041 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_155)
{
    // 037E 0041;	
    // (';') GREEK QUESTION MARK	[0234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x037E, 0x0041 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_156)
{
    // FF1B 0061;	
    // (；) FULLWIDTH SEMICOLON	[0234 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1B, 0x0061 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_157)
{
    // FF1B 0041;	
    // (；) FULLWIDTH SEMICOLON	[0234 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1B, 0x0041 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_158)
{
    // FE54 0061;	
    // (﹔) SMALL SEMICOLON	[0234 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE54, 0x0061 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_159)
{
    // FE54 0041;	
    // (﹔) SMALL SEMICOLON	[0234 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE54, 0x0041 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_160)
{
    // FE14 0061;	
    // (︔) PRESENTATION FORM FOR VERTICAL SEMICOLON	[0234 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE14, 0x0061 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_161)
{
    // FE14 0041;	
    // (︔) PRESENTATION FORM FOR VERTICAL SEMICOLON	[0234 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE14, 0x0041 };
    uint32_t const ces[9] = { 0x0234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_162)
{
    // 003B 0062;	
    // (';') SEMICOLON	[0234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003B, 0x0062 };
    uint32_t const ces[9] = { 0x0234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_163)
{
    // 037E 0062;	
    // (';') GREEK QUESTION MARK	[0234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037E, 0x0062 };
    uint32_t const ces[9] = { 0x0234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_164)
{
    // FF1B 0062;	
    // (；) FULLWIDTH SEMICOLON	[0234 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1B, 0x0062 };
    uint32_t const ces[9] = { 0x0234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_165)
{
    // FE54 0062;	
    // (﹔) SMALL SEMICOLON	[0234 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE54, 0x0062 };
    uint32_t const ces[9] = { 0x0234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_166)
{
    // FE14 0062;	
    // (︔) PRESENTATION FORM FOR VERTICAL SEMICOLON	[0234 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE14, 0x0062 };
    uint32_t const ces[9] = { 0x0234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_167)
{
    // 061B 0021;	
    // (‎‎؛‎‎) ARABIC SEMICOLON	[0235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061B, 0x0021 };
    uint32_t const ces[9] = { 0x0235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_168)
{
    // 061B 003F;	
    // (‎‎؛‎‎) ARABIC SEMICOLON	[0235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061B, 0x003F };
    uint32_t const ces[9] = { 0x0235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_169)
{
    // 061B 0061;	
    // (‎‎؛‎‎) ARABIC SEMICOLON	[0235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061B, 0x0061 };
    uint32_t const ces[9] = { 0x0235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_170)
{
    // 061B 0041;	
    // (‎‎؛‎‎) ARABIC SEMICOLON	[0235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x061B, 0x0041 };
    uint32_t const ces[9] = { 0x0235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_171)
{
    // 061B 0062;	
    // (‎‎؛‎‎) ARABIC SEMICOLON	[0235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061B, 0x0062 };
    uint32_t const ces[9] = { 0x0235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_172)
{
    // 204F 0021;	
    // (⁏) REVERSED SEMICOLON	[0236 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204F, 0x0021 };
    uint32_t const ces[9] = { 0x0236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_173)
{
    // 204F 003F;	
    // (⁏) REVERSED SEMICOLON	[0236 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204F, 0x003F };
    uint32_t const ces[9] = { 0x0236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_174)
{
    // 204F 0061;	
    // (⁏) REVERSED SEMICOLON	[0236 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204F, 0x0061 };
    uint32_t const ces[9] = { 0x0236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_175)
{
    // 204F 0041;	
    // (⁏) REVERSED SEMICOLON	[0236 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204F, 0x0041 };
    uint32_t const ces[9] = { 0x0236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_176)
{
    // 204F 0062;	
    // (⁏) REVERSED SEMICOLON	[0236 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204F, 0x0062 };
    uint32_t const ces[9] = { 0x0236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_177)
{
    // 2E35 0021;	
    // (⸵) TURNED SEMICOLON	[0237 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E35, 0x0021 };
    uint32_t const ces[9] = { 0x0237, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_178)
{
    // 2E35 003F;	
    // (⸵) TURNED SEMICOLON	[0237 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E35, 0x003F };
    uint32_t const ces[9] = { 0x0237, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_179)
{
    // 2E35 0061;	
    // (⸵) TURNED SEMICOLON	[0237 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E35, 0x0061 };
    uint32_t const ces[9] = { 0x0237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_180)
{
    // 2E35 0041;	
    // (⸵) TURNED SEMICOLON	[0237 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E35, 0x0041 };
    uint32_t const ces[9] = { 0x0237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_181)
{
    // 2E35 0062;	
    // (⸵) TURNED SEMICOLON	[0237 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E35, 0x0062 };
    uint32_t const ces[9] = { 0x0237, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_182)
{
    // A6F6 0021;	
    // (꛶) BAMUM SEMICOLON	[0238 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F6, 0x0021 };
    uint32_t const ces[9] = { 0x0238, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_183)
{
    // A6F6 003F;	
    // (꛶) BAMUM SEMICOLON	[0238 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F6, 0x003F };
    uint32_t const ces[9] = { 0x0238, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_184)
{
    // A6F6 0061;	
    // (꛶) BAMUM SEMICOLON	[0238 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F6, 0x0061 };
    uint32_t const ces[9] = { 0x0238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_185)
{
    // A6F6 0041;	
    // (꛶) BAMUM SEMICOLON	[0238 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6F6, 0x0041 };
    uint32_t const ces[9] = { 0x0238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_186)
{
    // A6F6 0062;	
    // (꛶) BAMUM SEMICOLON	[0238 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F6, 0x0062 };
    uint32_t const ces[9] = { 0x0238, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_187)
{
    // 2E49 0021;	
    // (⹉) DOUBLE STACKED COMMA	[0239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E49, 0x0021 };
    uint32_t const ces[9] = { 0x0239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_188)
{
    // 2E49 003F;	
    // (⹉) DOUBLE STACKED COMMA	[0239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E49, 0x003F };
    uint32_t const ces[9] = { 0x0239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_189)
{
    // 2E49 0061;	
    // (⹉) DOUBLE STACKED COMMA	[0239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E49, 0x0061 };
    uint32_t const ces[9] = { 0x0239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_190)
{
    // 2E49 0041;	
    // (⹉) DOUBLE STACKED COMMA	[0239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E49, 0x0041 };
    uint32_t const ces[9] = { 0x0239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_191)
{
    // 2E49 0062;	
    // (⹉) DOUBLE STACKED COMMA	[0239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E49, 0x0062 };
    uint32_t const ces[9] = { 0x0239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_192)
{
    // 2A74 0021;	
    // (⩴) DOUBLE COLON EQUAL	[023A 023A 0631 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A74, 0x0021 };
    uint32_t const ces[15] = { 0x023A, 0x023A, 0x0631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_193)
{
    // 2A74 003F;	
    // (⩴) DOUBLE COLON EQUAL	[023A 023A 0631 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A74, 0x003F };
    uint32_t const ces[15] = { 0x023A, 0x023A, 0x0631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_194)
{
    // 2A74 0061;	
    // (⩴) DOUBLE COLON EQUAL	[023A 023A 0631 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A74, 0x0061 };
    uint32_t const ces[15] = { 0x023A, 0x023A, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_195)
{
    // 2A74 0041;	
    // (⩴) DOUBLE COLON EQUAL	[023A 023A 0631 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2A74, 0x0041 };
    uint32_t const ces[15] = { 0x023A, 0x023A, 0x0631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_196)
{
    // 2A74 0062;	
    // (⩴) DOUBLE COLON EQUAL	[023A 023A 0631 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2A74, 0x0062 };
    uint32_t const ces[15] = { 0x023A, 0x023A, 0x0631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_197)
{
    // 003A 0021;	
    // (':') COLON	[023A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003A, 0x0021 };
    uint32_t const ces[9] = { 0x023A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_198)
{
    // FF1A 0021;	
    // (：) FULLWIDTH COLON	[023A 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1A, 0x0021 };
    uint32_t const ces[9] = { 0x023A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_199)
{
    // FE55 0021;	
    // (﹕) SMALL COLON	[023A 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE55, 0x0021 };
    uint32_t const ces[9] = { 0x023A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_200)
{
    // FE13 0021;	
    // (︓) PRESENTATION FORM FOR VERTICAL COLON	[023A 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE13, 0x0021 };
    uint32_t const ces[9] = { 0x023A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_201)
{
    // 003A 003F;	
    // (':') COLON	[023A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003A, 0x003F };
    uint32_t const ces[9] = { 0x023A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_202)
{
    // FF1A 003F;	
    // (：) FULLWIDTH COLON	[023A 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1A, 0x003F };
    uint32_t const ces[9] = { 0x023A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_203)
{
    // FE55 003F;	
    // (﹕) SMALL COLON	[023A 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE55, 0x003F };
    uint32_t const ces[9] = { 0x023A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_204)
{
    // FE13 003F;	
    // (︓) PRESENTATION FORM FOR VERTICAL COLON	[023A 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE13, 0x003F };
    uint32_t const ces[9] = { 0x023A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_205)
{
    // 003A 0061;	
    // (':') COLON	[023A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003A, 0x0061 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_206)
{
    // 003A 0041;	
    // (':') COLON	[023A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003A, 0x0041 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_207)
{
    // FF1A 0061;	
    // (：) FULLWIDTH COLON	[023A 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1A, 0x0061 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_208)
{
    // FF1A 0041;	
    // (：) FULLWIDTH COLON	[023A 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1A, 0x0041 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_209)
{
    // FE55 0061;	
    // (﹕) SMALL COLON	[023A 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE55, 0x0061 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_210)
{
    // FE55 0041;	
    // (﹕) SMALL COLON	[023A 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE55, 0x0041 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_211)
{
    // FE13 0061;	
    // (︓) PRESENTATION FORM FOR VERTICAL COLON	[023A 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE13, 0x0061 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_212)
{
    // FE13 0041;	
    // (︓) PRESENTATION FORM FOR VERTICAL COLON	[023A 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE13, 0x0041 };
    uint32_t const ces[9] = { 0x023A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_213)
{
    // 003A 0062;	
    // (':') COLON	[023A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003A, 0x0062 };
    uint32_t const ces[9] = { 0x023A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_214)
{
    // FF1A 0062;	
    // (：) FULLWIDTH COLON	[023A 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1A, 0x0062 };
    uint32_t const ces[9] = { 0x023A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_215)
{
    // FE55 0062;	
    // (﹕) SMALL COLON	[023A 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE55, 0x0062 };
    uint32_t const ces[9] = { 0x023A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_216)
{
    // FE13 0062;	
    // (︓) PRESENTATION FORM FOR VERTICAL COLON	[023A 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE13, 0x0062 };
    uint32_t const ces[9] = { 0x023A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_217)
{
    // 0589 0021;	
    // (։) ARMENIAN FULL STOP	[023B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0589, 0x0021 };
    uint32_t const ces[9] = { 0x023B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_218)
{
    // 0589 003F;	
    // (։) ARMENIAN FULL STOP	[023B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0589, 0x003F };
    uint32_t const ces[9] = { 0x023B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_219)
{
    // 0589 0061;	
    // (։) ARMENIAN FULL STOP	[023B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0589, 0x0061 };
    uint32_t const ces[9] = { 0x023B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_220)
{
    // 0589 0041;	
    // (։) ARMENIAN FULL STOP	[023B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0589, 0x0041 };
    uint32_t const ces[9] = { 0x023B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_221)
{
    // 0589 0062;	
    // (։) ARMENIAN FULL STOP	[023B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0589, 0x0062 };
    uint32_t const ces[9] = { 0x023B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_222)
{
    // 061E 0021;	
    // (‎‎؞‎‎) ARABIC TRIPLE DOT PUNCTUATION MARK	[023C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061E, 0x0021 };
    uint32_t const ces[9] = { 0x023C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_223)
{
    // 061E 003F;	
    // (‎‎؞‎‎) ARABIC TRIPLE DOT PUNCTUATION MARK	[023C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061E, 0x003F };
    uint32_t const ces[9] = { 0x023C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_224)
{
    // 061E 0061;	
    // (‎‎؞‎‎) ARABIC TRIPLE DOT PUNCTUATION MARK	[023C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061E, 0x0061 };
    uint32_t const ces[9] = { 0x023C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_225)
{
    // 061E 0041;	
    // (‎‎؞‎‎) ARABIC TRIPLE DOT PUNCTUATION MARK	[023C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x061E, 0x0041 };
    uint32_t const ces[9] = { 0x023C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_226)
{
    // 061E 0062;	
    // (‎‎؞‎‎) ARABIC TRIPLE DOT PUNCTUATION MARK	[023C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061E, 0x0062 };
    uint32_t const ces[9] = { 0x023C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_227)
{
    // 0703 0021;	
    // (‎‎܃‎‎) SYRIAC SUPRALINEAR COLON	[023D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0703, 0x0021 };
    uint32_t const ces[9] = { 0x023D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_228)
{
    // 0703 003F;	
    // (‎‎܃‎‎) SYRIAC SUPRALINEAR COLON	[023D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0703, 0x003F };
    uint32_t const ces[9] = { 0x023D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_229)
{
    // 0703 0061;	
    // (‎‎܃‎‎) SYRIAC SUPRALINEAR COLON	[023D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0703, 0x0061 };
    uint32_t const ces[9] = { 0x023D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_230)
{
    // 0703 0041;	
    // (‎‎܃‎‎) SYRIAC SUPRALINEAR COLON	[023D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0703, 0x0041 };
    uint32_t const ces[9] = { 0x023D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_231)
{
    // 0703 0062;	
    // (‎‎܃‎‎) SYRIAC SUPRALINEAR COLON	[023D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0703, 0x0062 };
    uint32_t const ces[9] = { 0x023D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_232)
{
    // 0704 0021;	
    // (‎‎܄‎‎) SYRIAC SUBLINEAR COLON	[023E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0704, 0x0021 };
    uint32_t const ces[9] = { 0x023E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_233)
{
    // 0704 003F;	
    // (‎‎܄‎‎) SYRIAC SUBLINEAR COLON	[023E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0704, 0x003F };
    uint32_t const ces[9] = { 0x023E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_234)
{
    // 0704 0061;	
    // (‎‎܄‎‎) SYRIAC SUBLINEAR COLON	[023E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0704, 0x0061 };
    uint32_t const ces[9] = { 0x023E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_235)
{
    // 0704 0041;	
    // (‎‎܄‎‎) SYRIAC SUBLINEAR COLON	[023E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0704, 0x0041 };
    uint32_t const ces[9] = { 0x023E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_236)
{
    // 0704 0062;	
    // (‎‎܄‎‎) SYRIAC SUBLINEAR COLON	[023E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0704, 0x0062 };
    uint32_t const ces[9] = { 0x023E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_237)
{
    // 0705 0021;	
    // (‎‎܅‎‎) SYRIAC HORIZONTAL COLON	[023F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0705, 0x0021 };
    uint32_t const ces[9] = { 0x023F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_238)
{
    // 0705 003F;	
    // (‎‎܅‎‎) SYRIAC HORIZONTAL COLON	[023F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0705, 0x003F };
    uint32_t const ces[9] = { 0x023F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_239)
{
    // 0705 0061;	
    // (‎‎܅‎‎) SYRIAC HORIZONTAL COLON	[023F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0705, 0x0061 };
    uint32_t const ces[9] = { 0x023F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_240)
{
    // 0705 0041;	
    // (‎‎܅‎‎) SYRIAC HORIZONTAL COLON	[023F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0705, 0x0041 };
    uint32_t const ces[9] = { 0x023F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_241)
{
    // 0705 0062;	
    // (‎‎܅‎‎) SYRIAC HORIZONTAL COLON	[023F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0705, 0x0062 };
    uint32_t const ces[9] = { 0x023F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_242)
{
    // 0706 0021;	
    // (‎‎܆‎‎) SYRIAC COLON SKEWED LEFT	[0240 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0706, 0x0021 };
    uint32_t const ces[9] = { 0x0240, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_243)
{
    // 0706 003F;	
    // (‎‎܆‎‎) SYRIAC COLON SKEWED LEFT	[0240 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0706, 0x003F };
    uint32_t const ces[9] = { 0x0240, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_244)
{
    // 0706 0061;	
    // (‎‎܆‎‎) SYRIAC COLON SKEWED LEFT	[0240 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0706, 0x0061 };
    uint32_t const ces[9] = { 0x0240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_245)
{
    // 0706 0041;	
    // (‎‎܆‎‎) SYRIAC COLON SKEWED LEFT	[0240 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0706, 0x0041 };
    uint32_t const ces[9] = { 0x0240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_246)
{
    // 0706 0062;	
    // (‎‎܆‎‎) SYRIAC COLON SKEWED LEFT	[0240 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0706, 0x0062 };
    uint32_t const ces[9] = { 0x0240, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_247)
{
    // 0707 0021;	
    // (‎‎܇‎‎) SYRIAC COLON SKEWED RIGHT	[0241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0707, 0x0021 };
    uint32_t const ces[9] = { 0x0241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_248)
{
    // 0707 003F;	
    // (‎‎܇‎‎) SYRIAC COLON SKEWED RIGHT	[0241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0707, 0x003F };
    uint32_t const ces[9] = { 0x0241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_249)
{
    // 0707 0061;	
    // (‎‎܇‎‎) SYRIAC COLON SKEWED RIGHT	[0241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0707, 0x0061 };
    uint32_t const ces[9] = { 0x0241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_250)
{
    // 0707 0041;	
    // (‎‎܇‎‎) SYRIAC COLON SKEWED RIGHT	[0241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0707, 0x0041 };
    uint32_t const ces[9] = { 0x0241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_251)
{
    // 0707 0062;	
    // (‎‎܇‎‎) SYRIAC COLON SKEWED RIGHT	[0241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0707, 0x0062 };
    uint32_t const ces[9] = { 0x0241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_252)
{
    // 0708 0021;	
    // (‎‎܈‎‎) SYRIAC SUPRALINEAR COLON SKEWED LEFT	[0242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0708, 0x0021 };
    uint32_t const ces[9] = { 0x0242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_253)
{
    // 0708 003F;	
    // (‎‎܈‎‎) SYRIAC SUPRALINEAR COLON SKEWED LEFT	[0242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0708, 0x003F };
    uint32_t const ces[9] = { 0x0242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_254)
{
    // 0708 0061;	
    // (‎‎܈‎‎) SYRIAC SUPRALINEAR COLON SKEWED LEFT	[0242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0708, 0x0061 };
    uint32_t const ces[9] = { 0x0242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_255)
{
    // 0708 0041;	
    // (‎‎܈‎‎) SYRIAC SUPRALINEAR COLON SKEWED LEFT	[0242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0708, 0x0041 };
    uint32_t const ces[9] = { 0x0242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_256)
{
    // 0708 0062;	
    // (‎‎܈‎‎) SYRIAC SUPRALINEAR COLON SKEWED LEFT	[0242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0708, 0x0062 };
    uint32_t const ces[9] = { 0x0242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_257)
{
    // 0830 0021;	
    // (‎‎࠰‎‎) SAMARITAN PUNCTUATION NEQUDAA	[0243 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0830, 0x0021 };
    uint32_t const ces[9] = { 0x0243, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_258)
{
    // 0830 003F;	
    // (‎‎࠰‎‎) SAMARITAN PUNCTUATION NEQUDAA	[0243 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0830, 0x003F };
    uint32_t const ces[9] = { 0x0243, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_259)
{
    // 0830 0061;	
    // (‎‎࠰‎‎) SAMARITAN PUNCTUATION NEQUDAA	[0243 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0830, 0x0061 };
    uint32_t const ces[9] = { 0x0243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_260)
{
    // 0830 0041;	
    // (‎‎࠰‎‎) SAMARITAN PUNCTUATION NEQUDAA	[0243 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0830, 0x0041 };
    uint32_t const ces[9] = { 0x0243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_261)
{
    // 0830 0062;	
    // (‎‎࠰‎‎) SAMARITAN PUNCTUATION NEQUDAA	[0243 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0830, 0x0062 };
    uint32_t const ces[9] = { 0x0243, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_262)
{
    // 0831 0021;	
    // (‎‎࠱‎‎) SAMARITAN PUNCTUATION AFSAAQ	[0244 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0831, 0x0021 };
    uint32_t const ces[9] = { 0x0244, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_263)
{
    // 0831 003F;	
    // (‎‎࠱‎‎) SAMARITAN PUNCTUATION AFSAAQ	[0244 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0831, 0x003F };
    uint32_t const ces[9] = { 0x0244, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_264)
{
    // 0831 0061;	
    // (‎‎࠱‎‎) SAMARITAN PUNCTUATION AFSAAQ	[0244 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0831, 0x0061 };
    uint32_t const ces[9] = { 0x0244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_265)
{
    // 0831 0041;	
    // (‎‎࠱‎‎) SAMARITAN PUNCTUATION AFSAAQ	[0244 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0831, 0x0041 };
    uint32_t const ces[9] = { 0x0244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_266)
{
    // 0831 0062;	
    // (‎‎࠱‎‎) SAMARITAN PUNCTUATION AFSAAQ	[0244 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0831, 0x0062 };
    uint32_t const ces[9] = { 0x0244, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_267)
{
    // 0832 0021;	
    // (‎‎࠲‎‎) SAMARITAN PUNCTUATION ANGED	[0245 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0832, 0x0021 };
    uint32_t const ces[9] = { 0x0245, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_268)
{
    // 0832 003F;	
    // (‎‎࠲‎‎) SAMARITAN PUNCTUATION ANGED	[0245 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0832, 0x003F };
    uint32_t const ces[9] = { 0x0245, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_269)
{
    // 0832 0061;	
    // (‎‎࠲‎‎) SAMARITAN PUNCTUATION ANGED	[0245 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0832, 0x0061 };
    uint32_t const ces[9] = { 0x0245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_270)
{
    // 0832 0041;	
    // (‎‎࠲‎‎) SAMARITAN PUNCTUATION ANGED	[0245 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0832, 0x0041 };
    uint32_t const ces[9] = { 0x0245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_271)
{
    // 0832 0062;	
    // (‎‎࠲‎‎) SAMARITAN PUNCTUATION ANGED	[0245 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0832, 0x0062 };
    uint32_t const ces[9] = { 0x0245, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_272)
{
    // 0833 0021;	
    // (‎‎࠳‎‎) SAMARITAN PUNCTUATION BAU	[0246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0833, 0x0021 };
    uint32_t const ces[9] = { 0x0246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_273)
{
    // 0833 003F;	
    // (‎‎࠳‎‎) SAMARITAN PUNCTUATION BAU	[0246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0833, 0x003F };
    uint32_t const ces[9] = { 0x0246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_274)
{
    // 0833 0061;	
    // (‎‎࠳‎‎) SAMARITAN PUNCTUATION BAU	[0246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0833, 0x0061 };
    uint32_t const ces[9] = { 0x0246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_275)
{
    // 0833 0041;	
    // (‎‎࠳‎‎) SAMARITAN PUNCTUATION BAU	[0246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0833, 0x0041 };
    uint32_t const ces[9] = { 0x0246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_276)
{
    // 0833 0062;	
    // (‎‎࠳‎‎) SAMARITAN PUNCTUATION BAU	[0246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0833, 0x0062 };
    uint32_t const ces[9] = { 0x0246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_277)
{
    // 0834 0021;	
    // (‎‎࠴‎‎) SAMARITAN PUNCTUATION ATMAAU	[0247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0834, 0x0021 };
    uint32_t const ces[9] = { 0x0247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_278)
{
    // 0834 003F;	
    // (‎‎࠴‎‎) SAMARITAN PUNCTUATION ATMAAU	[0247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0834, 0x003F };
    uint32_t const ces[9] = { 0x0247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_279)
{
    // 0834 0061;	
    // (‎‎࠴‎‎) SAMARITAN PUNCTUATION ATMAAU	[0247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0834, 0x0061 };
    uint32_t const ces[9] = { 0x0247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_280)
{
    // 0834 0041;	
    // (‎‎࠴‎‎) SAMARITAN PUNCTUATION ATMAAU	[0247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0834, 0x0041 };
    uint32_t const ces[9] = { 0x0247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_281)
{
    // 0834 0062;	
    // (‎‎࠴‎‎) SAMARITAN PUNCTUATION ATMAAU	[0247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0834, 0x0062 };
    uint32_t const ces[9] = { 0x0247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_282)
{
    // 0835 0021;	
    // (‎‎࠵‎‎) SAMARITAN PUNCTUATION SHIYYAALAA	[0248 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0835, 0x0021 };
    uint32_t const ces[9] = { 0x0248, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_283)
{
    // 0835 003F;	
    // (‎‎࠵‎‎) SAMARITAN PUNCTUATION SHIYYAALAA	[0248 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0835, 0x003F };
    uint32_t const ces[9] = { 0x0248, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_284)
{
    // 0835 0061;	
    // (‎‎࠵‎‎) SAMARITAN PUNCTUATION SHIYYAALAA	[0248 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0835, 0x0061 };
    uint32_t const ces[9] = { 0x0248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_285)
{
    // 0835 0041;	
    // (‎‎࠵‎‎) SAMARITAN PUNCTUATION SHIYYAALAA	[0248 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0835, 0x0041 };
    uint32_t const ces[9] = { 0x0248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_286)
{
    // 0835 0062;	
    // (‎‎࠵‎‎) SAMARITAN PUNCTUATION SHIYYAALAA	[0248 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0835, 0x0062 };
    uint32_t const ces[9] = { 0x0248, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_287)
{
    // 0836 0021;	
    // (‎‎࠶‎‎) SAMARITAN ABBREVIATION MARK	[0249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0836, 0x0021 };
    uint32_t const ces[9] = { 0x0249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_288)
{
    // 0836 003F;	
    // (‎‎࠶‎‎) SAMARITAN ABBREVIATION MARK	[0249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0836, 0x003F };
    uint32_t const ces[9] = { 0x0249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_289)
{
    // 0836 0061;	
    // (‎‎࠶‎‎) SAMARITAN ABBREVIATION MARK	[0249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0836, 0x0061 };
    uint32_t const ces[9] = { 0x0249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_290)
{
    // 0836 0041;	
    // (‎‎࠶‎‎) SAMARITAN ABBREVIATION MARK	[0249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0836, 0x0041 };
    uint32_t const ces[9] = { 0x0249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_291)
{
    // 0836 0062;	
    // (‎‎࠶‎‎) SAMARITAN ABBREVIATION MARK	[0249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0836, 0x0062 };
    uint32_t const ces[9] = { 0x0249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_292)
{
    // 0837 0021;	
    // (‎‎࠷‎‎) SAMARITAN PUNCTUATION MELODIC QITSA	[024A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0837, 0x0021 };
    uint32_t const ces[9] = { 0x024A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_293)
{
    // 0837 003F;	
    // (‎‎࠷‎‎) SAMARITAN PUNCTUATION MELODIC QITSA	[024A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0837, 0x003F };
    uint32_t const ces[9] = { 0x024A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_294)
{
    // 0837 0061;	
    // (‎‎࠷‎‎) SAMARITAN PUNCTUATION MELODIC QITSA	[024A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0837, 0x0061 };
    uint32_t const ces[9] = { 0x024A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_295)
{
    // 0837 0041;	
    // (‎‎࠷‎‎) SAMARITAN PUNCTUATION MELODIC QITSA	[024A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0837, 0x0041 };
    uint32_t const ces[9] = { 0x024A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_296)
{
    // 0837 0062;	
    // (‎‎࠷‎‎) SAMARITAN PUNCTUATION MELODIC QITSA	[024A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0837, 0x0062 };
    uint32_t const ces[9] = { 0x024A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_297)
{
    // 0838 0021;	
    // (‎‎࠸‎‎) SAMARITAN PUNCTUATION ZIQAA	[024B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0838, 0x0021 };
    uint32_t const ces[9] = { 0x024B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_298)
{
    // 0838 003F;	
    // (‎‎࠸‎‎) SAMARITAN PUNCTUATION ZIQAA	[024B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0838, 0x003F };
    uint32_t const ces[9] = { 0x024B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_299)
{
    // 0838 0061;	
    // (‎‎࠸‎‎) SAMARITAN PUNCTUATION ZIQAA	[024B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0838, 0x0061 };
    uint32_t const ces[9] = { 0x024B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_300)
{
    // 0838 0041;	
    // (‎‎࠸‎‎) SAMARITAN PUNCTUATION ZIQAA	[024B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0838, 0x0041 };
    uint32_t const ces[9] = { 0x024B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_301)
{
    // 0838 0062;	
    // (‎‎࠸‎‎) SAMARITAN PUNCTUATION ZIQAA	[024B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0838, 0x0062 };
    uint32_t const ces[9] = { 0x024B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_302)
{
    // 0839 0021;	
    // (‎‎࠹‎‎) SAMARITAN PUNCTUATION QITSA	[024C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0839, 0x0021 };
    uint32_t const ces[9] = { 0x024C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_303)
{
    // 0839 003F;	
    // (‎‎࠹‎‎) SAMARITAN PUNCTUATION QITSA	[024C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0839, 0x003F };
    uint32_t const ces[9] = { 0x024C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_304)
{
    // 0839 0061;	
    // (‎‎࠹‎‎) SAMARITAN PUNCTUATION QITSA	[024C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0839, 0x0061 };
    uint32_t const ces[9] = { 0x024C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_305)
{
    // 0839 0041;	
    // (‎‎࠹‎‎) SAMARITAN PUNCTUATION QITSA	[024C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0839, 0x0041 };
    uint32_t const ces[9] = { 0x024C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_306)
{
    // 0839 0062;	
    // (‎‎࠹‎‎) SAMARITAN PUNCTUATION QITSA	[024C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0839, 0x0062 };
    uint32_t const ces[9] = { 0x024C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_307)
{
    // 083A 0021;	
    // (‎‎࠺‎‎) SAMARITAN PUNCTUATION ZAEF	[024D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083A, 0x0021 };
    uint32_t const ces[9] = { 0x024D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_308)
{
    // 083A 003F;	
    // (‎‎࠺‎‎) SAMARITAN PUNCTUATION ZAEF	[024D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083A, 0x003F };
    uint32_t const ces[9] = { 0x024D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_309)
{
    // 083A 0061;	
    // (‎‎࠺‎‎) SAMARITAN PUNCTUATION ZAEF	[024D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083A, 0x0061 };
    uint32_t const ces[9] = { 0x024D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_310)
{
    // 083A 0041;	
    // (‎‎࠺‎‎) SAMARITAN PUNCTUATION ZAEF	[024D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x083A, 0x0041 };
    uint32_t const ces[9] = { 0x024D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_311)
{
    // 083A 0062;	
    // (‎‎࠺‎‎) SAMARITAN PUNCTUATION ZAEF	[024D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083A, 0x0062 };
    uint32_t const ces[9] = { 0x024D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_312)
{
    // 083B 0021;	
    // (‎‎࠻‎‎) SAMARITAN PUNCTUATION TURU	[024E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083B, 0x0021 };
    uint32_t const ces[9] = { 0x024E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_313)
{
    // 083B 003F;	
    // (‎‎࠻‎‎) SAMARITAN PUNCTUATION TURU	[024E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083B, 0x003F };
    uint32_t const ces[9] = { 0x024E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_314)
{
    // 083B 0061;	
    // (‎‎࠻‎‎) SAMARITAN PUNCTUATION TURU	[024E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083B, 0x0061 };
    uint32_t const ces[9] = { 0x024E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_315)
{
    // 083B 0041;	
    // (‎‎࠻‎‎) SAMARITAN PUNCTUATION TURU	[024E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x083B, 0x0041 };
    uint32_t const ces[9] = { 0x024E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_316)
{
    // 083B 0062;	
    // (‎‎࠻‎‎) SAMARITAN PUNCTUATION TURU	[024E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083B, 0x0062 };
    uint32_t const ces[9] = { 0x024E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_317)
{
    // 083C 0021;	
    // (‎‎࠼‎‎) SAMARITAN PUNCTUATION ARKAANU	[024F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083C, 0x0021 };
    uint32_t const ces[9] = { 0x024F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_318)
{
    // 083C 003F;	
    // (‎‎࠼‎‎) SAMARITAN PUNCTUATION ARKAANU	[024F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083C, 0x003F };
    uint32_t const ces[9] = { 0x024F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_319)
{
    // 083C 0061;	
    // (‎‎࠼‎‎) SAMARITAN PUNCTUATION ARKAANU	[024F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083C, 0x0061 };
    uint32_t const ces[9] = { 0x024F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_320)
{
    // 083C 0041;	
    // (‎‎࠼‎‎) SAMARITAN PUNCTUATION ARKAANU	[024F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x083C, 0x0041 };
    uint32_t const ces[9] = { 0x024F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_321)
{
    // 083C 0062;	
    // (‎‎࠼‎‎) SAMARITAN PUNCTUATION ARKAANU	[024F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083C, 0x0062 };
    uint32_t const ces[9] = { 0x024F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_322)
{
    // 083D 0021;	
    // (‎‎࠽‎‎) SAMARITAN PUNCTUATION SOF MASHFAAT	[0250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083D, 0x0021 };
    uint32_t const ces[9] = { 0x0250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_323)
{
    // 083D 003F;	
    // (‎‎࠽‎‎) SAMARITAN PUNCTUATION SOF MASHFAAT	[0250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083D, 0x003F };
    uint32_t const ces[9] = { 0x0250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_324)
{
    // 083D 0061;	
    // (‎‎࠽‎‎) SAMARITAN PUNCTUATION SOF MASHFAAT	[0250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083D, 0x0061 };
    uint32_t const ces[9] = { 0x0250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_325)
{
    // 083D 0041;	
    // (‎‎࠽‎‎) SAMARITAN PUNCTUATION SOF MASHFAAT	[0250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x083D, 0x0041 };
    uint32_t const ces[9] = { 0x0250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_326)
{
    // 083D 0062;	
    // (‎‎࠽‎‎) SAMARITAN PUNCTUATION SOF MASHFAAT	[0250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083D, 0x0062 };
    uint32_t const ces[9] = { 0x0250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_327)
{
    // 083E 0021;	
    // (‎‎࠾‎‎) SAMARITAN PUNCTUATION ANNAAU	[0251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083E, 0x0021 };
    uint32_t const ces[9] = { 0x0251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_328)
{
    // 083E 003F;	
    // (‎‎࠾‎‎) SAMARITAN PUNCTUATION ANNAAU	[0251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083E, 0x003F };
    uint32_t const ces[9] = { 0x0251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_329)
{
    // 083E 0061;	
    // (‎‎࠾‎‎) SAMARITAN PUNCTUATION ANNAAU	[0251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083E, 0x0061 };
    uint32_t const ces[9] = { 0x0251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_330)
{
    // 083E 0041;	
    // (‎‎࠾‎‎) SAMARITAN PUNCTUATION ANNAAU	[0251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x083E, 0x0041 };
    uint32_t const ces[9] = { 0x0251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_331)
{
    // 083E 0062;	
    // (‎‎࠾‎‎) SAMARITAN PUNCTUATION ANNAAU	[0251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x083E, 0x0062 };
    uint32_t const ces[9] = { 0x0251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_332)
{
    // 1361 0021;	
    // (፡) ETHIOPIC WORDSPACE	[0252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1361, 0x0021 };
    uint32_t const ces[9] = { 0x0252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_333)
{
    // 1361 003F;	
    // (፡) ETHIOPIC WORDSPACE	[0252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1361, 0x003F };
    uint32_t const ces[9] = { 0x0252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_334)
{
    // 1361 0061;	
    // (፡) ETHIOPIC WORDSPACE	[0252 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1361, 0x0061 };
    uint32_t const ces[9] = { 0x0252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_335)
{
    // 1361 0041;	
    // (፡) ETHIOPIC WORDSPACE	[0252 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1361, 0x0041 };
    uint32_t const ces[9] = { 0x0252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_336)
{
    // 1361 0062;	
    // (፡) ETHIOPIC WORDSPACE	[0252 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1361, 0x0062 };
    uint32_t const ces[9] = { 0x0252, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_337)
{
    // 1363 0021;	
    // (፣) ETHIOPIC COMMA	[0253 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1363, 0x0021 };
    uint32_t const ces[9] = { 0x0253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_338)
{
    // 1363 003F;	
    // (፣) ETHIOPIC COMMA	[0253 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1363, 0x003F };
    uint32_t const ces[9] = { 0x0253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_339)
{
    // 1363 0061;	
    // (፣) ETHIOPIC COMMA	[0253 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1363, 0x0061 };
    uint32_t const ces[9] = { 0x0253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_340)
{
    // 1363 0041;	
    // (፣) ETHIOPIC COMMA	[0253 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1363, 0x0041 };
    uint32_t const ces[9] = { 0x0253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_341)
{
    // 1363 0062;	
    // (፣) ETHIOPIC COMMA	[0253 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1363, 0x0062 };
    uint32_t const ces[9] = { 0x0253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_342)
{
    // 1364 0021;	
    // (፤) ETHIOPIC SEMICOLON	[0254 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1364, 0x0021 };
    uint32_t const ces[9] = { 0x0254, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_343)
{
    // 1364 003F;	
    // (፤) ETHIOPIC SEMICOLON	[0254 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1364, 0x003F };
    uint32_t const ces[9] = { 0x0254, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_344)
{
    // 1364 0061;	
    // (፤) ETHIOPIC SEMICOLON	[0254 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1364, 0x0061 };
    uint32_t const ces[9] = { 0x0254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_345)
{
    // 1364 0041;	
    // (፤) ETHIOPIC SEMICOLON	[0254 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1364, 0x0041 };
    uint32_t const ces[9] = { 0x0254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_346)
{
    // 1364 0062;	
    // (፤) ETHIOPIC SEMICOLON	[0254 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1364, 0x0062 };
    uint32_t const ces[9] = { 0x0254, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_347)
{
    // 1365 0021;	
    // (፥) ETHIOPIC COLON	[0255 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1365, 0x0021 };
    uint32_t const ces[9] = { 0x0255, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_348)
{
    // 1365 003F;	
    // (፥) ETHIOPIC COLON	[0255 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1365, 0x003F };
    uint32_t const ces[9] = { 0x0255, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_349)
{
    // 1365 0061;	
    // (፥) ETHIOPIC COLON	[0255 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1365, 0x0061 };
    uint32_t const ces[9] = { 0x0255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_350)
{
    // 1365 0041;	
    // (፥) ETHIOPIC COLON	[0255 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1365, 0x0041 };
    uint32_t const ces[9] = { 0x0255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_351)
{
    // 1365 0062;	
    // (፥) ETHIOPIC COLON	[0255 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1365, 0x0062 };
    uint32_t const ces[9] = { 0x0255, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_352)
{
    // 1366 0021;	
    // (፦) ETHIOPIC PREFACE COLON	[0256 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1366, 0x0021 };
    uint32_t const ces[9] = { 0x0256, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_353)
{
    // 1366 003F;	
    // (፦) ETHIOPIC PREFACE COLON	[0256 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1366, 0x003F };
    uint32_t const ces[9] = { 0x0256, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_354)
{
    // 1366 0061;	
    // (፦) ETHIOPIC PREFACE COLON	[0256 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1366, 0x0061 };
    uint32_t const ces[9] = { 0x0256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_355)
{
    // 1366 0041;	
    // (፦) ETHIOPIC PREFACE COLON	[0256 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1366, 0x0041 };
    uint32_t const ces[9] = { 0x0256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_356)
{
    // 1366 0062;	
    // (፦) ETHIOPIC PREFACE COLON	[0256 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1366, 0x0062 };
    uint32_t const ces[9] = { 0x0256, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_357)
{
    // 1804 0021;	
    // (᠄) MONGOLIAN COLON	[0257 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1804, 0x0021 };
    uint32_t const ces[9] = { 0x0257, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_358)
{
    // 1804 003F;	
    // (᠄) MONGOLIAN COLON	[0257 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1804, 0x003F };
    uint32_t const ces[9] = { 0x0257, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_359)
{
    // 1804 0061;	
    // (᠄) MONGOLIAN COLON	[0257 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1804, 0x0061 };
    uint32_t const ces[9] = { 0x0257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_360)
{
    // 1804 0041;	
    // (᠄) MONGOLIAN COLON	[0257 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1804, 0x0041 };
    uint32_t const ces[9] = { 0x0257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_361)
{
    // 1804 0062;	
    // (᠄) MONGOLIAN COLON	[0257 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1804, 0x0062 };
    uint32_t const ces[9] = { 0x0257, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_362)
{
    // 1805 0021;	
    // (᠅) MONGOLIAN FOUR DOTS	[0258 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1805, 0x0021 };
    uint32_t const ces[9] = { 0x0258, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_363)
{
    // 1805 003F;	
    // (᠅) MONGOLIAN FOUR DOTS	[0258 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1805, 0x003F };
    uint32_t const ces[9] = { 0x0258, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_364)
{
    // 1805 0061;	
    // (᠅) MONGOLIAN FOUR DOTS	[0258 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1805, 0x0061 };
    uint32_t const ces[9] = { 0x0258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_365)
{
    // 1805 0041;	
    // (᠅) MONGOLIAN FOUR DOTS	[0258 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1805, 0x0041 };
    uint32_t const ces[9] = { 0x0258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_366)
{
    // 1805 0062;	
    // (᠅) MONGOLIAN FOUR DOTS	[0258 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1805, 0x0062 };
    uint32_t const ces[9] = { 0x0258, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_367)
{
    // 0F14 0021;	
    // (༔) TIBETAN MARK GTER TSHEG	[0259 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F14, 0x0021 };
    uint32_t const ces[9] = { 0x0259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_368)
{
    // 0F14 003F;	
    // (༔) TIBETAN MARK GTER TSHEG	[0259 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F14, 0x003F };
    uint32_t const ces[9] = { 0x0259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_369)
{
    // 0F14 0061;	
    // (༔) TIBETAN MARK GTER TSHEG	[0259 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F14, 0x0061 };
    uint32_t const ces[9] = { 0x0259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_370)
{
    // 0F14 0041;	
    // (༔) TIBETAN MARK GTER TSHEG	[0259 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F14, 0x0041 };
    uint32_t const ces[9] = { 0x0259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_371)
{
    // 0F14 0062;	
    // (༔) TIBETAN MARK GTER TSHEG	[0259 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F14, 0x0062 };
    uint32_t const ces[9] = { 0x0259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_372)
{
    // 17D6 0021;	
    // (៖) KHMER SIGN CAMNUC PII KUUH	[025A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D6, 0x0021 };
    uint32_t const ces[9] = { 0x025A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_373)
{
    // 17D6 003F;	
    // (៖) KHMER SIGN CAMNUC PII KUUH	[025A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D6, 0x003F };
    uint32_t const ces[9] = { 0x025A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_374)
{
    // 17D6 0061;	
    // (៖) KHMER SIGN CAMNUC PII KUUH	[025A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D6, 0x0061 };
    uint32_t const ces[9] = { 0x025A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_375)
{
    // 17D6 0041;	
    // (៖) KHMER SIGN CAMNUC PII KUUH	[025A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17D6, 0x0041 };
    uint32_t const ces[9] = { 0x025A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_376)
{
    // 17D6 0062;	
    // (៖) KHMER SIGN CAMNUC PII KUUH	[025A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D6, 0x0062 };
    uint32_t const ces[9] = { 0x025A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_377)
{
    // 1B5D 0021;	
    // (᭝) BALINESE CARIK PAMUNGKAH	[025B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5D, 0x0021 };
    uint32_t const ces[9] = { 0x025B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_378)
{
    // 1B5D 003F;	
    // (᭝) BALINESE CARIK PAMUNGKAH	[025B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5D, 0x003F };
    uint32_t const ces[9] = { 0x025B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_379)
{
    // 1B5D 0061;	
    // (᭝) BALINESE CARIK PAMUNGKAH	[025B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5D, 0x0061 };
    uint32_t const ces[9] = { 0x025B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_380)
{
    // 1B5D 0041;	
    // (᭝) BALINESE CARIK PAMUNGKAH	[025B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B5D, 0x0041 };
    uint32_t const ces[9] = { 0x025B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_381)
{
    // 1B5D 0062;	
    // (᭝) BALINESE CARIK PAMUNGKAH	[025B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5D, 0x0062 };
    uint32_t const ces[9] = { 0x025B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_382)
{
    // A9C7 0021;	
    // (꧇) JAVANESE PADA PANGKAT	[025C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C7, 0x0021 };
    uint32_t const ces[9] = { 0x025C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_383)
{
    // A9C7 003F;	
    // (꧇) JAVANESE PADA PANGKAT	[025C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C7, 0x003F };
    uint32_t const ces[9] = { 0x025C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_384)
{
    // A9C7 0061;	
    // (꧇) JAVANESE PADA PANGKAT	[025C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C7, 0x0061 };
    uint32_t const ces[9] = { 0x025C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_385)
{
    // A9C7 0041;	
    // (꧇) JAVANESE PADA PANGKAT	[025C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9C7, 0x0041 };
    uint32_t const ces[9] = { 0x025C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_386)
{
    // A9C7 0062;	
    // (꧇) JAVANESE PADA PANGKAT	[025C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C7, 0x0062 };
    uint32_t const ces[9] = { 0x025C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_387)
{
    // 16EB 0021;	
    // (᛫) RUNIC SINGLE PUNCTUATION	[025D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EB, 0x0021 };
    uint32_t const ces[9] = { 0x025D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_388)
{
    // 16EB 003F;	
    // (᛫) RUNIC SINGLE PUNCTUATION	[025D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EB, 0x003F };
    uint32_t const ces[9] = { 0x025D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_389)
{
    // 16EB 0061;	
    // (᛫) RUNIC SINGLE PUNCTUATION	[025D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EB, 0x0061 };
    uint32_t const ces[9] = { 0x025D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_390)
{
    // 16EB 0041;	
    // (᛫) RUNIC SINGLE PUNCTUATION	[025D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16EB, 0x0041 };
    uint32_t const ces[9] = { 0x025D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_391)
{
    // 16EB 0062;	
    // (᛫) RUNIC SINGLE PUNCTUATION	[025D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EB, 0x0062 };
    uint32_t const ces[9] = { 0x025D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_392)
{
    // 16EC 0021;	
    // (᛬) RUNIC MULTIPLE PUNCTUATION	[025E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EC, 0x0021 };
    uint32_t const ces[9] = { 0x025E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_393)
{
    // 16EC 003F;	
    // (᛬) RUNIC MULTIPLE PUNCTUATION	[025E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EC, 0x003F };
    uint32_t const ces[9] = { 0x025E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_394)
{
    // 16EC 0061;	
    // (᛬) RUNIC MULTIPLE PUNCTUATION	[025E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EC, 0x0061 };
    uint32_t const ces[9] = { 0x025E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_395)
{
    // 16EC 0041;	
    // (᛬) RUNIC MULTIPLE PUNCTUATION	[025E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16EC, 0x0041 };
    uint32_t const ces[9] = { 0x025E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_396)
{
    // 16EC 0062;	
    // (᛬) RUNIC MULTIPLE PUNCTUATION	[025E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16EC, 0x0062 };
    uint32_t const ces[9] = { 0x025E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_397)
{
    // 16ED 0021;	
    // (᛭) RUNIC CROSS PUNCTUATION	[025F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ED, 0x0021 };
    uint32_t const ces[9] = { 0x025F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_398)
{
    // 16ED 003F;	
    // (᛭) RUNIC CROSS PUNCTUATION	[025F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ED, 0x003F };
    uint32_t const ces[9] = { 0x025F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_399)
{
    // 16ED 0061;	
    // (᛭) RUNIC CROSS PUNCTUATION	[025F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ED, 0x0061 };
    uint32_t const ces[9] = { 0x025F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_400)
{
    // 16ED 0041;	
    // (᛭) RUNIC CROSS PUNCTUATION	[025F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ED, 0x0041 };
    uint32_t const ces[9] = { 0x025F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_401)
{
    // 16ED 0062;	
    // (᛭) RUNIC CROSS PUNCTUATION	[025F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ED, 0x0062 };
    uint32_t const ces[9] = { 0x025F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_402)
{
    // A6F4 0021;	
    // (꛴) BAMUM COLON	[0260 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F4, 0x0021 };
    uint32_t const ces[9] = { 0x0260, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_403)
{
    // A6F4 003F;	
    // (꛴) BAMUM COLON	[0260 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F4, 0x003F };
    uint32_t const ces[9] = { 0x0260, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_404)
{
    // A6F4 0061;	
    // (꛴) BAMUM COLON	[0260 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F4, 0x0061 };
    uint32_t const ces[9] = { 0x0260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_405)
{
    // A6F4 0041;	
    // (꛴) BAMUM COLON	[0260 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6F4, 0x0041 };
    uint32_t const ces[9] = { 0x0260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_406)
{
    // A6F4 0062;	
    // (꛴) BAMUM COLON	[0260 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F4, 0x0062 };
    uint32_t const ces[9] = { 0x0260, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_407)
{
    // 0000 0021;	
    // ('\u0000') <NULL>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0000, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_408)
{
    // 0001 0021;	
    // ('\u0001') <START OF HEADING>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0001, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_409)
{
    // 0002 0021;	
    // ('\u0002') <START OF TEXT>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0002, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_410)
{
    // 0003 0021;	
    // ('\u0003') <END OF TEXT>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0003, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_411)
{
    // 0004 0021;	
    // ('\u0004') <END OF TRANSMISSION>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0004, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_412)
{
    // 0005 0021;	
    // ('\u0005') <ENQUIRY>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0005, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_413)
{
    // 0006 0021;	
    // ('\u0006') <ACKNOWLEDGE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0006, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_414)
{
    // 0007 0021;	
    // ('\u0007') <BELL>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0007, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_415)
{
    // 0008 0021;	
    // ('\u0008') <BACKSPACE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0008, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_416)
{
    // 000E 0021;	
    // ('\u000E') <SHIFT OUT>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000E, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_417)
{
    // 000F 0021;	
    // ('\u000F') <SHIFT IN>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_418)
{
    // 0010 0021;	
    // ('\u0010') <DATA LINK ESCAPE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0010, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_419)
{
    // 0011 0021;	
    // ('\u0011') <DEVICE CONTROL ONE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0011, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_420)
{
    // 0012 0021;	
    // ('\u0012') <DEVICE CONTROL TWO>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0012, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_421)
{
    // 0013 0021;	
    // ('\u0013') <DEVICE CONTROL THREE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0013, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_422)
{
    // 0014 0021;	
    // ('\u0014') <DEVICE CONTROL FOUR>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0014, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_423)
{
    // 0015 0021;	
    // ('\u0015') <NEGATIVE ACKNOWLEDGE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0015, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_424)
{
    // 0016 0021;	
    // ('\u0016') <SYNCHRONOUS IDLE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0016, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_425)
{
    // 0017 0021;	
    // ('\u0017') <END OF TRANSMISSION BLOCK>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0017, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_426)
{
    // 0018 0021;	
    // ('\u0018') <CANCEL>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0018, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_427)
{
    // 0019 0021;	
    // ('\u0019') <END OF MEDIUM>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0019, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_428)
{
    // 001A 0021;	
    // ('\u001A') <SUBSTITUTE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001A, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_429)
{
    // 001B 0021;	
    // ('\u001B') <ESCAPE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001B, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_430)
{
    // 001C 0021;	
    // ('\u001C') <INFORMATION SEPARATOR FOUR>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001C, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_431)
{
    // 001D 0021;	
    // ('\u001D') <INFORMATION SEPARATOR THREE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001D, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_432)
{
    // 001E 0021;	
    // ('\u001E') <INFORMATION SEPARATOR TWO>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001E, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_433)
{
    // 001F 0021;	
    // ('\u001F') <INFORMATION SEPARATOR ONE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_434)
{
    // 007F 0021;	
    // ('\u007F') <DELETE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x007F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_435)
{
    // 0080 0021;	
    // ('\u0080') <control>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0080, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_436)
{
    // 0081 0021;	
    // ('\u0081') <control>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0081, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_437)
{
    // 0082 0021;	
    // ('\u0082') <BREAK PERMITTED HERE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0082, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_438)
{
    // 0083 0021;	
    // ('\u0083') <NO BREAK HERE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0083, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_439)
{
    // 0084 0021;	
    // ('\u0084') <control>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0084, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_440)
{
    // 0086 0021;	
    // ('\u0086') <START OF SELECTED AREA>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0086, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_441)
{
    // 0087 0021;	
    // ('\u0087') <END OF SELECTED AREA>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0087, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_442)
{
    // 0088 0021;	
    // ('\u0088') <CHARACTER TABULATION SET>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0088, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_443)
{
    // 0089 0021;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0089, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_444)
{
    // 008A 0021;	
    // ('\u008A') <LINE TABULATION SET>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008A, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_445)
{
    // 008B 0021;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008B, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_446)
{
    // 008C 0021;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008C, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_447)
{
    // 008D 0021;	
    // ('\u008D') <REVERSE LINE FEED>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008D, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_448)
{
    // 008E 0021;	
    // ('\u008E') <SINGLE SHIFT TWO>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008E, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_449)
{
    // 008F 0021;	
    // ('\u008F') <SINGLE SHIFT THREE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_450)
{
    // 0090 0021;	
    // ('\u0090') <DEVICE CONTROL STRING>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0090, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_451)
{
    // 0091 0021;	
    // ('\u0091') <PRIVATE USE ONE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0091, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_452)
{
    // 0092 0021;	
    // ('\u0092') <PRIVATE USE TWO>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0092, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_453)
{
    // 0093 0021;	
    // ('\u0093') <SET TRANSMIT STATE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0093, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_454)
{
    // 0094 0021;	
    // ('\u0094') <CANCEL CHARACTER>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0094, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_455)
{
    // 0095 0021;	
    // ('\u0095') <MESSAGE WAITING>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0095, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_456)
{
    // 0096 0021;	
    // ('\u0096') <START OF GUARDED AREA>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0096, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_457)
{
    // 0097 0021;	
    // ('\u0097') <END OF GUARDED AREA>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0097, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_458)
{
    // 0098 0021;	
    // ('\u0098') <START OF STRING>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0098, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_459)
{
    // 0099 0021;	
    // ('\u0099') <control>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0099, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_460)
{
    // 009A 0021;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009A, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_461)
{
    // 009B 0021;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009B, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_462)
{
    // 009C 0021;	
    // ('\u009C') <STRING TERMINATOR>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009C, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_463)
{
    // 009D 0021;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009D, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_464)
{
    // 009E 0021;	
    // ('\u009E') <PRIVACY MESSAGE>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009E, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_465)
{
    // 009F 0021;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_466)
{
    // 00AD 0021;	
    // ('\u00AD') SOFT HYPHEN	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x00AD, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_467)
{
    // 034F 0021;	
    // (͏) COMBINING GRAPHEME JOINER	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x034F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_468)
{
    // 0488 0021;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0488, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_469)
{
    // 0489 0021;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0489, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_470)
{
    // 0591 0021;	
    // (֑) HEBREW ACCENT ETNAHTA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0591, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_471)
{
    // 0592 0021;	
    // (֒) HEBREW ACCENT SEGOL	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0592, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_472)
{
    // 0593 0021;	
    // (֓) HEBREW ACCENT SHALSHELET	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0593, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_473)
{
    // 0594 0021;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0594, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_474)
{
    // 0595 0021;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0595, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_475)
{
    // 0596 0021;	
    // (֖) HEBREW ACCENT TIPEHA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0596, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_476)
{
    // 0597 0021;	
    // (֗) HEBREW ACCENT REVIA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0597, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_477)
{
    // 0598 0021;	
    // (֘) HEBREW ACCENT ZARQA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0598, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_478)
{
    // 0599 0021;	
    // (֙) HEBREW ACCENT PASHTA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0599, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_479)
{
    // 059A 0021;	
    // (֚) HEBREW ACCENT YETIV	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059A, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_480)
{
    // 059B 0021;	
    // (֛) HEBREW ACCENT TEVIR	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059B, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_481)
{
    // 059C 0021;	
    // (֜) HEBREW ACCENT GERESH	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059C, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_482)
{
    // 059D 0021;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059D, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_483)
{
    // 059E 0021;	
    // (֞) HEBREW ACCENT GERSHAYIM	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059E, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_484)
{
    // 059F 0021;	
    // (֟) HEBREW ACCENT QARNEY PARA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059F, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_485)
{
    // 05A0 0021;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A0, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_486)
{
    // 05A1 0021;	
    // (֡) HEBREW ACCENT PAZER	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A1, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_487)
{
    // 05A2 0021;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A2, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_488)
{
    // 05A3 0021;	
    // (֣) HEBREW ACCENT MUNAH	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A3, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_489)
{
    // 05A4 0021;	
    // (֤) HEBREW ACCENT MAHAPAKH	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A4, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_490)
{
    // 05A5 0021;	
    // (֥) HEBREW ACCENT MERKHA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A5, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_491)
{
    // 05A6 0021;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A6, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_492)
{
    // 05A7 0021;	
    // (֧) HEBREW ACCENT DARGA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A7, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_493)
{
    // 05A8 0021;	
    // (֨) HEBREW ACCENT QADMA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A8, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_494)
{
    // 05A9 0021;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A9, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_495)
{
    // 05AA 0021;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AA, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_496)
{
    // 05AB 0021;	
    // (֫) HEBREW ACCENT OLE	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AB, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_497)
{
    // 05AC 0021;	
    // (֬) HEBREW ACCENT ILUY	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AC, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_498)
{
    // 05AD 0021;	
    // (֭) HEBREW ACCENT DEHI	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AD, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_003_499)
{
    // 05AE 0021;	
    // (֮) HEBREW ACCENT ZINOR	[0261 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AE, 0x0021 };
    uint32_t const ces[6] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

