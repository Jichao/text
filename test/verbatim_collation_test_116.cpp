// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_116_000)
{
    uint32_t const cps[2] = { 0x1F13E, 0x0061 };

    // 1F13E 0061;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F13E 0061;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_001)
{
    uint32_t const cps[2] = { 0x1F17E, 0x0061 };

    // 1F17E 0061;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F17E 0061;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_002)
{
    uint32_t const cps[2] = { 0x1D3C, 0x0041 };

    // 1D3C 0041;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3C 0041;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_003)
{
    uint32_t const cps[2] = { 0x1F13E, 0x0041 };

    // 1F13E 0041;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F13E 0041;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_004)
{
    uint32_t const cps[2] = { 0x1F17E, 0x0041 };

    // 1F17E 0041;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F17E 0041;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_005)
{
    uint32_t const cps[2] = { 0x00F3, 0x0061 };

    // 00F3 0061;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F3 0061;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_006)
{
    uint32_t const cps[2] = { 0x00F3, 0x0041 };

    // 00F3 0041;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F3 0041;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_007)
{
    uint32_t const cps[2] = { 0x00D3, 0x0061 };

    // 00D3 0061;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D3 0061;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_008)
{
    uint32_t const cps[2] = { 0x00D3, 0x0041 };

    // 00D3 0041;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D3 0041;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CAD | 0020 0024 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_009)
{
    uint32_t const cps[2] = { 0x00F2, 0x0061 };

    // 00F2 0061;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F2 0061;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_010)
{
    uint32_t const cps[2] = { 0x00F2, 0x0041 };

    // 00F2 0041;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F2 0041;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_011)
{
    uint32_t const cps[2] = { 0x00D2, 0x0061 };

    // 00D2 0061;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D2 0061;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_012)
{
    uint32_t const cps[2] = { 0x00D2, 0x0041 };

    // 00D2 0041;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D2 0041;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CAD | 0020 0025 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_013)
{
    uint32_t const cps[2] = { 0x014F, 0x0061 };

    // 014F 0061;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014F 0061;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_014)
{
    uint32_t const cps[2] = { 0x014F, 0x0041 };

    // 014F 0041;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014F 0041;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_015)
{
    uint32_t const cps[2] = { 0x014E, 0x0061 };

    // 014E 0061;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014E 0061;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_016)
{
    uint32_t const cps[2] = { 0x014E, 0x0041 };

    // 014E 0041;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014E 0041;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CAD | 0020 0026 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_017)
{
    uint32_t const cps[2] = { 0x00F4, 0x0061 };

    // 00F4 0061;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F4 0061;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_018)
{
    uint32_t const cps[2] = { 0x00F4, 0x0041 };

    // 00F4 0041;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F4 0041;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_019)
{
    uint32_t const cps[2] = { 0x00D4, 0x0061 };

    // 00D4 0061;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D4 0061;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_020)
{
    uint32_t const cps[2] = { 0x00D4, 0x0041 };

    // 00D4 0041;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D4 0041;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CAD | 0020 0027 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_021)
{
    uint32_t const cps[2] = { 0x1ED1, 0x0061 };

    // 1ED1 0061;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED1 0061;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_022)
{
    uint32_t const cps[2] = { 0x1ED1, 0x0041 };

    // 1ED1 0041;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED1 0041;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_023)
{
    uint32_t const cps[2] = { 0x1ED0, 0x0061 };

    // 1ED0 0061;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED0 0061;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_024)
{
    uint32_t const cps[2] = { 0x1ED0, 0x0041 };

    // 1ED0 0041;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED0 0041;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_025)
{
    uint32_t const cps[2] = { 0x1ED3, 0x0061 };

    // 1ED3 0061;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED3 0061;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_026)
{
    uint32_t const cps[2] = { 0x1ED3, 0x0041 };

    // 1ED3 0041;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED3 0041;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_027)
{
    uint32_t const cps[2] = { 0x1ED2, 0x0061 };

    // 1ED2 0061;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED2 0061;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_028)
{
    uint32_t const cps[2] = { 0x1ED2, 0x0041 };

    // 1ED2 0041;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED2 0041;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_029)
{
    uint32_t const cps[2] = { 0x1ED7, 0x0061 };

    // 1ED7 0061;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED7 0061;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_030)
{
    uint32_t const cps[2] = { 0x1ED7, 0x0041 };

    // 1ED7 0041;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED7 0041;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_031)
{
    uint32_t const cps[2] = { 0x1ED6, 0x0061 };

    // 1ED6 0061;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED6 0061;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_032)
{
    uint32_t const cps[2] = { 0x1ED6, 0x0041 };

    // 1ED6 0041;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED6 0041;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_033)
{
    uint32_t const cps[2] = { 0x1ED5, 0x0061 };

    // 1ED5 0061;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED5 0061;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_034)
{
    uint32_t const cps[2] = { 0x1ED5, 0x0041 };

    // 1ED5 0041;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED5 0041;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_035)
{
    uint32_t const cps[2] = { 0x1ED4, 0x0061 };

    // 1ED4 0061;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED4 0061;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_036)
{
    uint32_t const cps[2] = { 0x1ED4, 0x0041 };

    // 1ED4 0041;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED4 0041;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_037)
{
    uint32_t const cps[2] = { 0x01D2, 0x0061 };

    // 01D2 0061;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D2 0061;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_038)
{
    uint32_t const cps[2] = { 0x01D2, 0x0041 };

    // 01D2 0041;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D2 0041;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_039)
{
    uint32_t const cps[2] = { 0x01D1, 0x0061 };

    // 01D1 0061;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D1 0061;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_040)
{
    uint32_t const cps[2] = { 0x01D1, 0x0041 };

    // 01D1 0041;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D1 0041;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CAD | 0020 0028 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_041)
{
    uint32_t const cps[2] = { 0x00F6, 0x0061 };

    // 00F6 0061;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F6 0061;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_042)
{
    uint32_t const cps[2] = { 0x00F6, 0x0041 };

    // 00F6 0041;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F6 0041;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_043)
{
    uint32_t const cps[2] = { 0x1DF3, 0x0061 };

    // 1DF3 0061;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DF3 0061;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_044)
{
    uint32_t const cps[2] = { 0xA79D, 0x0061 };

    // A79D 0061;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79D 0061;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_045)
{
    uint32_t const cps[2] = { 0x1DF3, 0x0041 };

    // 1DF3 0041;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DF3 0041;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_046)
{
    uint32_t const cps[2] = { 0xA79D, 0x0041 };

    // A79D 0041;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79D 0041;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_047)
{
    uint32_t const cps[2] = { 0x00D6, 0x0061 };

    // 00D6 0061;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D6 0061;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_048)
{
    uint32_t const cps[2] = { 0x00D6, 0x0041 };

    // 00D6 0041;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D6 0041;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CAD | 0020 002B 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_049)
{
    uint32_t const cps[2] = { 0xA79C, 0x0061 };

    // A79C 0061;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79C 0061;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_050)
{
    uint32_t const cps[2] = { 0xA79C, 0x0041 };

    // A79C 0041;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79C 0041;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CAD | 0020 002B 0020 | 000A 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_051)
{
    uint32_t const cps[2] = { 0x022B, 0x0061 };

    // 022B 0061;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022B 0061;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_052)
{
    uint32_t const cps[2] = { 0x022B, 0x0041 };

    // 022B 0041;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022B 0041;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_053)
{
    uint32_t const cps[2] = { 0x022A, 0x0061 };

    // 022A 0061;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022A 0061;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_054)
{
    uint32_t const cps[2] = { 0x022A, 0x0041 };

    // 022A 0041;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022A 0041;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_055)
{
    uint32_t const cps[2] = { 0x0151, 0x0061 };

    // 0151 0061;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0151 0061;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_056)
{
    uint32_t const cps[2] = { 0x0151, 0x0041 };

    // 0151 0041;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0151 0041;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_057)
{
    uint32_t const cps[2] = { 0x0150, 0x0061 };

    // 0150 0061;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0150 0061;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_058)
{
    uint32_t const cps[2] = { 0x0150, 0x0041 };

    // 0150 0041;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0150 0041;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CAD | 0020 002C 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_059)
{
    uint32_t const cps[2] = { 0x00F5, 0x0061 };

    // 00F5 0061;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F5 0061;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_060)
{
    uint32_t const cps[2] = { 0x00F5, 0x0041 };

    // 00F5 0041;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F5 0041;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_061)
{
    uint32_t const cps[2] = { 0x00D5, 0x0061 };

    // 00D5 0061;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D5 0061;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_062)
{
    uint32_t const cps[2] = { 0x00D5, 0x0041 };

    // 00D5 0041;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D5 0041;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CAD | 0020 002D 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_063)
{
    uint32_t const cps[2] = { 0x1E4D, 0x0061 };

    // 1E4D 0061;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4D 0061;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_064)
{
    uint32_t const cps[2] = { 0x1E4D, 0x0041 };

    // 1E4D 0041;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4D 0041;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_065)
{
    uint32_t const cps[2] = { 0x1E4C, 0x0061 };

    // 1E4C 0061;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4C 0061;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_066)
{
    uint32_t const cps[2] = { 0x1E4C, 0x0041 };

    // 1E4C 0041;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4C 0041;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_067)
{
    uint32_t const cps[2] = { 0x1E4F, 0x0061 };

    // 1E4F 0061;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4F 0061;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_068)
{
    uint32_t const cps[2] = { 0x1E4F, 0x0041 };

    // 1E4F 0041;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4F 0041;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_069)
{
    uint32_t const cps[2] = { 0x1E4E, 0x0061 };

    // 1E4E 0061;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4E 0061;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_070)
{
    uint32_t const cps[2] = { 0x1E4E, 0x0041 };

    // 1E4E 0041;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4E 0041;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CAD | 0020 002D 002B 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_071)
{
    uint32_t const cps[2] = { 0x022D, 0x0061 };

    // 022D 0061;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022D 0061;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_072)
{
    uint32_t const cps[2] = { 0x022D, 0x0041 };

    // 022D 0041;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022D 0041;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_073)
{
    uint32_t const cps[2] = { 0x022C, 0x0061 };

    // 022C 0061;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022C 0061;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_074)
{
    uint32_t const cps[2] = { 0x022C, 0x0041 };

    // 022C 0041;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022C 0041;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CAD | 0020 002D 0032 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_075)
{
    uint32_t const cps[2] = { 0x022F, 0x0061 };

    // 022F 0061;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022F 0061;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_076)
{
    uint32_t const cps[2] = { 0x022F, 0x0041 };

    // 022F 0041;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022F 0041;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_077)
{
    uint32_t const cps[2] = { 0x022E, 0x0061 };

    // 022E 0061;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022E 0061;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_078)
{
    uint32_t const cps[2] = { 0x022E, 0x0041 };

    // 022E 0041;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022E 0041;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CAD | 0020 002E 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_079)
{
    uint32_t const cps[2] = { 0x0231, 0x0061 };

    // 0231 0061;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0231 0061;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_080)
{
    uint32_t const cps[2] = { 0x0231, 0x0041 };

    // 0231 0041;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0231 0041;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_081)
{
    uint32_t const cps[2] = { 0x0230, 0x0061 };

    // 0230 0061;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0230 0061;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_082)
{
    uint32_t const cps[2] = { 0x0230, 0x0041 };

    // 0230 0041;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0230 0041;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_083)
{
    uint32_t const cps[2] = { 0x00F8, 0x0061 };

    // 00F8 0061;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F8 0061;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_084)
{
    uint32_t const cps[2] = { 0x00F8, 0x0041 };

    // 00F8 0041;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F8 0041;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_085)
{
    uint32_t const cps[2] = { 0x00D8, 0x0061 };

    // 00D8 0061;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D8 0061;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_086)
{
    uint32_t const cps[2] = { 0x00D8, 0x0041 };

    // 00D8 0041;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D8 0041;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CAD | 0020 002F 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_087)
{
    uint32_t const cps[2] = { 0x01FF, 0x0061 };

    // 01FF 0061;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FF 0061;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_088)
{
    uint32_t const cps[2] = { 0x01FF, 0x0041 };

    // 01FF 0041;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FF 0041;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_089)
{
    uint32_t const cps[2] = { 0x01FE, 0x0061 };

    // 01FE 0061;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FE 0061;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_090)
{
    uint32_t const cps[2] = { 0x01FE, 0x0041 };

    // 01FE 0041;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FE 0041;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CAD | 0020 002F 0024 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_091)
{
    uint32_t const cps[2] = { 0x01EB, 0x0061 };

    // 01EB 0061;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EB 0061;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_092)
{
    uint32_t const cps[2] = { 0x01EB, 0x0041 };

    // 01EB 0041;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EB 0041;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_093)
{
    uint32_t const cps[2] = { 0x01EA, 0x0061 };

    // 01EA 0061;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EA 0061;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_094)
{
    uint32_t const cps[2] = { 0x01EA, 0x0041 };

    // 01EA 0041;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EA 0041;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CAD | 0020 0031 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_095)
{
    uint32_t const cps[2] = { 0x01ED, 0x0061 };

    // 01ED 0061;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01ED 0061;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_096)
{
    uint32_t const cps[2] = { 0x01ED, 0x0041 };

    // 01ED 0041;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01ED 0041;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_097)
{
    uint32_t const cps[2] = { 0x01EC, 0x0061 };

    // 01EC 0061;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EC 0061;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_098)
{
    uint32_t const cps[2] = { 0x01EC, 0x0041 };

    // 01EC 0041;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EC 0041;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CAD | 0020 0031 0032 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_099)
{
    uint32_t const cps[2] = { 0x014D, 0x0061 };

    // 014D 0061;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014D 0061;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_100)
{
    uint32_t const cps[2] = { 0x014D, 0x0041 };

    // 014D 0041;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014D 0041;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_101)
{
    uint32_t const cps[2] = { 0x014C, 0x0061 };

    // 014C 0061;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014C 0061;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_102)
{
    uint32_t const cps[2] = { 0x014C, 0x0041 };

    // 014C 0041;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014C 0041;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CAD | 0020 0032 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_103)
{
    uint32_t const cps[2] = { 0x1E53, 0x0061 };

    // 1E53 0061;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E53 0061;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_104)
{
    uint32_t const cps[2] = { 0x1E53, 0x0041 };

    // 1E53 0041;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E53 0041;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_105)
{
    uint32_t const cps[2] = { 0x1E52, 0x0061 };

    // 1E52 0061;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E52 0061;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_106)
{
    uint32_t const cps[2] = { 0x1E52, 0x0041 };

    // 1E52 0041;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E52 0041;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_107)
{
    uint32_t const cps[2] = { 0x1E51, 0x0061 };

    // 1E51 0061;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E51 0061;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_108)
{
    uint32_t const cps[2] = { 0x1E51, 0x0041 };

    // 1E51 0041;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E51 0041;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_109)
{
    uint32_t const cps[2] = { 0x1E50, 0x0061 };

    // 1E50 0061;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E50 0061;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_110)
{
    uint32_t const cps[2] = { 0x1E50, 0x0041 };

    // 1E50 0041;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E50 0041;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_111)
{
    uint32_t const cps[2] = { 0x1DED, 0x0061 };

    // 1DED 0061;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CAD | 0020 0034 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DED 0061;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CAD | 0020 0034 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_112)
{
    uint32_t const cps[2] = { 0x1DED, 0x0041 };

    // 1DED 0041;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CAD | 0020 0034 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DED 0041;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CAD | 0020 0034 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_113)
{
    uint32_t const cps[2] = { 0x1ECF, 0x0061 };

    // 1ECF 0061;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECF 0061;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_114)
{
    uint32_t const cps[2] = { 0x1ECF, 0x0041 };

    // 1ECF 0041;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECF 0041;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_115)
{
    uint32_t const cps[2] = { 0x1ECE, 0x0061 };

    // 1ECE 0061;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECE 0061;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_116)
{
    uint32_t const cps[2] = { 0x1ECE, 0x0041 };

    // 1ECE 0041;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECE 0041;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CAD | 0020 003B 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_117)
{
    uint32_t const cps[2] = { 0x020D, 0x0061 };

    // 020D 0061;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020D 0061;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_118)
{
    uint32_t const cps[2] = { 0x020D, 0x0041 };

    // 020D 0041;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020D 0041;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_119)
{
    uint32_t const cps[2] = { 0x020C, 0x0061 };

    // 020C 0061;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020C 0061;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_120)
{
    uint32_t const cps[2] = { 0x020C, 0x0041 };

    // 020C 0041;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020C 0041;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CAD | 0020 003C 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_121)
{
    uint32_t const cps[2] = { 0x020F, 0x0061 };

    // 020F 0061;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020F 0061;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_122)
{
    uint32_t const cps[2] = { 0x020F, 0x0041 };

    // 020F 0041;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020F 0041;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_123)
{
    uint32_t const cps[2] = { 0x020E, 0x0061 };

    // 020E 0061;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020E 0061;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_124)
{
    uint32_t const cps[2] = { 0x020E, 0x0041 };

    // 020E 0041;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020E 0041;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CAD | 0020 003E 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_125)
{
    uint32_t const cps[2] = { 0x01A1, 0x0061 };

    // 01A1 0061;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A1 0061;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_126)
{
    uint32_t const cps[2] = { 0x01A1, 0x0041 };

    // 01A1 0041;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A1 0041;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_127)
{
    uint32_t const cps[2] = { 0x01A0, 0x0061 };

    // 01A0 0061;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A0 0061;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_128)
{
    uint32_t const cps[2] = { 0x01A0, 0x0041 };

    // 01A0 0041;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A0 0041;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CAD | 0020 003F 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_129)
{
    uint32_t const cps[2] = { 0x1EDB, 0x0061 };

    // 1EDB 0061;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDB 0061;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_130)
{
    uint32_t const cps[2] = { 0x1EDB, 0x0041 };

    // 1EDB 0041;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDB 0041;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_131)
{
    uint32_t const cps[2] = { 0x1EDA, 0x0061 };

    // 1EDA 0061;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDA 0061;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_132)
{
    uint32_t const cps[2] = { 0x1EDA, 0x0041 };

    // 1EDA 0041;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDA 0041;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_133)
{
    uint32_t const cps[2] = { 0x1EDD, 0x0061 };

    // 1EDD 0061;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDD 0061;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_134)
{
    uint32_t const cps[2] = { 0x1EDD, 0x0041 };

    // 1EDD 0041;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDD 0041;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_135)
{
    uint32_t const cps[2] = { 0x1EDC, 0x0061 };

    // 1EDC 0061;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDC 0061;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_136)
{
    uint32_t const cps[2] = { 0x1EDC, 0x0041 };

    // 1EDC 0041;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDC 0041;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_137)
{
    uint32_t const cps[2] = { 0x1EE1, 0x0061 };

    // 1EE1 0061;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE1 0061;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_138)
{
    uint32_t const cps[2] = { 0x1EE1, 0x0041 };

    // 1EE1 0041;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE1 0041;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_139)
{
    uint32_t const cps[2] = { 0x1EE0, 0x0061 };

    // 1EE0 0061;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE0 0061;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_140)
{
    uint32_t const cps[2] = { 0x1EE0, 0x0041 };

    // 1EE0 0041;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE0 0041;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_141)
{
    uint32_t const cps[2] = { 0x1EDF, 0x0061 };

    // 1EDF 0061;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDF 0061;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_142)
{
    uint32_t const cps[2] = { 0x1EDF, 0x0041 };

    // 1EDF 0041;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDF 0041;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_143)
{
    uint32_t const cps[2] = { 0x1EDE, 0x0061 };

    // 1EDE 0061;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDE 0061;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_144)
{
    uint32_t const cps[2] = { 0x1EDE, 0x0041 };

    // 1EDE 0041;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDE 0041;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_145)
{
    uint32_t const cps[2] = { 0x1EE3, 0x0061 };

    // 1EE3 0061;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE3 0061;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_146)
{
    uint32_t const cps[2] = { 0x1EE3, 0x0041 };

    // 1EE3 0041;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE3 0041;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_147)
{
    uint32_t const cps[2] = { 0x1EE2, 0x0061 };

    // 1EE2 0061;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE2 0061;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_148)
{
    uint32_t const cps[2] = { 0x1EE2, 0x0041 };

    // 1EE2 0041;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE2 0041;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_149)
{
    uint32_t const cps[2] = { 0x1ECD, 0x0061 };

    // 1ECD 0061;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECD 0061;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_150)
{
    uint32_t const cps[2] = { 0x1ECD, 0x0041 };

    // 1ECD 0041;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECD 0041;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_151)
{
    uint32_t const cps[2] = { 0x1ECC, 0x0061 };

    // 1ECC 0061;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECC 0061;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_152)
{
    uint32_t const cps[2] = { 0x1ECC, 0x0041 };

    // 1ECC 0041;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECC 0041;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CAD | 0020 0042 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_153)
{
    uint32_t const cps[2] = { 0x1ED9, 0x0061 };

    // 1ED9 0061;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED9 0061;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_154)
{
    uint32_t const cps[2] = { 0x1ED9, 0x0041 };

    // 1ED9 0041;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED9 0041;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_155)
{
    uint32_t const cps[2] = { 0x1ED8, 0x0061 };

    // 1ED8 0061;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED8 0061;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_156)
{
    uint32_t const cps[2] = { 0x1ED8, 0x0041 };

    // 1ED8 0041;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED8 0041;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_157)
{
    uint32_t const cps[2] = { 0x006F, 0x0062 };

    // 006F 0062;	
    // (o) LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 006F 0062;	
    // (o) LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_158)
{
    uint32_t const cps[2] = { 0xFF4F, 0x0062 };

    // FF4F 0062;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF4F 0062;	
    // (ｏ) FULLWIDTH LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_159)
{
    uint32_t const cps[2] = { 0x0366, 0x0062 };

    // 0366 0062;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0366 0062;	
    // (ͦ) COMBINING LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_160)
{
    uint32_t const cps[2] = { 0x2134, 0x0062 };

    // 2134 0062;	
    // (ℴ) SCRIPT SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2134 0062;	
    // (ℴ) SCRIPT SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_161)
{
    uint32_t const cps[2] = { 0x1D428, 0x0062 };

    // 1D428 0062;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D428 0062;	
    // (𝐨) MATHEMATICAL BOLD SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_162)
{
    uint32_t const cps[2] = { 0x1D45C, 0x0062 };

    // 1D45C 0062;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D45C 0062;	
    // (𝑜) MATHEMATICAL ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_163)
{
    uint32_t const cps[2] = { 0x1D490, 0x0062 };

    // 1D490 0062;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D490 0062;	
    // (𝒐) MATHEMATICAL BOLD ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_164)
{
    uint32_t const cps[2] = { 0x1D4F8, 0x0062 };

    // 1D4F8 0062;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4F8 0062;	
    // (𝓸) MATHEMATICAL BOLD SCRIPT SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_165)
{
    uint32_t const cps[2] = { 0x1D52C, 0x0062 };

    // 1D52C 0062;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D52C 0062;	
    // (𝔬) MATHEMATICAL FRAKTUR SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_166)
{
    uint32_t const cps[2] = { 0x1D560, 0x0062 };

    // 1D560 0062;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D560 0062;	
    // (𝕠) MATHEMATICAL DOUBLE-STRUCK SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_167)
{
    uint32_t const cps[2] = { 0x1D594, 0x0062 };

    // 1D594 0062;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D594 0062;	
    // (𝖔) MATHEMATICAL BOLD FRAKTUR SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_168)
{
    uint32_t const cps[2] = { 0x1D5C8, 0x0062 };

    // 1D5C8 0062;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5C8 0062;	
    // (𝗈) MATHEMATICAL SANS-SERIF SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_169)
{
    uint32_t const cps[2] = { 0x1D5FC, 0x0062 };

    // 1D5FC 0062;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5FC 0062;	
    // (𝗼) MATHEMATICAL SANS-SERIF BOLD SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_170)
{
    uint32_t const cps[2] = { 0x1D630, 0x0062 };

    // 1D630 0062;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D630 0062;	
    // (𝘰) MATHEMATICAL SANS-SERIF ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_171)
{
    uint32_t const cps[2] = { 0x1D664, 0x0062 };

    // 1D664 0062;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D664 0062;	
    // (𝙤) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_172)
{
    uint32_t const cps[2] = { 0x1D698, 0x0062 };

    // 1D698 0062;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D698 0062;	
    // (𝚘) MATHEMATICAL MONOSPACE SMALL O	[1E43 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_173)
{
    uint32_t const cps[2] = { 0x24DE, 0x0062 };

    // 24DE 0062;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24DE 0062;	
    // (ⓞ) CIRCLED LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_174)
{
    uint32_t const cps[2] = { 0x004F, 0x0062 };

    // 004F 0062;	
    // (O) LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 004F 0062;	
    // (O) LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_175)
{
    uint32_t const cps[2] = { 0xFF2F, 0x0062 };

    // FF2F 0062;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF2F 0062;	
    // (Ｏ) FULLWIDTH LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 0009 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_176)
{
    uint32_t const cps[2] = { 0x1D40E, 0x0062 };

    // 1D40E 0062;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D40E 0062;	
    // (𝐎) MATHEMATICAL BOLD CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_177)
{
    uint32_t const cps[2] = { 0x1D442, 0x0062 };

    // 1D442 0062;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D442 0062;	
    // (𝑂) MATHEMATICAL ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_178)
{
    uint32_t const cps[2] = { 0x1D476, 0x0062 };

    // 1D476 0062;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D476 0062;	
    // (𝑶) MATHEMATICAL BOLD ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_179)
{
    uint32_t const cps[2] = { 0x1D4AA, 0x0062 };

    // 1D4AA 0062;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4AA 0062;	
    // (𝒪) MATHEMATICAL SCRIPT CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_180)
{
    uint32_t const cps[2] = { 0x1D4DE, 0x0062 };

    // 1D4DE 0062;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4DE 0062;	
    // (𝓞) MATHEMATICAL BOLD SCRIPT CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_181)
{
    uint32_t const cps[2] = { 0x1D512, 0x0062 };

    // 1D512 0062;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D512 0062;	
    // (𝔒) MATHEMATICAL FRAKTUR CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_182)
{
    uint32_t const cps[2] = { 0x1D546, 0x0062 };

    // 1D546 0062;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D546 0062;	
    // (𝕆) MATHEMATICAL DOUBLE-STRUCK CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_183)
{
    uint32_t const cps[2] = { 0x1D57A, 0x0062 };

    // 1D57A 0062;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D57A 0062;	
    // (𝕺) MATHEMATICAL BOLD FRAKTUR CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_184)
{
    uint32_t const cps[2] = { 0x1D5AE, 0x0062 };

    // 1D5AE 0062;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5AE 0062;	
    // (𝖮) MATHEMATICAL SANS-SERIF CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_185)
{
    uint32_t const cps[2] = { 0x1D5E2, 0x0062 };

    // 1D5E2 0062;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E2 0062;	
    // (𝗢) MATHEMATICAL SANS-SERIF BOLD CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_186)
{
    uint32_t const cps[2] = { 0x1D616, 0x0062 };

    // 1D616 0062;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D616 0062;	
    // (𝘖) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_187)
{
    uint32_t const cps[2] = { 0x1D64A, 0x0062 };

    // 1D64A 0062;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D64A 0062;	
    // (𝙊) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_188)
{
    uint32_t const cps[2] = { 0x1D67E, 0x0062 };

    // 1D67E 0062;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D67E 0062;	
    // (𝙾) MATHEMATICAL MONOSPACE CAPITAL O	[1E43 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_189)
{
    uint32_t const cps[2] = { 0x24C4, 0x0062 };

    // 24C4 0062;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24C4 0062;	
    // (Ⓞ) CIRCLED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_190)
{
    uint32_t const cps[2] = { 0x1F15E, 0x0062 };

    // 1F15E 0062;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F15E 0062;	
    // (🅞) NEGATIVE CIRCLED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_191)
{
    uint32_t const cps[2] = { 0x00BA, 0x0062 };

    // 00BA 0062;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BA 0062;	
    // (º) MASCULINE ORDINAL INDICATOR	[1E43 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_192)
{
    uint32_t const cps[2] = { 0x1D52, 0x0062 };

    // 1D52 0062;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D52 0062;	
    // (ᵒ) MODIFIER LETTER SMALL O	[1E43 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_193)
{
    uint32_t const cps[2] = { 0x2092, 0x0062 };

    // 2092 0062;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2092 0062;	
    // (ₒ) LATIN SUBSCRIPT SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0015 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_194)
{
    uint32_t const cps[2] = { 0x1D3C, 0x0062 };

    // 1D3C 0062;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3C 0062;	
    // (ᴼ) MODIFIER LETTER CAPITAL O	[1E43 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_195)
{
    uint32_t const cps[2] = { 0x1F13E, 0x0062 };

    // 1F13E 0062;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F13E 0062;	
    // (🄾) SQUARED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_196)
{
    uint32_t const cps[2] = { 0x1F17E, 0x0062 };

    // 1F17E 0062;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F17E 0062;	
    // (🅾) NEGATIVE SQUARED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_197)
{
    uint32_t const cps[2] = { 0x00F3, 0x0062 };

    // 00F3 0062;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F3 0062;	
    // (ó) LATIN SMALL LETTER O WITH ACUTE	[1E43 1CC6 | 0020 0024 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_198)
{
    uint32_t const cps[2] = { 0x00D3, 0x0062 };

    // 00D3 0062;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D3 0062;	
    // (Ó) LATIN CAPITAL LETTER O WITH ACUTE	[1E43 1CC6 | 0020 0024 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_199)
{
    uint32_t const cps[2] = { 0x00F2, 0x0062 };

    // 00F2 0062;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F2 0062;	
    // (ò) LATIN SMALL LETTER O WITH GRAVE	[1E43 1CC6 | 0020 0025 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_200)
{
    uint32_t const cps[2] = { 0x00D2, 0x0062 };

    // 00D2 0062;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D2 0062;	
    // (Ò) LATIN CAPITAL LETTER O WITH GRAVE	[1E43 1CC6 | 0020 0025 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_201)
{
    uint32_t const cps[2] = { 0x014F, 0x0062 };

    // 014F 0062;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014F 0062;	
    // (ŏ) LATIN SMALL LETTER O WITH BREVE	[1E43 1CC6 | 0020 0026 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_202)
{
    uint32_t const cps[2] = { 0x014E, 0x0062 };

    // 014E 0062;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014E 0062;	
    // (Ŏ) LATIN CAPITAL LETTER O WITH BREVE	[1E43 1CC6 | 0020 0026 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_203)
{
    uint32_t const cps[2] = { 0x00F4, 0x0062 };

    // 00F4 0062;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F4 0062;	
    // (ô) LATIN SMALL LETTER O WITH CIRCUMFLEX	[1E43 1CC6 | 0020 0027 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_204)
{
    uint32_t const cps[2] = { 0x00D4, 0x0062 };

    // 00D4 0062;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D4 0062;	
    // (Ô) LATIN CAPITAL LETTER O WITH CIRCUMFLEX	[1E43 1CC6 | 0020 0027 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_205)
{
    uint32_t const cps[2] = { 0x1ED1, 0x0062 };

    // 1ED1 0062;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CC6 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED1 0062;	
    // (ố) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CC6 | 0020 0027 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_206)
{
    uint32_t const cps[2] = { 0x1ED0, 0x0062 };

    // 1ED0 0062;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CC6 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED0 0062;	
    // (Ố) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE	[1E43 1CC6 | 0020 0027 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_207)
{
    uint32_t const cps[2] = { 0x1ED3, 0x0062 };

    // 1ED3 0062;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CC6 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED3 0062;	
    // (ồ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CC6 | 0020 0027 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_208)
{
    uint32_t const cps[2] = { 0x1ED2, 0x0062 };

    // 1ED2 0062;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CC6 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED2 0062;	
    // (Ồ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE	[1E43 1CC6 | 0020 0027 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_209)
{
    uint32_t const cps[2] = { 0x1ED7, 0x0062 };

    // 1ED7 0062;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CC6 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED7 0062;	
    // (ỗ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CC6 | 0020 0027 002D 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_210)
{
    uint32_t const cps[2] = { 0x1ED6, 0x0062 };

    // 1ED6 0062;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CC6 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED6 0062;	
    // (Ỗ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE	[1E43 1CC6 | 0020 0027 002D 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_211)
{
    uint32_t const cps[2] = { 0x1ED5, 0x0062 };

    // 1ED5 0062;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CC6 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED5 0062;	
    // (ổ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CC6 | 0020 0027 003B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_212)
{
    uint32_t const cps[2] = { 0x1ED4, 0x0062 };

    // 1ED4 0062;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CC6 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED4 0062;	
    // (Ổ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE	[1E43 1CC6 | 0020 0027 003B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_213)
{
    uint32_t const cps[2] = { 0x01D2, 0x0062 };

    // 01D2 0062;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D2 0062;	
    // (ǒ) LATIN SMALL LETTER O WITH CARON	[1E43 1CC6 | 0020 0028 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_214)
{
    uint32_t const cps[2] = { 0x01D1, 0x0062 };

    // 01D1 0062;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01D1 0062;	
    // (Ǒ) LATIN CAPITAL LETTER O WITH CARON	[1E43 1CC6 | 0020 0028 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_215)
{
    uint32_t const cps[2] = { 0x00F6, 0x0062 };

    // 00F6 0062;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F6 0062;	
    // (ö) LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_216)
{
    uint32_t const cps[2] = { 0x1DF3, 0x0062 };

    // 1DF3 0062;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DF3 0062;	
    // (ᷳ) COMBINING LATIN SMALL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_217)
{
    uint32_t const cps[2] = { 0xA79D, 0x0062 };

    // A79D 0062;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79D 0062;	
    // (ꞝ) LATIN SMALL LETTER VOLAPUK OE	[1E43 1CC6 | 0020 002B 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_218)
{
    uint32_t const cps[2] = { 0x00D6, 0x0062 };

    // 00D6 0062;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D6 0062;	
    // (Ö) LATIN CAPITAL LETTER O WITH DIAERESIS	[1E43 1CC6 | 0020 002B 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_219)
{
    uint32_t const cps[2] = { 0xA79C, 0x0062 };

    // A79C 0062;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CC6 | 0020 002B 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A79C 0062;	
    // (Ꞝ) LATIN CAPITAL LETTER VOLAPUK OE	[1E43 1CC6 | 0020 002B 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_220)
{
    uint32_t const cps[2] = { 0x022B, 0x0062 };

    // 022B 0062;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CC6 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022B 0062;	
    // (ȫ) LATIN SMALL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CC6 | 0020 002B 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_221)
{
    uint32_t const cps[2] = { 0x022A, 0x0062 };

    // 022A 0062;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CC6 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022A 0062;	
    // (Ȫ) LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON	[1E43 1CC6 | 0020 002B 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_222)
{
    uint32_t const cps[2] = { 0x0151, 0x0062 };

    // 0151 0062;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CC6 | 0020 002C 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0151 0062;	
    // (ő) LATIN SMALL LETTER O WITH DOUBLE ACUTE	[1E43 1CC6 | 0020 002C 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_223)
{
    uint32_t const cps[2] = { 0x0150, 0x0062 };

    // 0150 0062;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CC6 | 0020 002C 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0150 0062;	
    // (Ő) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE	[1E43 1CC6 | 0020 002C 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_224)
{
    uint32_t const cps[2] = { 0x00F5, 0x0062 };

    // 00F5 0062;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F5 0062;	
    // (õ) LATIN SMALL LETTER O WITH TILDE	[1E43 1CC6 | 0020 002D 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_225)
{
    uint32_t const cps[2] = { 0x00D5, 0x0062 };

    // 00D5 0062;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D5 0062;	
    // (Õ) LATIN CAPITAL LETTER O WITH TILDE	[1E43 1CC6 | 0020 002D 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_226)
{
    uint32_t const cps[2] = { 0x1E4D, 0x0062 };

    // 1E4D 0062;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CC6 | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4D 0062;	
    // (ṍ) LATIN SMALL LETTER O WITH TILDE AND ACUTE	[1E43 1CC6 | 0020 002D 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_227)
{
    uint32_t const cps[2] = { 0x1E4C, 0x0062 };

    // 1E4C 0062;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CC6 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4C 0062;	
    // (Ṍ) LATIN CAPITAL LETTER O WITH TILDE AND ACUTE	[1E43 1CC6 | 0020 002D 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_228)
{
    uint32_t const cps[2] = { 0x1E4F, 0x0062 };

    // 1E4F 0062;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CC6 | 0020 002D 002B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4F 0062;	
    // (ṏ) LATIN SMALL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CC6 | 0020 002D 002B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_229)
{
    uint32_t const cps[2] = { 0x1E4E, 0x0062 };

    // 1E4E 0062;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CC6 | 0020 002D 002B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E4E 0062;	
    // (Ṏ) LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS	[1E43 1CC6 | 0020 002D 002B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_230)
{
    uint32_t const cps[2] = { 0x022D, 0x0062 };

    // 022D 0062;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CC6 | 0020 002D 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022D 0062;	
    // (ȭ) LATIN SMALL LETTER O WITH TILDE AND MACRON	[1E43 1CC6 | 0020 002D 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_231)
{
    uint32_t const cps[2] = { 0x022C, 0x0062 };

    // 022C 0062;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CC6 | 0020 002D 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022C 0062;	
    // (Ȭ) LATIN CAPITAL LETTER O WITH TILDE AND MACRON	[1E43 1CC6 | 0020 002D 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_232)
{
    uint32_t const cps[2] = { 0x022F, 0x0062 };

    // 022F 0062;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022F 0062;	
    // (ȯ) LATIN SMALL LETTER O WITH DOT ABOVE	[1E43 1CC6 | 0020 002E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_233)
{
    uint32_t const cps[2] = { 0x022E, 0x0062 };

    // 022E 0062;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 022E 0062;	
    // (Ȯ) LATIN CAPITAL LETTER O WITH DOT ABOVE	[1E43 1CC6 | 0020 002E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_234)
{
    uint32_t const cps[2] = { 0x0231, 0x0062 };

    // 0231 0062;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CC6 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0231 0062;	
    // (ȱ) LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CC6 | 0020 002E 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_235)
{
    uint32_t const cps[2] = { 0x0230, 0x0062 };

    // 0230 0062;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CC6 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0230 0062;	
    // (Ȱ) LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON	[1E43 1CC6 | 0020 002E 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_236)
{
    uint32_t const cps[2] = { 0x00F8, 0x0062 };

    // 00F8 0062;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F8 0062;	
    // (ø) LATIN SMALL LETTER O WITH STROKE	[1E43 1CC6 | 0020 002F 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_237)
{
    uint32_t const cps[2] = { 0x00D8, 0x0062 };

    // 00D8 0062;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CC6 | 0020 002F 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D8 0062;	
    // (Ø) LATIN CAPITAL LETTER O WITH STROKE	[1E43 1CC6 | 0020 002F 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_238)
{
    uint32_t const cps[2] = { 0x01FF, 0x0062 };

    // 01FF 0062;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CC6 | 0020 002F 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FF 0062;	
    // (ǿ) LATIN SMALL LETTER O WITH STROKE AND ACUTE	[1E43 1CC6 | 0020 002F 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_239)
{
    uint32_t const cps[2] = { 0x01FE, 0x0062 };

    // 01FE 0062;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CC6 | 0020 002F 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01FE 0062;	
    // (Ǿ) LATIN CAPITAL LETTER O WITH STROKE AND ACUTE	[1E43 1CC6 | 0020 002F 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_240)
{
    uint32_t const cps[2] = { 0x01EB, 0x0062 };

    // 01EB 0062;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CC6 | 0020 0031 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EB 0062;	
    // (ǫ) LATIN SMALL LETTER O WITH OGONEK	[1E43 1CC6 | 0020 0031 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_241)
{
    uint32_t const cps[2] = { 0x01EA, 0x0062 };

    // 01EA 0062;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CC6 | 0020 0031 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EA 0062;	
    // (Ǫ) LATIN CAPITAL LETTER O WITH OGONEK	[1E43 1CC6 | 0020 0031 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_242)
{
    uint32_t const cps[2] = { 0x01ED, 0x0062 };

    // 01ED 0062;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CC6 | 0020 0031 0032 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01ED 0062;	
    // (ǭ) LATIN SMALL LETTER O WITH OGONEK AND MACRON	[1E43 1CC6 | 0020 0031 0032 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_243)
{
    uint32_t const cps[2] = { 0x01EC, 0x0062 };

    // 01EC 0062;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CC6 | 0020 0031 0032 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01EC 0062;	
    // (Ǭ) LATIN CAPITAL LETTER O WITH OGONEK AND MACRON	[1E43 1CC6 | 0020 0031 0032 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_244)
{
    uint32_t const cps[2] = { 0x014D, 0x0062 };

    // 014D 0062;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014D 0062;	
    // (ō) LATIN SMALL LETTER O WITH MACRON	[1E43 1CC6 | 0020 0032 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_245)
{
    uint32_t const cps[2] = { 0x014C, 0x0062 };

    // 014C 0062;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 014C 0062;	
    // (Ō) LATIN CAPITAL LETTER O WITH MACRON	[1E43 1CC6 | 0020 0032 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_246)
{
    uint32_t const cps[2] = { 0x1E53, 0x0062 };

    // 1E53 0062;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CC6 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E53 0062;	
    // (ṓ) LATIN SMALL LETTER O WITH MACRON AND ACUTE	[1E43 1CC6 | 0020 0032 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_247)
{
    uint32_t const cps[2] = { 0x1E52, 0x0062 };

    // 1E52 0062;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CC6 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E52 0062;	
    // (Ṓ) LATIN CAPITAL LETTER O WITH MACRON AND ACUTE	[1E43 1CC6 | 0020 0032 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_248)
{
    uint32_t const cps[2] = { 0x1E51, 0x0062 };

    // 1E51 0062;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CC6 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E51 0062;	
    // (ṑ) LATIN SMALL LETTER O WITH MACRON AND GRAVE	[1E43 1CC6 | 0020 0032 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_249)
{
    uint32_t const cps[2] = { 0x1E50, 0x0062 };

    // 1E50 0062;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CC6 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E50 0062;	
    // (Ṑ) LATIN CAPITAL LETTER O WITH MACRON AND GRAVE	[1E43 1CC6 | 0020 0032 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_250)
{
    uint32_t const cps[2] = { 0x1DED, 0x0062 };

    // 1DED 0062;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CC6 | 0020 0034 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DED 0062;	
    // (ᷭ) COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE	[1E43 1CC6 | 0020 0034 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_251)
{
    uint32_t const cps[2] = { 0x1ECF, 0x0062 };

    // 1ECF 0062;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CC6 | 0020 003B 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECF 0062;	
    // (ỏ) LATIN SMALL LETTER O WITH HOOK ABOVE	[1E43 1CC6 | 0020 003B 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_252)
{
    uint32_t const cps[2] = { 0x1ECE, 0x0062 };

    // 1ECE 0062;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CC6 | 0020 003B 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECE 0062;	
    // (Ỏ) LATIN CAPITAL LETTER O WITH HOOK ABOVE	[1E43 1CC6 | 0020 003B 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_253)
{
    uint32_t const cps[2] = { 0x020D, 0x0062 };

    // 020D 0062;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CC6 | 0020 003C 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020D 0062;	
    // (ȍ) LATIN SMALL LETTER O WITH DOUBLE GRAVE	[1E43 1CC6 | 0020 003C 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_254)
{
    uint32_t const cps[2] = { 0x020C, 0x0062 };

    // 020C 0062;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CC6 | 0020 003C 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020C 0062;	
    // (Ȍ) LATIN CAPITAL LETTER O WITH DOUBLE GRAVE	[1E43 1CC6 | 0020 003C 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_255)
{
    uint32_t const cps[2] = { 0x020F, 0x0062 };

    // 020F 0062;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CC6 | 0020 003E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020F 0062;	
    // (ȏ) LATIN SMALL LETTER O WITH INVERTED BREVE	[1E43 1CC6 | 0020 003E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_256)
{
    uint32_t const cps[2] = { 0x020E, 0x0062 };

    // 020E 0062;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CC6 | 0020 003E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 020E 0062;	
    // (Ȏ) LATIN CAPITAL LETTER O WITH INVERTED BREVE	[1E43 1CC6 | 0020 003E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_257)
{
    uint32_t const cps[2] = { 0x01A1, 0x0062 };

    // 01A1 0062;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CC6 | 0020 003F 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A1 0062;	
    // (ơ) LATIN SMALL LETTER O WITH HORN	[1E43 1CC6 | 0020 003F 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_258)
{
    uint32_t const cps[2] = { 0x01A0, 0x0062 };

    // 01A0 0062;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CC6 | 0020 003F 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01A0 0062;	
    // (Ơ) LATIN CAPITAL LETTER O WITH HORN	[1E43 1CC6 | 0020 003F 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_259)
{
    uint32_t const cps[2] = { 0x1EDB, 0x0062 };

    // 1EDB 0062;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CC6 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDB 0062;	
    // (ớ) LATIN SMALL LETTER O WITH HORN AND ACUTE	[1E43 1CC6 | 0020 003F 0024 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_260)
{
    uint32_t const cps[2] = { 0x1EDA, 0x0062 };

    // 1EDA 0062;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CC6 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDA 0062;	
    // (Ớ) LATIN CAPITAL LETTER O WITH HORN AND ACUTE	[1E43 1CC6 | 0020 003F 0024 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_261)
{
    uint32_t const cps[2] = { 0x1EDD, 0x0062 };

    // 1EDD 0062;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CC6 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDD 0062;	
    // (ờ) LATIN SMALL LETTER O WITH HORN AND GRAVE	[1E43 1CC6 | 0020 003F 0025 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_262)
{
    uint32_t const cps[2] = { 0x1EDC, 0x0062 };

    // 1EDC 0062;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CC6 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDC 0062;	
    // (Ờ) LATIN CAPITAL LETTER O WITH HORN AND GRAVE	[1E43 1CC6 | 0020 003F 0025 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_263)
{
    uint32_t const cps[2] = { 0x1EE1, 0x0062 };

    // 1EE1 0062;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CC6 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE1 0062;	
    // (ỡ) LATIN SMALL LETTER O WITH HORN AND TILDE	[1E43 1CC6 | 0020 003F 002D 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_264)
{
    uint32_t const cps[2] = { 0x1EE0, 0x0062 };

    // 1EE0 0062;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CC6 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE0 0062;	
    // (Ỡ) LATIN CAPITAL LETTER O WITH HORN AND TILDE	[1E43 1CC6 | 0020 003F 002D 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_265)
{
    uint32_t const cps[2] = { 0x1EDF, 0x0062 };

    // 1EDF 0062;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CC6 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDF 0062;	
    // (ở) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CC6 | 0020 003F 003B 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_266)
{
    uint32_t const cps[2] = { 0x1EDE, 0x0062 };

    // 1EDE 0062;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CC6 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EDE 0062;	
    // (Ở) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE	[1E43 1CC6 | 0020 003F 003B 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_267)
{
    uint32_t const cps[2] = { 0x1EE3, 0x0062 };

    // 1EE3 0062;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CC6 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE3 0062;	
    // (ợ) LATIN SMALL LETTER O WITH HORN AND DOT BELOW	[1E43 1CC6 | 0020 003F 0042 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_268)
{
    uint32_t const cps[2] = { 0x1EE2, 0x0062 };

    // 1EE2 0062;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CC6 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE2 0062;	
    // (Ợ) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW	[1E43 1CC6 | 0020 003F 0042 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_269)
{
    uint32_t const cps[2] = { 0x1ECD, 0x0062 };

    // 1ECD 0062;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECD 0062;	
    // (ọ) LATIN SMALL LETTER O WITH DOT BELOW	[1E43 1CC6 | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_270)
{
    uint32_t const cps[2] = { 0x1ECC, 0x0062 };

    // 1ECC 0062;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ECC 0062;	
    // (Ọ) LATIN CAPITAL LETTER O WITH DOT BELOW	[1E43 1CC6 | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_271)
{
    uint32_t const cps[2] = { 0x1ED9, 0x0062 };

    // 1ED9 0062;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CC6 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED9 0062;	
    // (ộ) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CC6 | 0020 0042 0027 0020 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_272)
{
    uint32_t const cps[2] = { 0x1ED8, 0x0062 };

    // 1ED8 0062;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CC6 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1ED8 0062;	
    // (Ộ) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW	[1E43 1CC6 | 0020 0042 0027 0020 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_273)
{
    uint32_t const cps[2] = { 0x0153, 0x0021 };

    // 0153 0021;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 0261 | 0020 0111 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0153 0021;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 0004 0004 0004 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_274)
{
    uint32_t const cps[2] = { 0x0152, 0x0021 };

    // 0152 0021;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 0261 | 0020 0111 0020 0020 | 000A 0004 000A 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0152 0021;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 000A 0004 000A | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_275)
{
    uint32_t const cps[2] = { 0xA7F9, 0x0021 };

    // A7F9 0021;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 0261 | 0020 0111 0020 0020 | 0014 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7F9 0021;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 0014 0014 0014 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_276)
{
    uint32_t const cps[2] = { 0x0153, 0x003F };

    // 0153 003F;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 0267 | 0020 0111 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0153 003F;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 0004 0004 0004 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_277)
{
    uint32_t const cps[2] = { 0x0152, 0x003F };

    // 0152 003F;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 0267 | 0020 0111 0020 0020 | 000A 0004 000A 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0152 003F;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 000A 0004 000A | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_278)
{
    uint32_t const cps[2] = { 0xA7F9, 0x003F };

    // A7F9 003F;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 0267 | 0020 0111 0020 0020 | 0014 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7F9 003F;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 | 0020 0111 0020 | 0014 0014 0014 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1D10, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_279)
{
    uint32_t const cps[2] = { 0x0153, 0x0061 };

    // 0153 0061;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0153 0061;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_280)
{
    uint32_t const cps[2] = { 0x0153, 0x0041 };

    // 0153 0041;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0153 0041;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0004 0004 0004 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_281)
{
    uint32_t const cps[2] = { 0x0152, 0x0061 };

    // 0152 0061;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 000A 0004 000A 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0152 0061;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 000A 0004 000A 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_282)
{
    uint32_t const cps[2] = { 0x0152, 0x0041 };

    // 0152 0041;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 000A 0004 000A 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0152 0041;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 000A 0004 000A 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_283)
{
    uint32_t const cps[2] = { 0xA7F9, 0x0061 };

    // A7F9 0061;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0014 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7F9 0061;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0014 0014 0014 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_284)
{
    uint32_t const cps[2] = { 0xA7F9, 0x0041 };

    // A7F9 0041;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0014 0014 0014 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7F9 0041;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CAD | 0020 0111 0020 0020 | 0014 0014 0014 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_285)
{
    uint32_t const cps[2] = { 0x0153, 0x0062 };

    // 0153 0062;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0153 0062;	
    // (œ) LATIN SMALL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_286)
{
    uint32_t const cps[2] = { 0x0152, 0x0062 };

    // 0152 0062;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 000A 0004 000A 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0152 0062;	
    // (Œ) LATIN CAPITAL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 000A 0004 000A 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_287)
{
    uint32_t const cps[2] = { 0xA7F9, 0x0062 };

    // A7F9 0062;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 0014 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7F9 0062;	
    // (ꟹ) MODIFIER LETTER SMALL LIGATURE OE	[1E43 1D10 1CC6 | 0020 0111 0020 0020 | 0014 0014 0014 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1E43, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_288)
{
    uint32_t const cps[2] = { 0x1F197, 0x0021 };

    // 1F197 0021;	
    // (🆗) SQUARED OK	[1E43 1DCB 0261 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F197 0021;	
    // (🆗) SQUARED OK	[1E43 1DCB | 0020 0020 | 001D 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1DCB, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_289)
{
    uint32_t const cps[2] = { 0x1F197, 0x003F };

    // 1F197 003F;	
    // (🆗) SQUARED OK	[1E43 1DCB 0267 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F197 003F;	
    // (🆗) SQUARED OK	[1E43 1DCB | 0020 0020 | 001D 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1DCB, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_290)
{
    uint32_t const cps[2] = { 0x1F197, 0x0061 };

    // 1F197 0061;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CAD | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F197 0061;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CAD | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_291)
{
    uint32_t const cps[2] = { 0x1F197, 0x0041 };

    // 1F197 0041;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CAD | 0020 0020 0020 | 001D 001D 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F197 0041;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CAD | 0020 0020 0020 | 001D 001D 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_292)
{
    uint32_t const cps[2] = { 0x1F197, 0x0062 };

    // 1F197 0062;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F197 0062;	
    // (🆗) SQUARED OK	[1E43 1DCB 1CC6 | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_293)
{
    uint32_t const cps[2] = { 0xA74F, 0x0021 };

    // A74F 0021;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74F 0021;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1E43, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_294)
{
    uint32_t const cps[2] = { 0xA74E, 0x0021 };

    // A74E 0021;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 0261 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74E 0021;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 | 0020 0020 | 000A 000A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1E43, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_295)
{
    uint32_t const cps[2] = { 0xA74F, 0x003F };

    // A74F 003F;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74F 003F;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1E43, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_296)
{
    uint32_t const cps[2] = { 0xA74E, 0x003F };

    // A74E 003F;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 0267 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74E 003F;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 | 0020 0020 | 000A 000A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1E43, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_297)
{
    uint32_t const cps[2] = { 0xA74F, 0x0061 };

    // A74F 0061;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74F 0061;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_298)
{
    uint32_t const cps[2] = { 0xA74F, 0x0041 };

    // A74F 0041;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74F 0041;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_299)
{
    uint32_t const cps[2] = { 0xA74E, 0x0061 };

    // A74E 0061;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74E 0061;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_300)
{
    uint32_t const cps[2] = { 0xA74E, 0x0041 };

    // A74E 0041;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74E 0041;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CAD | 0020 0020 0020 | 000A 000A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_301)
{
    uint32_t const cps[2] = { 0xA74F, 0x0062 };

    // A74F 0062;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74F 0062;	
    // (ꝏ) LATIN SMALL LETTER OO	[1E43 1E43 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_302)
{
    uint32_t const cps[2] = { 0xA74E, 0x0062 };

    // A74E 0062;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74E 0062;	
    // (Ꝏ) LATIN CAPITAL LETTER OO	[1E43 1E43 1CC6 | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_303)
{
    uint32_t const cps[2] = { 0x3375, 0x0021 };

    // 3375 0021;	
    // (㍵) SQUARE OV	[1E43 1F49 0261 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3375 0021;	
    // (㍵) SQUARE OV	[1E43 1F49 | 0020 0020 | 001C 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1F49, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_304)
{
    uint32_t const cps[2] = { 0x3375, 0x003F };

    // 3375 003F;	
    // (㍵) SQUARE OV	[1E43 1F49 0267 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3375 003F;	
    // (㍵) SQUARE OV	[1E43 1F49 | 0020 0020 | 001C 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1E43, 0x1F49, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_305)
{
    uint32_t const cps[2] = { 0x3375, 0x0061 };

    // 3375 0061;	
    // (㍵) SQUARE OV	[1E43 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3375 0061;	
    // (㍵) SQUARE OV	[1E43 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_306)
{
    uint32_t const cps[2] = { 0x3375, 0x0041 };

    // 3375 0041;	
    // (㍵) SQUARE OV	[1E43 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3375 0041;	
    // (㍵) SQUARE OV	[1E43 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_307)
{
    uint32_t const cps[2] = { 0x3375, 0x0062 };

    // 3375 0062;	
    // (㍵) SQUARE OV	[1E43 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1E43, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3375 0062;	
    // (㍵) SQUARE OV	[1E43 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1E43, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_308)
{
    uint32_t const cps[2] = { 0x1D0F, 0x0021 };

    // 1D0F 0021;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D0F 0021;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E47, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_309)
{
    uint32_t const cps[2] = { 0x1D0F, 0x003F };

    // 1D0F 003F;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D0F 003F;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E47, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_310)
{
    uint32_t const cps[2] = { 0x1D0F, 0x0061 };

    // 1D0F 0061;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D0F 0061;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_311)
{
    uint32_t const cps[2] = { 0x1D0F, 0x0041 };

    // 1D0F 0041;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D0F 0041;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_312)
{
    uint32_t const cps[2] = { 0x1D0F, 0x0062 };

    // 1D0F 0062;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D0F 0062;	
    // (ᴏ) LATIN LETTER SMALL CAPITAL O	[1E47 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_313)
{
    uint32_t const cps[2] = { 0x1D11, 0x0021 };

    // 1D11 0021;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D11 0021;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E48, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_314)
{
    uint32_t const cps[2] = { 0x1D11, 0x003F };

    // 1D11 003F;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D11 003F;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E48, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_315)
{
    uint32_t const cps[2] = { 0x1D11, 0x0061 };

    // 1D11 0061;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D11 0061;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_316)
{
    uint32_t const cps[2] = { 0x1D11, 0x0041 };

    // 1D11 0041;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D11 0041;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_317)
{
    uint32_t const cps[2] = { 0x1D11, 0x0062 };

    // 1D11 0062;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D11 0062;	
    // (ᴑ) LATIN SMALL LETTER SIDEWAYS O	[1E48 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_318)
{
    uint32_t const cps[2] = { 0xAB3D, 0x0021 };

    // AB3D 0021;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3D 0021;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E49, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_319)
{
    uint32_t const cps[2] = { 0xAB3D, 0x003F };

    // AB3D 003F;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3D 003F;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E49, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_320)
{
    uint32_t const cps[2] = { 0xAB3D, 0x0061 };

    // AB3D 0061;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3D 0061;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_321)
{
    uint32_t const cps[2] = { 0xAB3D, 0x0041 };

    // AB3D 0041;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3D 0041;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_322)
{
    uint32_t const cps[2] = { 0xAB3D, 0x0062 };

    // AB3D 0062;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3D 0062;	
    // (ꬽ) LATIN SMALL LETTER BLACKLETTER O	[1E49 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_323)
{
    uint32_t const cps[2] = { 0x0276, 0x0021 };

    // 0276 0021;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0276 0021;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E4A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_324)
{
    uint32_t const cps[2] = { 0x0276, 0x003F };

    // 0276 003F;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0276 003F;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E4A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_325)
{
    uint32_t const cps[2] = { 0x0276, 0x0061 };

    // 0276 0061;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0276 0061;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_326)
{
    uint32_t const cps[2] = { 0x0276, 0x0041 };

    // 0276 0041;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0276 0041;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_327)
{
    uint32_t const cps[2] = { 0x0276, 0x0062 };

    // 0276 0062;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0276 0062;	
    // (ɶ) LATIN LETTER SMALL CAPITAL OE	[1E4A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_328)
{
    uint32_t const cps[2] = { 0x1D14, 0x0021 };

    // 1D14 0021;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D14 0021;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E4E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_329)
{
    uint32_t const cps[2] = { 0x1D14, 0x003F };

    // 1D14 003F;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D14 003F;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E4E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_330)
{
    uint32_t const cps[2] = { 0x1D14, 0x0061 };

    // 1D14 0061;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D14 0061;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_331)
{
    uint32_t const cps[2] = { 0x1D14, 0x0041 };

    // 1D14 0041;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D14 0041;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_332)
{
    uint32_t const cps[2] = { 0x1D14, 0x0062 };

    // 1D14 0062;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D14 0062;	
    // (ᴔ) LATIN SMALL LETTER TURNED OE	[1E4E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_333)
{
    uint32_t const cps[2] = { 0xAB41, 0x0021 };

    // AB41 0021;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB41 0021;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E4F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_334)
{
    uint32_t const cps[2] = { 0xAB41, 0x003F };

    // AB41 003F;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB41 003F;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E4F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_335)
{
    uint32_t const cps[2] = { 0xAB41, 0x0061 };

    // AB41 0061;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB41 0061;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_336)
{
    uint32_t const cps[2] = { 0xAB41, 0x0041 };

    // AB41 0041;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB41 0041;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_337)
{
    uint32_t const cps[2] = { 0xAB41, 0x0062 };

    // AB41 0062;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB41 0062;	
    // (ꭁ) LATIN SMALL LETTER TURNED OE WITH STROKE	[1E4F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_338)
{
    uint32_t const cps[2] = { 0xAB42, 0x0021 };

    // AB42 0021;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB42 0021;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E50, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_339)
{
    uint32_t const cps[2] = { 0xAB42, 0x003F };

    // AB42 003F;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB42 003F;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E50, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_340)
{
    uint32_t const cps[2] = { 0xAB42, 0x0061 };

    // AB42 0061;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB42 0061;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_341)
{
    uint32_t const cps[2] = { 0xAB42, 0x0041 };

    // AB42 0041;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB42 0041;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_342)
{
    uint32_t const cps[2] = { 0xAB42, 0x0062 };

    // AB42 0062;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB42 0062;	
    // (ꭂ) LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE	[1E50 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_343)
{
    uint32_t const cps[2] = { 0xAB40, 0x0021 };

    // AB40 0021;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB40 0021;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E51, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_344)
{
    uint32_t const cps[2] = { 0xAB40, 0x003F };

    // AB40 003F;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB40 003F;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E51, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_345)
{
    uint32_t const cps[2] = { 0xAB40, 0x0061 };

    // AB40 0061;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB40 0061;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_346)
{
    uint32_t const cps[2] = { 0xAB40, 0x0041 };

    // AB40 0041;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB40 0041;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_347)
{
    uint32_t const cps[2] = { 0xAB40, 0x0062 };

    // AB40 0062;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB40 0062;	
    // (ꭀ) LATIN SMALL LETTER INVERTED OE	[1E51 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_348)
{
    uint32_t const cps[2] = { 0xAB43, 0x0021 };

    // AB43 0021;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB43 0021;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E52, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_349)
{
    uint32_t const cps[2] = { 0xAB43, 0x003F };

    // AB43 003F;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB43 003F;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E52, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_350)
{
    uint32_t const cps[2] = { 0xAB43, 0x0061 };

    // AB43 0061;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB43 0061;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_351)
{
    uint32_t const cps[2] = { 0xAB43, 0x0041 };

    // AB43 0041;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB43 0041;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_352)
{
    uint32_t const cps[2] = { 0xAB43, 0x0062 };

    // AB43 0062;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB43 0062;	
    // (ꭃ) LATIN SMALL LETTER TURNED O OPEN-O	[1E52 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_353)
{
    uint32_t const cps[2] = { 0xAB44, 0x0021 };

    // AB44 0021;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB44 0021;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E53, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_354)
{
    uint32_t const cps[2] = { 0xAB44, 0x003F };

    // AB44 003F;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB44 003F;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E53, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_355)
{
    uint32_t const cps[2] = { 0xAB44, 0x0061 };

    // AB44 0061;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB44 0061;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_356)
{
    uint32_t const cps[2] = { 0xAB44, 0x0041 };

    // AB44 0041;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB44 0041;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_357)
{
    uint32_t const cps[2] = { 0xAB44, 0x0062 };

    // AB44 0062;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB44 0062;	
    // (ꭄ) LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE	[1E53 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_358)
{
    uint32_t const cps[2] = { 0x1D13, 0x0021 };

    // 1D13 0021;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D13 0021;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E54, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_359)
{
    uint32_t const cps[2] = { 0x1D13, 0x003F };

    // 1D13 003F;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D13 003F;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E54, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_360)
{
    uint32_t const cps[2] = { 0x1D13, 0x0061 };

    // 1D13 0061;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D13 0061;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_361)
{
    uint32_t const cps[2] = { 0x1D13, 0x0041 };

    // 1D13 0041;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D13 0041;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_362)
{
    uint32_t const cps[2] = { 0x1D13, 0x0062 };

    // 1D13 0062;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D13 0062;	
    // (ᴓ) LATIN SMALL LETTER SIDEWAYS O WITH STROKE	[1E54 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_363)
{
    uint32_t const cps[2] = { 0xAB3E, 0x0021 };

    // AB3E 0021;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3E 0021;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E55, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_364)
{
    uint32_t const cps[2] = { 0xAB3E, 0x003F };

    // AB3E 003F;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3E 003F;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E55, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_365)
{
    uint32_t const cps[2] = { 0xAB3E, 0x0061 };

    // AB3E 0061;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3E 0061;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_366)
{
    uint32_t const cps[2] = { 0xAB3E, 0x0041 };

    // AB3E 0041;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3E 0041;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_367)
{
    uint32_t const cps[2] = { 0xAB3E, 0x0062 };

    // AB3E 0062;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3E 0062;	
    // (ꬾ) LATIN SMALL LETTER BLACKLETTER O WITH STROKE	[1E55 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_368)
{
    uint32_t const cps[2] = { 0x0254, 0x0021 };

    // 0254 0021;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0254 0021;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_369)
{
    uint32_t const cps[2] = { 0x0186, 0x0021 };

    // 0186 0021;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0186 0021;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_370)
{
    uint32_t const cps[2] = { 0x1D53, 0x0021 };

    // 1D53 0021;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53 0021;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_371)
{
    uint32_t const cps[2] = { 0x0254, 0x003F };

    // 0254 003F;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0254 003F;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_372)
{
    uint32_t const cps[2] = { 0x0186, 0x003F };

    // 0186 003F;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0186 003F;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_373)
{
    uint32_t const cps[2] = { 0x1D53, 0x003F };

    // 1D53 003F;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53 003F;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E56, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_374)
{
    uint32_t const cps[2] = { 0x0254, 0x0061 };

    // 0254 0061;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0254 0061;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_375)
{
    uint32_t const cps[2] = { 0x0254, 0x0041 };

    // 0254 0041;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0254 0041;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_376)
{
    uint32_t const cps[2] = { 0x0186, 0x0061 };

    // 0186 0061;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0186 0061;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_377)
{
    uint32_t const cps[2] = { 0x0186, 0x0041 };

    // 0186 0041;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0186 0041;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_378)
{
    uint32_t const cps[2] = { 0x1D53, 0x0061 };

    // 1D53 0061;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53 0061;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_379)
{
    uint32_t const cps[2] = { 0x1D53, 0x0041 };

    // 1D53 0041;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53 0041;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_380)
{
    uint32_t const cps[2] = { 0x0254, 0x0062 };

    // 0254 0062;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0254 0062;	
    // (ɔ) LATIN SMALL LETTER OPEN O	[1E56 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_381)
{
    uint32_t const cps[2] = { 0x0186, 0x0062 };

    // 0186 0062;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0186 0062;	
    // (Ɔ) LATIN CAPITAL LETTER OPEN O	[1E56 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_382)
{
    uint32_t const cps[2] = { 0x1D53, 0x0062 };

    // 1D53 0062;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53 0062;	
    // (ᵓ) MODIFIER LETTER SMALL OPEN O	[1E56 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_383)
{
    uint32_t const cps[2] = { 0x1D10, 0x0021 };

    // 1D10 0021;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D10 0021;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_384)
{
    uint32_t const cps[2] = { 0x1D10, 0x003F };

    // 1D10 003F;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D10 003F;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_385)
{
    uint32_t const cps[2] = { 0x1D10, 0x0061 };

    // 1D10 0061;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D10 0061;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_386)
{
    uint32_t const cps[2] = { 0x1D10, 0x0041 };

    // 1D10 0041;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D10 0041;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_387)
{
    uint32_t const cps[2] = { 0x1D10, 0x0062 };

    // 1D10 0062;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D10 0062;	
    // (ᴐ) LATIN LETTER SMALL CAPITAL OPEN O	[1E5A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_388)
{
    uint32_t const cps[2] = { 0x1D12, 0x0021 };

    // 1D12 0021;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D12 0021;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_389)
{
    uint32_t const cps[2] = { 0x1D12, 0x003F };

    // 1D12 003F;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D12 003F;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_390)
{
    uint32_t const cps[2] = { 0x1D12, 0x0061 };

    // 1D12 0061;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D12 0061;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_391)
{
    uint32_t const cps[2] = { 0x1D12, 0x0041 };

    // 1D12 0041;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D12 0041;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_392)
{
    uint32_t const cps[2] = { 0x1D12, 0x0062 };

    // 1D12 0062;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D12 0062;	
    // (ᴒ) LATIN SMALL LETTER SIDEWAYS OPEN O	[1E5B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_393)
{
    uint32_t const cps[2] = { 0xAB3F, 0x0021 };

    // AB3F 0021;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3F 0021;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_394)
{
    uint32_t const cps[2] = { 0xAB3F, 0x003F };

    // AB3F 003F;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3F 003F;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_395)
{
    uint32_t const cps[2] = { 0xAB3F, 0x0061 };

    // AB3F 0061;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3F 0061;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_396)
{
    uint32_t const cps[2] = { 0xAB3F, 0x0041 };

    // AB3F 0041;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3F 0041;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_397)
{
    uint32_t const cps[2] = { 0xAB3F, 0x0062 };

    // AB3F 0062;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB3F 0062;	
    // (ꬿ) LATIN SMALL LETTER OPEN O WITH STROKE	[1E5C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_398)
{
    uint32_t const cps[2] = { 0x1D97, 0x0021 };

    // 1D97 0021;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D97 0021;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_399)
{
    uint32_t const cps[2] = { 0x1D97, 0x003F };

    // 1D97 003F;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D97 003F;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_400)
{
    uint32_t const cps[2] = { 0x1D97, 0x0061 };

    // 1D97 0061;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D97 0061;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_401)
{
    uint32_t const cps[2] = { 0x1D97, 0x0041 };

    // 1D97 0041;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D97 0041;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_402)
{
    uint32_t const cps[2] = { 0x1D97, 0x0062 };

    // 1D97 0062;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D97 0062;	
    // (ᶗ) LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK	[1E5D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_403)
{
    uint32_t const cps[2] = { 0xAB62, 0x0021 };

    // AB62 0021;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB62 0021;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_404)
{
    uint32_t const cps[2] = { 0xAB62, 0x003F };

    // AB62 003F;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB62 003F;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_405)
{
    uint32_t const cps[2] = { 0xAB62, 0x0061 };

    // AB62 0061;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB62 0061;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_406)
{
    uint32_t const cps[2] = { 0xAB62, 0x0041 };

    // AB62 0041;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB62 0041;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_407)
{
    uint32_t const cps[2] = { 0xAB62, 0x0062 };

    // AB62 0062;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB62 0062;	
    // (ꭢ) LATIN SMALL LETTER OPEN OE	[1E5E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_408)
{
    uint32_t const cps[2] = { 0xA74D, 0x0021 };

    // A74D 0021;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74D 0021;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_409)
{
    uint32_t const cps[2] = { 0xA74C, 0x0021 };

    // A74C 0021;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74C 0021;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E5F, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_410)
{
    uint32_t const cps[2] = { 0xA74D, 0x003F };

    // A74D 003F;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74D 003F;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_411)
{
    uint32_t const cps[2] = { 0xA74C, 0x003F };

    // A74C 003F;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74C 003F;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E5F, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_412)
{
    uint32_t const cps[2] = { 0xA74D, 0x0061 };

    // A74D 0061;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74D 0061;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_413)
{
    uint32_t const cps[2] = { 0xA74D, 0x0041 };

    // A74D 0041;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74D 0041;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_414)
{
    uint32_t const cps[2] = { 0xA74C, 0x0061 };

    // A74C 0061;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74C 0061;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_415)
{
    uint32_t const cps[2] = { 0xA74C, 0x0041 };

    // A74C 0041;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74C 0041;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_416)
{
    uint32_t const cps[2] = { 0xA74D, 0x0062 };

    // A74D 0062;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74D 0062;	
    // (ꝍ) LATIN SMALL LETTER O WITH LOOP	[1E5F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_417)
{
    uint32_t const cps[2] = { 0xA74C, 0x0062 };

    // A74C 0062;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74C 0062;	
    // (Ꝍ) LATIN CAPITAL LETTER O WITH LOOP	[1E5F 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_418)
{
    uint32_t const cps[2] = { 0x1D16, 0x0021 };

    // 1D16 0021;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16 0021;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E60, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_419)
{
    uint32_t const cps[2] = { 0x1D54, 0x0021 };

    // 1D54 0021;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54 0021;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E60, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_420)
{
    uint32_t const cps[2] = { 0x1D16, 0x003F };

    // 1D16 003F;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16 003F;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E60, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_421)
{
    uint32_t const cps[2] = { 0x1D54, 0x003F };

    // 1D54 003F;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54 003F;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E60, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_422)
{
    uint32_t const cps[2] = { 0x1D16, 0x0061 };

    // 1D16 0061;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16 0061;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_423)
{
    uint32_t const cps[2] = { 0x1D16, 0x0041 };

    // 1D16 0041;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16 0041;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_424)
{
    uint32_t const cps[2] = { 0x1D54, 0x0061 };

    // 1D54 0061;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54 0061;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_425)
{
    uint32_t const cps[2] = { 0x1D54, 0x0041 };

    // 1D54 0041;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54 0041;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_426)
{
    uint32_t const cps[2] = { 0x1D16, 0x0062 };

    // 1D16 0062;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16 0062;	
    // (ᴖ) LATIN SMALL LETTER TOP HALF O	[1E60 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_427)
{
    uint32_t const cps[2] = { 0x1D54, 0x0062 };

    // 1D54 0062;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54 0062;	
    // (ᵔ) MODIFIER LETTER SMALL TOP HALF O	[1E60 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_428)
{
    uint32_t const cps[2] = { 0x1D17, 0x0021 };

    // 1D17 0021;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17 0021;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E61, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_429)
{
    uint32_t const cps[2] = { 0x1D55, 0x0021 };

    // 1D55 0021;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D55 0021;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E61, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_430)
{
    uint32_t const cps[2] = { 0x1D17, 0x003F };

    // 1D17 003F;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17 003F;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E61, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_431)
{
    uint32_t const cps[2] = { 0x1D55, 0x003F };

    // 1D55 003F;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D55 003F;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E61, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_432)
{
    uint32_t const cps[2] = { 0x1D17, 0x0061 };

    // 1D17 0061;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17 0061;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_433)
{
    uint32_t const cps[2] = { 0x1D17, 0x0041 };

    // 1D17 0041;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17 0041;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_434)
{
    uint32_t const cps[2] = { 0x1D55, 0x0061 };

    // 1D55 0061;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D55 0061;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_435)
{
    uint32_t const cps[2] = { 0x1D55, 0x0041 };

    // 1D55 0041;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D55 0041;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_436)
{
    uint32_t const cps[2] = { 0x1D17, 0x0062 };

    // 1D17 0062;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17 0062;	
    // (ᴗ) LATIN SMALL LETTER BOTTOM HALF O	[1E61 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_437)
{
    uint32_t const cps[2] = { 0x1D55, 0x0062 };

    // 1D55 0062;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D55 0062;	
    // (ᵕ) MODIFIER LETTER SMALL BOTTOM HALF O	[1E61 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_438)
{
    uint32_t const cps[2] = { 0x2C7A, 0x0021 };

    // 2C7A 0021;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7A 0021;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E62, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_439)
{
    uint32_t const cps[2] = { 0x2C7A, 0x003F };

    // 2C7A 003F;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7A 003F;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E62, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_440)
{
    uint32_t const cps[2] = { 0x2C7A, 0x0061 };

    // 2C7A 0061;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7A 0061;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_441)
{
    uint32_t const cps[2] = { 0x2C7A, 0x0041 };

    // 2C7A 0041;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7A 0041;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_442)
{
    uint32_t const cps[2] = { 0x2C7A, 0x0062 };

    // 2C7A 0062;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7A 0062;	
    // (ⱺ) LATIN SMALL LETTER O WITH LOW RING INSIDE	[1E62 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_443)
{
    uint32_t const cps[2] = { 0x0275, 0x0021 };

    // 0275 0021;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0275 0021;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_444)
{
    uint32_t const cps[2] = { 0x019F, 0x0021 };

    // 019F 0021;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019F 0021;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_445)
{
    uint32_t const cps[2] = { 0x1DB1, 0x0021 };

    // 1DB1 0021;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB1 0021;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_446)
{
    uint32_t const cps[2] = { 0x0275, 0x003F };

    // 0275 003F;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0275 003F;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_447)
{
    uint32_t const cps[2] = { 0x019F, 0x003F };

    // 019F 003F;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019F 003F;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_448)
{
    uint32_t const cps[2] = { 0x1DB1, 0x003F };

    // 1DB1 003F;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB1 003F;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E63, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_449)
{
    uint32_t const cps[2] = { 0x0275, 0x0061 };

    // 0275 0061;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0275 0061;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_450)
{
    uint32_t const cps[2] = { 0x0275, 0x0041 };

    // 0275 0041;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0275 0041;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_451)
{
    uint32_t const cps[2] = { 0x019F, 0x0061 };

    // 019F 0061;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019F 0061;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_452)
{
    uint32_t const cps[2] = { 0x019F, 0x0041 };

    // 019F 0041;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019F 0041;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_453)
{
    uint32_t const cps[2] = { 0x1DB1, 0x0061 };

    // 1DB1 0061;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB1 0061;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_454)
{
    uint32_t const cps[2] = { 0x1DB1, 0x0041 };

    // 1DB1 0041;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB1 0041;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_455)
{
    uint32_t const cps[2] = { 0x0275, 0x0062 };

    // 0275 0062;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0275 0062;	
    // (ɵ) LATIN SMALL LETTER BARRED O	[1E63 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_456)
{
    uint32_t const cps[2] = { 0x019F, 0x0062 };

    // 019F 0062;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019F 0062;	
    // (Ɵ) LATIN CAPITAL LETTER O WITH MIDDLE TILDE	[1E63 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_457)
{
    uint32_t const cps[2] = { 0x1DB1, 0x0062 };

    // 1DB1 0062;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB1 0062;	
    // (ᶱ) MODIFIER LETTER SMALL BARRED O	[1E63 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_458)
{
    uint32_t const cps[2] = { 0xA74B, 0x0021 };

    // A74B 0021;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74B 0021;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E67, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_459)
{
    uint32_t const cps[2] = { 0xA74A, 0x0021 };

    // A74A 0021;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74A 0021;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E67, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_460)
{
    uint32_t const cps[2] = { 0xA74B, 0x003F };

    // A74B 003F;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74B 003F;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E67, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_461)
{
    uint32_t const cps[2] = { 0xA74A, 0x003F };

    // A74A 003F;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74A 003F;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E67, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_462)
{
    uint32_t const cps[2] = { 0xA74B, 0x0061 };

    // A74B 0061;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74B 0061;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_463)
{
    uint32_t const cps[2] = { 0xA74B, 0x0041 };

    // A74B 0041;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74B 0041;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_464)
{
    uint32_t const cps[2] = { 0xA74A, 0x0061 };

    // A74A 0061;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74A 0061;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_465)
{
    uint32_t const cps[2] = { 0xA74A, 0x0041 };

    // A74A 0041;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74A 0041;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_466)
{
    uint32_t const cps[2] = { 0xA74B, 0x0062 };

    // A74B 0062;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74B 0062;	
    // (ꝋ) LATIN SMALL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_467)
{
    uint32_t const cps[2] = { 0xA74A, 0x0062 };

    // A74A 0062;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A74A 0062;	
    // (Ꝋ) LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY	[1E67 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_468)
{
    uint32_t const cps[2] = { 0x0277, 0x0021 };

    // 0277 0021;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0277 0021;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E68, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_469)
{
    uint32_t const cps[2] = { 0x0277, 0x003F };

    // 0277 003F;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0277 003F;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E68, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_470)
{
    uint32_t const cps[2] = { 0x0277, 0x0061 };

    // 0277 0061;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0277 0061;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_471)
{
    uint32_t const cps[2] = { 0x0277, 0x0041 };

    // 0277 0041;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0277 0041;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_472)
{
    uint32_t const cps[2] = { 0x0277, 0x0062 };

    // 0277 0062;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0277 0062;	
    // (ɷ) LATIN SMALL LETTER CLOSED OMEGA	[1E68 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_473)
{
    uint32_t const cps[2] = { 0xA7B7, 0x0021 };

    // A7B7 0021;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B7 0021;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E6C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_474)
{
    uint32_t const cps[2] = { 0xA7B6, 0x0021 };

    // A7B6 0021;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B6 0021;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E6C, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_475)
{
    uint32_t const cps[2] = { 0xA7B7, 0x003F };

    // A7B7 003F;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B7 003F;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E6C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_476)
{
    uint32_t const cps[2] = { 0xA7B6, 0x003F };

    // A7B6 003F;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B6 003F;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E6C, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_477)
{
    uint32_t const cps[2] = { 0xA7B7, 0x0061 };

    // A7B7 0061;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B7 0061;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_478)
{
    uint32_t const cps[2] = { 0xA7B7, 0x0041 };

    // A7B7 0041;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B7 0041;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_479)
{
    uint32_t const cps[2] = { 0xA7B6, 0x0061 };

    // A7B6 0061;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B6 0061;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_480)
{
    uint32_t const cps[2] = { 0xA7B6, 0x0041 };

    // A7B6 0041;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B6 0041;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_481)
{
    uint32_t const cps[2] = { 0xA7B7, 0x0062 };

    // A7B7 0062;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B7 0062;	
    // (ꞷ) LATIN SMALL LETTER OMEGA	[1E6C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_482)
{
    uint32_t const cps[2] = { 0xA7B6, 0x0062 };

    // A7B6 0062;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7B6 0062;	
    // (Ꞷ) LATIN CAPITAL LETTER OMEGA	[1E6C 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_483)
{
    uint32_t const cps[2] = { 0x0223, 0x0021 };

    // 0223 0021;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0223 0021;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_484)
{
    uint32_t const cps[2] = { 0x0222, 0x0021 };

    // 0222 0021;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0222 0021;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_485)
{
    uint32_t const cps[2] = { 0x1D3D, 0x0021 };

    // 1D3D 0021;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3D 0021;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_486)
{
    uint32_t const cps[2] = { 0x0223, 0x003F };

    // 0223 003F;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0223 003F;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_487)
{
    uint32_t const cps[2] = { 0x0222, 0x003F };

    // 0222 003F;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0222 003F;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_488)
{
    uint32_t const cps[2] = { 0x1D3D, 0x003F };

    // 1D3D 003F;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3D 003F;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E6D, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_489)
{
    uint32_t const cps[2] = { 0x0223, 0x0061 };

    // 0223 0061;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0223 0061;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_490)
{
    uint32_t const cps[2] = { 0x0223, 0x0041 };

    // 0223 0041;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0223 0041;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_491)
{
    uint32_t const cps[2] = { 0x0222, 0x0061 };

    // 0222 0061;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0222 0061;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_492)
{
    uint32_t const cps[2] = { 0x0222, 0x0041 };

    // 0222 0041;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0222 0041;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_493)
{
    uint32_t const cps[2] = { 0x1D3D, 0x0061 };

    // 1D3D 0061;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3D 0061;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_494)
{
    uint32_t const cps[2] = { 0x1D3D, 0x0041 };

    // 1D3D 0041;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3D 0041;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_495)
{
    uint32_t const cps[2] = { 0x0223, 0x0062 };

    // 0223 0062;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0223 0062;	
    // (ȣ) LATIN SMALL LETTER OU	[1E6D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_496)
{
    uint32_t const cps[2] = { 0x0222, 0x0062 };

    // 0222 0062;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0222 0062;	
    // (Ȣ) LATIN CAPITAL LETTER OU	[1E6D 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_497)
{
    uint32_t const cps[2] = { 0x1D3D, 0x0062 };

    // 1D3D 0062;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D3D 0062;	
    // (ᴽ) MODIFIER LETTER CAPITAL OU	[1E6D 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_498)
{
    uint32_t const cps[2] = { 0x1D15, 0x0021 };

    // 1D15 0021;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D15 0021;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1E71, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_116_499)
{
    uint32_t const cps[2] = { 0x1D15, 0x003F };

    // 1D15 003F;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D15 003F;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1E71, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

