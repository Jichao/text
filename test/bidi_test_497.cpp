// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;

TEST(bidi, bidi_497_000)
{

    expected_levels = { 1, -1, 3, 3, 4, 4, -1, 5, -1, 4, 3, 3, -1, 1 };

    {
        // ON RLE ON FSI ON L RLO L PDF ON PDI ON PDF ON; 4 ('RTL') (line 497005)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0021, 0x2068, 0x0021, 0x0041, 0x202E, 0x0041, 0x202C, 0x0021, 0x2069, 0x0021, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, -1, 3, 3, 5, 5, -1, 7, -1, 5, 3, 3, -1, 1 };

    {
        // ON RLE ON FSI ON R RLO L PDF ON PDI ON PDF ON; 4 ('RTL') (line 497011)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0021, 0x2068, 0x0021, 0x05BE, 0x202E, 0x0041, 0x202C, 0x0021, 0x2069, 0x0021, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    {
        // EN ES LRI PDI EN ES RLI PDI EN ES FSI PDI EN; 3 ('auto') (line 497017)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x2066, 0x2069, 0x0030, 0x002B, 0x2067, 0x2069, 0x0030, 0x002B, 0x2068, 0x2069, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN ES LRI PDI EN ES RLI PDI EN ES FSI PDI EN; 3 ('LTR') (line 497017)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x2066, 0x2069, 0x0030, 0x002B, 0x2067, 0x2069, 0x0030, 0x002B, 0x2068, 0x2069, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, -1, 2, 2, 2, 2, -1 };

    {
        // L L L L WS L L WS LRO R R R R PDF; 3 ('auto') (line 497023)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L L L WS L L WS LRO R R R R PDF; 3 ('LTR') (line 497023)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 0 };

    {
        // L ON FSI R PDI RLI R PDI LRI AL PDI ON L; 3 ('auto') (line 497029)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x2068, 0x05BE, 0x2069, 0x2067, 0x05BE, 0x2069, 0x2066, 0x0608, 0x2069, 0x0021, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L ON FSI R PDI RLI R PDI LRI AL PDI ON L; 3 ('LTR') (line 497029)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x2068, 0x05BE, 0x2069, 0x2067, 0x05BE, 0x2069, 0x2066, 0x0608, 0x2069, 0x0021, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    {
        // L FSI R WS PDI WS RLI WS LRI WS PDI PDI WS; 3 ('auto') (line 497035)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x05BE, 0x0020, 0x2069, 0x0020, 0x2067, 0x0020, 0x2066, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L FSI R WS PDI WS RLI WS LRI WS PDI PDI WS; 3 ('LTR') (line 497035)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x05BE, 0x0020, 0x2069, 0x0020, 0x2067, 0x0020, 0x2066, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 2, 2, 3, 3, 4, 3, 3, 2, 2, 0, 0 };

    {
        // ON LRI ON RLI ON FSI ON PDI ON PDI ON PDI ON; 3 ('auto') (line 497041)
        std::vector<uint32_t> const cps = { 0x0021, 0x2066, 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRI ON RLI ON FSI ON PDI ON PDI ON PDI ON; 3 ('LTR') (line 497041)
        std::vector<uint32_t> const cps = { 0x0021, 0x2066, 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    {
        // R FSI L WS PDI WS LRI WS RLI WS PDI PDI WS; 2 ('LTR') (line 497047)
        std::vector<uint32_t> const cps = { 0x05BE, 0x2068, 0x0041, 0x0020, 0x2069, 0x0020, 0x2066, 0x0020, 0x2067, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1 };

    {
        // R ON FSI L PDI LRI L PDI RLI L PDI ON R; 2 ('LTR') (line 497053)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2 };

    {
        // R ON LRI L PDI FSI L PDI RLI L PDI ON EN; 2 ('LTR') (line 497059)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2066, 0x0041, 0x2069, 0x2068, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 4, 1, 1, 1 };

    {
        // R ON FSI L PDI LRI L PDI RLI L PDI ON R; 5 ('auto') (line 497065)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R ON FSI L PDI LRI L PDI RLI L PDI ON R; 5 ('RTL') (line 497065)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 4, 1, 1, 2 };

    {
        // R ON LRI L PDI FSI L PDI RLI L PDI ON EN; 5 ('auto') (line 497071)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2066, 0x0041, 0x2069, 0x2068, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R ON LRI L PDI FSI L PDI RLI L PDI ON EN; 5 ('RTL') (line 497071)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0021, 0x2066, 0x0041, 0x2069, 0x2068, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // R FSI L WS PDI WS LRI WS RLI WS PDI PDI WS; 5 ('auto') (line 497077)
        std::vector<uint32_t> const cps = { 0x05BE, 0x2068, 0x0041, 0x0020, 0x2069, 0x0020, 0x2066, 0x0020, 0x2067, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R FSI L WS PDI WS LRI WS RLI WS PDI PDI WS; 5 ('RTL') (line 497077)
        std::vector<uint32_t> const cps = { 0x05BE, 0x2068, 0x0041, 0x0020, 0x2069, 0x0020, 0x2066, 0x0020, 0x2067, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 2, 2, 3, 3, 4, 3, 3, 2, 2, 1, 1 };

    {
        // ON LRI ON RLI ON FSI ON PDI ON PDI ON PDI ON; 4 ('RTL') (line 497083)
        std::vector<uint32_t> const cps = { 0x0021, 0x2066, 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2 };

    {
        // EN ES LRI PDI EN ES RLI PDI EN ES FSI PDI EN; 4 ('RTL') (line 497089)
        std::vector<uint32_t> const cps = { 0x0030, 0x002B, 0x2066, 0x2069, 0x0030, 0x002B, 0x2067, 0x2069, 0x0030, 0x002B, 0x2068, 0x2069, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1 };

    {
        // AN ON FSI L PDI LRI L PDI RLI L PDI ON AL; 2 ('LTR') (line 497095)
        std::vector<uint32_t> const cps = { 0x0660, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 1, 1, 2, 1, 1, 2, 1, 1, 4, 1, 1, 1 };

    {
        // AN ON FSI L PDI LRI L PDI RLI L PDI ON AL; 5 ('auto') (line 497101)
        std::vector<uint32_t> const cps = { 0x0660, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AN ON FSI L PDI LRI L PDI RLI L PDI ON AL; 5 ('RTL') (line 497101)
        std::vector<uint32_t> const cps = { 0x0660, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x0041, 0x2069, 0x0021, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // L FSI R WS PDI WS RLI WS LRI WS PDI PDI WS; 4 ('RTL') (line 497107)
        std::vector<uint32_t> const cps = { 0x0041, 0x2068, 0x05BE, 0x0020, 0x2069, 0x0020, 0x2067, 0x0020, 0x2066, 0x0020, 0x2069, 0x2069, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1 };

    {
        // L L L L WS L L WS LRO R R R R PDF; 4 ('RTL') (line 497113)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2 };

    {
        // L ON FSI R PDI RLI R PDI LRI AL PDI ON L; 4 ('RTL') (line 497119)
        std::vector<uint32_t> const cps = { 0x0041, 0x0021, 0x2068, 0x05BE, 0x2069, 0x2067, 0x05BE, 0x2069, 0x2066, 0x0608, 0x2069, 0x0021, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 1, 1, 3, 3, 3, 4, 3, 3, 1, 1, 0, 0 };

    {
        // ON RLI ON FSI ON R LRI ON PDI ON PDI ON PDI ON; 3 ('auto') (line 497125)
        std::vector<uint32_t> const cps = { 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x05BE, 0x2066, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLI ON FSI ON R LRI ON PDI ON PDI ON PDI ON; 3 ('LTR') (line 497125)
        std::vector<uint32_t> const cps = { 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x05BE, 0x2066, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2 };

    {
        // AL ON FSI L PDI LRI L PDI RLI R PDI ON ET EN; 2 ('LTR') (line 497131)
        std::vector<uint32_t> const cps = { 0x0608, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x05BE, 0x2069, 0x0021, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 2 };

    {
        // AL ON FSI L PDI LRI L PDI RLI R PDI ON ET EN; 5 ('auto') (line 497137)
        std::vector<uint32_t> const cps = { 0x0608, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x05BE, 0x2069, 0x0021, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL ON FSI L PDI LRI L PDI RLI R PDI ON ET EN; 5 ('RTL') (line 497137)
        std::vector<uint32_t> const cps = { 0x0608, 0x0021, 0x2068, 0x0041, 0x2069, 0x2066, 0x0041, 0x2069, 0x2067, 0x05BE, 0x2069, 0x0021, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 3, 3, 5, 5, 5, 6, 5, 5, 3, 3, 1, 1 };

    {
        // ON RLI ON FSI ON R LRI ON PDI ON PDI ON PDI ON; 4 ('RTL') (line 497143)
        std::vector<uint32_t> const cps = { 0x0021, 0x2067, 0x0021, 0x2068, 0x0021, 0x05BE, 0x2066, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021, 0x2069, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 0 };

    {
        // L WS R R R AL WS ON WS LRO PDF R AL R R ES; 3 ('auto') (line 497149)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0020, 0x202D, 0x202C, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS R R R AL WS ON WS LRO PDF R AL R R ES; 3 ('LTR') (line 497149)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0020, 0x202D, 0x202C, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_497_001)
{

    expected_levels = { 2, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1 };

    {
        // L WS R R R AL WS ON WS LRO PDF R AL R R ES; 4 ('RTL') (line 497155)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0020, 0x202D, 0x202C, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 0 };

    {
        // AL WS R AL AL R WS AL R R LRE PDF WS AL R R ON; 2 ('LTR') (line 497161)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x202A, 0x202C, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1 };

    {
        // AL WS R AL AL R WS AL R R LRE PDF WS AL R R ON; 5 ('auto') (line 497167)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x202A, 0x202C, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL WS R AL AL R WS AL R R LRE PDF WS AL R R ON; 5 ('RTL') (line 497167)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x202A, 0x202C, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0 };

    {
        // L L L WS R AL R R S R EN WS S S L L L; 3 ('auto') (line 497173)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0009, 0x05BE, 0x0030, 0x0020, 0x0009, 0x0009, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L L WS R AL R R S R EN WS S S L L L; 3 ('LTR') (line 497173)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0009, 0x05BE, 0x0030, 0x0020, 0x0009, 0x0009, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, -1, 3, 3, 3, 2, 2, 2, 2 };

    {
        // R R AL WS RLE L L L L WS LRE R R AL WS L L L; 2 ('LTR') (line 497179)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x202B, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202A, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, -1, 4, 4, 4, 4, 4, -1, 5, 5, 5, 4, 4, 4, 4 };

    {
        // R R AL WS RLE L L L L WS LRE R R AL WS L L L; 5 ('auto') (line 497185)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x202B, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202A, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R AL WS RLE L L L L WS LRE R R AL WS L L L; 5 ('RTL') (line 497185)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x202B, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202A, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2 };

    {
        // L L L WS R AL R R S R EN WS S S L L L; 4 ('RTL') (line 497191)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0009, 0x05BE, 0x0030, 0x0020, 0x0009, 0x0009, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 0, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

    {
        // R AL R WS AL WS LRO R AL AL WS L L L L L L L; 2 ('LTR') (line 497197)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x0020, 0x202D, 0x05BE, 0x0608, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

    {
        // R AL R WS AL WS LRO R AL AL WS L L L L L L L; 5 ('auto') (line 497203)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x0020, 0x202D, 0x05BE, 0x0608, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R AL R WS AL WS LRO R AL AL WS L L L L L L L; 5 ('RTL') (line 497203)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x0020, 0x202D, 0x05BE, 0x0608, 0x0608, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // ON EN WS AL AL R R R R R WS R R WS AL R R AL; 2 ('LTR') (line 497209)
        std::vector<uint32_t> const cps = { 0x0021, 0x0030, 0x0020, 0x0608, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // ON EN WS AL AL R R R R R WS R R WS AL R R AL; 5 ('auto') (line 497215)
        std::vector<uint32_t> const cps = { 0x0021, 0x0030, 0x0020, 0x0608, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON EN WS AL AL R R R R R WS R R WS AL R R AL; 5 ('RTL') (line 497215)
        std::vector<uint32_t> const cps = { 0x0021, 0x0030, 0x0020, 0x0608, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };

    {
        // ON L EN EN EN ON R AL R AL AL R ON ES L EN EN EN ON; 3 ('auto') (line 497221)
        std::vector<uint32_t> const cps = { 0x0021, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0021, 0x002B, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON L EN EN EN ON R AL R AL AL R ON ES L EN EN EN ON; 3 ('LTR') (line 497221)
        std::vector<uint32_t> const cps = { 0x0021, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0021, 0x002B, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0 };

    {
        // ON R EN EN EN ON L L L L L L ON ES R EN EN EN ON; 2 ('LTR') (line 497227)
        std::vector<uint32_t> const cps = { 0x0021, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021, 0x002B, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2 };

    {
        // R R AL WS R AL R R AL WS R R WS EN ES EN ES ES EN; 7 ('auto') (line 497233)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x002B, 0x0030, 0x002B, 0x002B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R AL WS R AL R R AL WS R R WS EN ES EN ES ES EN; 7 ('LTR') (line 497233)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x002B, 0x0030, 0x002B, 0x002B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R AL WS R AL R R AL WS R R WS EN ES EN ES ES EN; 7 ('RTL') (line 497233)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x002B, 0x0030, 0x002B, 0x002B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1 };

    {
        // ON R EN EN EN ON L L L L L L ON ES R EN EN EN ON; 5 ('auto') (line 497239)
        std::vector<uint32_t> const cps = { 0x0021, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021, 0x002B, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON R EN EN EN ON L L L L L L ON ES R EN EN EN ON; 5 ('RTL') (line 497239)
        std::vector<uint32_t> const cps = { 0x0021, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021, 0x002B, 0x05BE, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1 };

    {
        // ON L EN EN EN ON R AL R AL AL R ON ES L EN EN EN ON; 4 ('RTL') (line 497245)
        std::vector<uint32_t> const cps = { 0x0021, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0021, 0x002B, 0x0041, 0x0030, 0x0030, 0x0030, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, -1, 2, 2, 2, 2, 2, 2, 2, -1, 3, 3, 3, 3, -1, 2, 2, 2, -1, 0, 0 };

    {
        // L WS LRE L L L L L L WS RLO L L R R PDF WS L L PDF L L; 3 ('auto') (line 497251)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202A, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202E, 0x0041, 0x0041, 0x05BE, 0x05BE, 0x202C, 0x0020, 0x0041, 0x0041, 0x202C, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRE L L L L L L WS RLO L L R R PDF WS L L PDF L L; 3 ('LTR') (line 497251)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202A, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202E, 0x0041, 0x0041, 0x05BE, 0x05BE, 0x202C, 0x0020, 0x0041, 0x0041, 0x202C, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, -1, 3, 3, 3, 3, -1, 2, 2, 2, -1, 2, 2 };

    {
        // L WS LRE L L L L L L WS RLO L L R R PDF WS L L PDF L L; 4 ('RTL') (line 497257)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202A, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202E, 0x0041, 0x0041, 0x05BE, 0x05BE, 0x202C, 0x0020, 0x0041, 0x0041, 0x202C, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 63 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('auto') (line 497263)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('LTR') (line 497263)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 63 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 4 ('RTL') (line 497269)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 };

    {
        // R R R R AL WS EN ON EN WS EN ON EN WS EN ES EN WS EN ET EN; 7 ('auto') (line 497275)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x002B, 0x0030, 0x0020, 0x0030, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R R R AL WS EN ON EN WS EN ON EN WS EN ES EN WS EN ET EN; 7 ('LTR') (line 497275)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x002B, 0x0030, 0x0020, 0x0030, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R R R AL WS EN ON EN WS EN ON EN WS EN ES EN WS EN ET EN; 7 ('RTL') (line 497275)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x0021, 0x0030, 0x0020, 0x0030, 0x002B, 0x0030, 0x0020, 0x0030, 0x0023, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, -1, 2, 2, 2, -1, -1, -1, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1 };

    {
        // L L L L LRO WS L L PDF PDF PDF WS RLO WS L WS L L L L WS L L L PDF; 3 ('auto') (line 497281)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x202D, 0x0020, 0x0041, 0x0041, 0x202C, 0x202C, 0x202C, 0x0020, 0x202E, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L L L LRO WS L L PDF PDF PDF WS RLO WS L WS L L L L WS L L L PDF; 3 ('LTR') (line 497281)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x202D, 0x0020, 0x0041, 0x0041, 0x202C, 0x202C, 0x202C, 0x0020, 0x202E, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, -1, 1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1 };

    {
        // L L L L LRO WS L L PDF PDF PDF WS RLO WS L WS L L L L WS L L L PDF; 4 ('RTL') (line 497287)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x202D, 0x0020, 0x0041, 0x0041, 0x202C, 0x202C, 0x202C, 0x0020, 0x202E, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, -1, -1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    {
        // L L L L WS L L L WS AN AN RLE PDF AN AN WS L L L L L L L ON; 3 ('auto') (line 497293)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x202B, 0x202C, 0x0660, 0x0660, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L L L WS L L L WS AN AN RLE PDF AN AN WS L L L L L L L ON; 3 ('LTR') (line 497293)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x202B, 0x202C, 0x0660, 0x0660, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1 };

    {
        // L L L L WS L L L WS AN AN RLE PDF AN AN WS L L L L L L L ON; 4 ('RTL') (line 497299)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x202B, 0x202C, 0x0660, 0x0660, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_497_002)
{

    expected_levels = { -1, -1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 4, 4, 4, -1, 3, 3, 3, 0 };

    {
        // RLO RLE WS L L L WS L L L WS L L L L WS LRO R R AL PDF WS R R WS; 3 ('auto') (line 497305)
        std::vector<uint32_t> const cps = { 0x202E, 0x202B, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202C, 0x0020, 0x05BE, 0x05BE, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLO RLE WS L L L WS L L L WS L L L L WS LRO R R AL PDF WS R R WS; 3 ('LTR') (line 497305)
        std::vector<uint32_t> const cps = { 0x202E, 0x202B, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202C, 0x0020, 0x05BE, 0x05BE, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 6, 6, 6, -1, 5, 5, 5, 1 };

    {
        // RLO RLE WS L L L WS L L L WS L L L L WS LRO R R AL PDF WS R R WS; 4 ('RTL') (line 497311)
        std::vector<uint32_t> const cps = { 0x202E, 0x202B, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202C, 0x0020, 0x05BE, 0x05BE, 0x0020 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    {
        // L L L WS L L WS R R AL WS AL AL R WS L L WS L L L L L L; 3 ('auto') (line 497317)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L L WS L L WS R R AL WS AL AL R WS L L WS L L L L L L; 3 ('LTR') (line 497317)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

    {
        // L L L WS L L WS R R AL WS AL AL R WS L L WS L L L L L L; 4 ('RTL') (line 497323)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x0608, 0x0608, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 62, -1, -1, -1, -1, 62, -1, 61, -1, 60 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('auto') (line 497329)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('LTR') (line 497329)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('RTL') (line 497329)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, 2, -1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1 };

    {
        // AL R WS AL R AL AL R AL WS LRE WS PDF WS EN EN EN ON EN EN AN WS R AL R R; 2 ('LTR') (line 497335)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x0020, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1 };

    {
        // AL R WS AL R AL AL R AL WS LRE WS PDF WS EN EN EN ON EN EN AN WS R AL R R; 5 ('auto') (line 497341)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x0020, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL R WS AL R AL AL R AL WS LRE WS PDF WS EN EN EN ON EN EN AN WS R AL R R; 5 ('RTL') (line 497341)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x0020, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // AL AL R WS R R WS L L L WS L L L WS R R WS AL R R R R R R; 2 ('LTR') (line 497347)
        std::vector<uint32_t> const cps = { 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // AL AL R WS R R WS L L L WS L L L WS R R WS AL R R R R R R; 5 ('auto') (line 497353)
        std::vector<uint32_t> const cps = { 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL AL R WS R R WS L L L WS L L L WS R R WS AL R R R R R R; 5 ('RTL') (line 497353)
        std::vector<uint32_t> const cps = { 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, 64, 59, 59, 59, 59, -1, 58 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('auto') (line 497359)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('LTR') (line 497359)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('RTL') (line 497359)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 60, 61, -1, -1, -1, -1, 66, 60, 60, -1, 59 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('auto') (line 497365)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('LTR') (line 497365)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('RTL') (line 497365)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 60, 63, -1, -1, -1, -1, 67, 60, 60, -1, 59 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('auto') (line 497371)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('LTR') (line 497371)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('RTL') (line 497371)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 61, 62, -1, -1, -1, -1, 66, 61, 61, -1, 60 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('auto') (line 497377)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('LTR') (line 497377)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('RTL') (line 497377)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 0, 0, 0, -1, 1, 2, 2, 2, 1, 2, 2, 2, -1, 2, 2, 2, -1, 3, 3, 3, 3, 3, -1, 2, 2, 2, 2, 2 };

    {
        // AL L L WS RLE WS EN EN EN CS AN AN AN LRO R R AL RLO WS L L L L PDF WS L R AL CS; 2 ('LTR') (line 497383)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0041, 0x0020, 0x202B, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202E, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x202C, 0x0020, 0x0041, 0x05BE, 0x0608, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 2, 2, 1, -1, 3, 4, 4, 4, 3, 4, 4, 4, -1, 4, 4, 4, -1, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4 };

    {
        // AL L L WS RLE WS EN EN EN CS AN AN AN LRO R R AL RLO WS L L L L PDF WS L R AL CS; 5 ('auto') (line 497389)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0041, 0x0020, 0x202B, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202E, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x202C, 0x0020, 0x0041, 0x05BE, 0x0608, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL L L WS RLE WS EN EN EN CS AN AN AN LRO R R AL RLO WS L L L L PDF WS L R AL CS; 5 ('RTL') (line 497389)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0041, 0x0020, 0x202B, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x202D, 0x05BE, 0x05BE, 0x0608, 0x202E, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x202C, 0x0020, 0x0041, 0x05BE, 0x0608, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0 };

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS EN EN AN CS WS R R ON; 3 ('auto') (line 497395)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS EN EN AN CS WS R R ON; 3 ('LTR') (line 497395)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS AN AN AN CS WS R R ON; 3 ('auto') (line 497396)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS AN AN AN CS WS R R ON; 3 ('LTR') (line 497396)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1 };

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS EN EN AN CS WS R R ON; 4 ('RTL') (line 497402)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS AN AN AN CS WS R R ON; 4 ('RTL') (line 497403)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 0 };

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS WS EN EN AN CS WS R R ON; 3 ('auto') (line 497409)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS WS EN EN AN CS WS R R ON; 3 ('LTR') (line 497409)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS WS AN AN AN CS WS R R ON; 3 ('auto') (line 497410)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS WS AN AN AN CS WS R R ON; 3 ('LTR') (line 497410)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 0, 1, 0, 0, 1, 0, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1 };

    {
        // AL L AL WS L R L LRO WS AL L R L R CS WS EN EN EN CS AN AN AN WS L R L R PDF; 2 ('LTR') (line 497416)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0608, 0x0020, 0x0041, 0x05BE, 0x0041, 0x202D, 0x0020, 0x0608, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x0020, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS EN EN EN CS WS EN EN AN CS WS L L ON; 2 ('LTR') (line 497422)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS AN AN AN CS WS AN AN AN CS WS L L ON; 2 ('LTR') (line 497428)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS AN AN AN CS WS AN AN AN CS WS L L ON; 5 ('auto') (line 497434)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS AN AN AN CS WS AN AN AN CS WS L L ON; 5 ('RTL') (line 497434)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_497_003)
{

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS EN EN EN CS WS EN EN AN CS WS L L ON; 5 ('auto') (line 497440)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS EN EN EN CS WS EN EN AN CS WS L L ON; 5 ('RTL') (line 497440)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x0041, 0x0041, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 2, 1, 1, 2, 1, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1 };

    {
        // AL L AL WS L R L LRO WS AL L R L R CS WS EN EN EN CS AN AN AN WS L R L R PDF; 5 ('auto') (line 497446)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0608, 0x0020, 0x0041, 0x05BE, 0x0041, 0x202D, 0x0020, 0x0608, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x0020, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL L AL WS L R L LRO WS AL L R L R CS WS EN EN EN CS AN AN AN WS L R L R PDF; 5 ('RTL') (line 497446)
        std::vector<uint32_t> const cps = { 0x0608, 0x0041, 0x0608, 0x0020, 0x0041, 0x05BE, 0x0041, 0x202D, 0x0020, 0x0608, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0660, 0x0660, 0x0660, 0x0020, 0x0041, 0x05BE, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1 };

    {
        // L L WS L L L L WS ON R R WS R R WS EN EN EN CS WS EN EN AN CS WS R R ON; 4 ('RTL') (line 497452)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS AN AN AN CS WS AN AN AN CS WS R R ON; 4 ('RTL') (line 497453)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

    {
        // AL R WS AL R AL AL R AL WS LRE PDF WS EN EN EN ON EN EN AN WS R R AL AL WS R R AL ON; 2 ('LTR') (line 497459)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // AL R WS AL R AL AL R AL WS LRE PDF WS EN EN EN ON EN EN AN WS R R AL AL WS R R AL ON; 5 ('auto') (line 497465)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL R WS AL R AL AL R AL WS LRE PDF WS EN EN EN ON EN EN AN WS R R AL AL WS R R AL ON; 5 ('RTL') (line 497465)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0608, 0x0020, 0x202A, 0x202C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0021, 0x0030, 0x0030, 0x0660, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0608, 0x0020, 0x05BE, 0x05BE, 0x0608, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0 };

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS EN EN AN ON CS WS R R ON; 3 ('auto') (line 497471)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS EN EN AN ON CS WS R R ON; 3 ('LTR') (line 497471)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS AN AN AN ON CS WS R R ON; 3 ('auto') (line 497472)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS AN AN AN ON CS WS R R ON; 3 ('LTR') (line 497472)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1 };

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS EN EN AN ON CS WS R R ON; 4 ('RTL') (line 497478)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS AN AN AN ON CS WS R R ON; 4 ('RTL') (line 497479)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0 };

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS WS EN EN AN ON CS WS R R ON; 3 ('auto') (line 497485)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS WS EN EN AN ON CS WS R R ON; 3 ('LTR') (line 497485)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS WS AN AN AN ON CS WS R R ON; 3 ('auto') (line 497486)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS WS AN AN AN ON CS WS R R ON; 3 ('LTR') (line 497486)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON ON WS AL R AL WS R AL R; 2 ('LTR') (line 497492)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 };

    {
        // R R R AL WS R AL AL R WS R R R AL R CS WS L L L L L L EN EN EN CS EN EN AN; 2 ('LTR') (line 497498)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };

    {
        // R R R AL WS R AL AL R WS R R R AL R CS WS L L L L L L EN EN EN CS EN EN AN; 5 ('auto') (line 497504)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R R R AL WS R AL AL R WS R R R AL R CS WS L L L L L L EN EN EN CS EN EN AN; 5 ('RTL') (line 497504)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON ON WS AL R AL WS R AL R; 5 ('auto') (line 497510)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON ON WS AL R AL WS R AL R; 5 ('RTL') (line 497510)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1 };

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS WS EN EN AN ON CS WS R R ON; 4 ('RTL') (line 497516)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS WS AN AN AN ON CS WS R R ON; 4 ('RTL') (line 497517)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 2 ('LTR') (line 497523)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2 };

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('auto') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('LTR') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('RTL') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 5 ('auto') (line 497535)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 5 ('RTL') (line 497535)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2 };

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('auto') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('LTR') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('RTL') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 124, 124 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('auto') (line 497547)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('LTR') (line 497547)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 124, 124 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 4 ('RTL') (line 497553)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 125, -1, 125, -1, -1, -1, -1, 125, -1, 125, -1, 124 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('auto') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('LTR') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('RTL') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_497_004)
{

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, 123, -1, -1, -1, -1, 125, 123, 123, 123, 123, -1, 122 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('auto') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('LTR') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('RTL') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 124, 124, 124, -1, -1, -1, -1, 124, 124, 124, -1, 123 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('auto') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('LTR') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('RTL') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 124, 124, 125, -1, -1, -1, -1, 125, 124, 124, -1, 123 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('auto') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('LTR') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('RTL') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 125, 125, 125, -1, -1, -1, -1, 125, 125, 125, -1, 124 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('auto') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('LTR') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('RTL') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

}
