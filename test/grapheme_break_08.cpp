// Warning! This file is autogenerated.
#include <boost/text/grapheme_break.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(grapheme, breaks_8)
{
    // ÷ D800 ÷ 1160 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1160);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 1160 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1160);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 11A8 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 11A8 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ AC00 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC00);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ AC00 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC00);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ AC01 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC01);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ AC01 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC01);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 1F1E6 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 261D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 261D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 1F3FB ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 200D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 × 200D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ D800 ÷ 2640 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 2640 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 1F466 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 1F466 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0378 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <reserved-0378> (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0378);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ 0378 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0378);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ D800 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ D800 ÷ 0308 ÷ D800 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xD800);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000D × 000A ÷ 0061 ÷ 000A ÷ 0308 ÷	
    // ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN SMALL LETTER A (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 × 0308 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0020 × 200D ÷ 0646 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] ARABIC LETTER NOON (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0646);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0646 × 200D ÷ 0020 ÷	
    // ÷ [0.2] ARABIC LETTER NOON (Other) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0646);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1100 × 1100 ÷	
    // ÷ [0.2] HANGUL CHOSEONG KIYEOK (L) × [6.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ AC00 × 11A8 ÷ 1100 ÷	
    // ÷ [0.2] HANGUL SYLLABLE GA (LV) × [7.0] HANGUL JONGSEONG KIYEOK (T) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC00);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ AC01 × 11A8 ÷ 1100 ÷	
    // ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [8.0] HANGUL JONGSEONG KIYEOK (T) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC01);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [12.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E7);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E8);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E7);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E8);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 ÷ 1F1E6 × 1F1E7 × 200D ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E7);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E8);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 ÷ 1F1E6 × 200D ÷ 1F1E7 × 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E7);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E8);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 × 1F1E9 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER D (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E7);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E8);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E9);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 × 200D ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0061 × 0308 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 × 0903 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0903);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0061 ÷ 0600 × 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) × [9.2] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0600);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0062);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 261D × 1F3FB ÷ 261D ÷	
    // ÷ [0.2] WHITE UP POINTING INDEX (E_Base) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 1F3FB ÷	
    // ÷ [0.2] BOY (EBG) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 200D × 1F466 × 1F3FB ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [11.0] BOY (EBG) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 200D × 2640 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [11.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 200D × 1F466 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [11.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 1F466 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

}
