// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_151_000)
{
    // 1EE13 0062;	
    // (‎‎𞸓‎‎) ARABIC MATHEMATICAL REH	[23AC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE13, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_001)
{
    // 1EE93 0062;	
    // (‎‎𞺓‎‎) ARABIC MATHEMATICAL LOOPED REH	[23AC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE93, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_002)
{
    // 1EEB3 0062;	
    // (‎‎𞺳‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK REH	[23AC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB3, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_003)
{
    // FEAE 0062;	
    // (‎‎ﺮ‎‎) ARABIC LETTER REH FINAL FORM	[23AC 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAE, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_004)
{
    // FEAD 0062;	
    // (‎‎ﺭ‎‎) ARABIC LETTER REH ISOLATED FORM	[23AC 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAD, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_005)
{
    // FC5C 0062;	
    // (‎‎ﱜ‎‎) ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM	[23AC 1CC6 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5C, 0x0062 };
    uint32_t const ces[11] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_006)
{
    // FDF6 0021;	
    // (‎‎ﷶ‎‎) ARABIC LIGATURE RASOUL ISOLATED FORM	[23AC 23BF 241D 2402 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF6, 0x0021 };
    uint32_t const ces[18] = { 0x23AC, 0x23BF, 0x241D, 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_007)
{
    // FDF6 003F;	
    // (‎‎ﷶ‎‎) ARABIC LIGATURE RASOUL ISOLATED FORM	[23AC 23BF 241D 2402 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF6, 0x003F };
    uint32_t const ces[18] = { 0x23AC, 0x23BF, 0x241D, 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_008)
{
    // FDF6 0061;	
    // (‎‎ﷶ‎‎) ARABIC LIGATURE RASOUL ISOLATED FORM	[23AC 23BF 241D 2402 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF6, 0x0061 };
    uint32_t const ces[18] = { 0x23AC, 0x23BF, 0x241D, 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_009)
{
    // FDF6 0041;	
    // (‎‎ﷶ‎‎) ARABIC LIGATURE RASOUL ISOLATED FORM	[23AC 23BF 241D 2402 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF6, 0x0041 };
    uint32_t const ces[18] = { 0x23AC, 0x23BF, 0x241D, 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_010)
{
    // FDF6 0062;	
    // (‎‎ﷶ‎‎) ARABIC LIGATURE RASOUL ISOLATED FORM	[23AC 23BF 241D 2402 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF6, 0x0062 };
    uint32_t const ces[18] = { 0x23AC, 0x23BF, 0x241D, 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_011)
{
    // FDFC 0021;	
    // (‎‎﷼‎‎) RIAL SIGN	[23AC 242D 2371 2402 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFC, 0x0021 };
    uint32_t const ces[18] = { 0x23AC, 0x242D, 0x2371, 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_012)
{
    // FDFC 003F;	
    // (‎‎﷼‎‎) RIAL SIGN	[23AC 242D 2371 2402 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFC, 0x003F };
    uint32_t const ces[18] = { 0x23AC, 0x242D, 0x2371, 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_013)
{
    // FDFC 0061;	
    // (‎‎﷼‎‎) RIAL SIGN	[23AC 242D 2371 2402 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFC, 0x0061 };
    uint32_t const ces[18] = { 0x23AC, 0x242D, 0x2371, 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_014)
{
    // FDFC 0041;	
    // (‎‎﷼‎‎) RIAL SIGN	[23AC 242D 2371 2402 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDFC, 0x0041 };
    uint32_t const ces[18] = { 0x23AC, 0x242D, 0x2371, 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_015)
{
    // FDFC 0062;	
    // (‎‎﷼‎‎) RIAL SIGN	[23AC 242D 2371 2402 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFC, 0x0062 };
    uint32_t const ces[18] = { 0x23AC, 0x242D, 0x2371, 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_016)
{
    // 0632 0021;	
    // (‎‎ز‎‎) ARABIC LETTER ZAIN	[23AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0632, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_017)
{
    // 1EE06 0021;	
    // (‎‎𞸆‎‎) ARABIC MATHEMATICAL ZAIN	[23AD 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE06, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_018)
{
    // 1EE86 0021;	
    // (‎‎𞺆‎‎) ARABIC MATHEMATICAL LOOPED ZAIN	[23AD 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE86, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_019)
{
    // 1EEA6 0021;	
    // (‎‎𞺦‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN	[23AD 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA6, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_020)
{
    // FEB0 0021;	
    // (‎‎ﺰ‎‎) ARABIC LETTER ZAIN FINAL FORM	[23AD 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB0, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_021)
{
    // FEAF 0021;	
    // (‎‎ﺯ‎‎) ARABIC LETTER ZAIN ISOLATED FORM	[23AD 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAF, 0x0021 };
    uint32_t const ces[9] = { 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_022)
{
    // 0632 003F;	
    // (‎‎ز‎‎) ARABIC LETTER ZAIN	[23AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0632, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_023)
{
    // 1EE06 003F;	
    // (‎‎𞸆‎‎) ARABIC MATHEMATICAL ZAIN	[23AD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE06, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_024)
{
    // 1EE86 003F;	
    // (‎‎𞺆‎‎) ARABIC MATHEMATICAL LOOPED ZAIN	[23AD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE86, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_025)
{
    // 1EEA6 003F;	
    // (‎‎𞺦‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN	[23AD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA6, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_026)
{
    // FEB0 003F;	
    // (‎‎ﺰ‎‎) ARABIC LETTER ZAIN FINAL FORM	[23AD 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB0, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_027)
{
    // FEAF 003F;	
    // (‎‎ﺯ‎‎) ARABIC LETTER ZAIN ISOLATED FORM	[23AD 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAF, 0x003F };
    uint32_t const ces[9] = { 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_028)
{
    // 0632 0061;	
    // (‎‎ز‎‎) ARABIC LETTER ZAIN	[23AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0632, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_029)
{
    // 0632 0041;	
    // (‎‎ز‎‎) ARABIC LETTER ZAIN	[23AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0632, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_030)
{
    // 1EE06 0061;	
    // (‎‎𞸆‎‎) ARABIC MATHEMATICAL ZAIN	[23AD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE06, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_031)
{
    // 1EE86 0061;	
    // (‎‎𞺆‎‎) ARABIC MATHEMATICAL LOOPED ZAIN	[23AD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE86, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_032)
{
    // 1EEA6 0061;	
    // (‎‎𞺦‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN	[23AD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA6, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_033)
{
    // 1EE06 0041;	
    // (‎‎𞸆‎‎) ARABIC MATHEMATICAL ZAIN	[23AD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE06, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_034)
{
    // 1EE86 0041;	
    // (‎‎𞺆‎‎) ARABIC MATHEMATICAL LOOPED ZAIN	[23AD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE86, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_035)
{
    // 1EEA6 0041;	
    // (‎‎𞺦‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN	[23AD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEA6, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_036)
{
    // FEB0 0061;	
    // (‎‎ﺰ‎‎) ARABIC LETTER ZAIN FINAL FORM	[23AD 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB0, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_037)
{
    // FEB0 0041;	
    // (‎‎ﺰ‎‎) ARABIC LETTER ZAIN FINAL FORM	[23AD 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEB0, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_038)
{
    // FEAF 0061;	
    // (‎‎ﺯ‎‎) ARABIC LETTER ZAIN ISOLATED FORM	[23AD 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAF, 0x0061 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_039)
{
    // FEAF 0041;	
    // (‎‎ﺯ‎‎) ARABIC LETTER ZAIN ISOLATED FORM	[23AD 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEAF, 0x0041 };
    uint32_t const ces[9] = { 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_040)
{
    // 0632 0062;	
    // (‎‎ز‎‎) ARABIC LETTER ZAIN	[23AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0632, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_041)
{
    // 1EE06 0062;	
    // (‎‎𞸆‎‎) ARABIC MATHEMATICAL ZAIN	[23AD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE06, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_042)
{
    // 1EE86 0062;	
    // (‎‎𞺆‎‎) ARABIC MATHEMATICAL LOOPED ZAIN	[23AD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE86, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_043)
{
    // 1EEA6 0062;	
    // (‎‎𞺦‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN	[23AD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA6, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_044)
{
    // FEB0 0062;	
    // (‎‎ﺰ‎‎) ARABIC LETTER ZAIN FINAL FORM	[23AD 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB0, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_045)
{
    // FEAF 0062;	
    // (‎‎ﺯ‎‎) ARABIC LETTER ZAIN ISOLATED FORM	[23AD 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAF, 0x0062 };
    uint32_t const ces[9] = { 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_046)
{
    // 0691 0021;	
    // (‎‎ڑ‎‎) ARABIC LETTER RREH	[23AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0691, 0x0021 };
    uint32_t const ces[9] = { 0x23AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_047)
{
    // FB8D 0021;	
    // (‎‎ﮍ‎‎) ARABIC LETTER RREH FINAL FORM	[23AE 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8D, 0x0021 };
    uint32_t const ces[9] = { 0x23AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_048)
{
    // FB8C 0021;	
    // (‎‎ﮌ‎‎) ARABIC LETTER RREH ISOLATED FORM	[23AE 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8C, 0x0021 };
    uint32_t const ces[9] = { 0x23AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_049)
{
    // 0691 003F;	
    // (‎‎ڑ‎‎) ARABIC LETTER RREH	[23AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0691, 0x003F };
    uint32_t const ces[9] = { 0x23AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_050)
{
    // FB8D 003F;	
    // (‎‎ﮍ‎‎) ARABIC LETTER RREH FINAL FORM	[23AE 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8D, 0x003F };
    uint32_t const ces[9] = { 0x23AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_051)
{
    // FB8C 003F;	
    // (‎‎ﮌ‎‎) ARABIC LETTER RREH ISOLATED FORM	[23AE 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8C, 0x003F };
    uint32_t const ces[9] = { 0x23AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_052)
{
    // 0691 0061;	
    // (‎‎ڑ‎‎) ARABIC LETTER RREH	[23AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0691, 0x0061 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_053)
{
    // 0691 0041;	
    // (‎‎ڑ‎‎) ARABIC LETTER RREH	[23AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0691, 0x0041 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_054)
{
    // FB8D 0061;	
    // (‎‎ﮍ‎‎) ARABIC LETTER RREH FINAL FORM	[23AE 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8D, 0x0061 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_055)
{
    // FB8D 0041;	
    // (‎‎ﮍ‎‎) ARABIC LETTER RREH FINAL FORM	[23AE 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB8D, 0x0041 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_056)
{
    // FB8C 0061;	
    // (‎‎ﮌ‎‎) ARABIC LETTER RREH ISOLATED FORM	[23AE 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8C, 0x0061 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_057)
{
    // FB8C 0041;	
    // (‎‎ﮌ‎‎) ARABIC LETTER RREH ISOLATED FORM	[23AE 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB8C, 0x0041 };
    uint32_t const ces[9] = { 0x23AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_058)
{
    // 0691 0062;	
    // (‎‎ڑ‎‎) ARABIC LETTER RREH	[23AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0691, 0x0062 };
    uint32_t const ces[9] = { 0x23AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_059)
{
    // FB8D 0062;	
    // (‎‎ﮍ‎‎) ARABIC LETTER RREH FINAL FORM	[23AE 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8D, 0x0062 };
    uint32_t const ces[9] = { 0x23AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_060)
{
    // FB8C 0062;	
    // (‎‎ﮌ‎‎) ARABIC LETTER RREH ISOLATED FORM	[23AE 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8C, 0x0062 };
    uint32_t const ces[9] = { 0x23AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_061)
{
    // 0692 0021;	
    // (‎‎ڒ‎‎) ARABIC LETTER REH WITH SMALL V	[23AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0692, 0x0021 };
    uint32_t const ces[9] = { 0x23AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_062)
{
    // 0692 003F;	
    // (‎‎ڒ‎‎) ARABIC LETTER REH WITH SMALL V	[23AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0692, 0x003F };
    uint32_t const ces[9] = { 0x23AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_063)
{
    // 0692 0061;	
    // (‎‎ڒ‎‎) ARABIC LETTER REH WITH SMALL V	[23AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0692, 0x0061 };
    uint32_t const ces[9] = { 0x23AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_064)
{
    // 0692 0041;	
    // (‎‎ڒ‎‎) ARABIC LETTER REH WITH SMALL V	[23AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0692, 0x0041 };
    uint32_t const ces[9] = { 0x23AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_065)
{
    // 0692 0062;	
    // (‎‎ڒ‎‎) ARABIC LETTER REH WITH SMALL V	[23AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0692, 0x0062 };
    uint32_t const ces[9] = { 0x23AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_066)
{
    // 0693 0021;	
    // (‎‎ړ‎‎) ARABIC LETTER REH WITH RING	[23B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0693, 0x0021 };
    uint32_t const ces[9] = { 0x23B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_067)
{
    // 0693 003F;	
    // (‎‎ړ‎‎) ARABIC LETTER REH WITH RING	[23B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0693, 0x003F };
    uint32_t const ces[9] = { 0x23B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_068)
{
    // 0693 0061;	
    // (‎‎ړ‎‎) ARABIC LETTER REH WITH RING	[23B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0693, 0x0061 };
    uint32_t const ces[9] = { 0x23B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_069)
{
    // 0693 0041;	
    // (‎‎ړ‎‎) ARABIC LETTER REH WITH RING	[23B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0693, 0x0041 };
    uint32_t const ces[9] = { 0x23B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_070)
{
    // 0693 0062;	
    // (‎‎ړ‎‎) ARABIC LETTER REH WITH RING	[23B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0693, 0x0062 };
    uint32_t const ces[9] = { 0x23B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_071)
{
    // 0694 0021;	
    // (‎‎ڔ‎‎) ARABIC LETTER REH WITH DOT BELOW	[23B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0694, 0x0021 };
    uint32_t const ces[9] = { 0x23B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_072)
{
    // 0694 003F;	
    // (‎‎ڔ‎‎) ARABIC LETTER REH WITH DOT BELOW	[23B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0694, 0x003F };
    uint32_t const ces[9] = { 0x23B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_073)
{
    // 0694 0061;	
    // (‎‎ڔ‎‎) ARABIC LETTER REH WITH DOT BELOW	[23B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0694, 0x0061 };
    uint32_t const ces[9] = { 0x23B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_074)
{
    // 0694 0041;	
    // (‎‎ڔ‎‎) ARABIC LETTER REH WITH DOT BELOW	[23B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0694, 0x0041 };
    uint32_t const ces[9] = { 0x23B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_075)
{
    // 0694 0062;	
    // (‎‎ڔ‎‎) ARABIC LETTER REH WITH DOT BELOW	[23B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0694, 0x0062 };
    uint32_t const ces[9] = { 0x23B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_076)
{
    // 0695 0021;	
    // (‎‎ڕ‎‎) ARABIC LETTER REH WITH SMALL V BELOW	[23B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0695, 0x0021 };
    uint32_t const ces[9] = { 0x23B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_077)
{
    // 0695 003F;	
    // (‎‎ڕ‎‎) ARABIC LETTER REH WITH SMALL V BELOW	[23B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0695, 0x003F };
    uint32_t const ces[9] = { 0x23B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_078)
{
    // 0695 0061;	
    // (‎‎ڕ‎‎) ARABIC LETTER REH WITH SMALL V BELOW	[23B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0695, 0x0061 };
    uint32_t const ces[9] = { 0x23B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_079)
{
    // 0695 0041;	
    // (‎‎ڕ‎‎) ARABIC LETTER REH WITH SMALL V BELOW	[23B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0695, 0x0041 };
    uint32_t const ces[9] = { 0x23B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_080)
{
    // 0695 0062;	
    // (‎‎ڕ‎‎) ARABIC LETTER REH WITH SMALL V BELOW	[23B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0695, 0x0062 };
    uint32_t const ces[9] = { 0x23B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_081)
{
    // 0696 0021;	
    // (‎‎ږ‎‎) ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE	[23B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0696, 0x0021 };
    uint32_t const ces[9] = { 0x23B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_082)
{
    // 0696 003F;	
    // (‎‎ږ‎‎) ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE	[23B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0696, 0x003F };
    uint32_t const ces[9] = { 0x23B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_083)
{
    // 0696 0061;	
    // (‎‎ږ‎‎) ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE	[23B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0696, 0x0061 };
    uint32_t const ces[9] = { 0x23B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_084)
{
    // 0696 0041;	
    // (‎‎ږ‎‎) ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE	[23B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0696, 0x0041 };
    uint32_t const ces[9] = { 0x23B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_085)
{
    // 0696 0062;	
    // (‎‎ږ‎‎) ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE	[23B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0696, 0x0062 };
    uint32_t const ces[9] = { 0x23B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_086)
{
    // 0697 0021;	
    // (‎‎ڗ‎‎) ARABIC LETTER REH WITH TWO DOTS ABOVE	[23B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0697, 0x0021 };
    uint32_t const ces[9] = { 0x23B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_087)
{
    // 0697 003F;	
    // (‎‎ڗ‎‎) ARABIC LETTER REH WITH TWO DOTS ABOVE	[23B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0697, 0x003F };
    uint32_t const ces[9] = { 0x23B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_088)
{
    // 0697 0061;	
    // (‎‎ڗ‎‎) ARABIC LETTER REH WITH TWO DOTS ABOVE	[23B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0697, 0x0061 };
    uint32_t const ces[9] = { 0x23B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_089)
{
    // 0697 0041;	
    // (‎‎ڗ‎‎) ARABIC LETTER REH WITH TWO DOTS ABOVE	[23B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0697, 0x0041 };
    uint32_t const ces[9] = { 0x23B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_090)
{
    // 0697 0062;	
    // (‎‎ڗ‎‎) ARABIC LETTER REH WITH TWO DOTS ABOVE	[23B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0697, 0x0062 };
    uint32_t const ces[9] = { 0x23B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_091)
{
    // 0698 0021;	
    // (‎‎ژ‎‎) ARABIC LETTER JEH	[23B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0698, 0x0021 };
    uint32_t const ces[9] = { 0x23B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_092)
{
    // FB8B 0021;	
    // (‎‎ﮋ‎‎) ARABIC LETTER JEH FINAL FORM	[23B5 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8B, 0x0021 };
    uint32_t const ces[9] = { 0x23B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_093)
{
    // FB8A 0021;	
    // (‎‎ﮊ‎‎) ARABIC LETTER JEH ISOLATED FORM	[23B5 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8A, 0x0021 };
    uint32_t const ces[9] = { 0x23B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_094)
{
    // 0698 003F;	
    // (‎‎ژ‎‎) ARABIC LETTER JEH	[23B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0698, 0x003F };
    uint32_t const ces[9] = { 0x23B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_095)
{
    // FB8B 003F;	
    // (‎‎ﮋ‎‎) ARABIC LETTER JEH FINAL FORM	[23B5 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8B, 0x003F };
    uint32_t const ces[9] = { 0x23B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_096)
{
    // FB8A 003F;	
    // (‎‎ﮊ‎‎) ARABIC LETTER JEH ISOLATED FORM	[23B5 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8A, 0x003F };
    uint32_t const ces[9] = { 0x23B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_097)
{
    // 0698 0061;	
    // (‎‎ژ‎‎) ARABIC LETTER JEH	[23B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0698, 0x0061 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_098)
{
    // 0698 0041;	
    // (‎‎ژ‎‎) ARABIC LETTER JEH	[23B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0698, 0x0041 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_099)
{
    // FB8B 0061;	
    // (‎‎ﮋ‎‎) ARABIC LETTER JEH FINAL FORM	[23B5 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8B, 0x0061 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_100)
{
    // FB8B 0041;	
    // (‎‎ﮋ‎‎) ARABIC LETTER JEH FINAL FORM	[23B5 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB8B, 0x0041 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_101)
{
    // FB8A 0061;	
    // (‎‎ﮊ‎‎) ARABIC LETTER JEH ISOLATED FORM	[23B5 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8A, 0x0061 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_102)
{
    // FB8A 0041;	
    // (‎‎ﮊ‎‎) ARABIC LETTER JEH ISOLATED FORM	[23B5 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB8A, 0x0041 };
    uint32_t const ces[9] = { 0x23B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_103)
{
    // 0698 0062;	
    // (‎‎ژ‎‎) ARABIC LETTER JEH	[23B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0698, 0x0062 };
    uint32_t const ces[9] = { 0x23B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_104)
{
    // FB8B 0062;	
    // (‎‎ﮋ‎‎) ARABIC LETTER JEH FINAL FORM	[23B5 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB8B, 0x0062 };
    uint32_t const ces[9] = { 0x23B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_105)
{
    // FB8A 0062;	
    // (‎‎ﮊ‎‎) ARABIC LETTER JEH ISOLATED FORM	[23B5 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB8A, 0x0062 };
    uint32_t const ces[9] = { 0x23B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_106)
{
    // 0699 0021;	
    // (‎‎ڙ‎‎) ARABIC LETTER REH WITH FOUR DOTS ABOVE	[23B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0699, 0x0021 };
    uint32_t const ces[9] = { 0x23B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_107)
{
    // 0699 003F;	
    // (‎‎ڙ‎‎) ARABIC LETTER REH WITH FOUR DOTS ABOVE	[23B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0699, 0x003F };
    uint32_t const ces[9] = { 0x23B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_108)
{
    // 0699 0061;	
    // (‎‎ڙ‎‎) ARABIC LETTER REH WITH FOUR DOTS ABOVE	[23B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0699, 0x0061 };
    uint32_t const ces[9] = { 0x23B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_109)
{
    // 0699 0041;	
    // (‎‎ڙ‎‎) ARABIC LETTER REH WITH FOUR DOTS ABOVE	[23B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0699, 0x0041 };
    uint32_t const ces[9] = { 0x23B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_110)
{
    // 0699 0062;	
    // (‎‎ڙ‎‎) ARABIC LETTER REH WITH FOUR DOTS ABOVE	[23B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0699, 0x0062 };
    uint32_t const ces[9] = { 0x23B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_111)
{
    // 06EF 0021;	
    // (‎‎ۯ‎‎) ARABIC LETTER REH WITH INVERTED V	[23B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EF, 0x0021 };
    uint32_t const ces[9] = { 0x23B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_112)
{
    // 06EF 003F;	
    // (‎‎ۯ‎‎) ARABIC LETTER REH WITH INVERTED V	[23B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EF, 0x003F };
    uint32_t const ces[9] = { 0x23B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_113)
{
    // 06EF 0061;	
    // (‎‎ۯ‎‎) ARABIC LETTER REH WITH INVERTED V	[23B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EF, 0x0061 };
    uint32_t const ces[9] = { 0x23B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_114)
{
    // 06EF 0041;	
    // (‎‎ۯ‎‎) ARABIC LETTER REH WITH INVERTED V	[23B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06EF, 0x0041 };
    uint32_t const ces[9] = { 0x23B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_115)
{
    // 06EF 0062;	
    // (‎‎ۯ‎‎) ARABIC LETTER REH WITH INVERTED V	[23B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EF, 0x0062 };
    uint32_t const ces[9] = { 0x23B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_116)
{
    // 075B 0021;	
    // (‎‎ݛ‎‎) ARABIC LETTER REH WITH STROKE	[23B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075B, 0x0021 };
    uint32_t const ces[9] = { 0x23B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_117)
{
    // 075B 003F;	
    // (‎‎ݛ‎‎) ARABIC LETTER REH WITH STROKE	[23B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075B, 0x003F };
    uint32_t const ces[9] = { 0x23B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_118)
{
    // 075B 0061;	
    // (‎‎ݛ‎‎) ARABIC LETTER REH WITH STROKE	[23B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075B, 0x0061 };
    uint32_t const ces[9] = { 0x23B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_119)
{
    // 075B 0041;	
    // (‎‎ݛ‎‎) ARABIC LETTER REH WITH STROKE	[23B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x075B, 0x0041 };
    uint32_t const ces[9] = { 0x23B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_120)
{
    // 075B 0062;	
    // (‎‎ݛ‎‎) ARABIC LETTER REH WITH STROKE	[23B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075B, 0x0062 };
    uint32_t const ces[9] = { 0x23B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_121)
{
    // 076B 0021;	
    // (‎‎ݫ‎‎) ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE	[23B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076B, 0x0021 };
    uint32_t const ces[9] = { 0x23B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_122)
{
    // 076B 003F;	
    // (‎‎ݫ‎‎) ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE	[23B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076B, 0x003F };
    uint32_t const ces[9] = { 0x23B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_123)
{
    // 076B 0061;	
    // (‎‎ݫ‎‎) ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE	[23B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076B, 0x0061 };
    uint32_t const ces[9] = { 0x23B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_124)
{
    // 076B 0041;	
    // (‎‎ݫ‎‎) ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE	[23B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076B, 0x0041 };
    uint32_t const ces[9] = { 0x23B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_125)
{
    // 076B 0062;	
    // (‎‎ݫ‎‎) ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE	[23B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076B, 0x0062 };
    uint32_t const ces[9] = { 0x23B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_126)
{
    // 076C 0021;	
    // (‎‎ݬ‎‎) ARABIC LETTER REH WITH HAMZA ABOVE	[23BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076C, 0x0021 };
    uint32_t const ces[9] = { 0x23BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_127)
{
    // 076C 003F;	
    // (‎‎ݬ‎‎) ARABIC LETTER REH WITH HAMZA ABOVE	[23BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076C, 0x003F };
    uint32_t const ces[9] = { 0x23BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_128)
{
    // 076C 0061;	
    // (‎‎ݬ‎‎) ARABIC LETTER REH WITH HAMZA ABOVE	[23BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076C, 0x0061 };
    uint32_t const ces[9] = { 0x23BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_129)
{
    // 076C 0041;	
    // (‎‎ݬ‎‎) ARABIC LETTER REH WITH HAMZA ABOVE	[23BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076C, 0x0041 };
    uint32_t const ces[9] = { 0x23BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_130)
{
    // 076C 0062;	
    // (‎‎ݬ‎‎) ARABIC LETTER REH WITH HAMZA ABOVE	[23BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076C, 0x0062 };
    uint32_t const ces[9] = { 0x23BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_131)
{
    // 0771 0021;	
    // (‎‎ݱ‎‎) ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0771, 0x0021 };
    uint32_t const ces[9] = { 0x23BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_132)
{
    // 0771 003F;	
    // (‎‎ݱ‎‎) ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0771, 0x003F };
    uint32_t const ces[9] = { 0x23BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_133)
{
    // 0771 0061;	
    // (‎‎ݱ‎‎) ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0771, 0x0061 };
    uint32_t const ces[9] = { 0x23BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_134)
{
    // 0771 0041;	
    // (‎‎ݱ‎‎) ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0771, 0x0041 };
    uint32_t const ces[9] = { 0x23BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_135)
{
    // 0771 0062;	
    // (‎‎ݱ‎‎) ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0771, 0x0062 };
    uint32_t const ces[9] = { 0x23BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_136)
{
    // 08AA 0021;	
    // (‎‎ࢪ‎‎) ARABIC LETTER REH WITH LOOP	[23BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AA, 0x0021 };
    uint32_t const ces[9] = { 0x23BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_137)
{
    // 08AA 003F;	
    // (‎‎ࢪ‎‎) ARABIC LETTER REH WITH LOOP	[23BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AA, 0x003F };
    uint32_t const ces[9] = { 0x23BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_138)
{
    // 08AA 0061;	
    // (‎‎ࢪ‎‎) ARABIC LETTER REH WITH LOOP	[23BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AA, 0x0061 };
    uint32_t const ces[9] = { 0x23BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_139)
{
    // 08AA 0041;	
    // (‎‎ࢪ‎‎) ARABIC LETTER REH WITH LOOP	[23BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08AA, 0x0041 };
    uint32_t const ces[9] = { 0x23BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_140)
{
    // 08AA 0062;	
    // (‎‎ࢪ‎‎) ARABIC LETTER REH WITH LOOP	[23BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AA, 0x0062 };
    uint32_t const ces[9] = { 0x23BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_141)
{
    // 08B2 0021;	
    // (‎‎ࢲ‎‎) ARABIC LETTER ZAIN WITH INVERTED V ABOVE	[23BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B2, 0x0021 };
    uint32_t const ces[9] = { 0x23BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_142)
{
    // 08B2 003F;	
    // (‎‎ࢲ‎‎) ARABIC LETTER ZAIN WITH INVERTED V ABOVE	[23BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B2, 0x003F };
    uint32_t const ces[9] = { 0x23BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_143)
{
    // 08B2 0061;	
    // (‎‎ࢲ‎‎) ARABIC LETTER ZAIN WITH INVERTED V ABOVE	[23BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B2, 0x0061 };
    uint32_t const ces[9] = { 0x23BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_144)
{
    // 08B2 0041;	
    // (‎‎ࢲ‎‎) ARABIC LETTER ZAIN WITH INVERTED V ABOVE	[23BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08B2, 0x0041 };
    uint32_t const ces[9] = { 0x23BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_145)
{
    // 08B2 0062;	
    // (‎‎ࢲ‎‎) ARABIC LETTER ZAIN WITH INVERTED V ABOVE	[23BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B2, 0x0062 };
    uint32_t const ces[9] = { 0x23BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_146)
{
    // 08B9 0021;	
    // (‎‎ࢹ‎‎) ARABIC LETTER REH WITH SMALL NOON ABOVE	[23BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B9, 0x0021 };
    uint32_t const ces[9] = { 0x23BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_147)
{
    // 08B9 003F;	
    // (‎‎ࢹ‎‎) ARABIC LETTER REH WITH SMALL NOON ABOVE	[23BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B9, 0x003F };
    uint32_t const ces[9] = { 0x23BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_148)
{
    // 08B9 0061;	
    // (‎‎ࢹ‎‎) ARABIC LETTER REH WITH SMALL NOON ABOVE	[23BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B9, 0x0061 };
    uint32_t const ces[9] = { 0x23BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_149)
{
    // 08B9 0041;	
    // (‎‎ࢹ‎‎) ARABIC LETTER REH WITH SMALL NOON ABOVE	[23BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08B9, 0x0041 };
    uint32_t const ces[9] = { 0x23BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_150)
{
    // 08B9 0062;	
    // (‎‎ࢹ‎‎) ARABIC LETTER REH WITH SMALL NOON ABOVE	[23BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B9, 0x0062 };
    uint32_t const ces[9] = { 0x23BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_151)
{
    // 0633 0021;	
    // (‎‎س‎‎) ARABIC LETTER SEEN	[23BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0633, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_152)
{
    // 1EE0E 0021;	
    // (‎‎𞸎‎‎) ARABIC MATHEMATICAL SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0E, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_153)
{
    // 1EE2E 0021;	
    // (‎‎𞸮‎‎) ARABIC MATHEMATICAL INITIAL SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2E, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_154)
{
    // 1EE4E 0021;	
    // (‎‎𞹎‎‎) ARABIC MATHEMATICAL TAILED SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4E, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_155)
{
    // 1EE6E 0021;	
    // (‎‎𞹮‎‎) ARABIC MATHEMATICAL STRETCHED SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6E, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_156)
{
    // 1EE8E 0021;	
    // (‎‎𞺎‎‎) ARABIC MATHEMATICAL LOOPED SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8E, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_157)
{
    // 1EEAE 0021;	
    // (‎‎𞺮‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN	[23BF 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAE, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_158)
{
    // FEB3 0021;	
    // (‎‎ﺳ‎‎) ARABIC LETTER SEEN INITIAL FORM	[23BF 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB3, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_159)
{
    // FEB4 0021;	
    // (‎‎ﺴ‎‎) ARABIC LETTER SEEN MEDIAL FORM	[23BF 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB4, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_160)
{
    // FEB2 0021;	
    // (‎‎ﺲ‎‎) ARABIC LETTER SEEN FINAL FORM	[23BF 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB2, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_161)
{
    // FEB1 0021;	
    // (‎‎ﺱ‎‎) ARABIC LETTER SEEN ISOLATED FORM	[23BF 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB1, 0x0021 };
    uint32_t const ces[9] = { 0x23BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_162)
{
    // 0633 003F;	
    // (‎‎س‎‎) ARABIC LETTER SEEN	[23BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0633, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_163)
{
    // 1EE0E 003F;	
    // (‎‎𞸎‎‎) ARABIC MATHEMATICAL SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0E, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_164)
{
    // 1EE2E 003F;	
    // (‎‎𞸮‎‎) ARABIC MATHEMATICAL INITIAL SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2E, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_165)
{
    // 1EE4E 003F;	
    // (‎‎𞹎‎‎) ARABIC MATHEMATICAL TAILED SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4E, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_166)
{
    // 1EE6E 003F;	
    // (‎‎𞹮‎‎) ARABIC MATHEMATICAL STRETCHED SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6E, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_167)
{
    // 1EE8E 003F;	
    // (‎‎𞺎‎‎) ARABIC MATHEMATICAL LOOPED SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8E, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_168)
{
    // 1EEAE 003F;	
    // (‎‎𞺮‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN	[23BF 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAE, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_169)
{
    // FEB3 003F;	
    // (‎‎ﺳ‎‎) ARABIC LETTER SEEN INITIAL FORM	[23BF 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB3, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_170)
{
    // FEB4 003F;	
    // (‎‎ﺴ‎‎) ARABIC LETTER SEEN MEDIAL FORM	[23BF 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB4, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_171)
{
    // FEB2 003F;	
    // (‎‎ﺲ‎‎) ARABIC LETTER SEEN FINAL FORM	[23BF 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB2, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_172)
{
    // FEB1 003F;	
    // (‎‎ﺱ‎‎) ARABIC LETTER SEEN ISOLATED FORM	[23BF 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB1, 0x003F };
    uint32_t const ces[9] = { 0x23BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_173)
{
    // 0633 0061;	
    // (‎‎س‎‎) ARABIC LETTER SEEN	[23BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0633, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_174)
{
    // 0633 0041;	
    // (‎‎س‎‎) ARABIC LETTER SEEN	[23BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0633, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_175)
{
    // 1EE0E 0061;	
    // (‎‎𞸎‎‎) ARABIC MATHEMATICAL SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0E, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_176)
{
    // 1EE2E 0061;	
    // (‎‎𞸮‎‎) ARABIC MATHEMATICAL INITIAL SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2E, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_177)
{
    // 1EE4E 0061;	
    // (‎‎𞹎‎‎) ARABIC MATHEMATICAL TAILED SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4E, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_178)
{
    // 1EE6E 0061;	
    // (‎‎𞹮‎‎) ARABIC MATHEMATICAL STRETCHED SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6E, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_179)
{
    // 1EE8E 0061;	
    // (‎‎𞺎‎‎) ARABIC MATHEMATICAL LOOPED SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8E, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_180)
{
    // 1EEAE 0061;	
    // (‎‎𞺮‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN	[23BF 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAE, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_181)
{
    // 1EE0E 0041;	
    // (‎‎𞸎‎‎) ARABIC MATHEMATICAL SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE0E, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_182)
{
    // 1EE2E 0041;	
    // (‎‎𞸮‎‎) ARABIC MATHEMATICAL INITIAL SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE2E, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_183)
{
    // 1EE4E 0041;	
    // (‎‎𞹎‎‎) ARABIC MATHEMATICAL TAILED SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE4E, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_184)
{
    // 1EE6E 0041;	
    // (‎‎𞹮‎‎) ARABIC MATHEMATICAL STRETCHED SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE6E, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_185)
{
    // 1EE8E 0041;	
    // (‎‎𞺎‎‎) ARABIC MATHEMATICAL LOOPED SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE8E, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_186)
{
    // 1EEAE 0041;	
    // (‎‎𞺮‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN	[23BF 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEAE, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_187)
{
    // FEB3 0061;	
    // (‎‎ﺳ‎‎) ARABIC LETTER SEEN INITIAL FORM	[23BF 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB3, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_188)
{
    // FEB3 0041;	
    // (‎‎ﺳ‎‎) ARABIC LETTER SEEN INITIAL FORM	[23BF 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEB3, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_189)
{
    // FEB4 0061;	
    // (‎‎ﺴ‎‎) ARABIC LETTER SEEN MEDIAL FORM	[23BF 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB4, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_190)
{
    // FEB4 0041;	
    // (‎‎ﺴ‎‎) ARABIC LETTER SEEN MEDIAL FORM	[23BF 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEB4, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_191)
{
    // FEB2 0061;	
    // (‎‎ﺲ‎‎) ARABIC LETTER SEEN FINAL FORM	[23BF 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB2, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_192)
{
    // FEB2 0041;	
    // (‎‎ﺲ‎‎) ARABIC LETTER SEEN FINAL FORM	[23BF 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEB2, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_193)
{
    // FEB1 0061;	
    // (‎‎ﺱ‎‎) ARABIC LETTER SEEN ISOLATED FORM	[23BF 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB1, 0x0061 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_194)
{
    // FEB1 0041;	
    // (‎‎ﺱ‎‎) ARABIC LETTER SEEN ISOLATED FORM	[23BF 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEB1, 0x0041 };
    uint32_t const ces[9] = { 0x23BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_195)
{
    // 0633 0062;	
    // (‎‎س‎‎) ARABIC LETTER SEEN	[23BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0633, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_196)
{
    // 1EE0E 0062;	
    // (‎‎𞸎‎‎) ARABIC MATHEMATICAL SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0E, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_197)
{
    // 1EE2E 0062;	
    // (‎‎𞸮‎‎) ARABIC MATHEMATICAL INITIAL SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2E, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_198)
{
    // 1EE4E 0062;	
    // (‎‎𞹎‎‎) ARABIC MATHEMATICAL TAILED SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4E, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_199)
{
    // 1EE6E 0062;	
    // (‎‎𞹮‎‎) ARABIC MATHEMATICAL STRETCHED SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6E, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_200)
{
    // 1EE8E 0062;	
    // (‎‎𞺎‎‎) ARABIC MATHEMATICAL LOOPED SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8E, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_201)
{
    // 1EEAE 0062;	
    // (‎‎𞺮‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN	[23BF 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAE, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_202)
{
    // FEB3 0062;	
    // (‎‎ﺳ‎‎) ARABIC LETTER SEEN INITIAL FORM	[23BF 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB3, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_203)
{
    // FEB4 0062;	
    // (‎‎ﺴ‎‎) ARABIC LETTER SEEN MEDIAL FORM	[23BF 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB4, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_204)
{
    // FEB2 0062;	
    // (‎‎ﺲ‎‎) ARABIC LETTER SEEN FINAL FORM	[23BF 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB2, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_205)
{
    // FEB1 0062;	
    // (‎‎ﺱ‎‎) ARABIC LETTER SEEN ISOLATED FORM	[23BF 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB1, 0x0062 };
    uint32_t const ces[9] = { 0x23BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_206)
{
    // FCAD 0021;	
    // (‎‎ﲭ‎‎) ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM	[23BF 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAD, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_207)
{
    // FD34 0021;	
    // (‎‎ﴴ‎‎) ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM	[23BF 238B 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD34, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_208)
{
    // FC1C 0021;	
    // (‎‎ﰜ‎‎) ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM	[23BF 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1C, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_209)
{
    // FCAD 003F;	
    // (‎‎ﲭ‎‎) ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM	[23BF 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAD, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_210)
{
    // FD34 003F;	
    // (‎‎ﴴ‎‎) ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM	[23BF 238B 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD34, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_211)
{
    // FC1C 003F;	
    // (‎‎ﰜ‎‎) ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM	[23BF 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1C, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_212)
{
    // FCAD 0061;	
    // (‎‎ﲭ‎‎) ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM	[23BF 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAD, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_213)
{
    // FCAD 0041;	
    // (‎‎ﲭ‎‎) ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM	[23BF 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAD, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_214)
{
    // FD34 0061;	
    // (‎‎ﴴ‎‎) ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM	[23BF 238B 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD34, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_215)
{
    // FD34 0041;	
    // (‎‎ﴴ‎‎) ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM	[23BF 238B 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD34, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_216)
{
    // FC1C 0061;	
    // (‎‎ﰜ‎‎) ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM	[23BF 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1C, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_217)
{
    // FC1C 0041;	
    // (‎‎ﰜ‎‎) ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM	[23BF 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1C, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_218)
{
    // FCAD 0062;	
    // (‎‎ﲭ‎‎) ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM	[23BF 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAD, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_219)
{
    // FD34 0062;	
    // (‎‎ﴴ‎‎) ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM	[23BF 238B 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD34, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_220)
{
    // FC1C 0062;	
    // (‎‎ﰜ‎‎) ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM	[23BF 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1C, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_221)
{
    // FD5D 0021;	
    // (‎‎ﵝ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM	[23BF 238B 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5D, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_222)
{
    // FD5D 003F;	
    // (‎‎ﵝ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM	[23BF 238B 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5D, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_223)
{
    // FD5D 0061;	
    // (‎‎ﵝ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM	[23BF 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5D, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_224)
{
    // FD5D 0041;	
    // (‎‎ﵝ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM	[23BF 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD5D, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_225)
{
    // FD5D 0062;	
    // (‎‎ﵝ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM	[23BF 238B 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5D, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_226)
{
    // FD5E 0021;	
    // (‎‎ﵞ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM	[23BF 238B 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5E, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_227)
{
    // FD5E 003F;	
    // (‎‎ﵞ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM	[23BF 238B 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5E, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_228)
{
    // FD5E 0061;	
    // (‎‎ﵞ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM	[23BF 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5E, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_229)
{
    // FD5E 0041;	
    // (‎‎ﵞ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM	[23BF 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD5E, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_230)
{
    // FD5E 0062;	
    // (‎‎ﵞ‎‎) ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM	[23BF 238B 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5E, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_231)
{
    // FCAE 0021;	
    // (‎‎ﲮ‎‎) ARABIC LIGATURE SEEN WITH HAH INITIAL FORM	[23BF 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAE, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_232)
{
    // FD35 0021;	
    // (‎‎ﴵ‎‎) ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM	[23BF 2392 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD35, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_233)
{
    // FC1D 0021;	
    // (‎‎ﰝ‎‎) ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM	[23BF 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1D, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_234)
{
    // FCAE 003F;	
    // (‎‎ﲮ‎‎) ARABIC LIGATURE SEEN WITH HAH INITIAL FORM	[23BF 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAE, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_235)
{
    // FD35 003F;	
    // (‎‎ﴵ‎‎) ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM	[23BF 2392 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD35, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_236)
{
    // FC1D 003F;	
    // (‎‎ﰝ‎‎) ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM	[23BF 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1D, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_237)
{
    // FCAE 0061;	
    // (‎‎ﲮ‎‎) ARABIC LIGATURE SEEN WITH HAH INITIAL FORM	[23BF 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAE, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_238)
{
    // FCAE 0041;	
    // (‎‎ﲮ‎‎) ARABIC LIGATURE SEEN WITH HAH INITIAL FORM	[23BF 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAE, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_239)
{
    // FD35 0061;	
    // (‎‎ﴵ‎‎) ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM	[23BF 2392 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD35, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_240)
{
    // FD35 0041;	
    // (‎‎ﴵ‎‎) ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM	[23BF 2392 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD35, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_241)
{
    // FC1D 0061;	
    // (‎‎ﰝ‎‎) ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM	[23BF 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1D, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_242)
{
    // FC1D 0041;	
    // (‎‎ﰝ‎‎) ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM	[23BF 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1D, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_243)
{
    // FCAE 0062;	
    // (‎‎ﲮ‎‎) ARABIC LIGATURE SEEN WITH HAH INITIAL FORM	[23BF 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAE, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_244)
{
    // FD35 0062;	
    // (‎‎ﴵ‎‎) ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM	[23BF 2392 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD35, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_245)
{
    // FC1D 0062;	
    // (‎‎ﰝ‎‎) ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM	[23BF 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1D, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_246)
{
    // FD5C 0021;	
    // (‎‎ﵜ‎‎) ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM	[23BF 2392 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5C, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_247)
{
    // FD5C 003F;	
    // (‎‎ﵜ‎‎) ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM	[23BF 2392 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5C, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_248)
{
    // FD5C 0061;	
    // (‎‎ﵜ‎‎) ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM	[23BF 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5C, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_249)
{
    // FD5C 0041;	
    // (‎‎ﵜ‎‎) ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM	[23BF 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD5C, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_250)
{
    // FD5C 0062;	
    // (‎‎ﵜ‎‎) ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM	[23BF 2392 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD5C, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_251)
{
    // FCAF 0021;	
    // (‎‎ﲯ‎‎) ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM	[23BF 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAF, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_252)
{
    // FD36 0021;	
    // (‎‎ﴶ‎‎) ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM	[23BF 2393 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD36, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_253)
{
    // FC1E 0021;	
    // (‎‎ﰞ‎‎) ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM	[23BF 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1E, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_254)
{
    // FCAF 003F;	
    // (‎‎ﲯ‎‎) ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM	[23BF 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAF, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_255)
{
    // FD36 003F;	
    // (‎‎ﴶ‎‎) ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM	[23BF 2393 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD36, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_256)
{
    // FC1E 003F;	
    // (‎‎ﰞ‎‎) ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM	[23BF 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1E, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_257)
{
    // FCAF 0061;	
    // (‎‎ﲯ‎‎) ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM	[23BF 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAF, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_258)
{
    // FCAF 0041;	
    // (‎‎ﲯ‎‎) ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM	[23BF 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAF, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_259)
{
    // FD36 0061;	
    // (‎‎ﴶ‎‎) ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM	[23BF 2393 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD36, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_260)
{
    // FD36 0041;	
    // (‎‎ﴶ‎‎) ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM	[23BF 2393 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD36, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_261)
{
    // FC1E 0061;	
    // (‎‎ﰞ‎‎) ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM	[23BF 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1E, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_262)
{
    // FC1E 0041;	
    // (‎‎ﰞ‎‎) ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM	[23BF 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1E, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_263)
{
    // FCAF 0062;	
    // (‎‎ﲯ‎‎) ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM	[23BF 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAF, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_264)
{
    // FD36 0062;	
    // (‎‎ﴶ‎‎) ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM	[23BF 2393 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD36, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_265)
{
    // FC1E 0062;	
    // (‎‎ﰞ‎‎) ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM	[23BF 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1E, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_266)
{
    // FDA8 0021;	
    // (‎‎ﶨ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM	[23BF 2393 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA8, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_267)
{
    // FDA8 003F;	
    // (‎‎ﶨ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM	[23BF 2393 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA8, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_268)
{
    // FDA8 0061;	
    // (‎‎ﶨ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM	[23BF 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA8, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_269)
{
    // FDA8 0041;	
    // (‎‎ﶨ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM	[23BF 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDA8, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_270)
{
    // FDA8 0062;	
    // (‎‎ﶨ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM	[23BF 2393 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA8, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_271)
{
    // FDC6 0021;	
    // (‎‎ﷆ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM	[23BF 2393 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC6, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_272)
{
    // FDC6 003F;	
    // (‎‎ﷆ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM	[23BF 2393 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC6, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_273)
{
    // FDC6 0061;	
    // (‎‎ﷆ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM	[23BF 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC6, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_274)
{
    // FDC6 0041;	
    // (‎‎ﷆ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM	[23BF 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDC6, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_275)
{
    // FDC6 0062;	
    // (‎‎ﷆ‎‎) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM	[23BF 2393 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC6, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_276)
{
    // FD2A 0021;	
    // (‎‎ﴪ‎‎) ARABIC LIGATURE SEEN WITH REH FINAL FORM	[23BF 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2A, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_277)
{
    // FD0E 0021;	
    // (‎‎ﴎ‎‎) ARABIC LIGATURE SEEN WITH REH ISOLATED FORM	[23BF 23AC 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0E, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_278)
{
    // FD2A 003F;	
    // (‎‎ﴪ‎‎) ARABIC LIGATURE SEEN WITH REH FINAL FORM	[23BF 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2A, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_279)
{
    // FD0E 003F;	
    // (‎‎ﴎ‎‎) ARABIC LIGATURE SEEN WITH REH ISOLATED FORM	[23BF 23AC 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0E, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_280)
{
    // FD2A 0061;	
    // (‎‎ﴪ‎‎) ARABIC LIGATURE SEEN WITH REH FINAL FORM	[23BF 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2A, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_281)
{
    // FD2A 0041;	
    // (‎‎ﴪ‎‎) ARABIC LIGATURE SEEN WITH REH FINAL FORM	[23BF 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD2A, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_282)
{
    // FD0E 0061;	
    // (‎‎ﴎ‎‎) ARABIC LIGATURE SEEN WITH REH ISOLATED FORM	[23BF 23AC 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0E, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_283)
{
    // FD0E 0041;	
    // (‎‎ﴎ‎‎) ARABIC LIGATURE SEEN WITH REH ISOLATED FORM	[23BF 23AC 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0E, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_284)
{
    // FD2A 0062;	
    // (‎‎ﴪ‎‎) ARABIC LIGATURE SEEN WITH REH FINAL FORM	[23BF 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2A, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_285)
{
    // FD0E 0062;	
    // (‎‎ﴎ‎‎) ARABIC LIGATURE SEEN WITH REH ISOLATED FORM	[23BF 23AC 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0E, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_286)
{
    // FCB0 0021;	
    // (‎‎ﲰ‎‎) ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM	[23BF 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB0, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_287)
{
    // FCE7 0021;	
    // (‎‎ﳧ‎‎) ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM	[23BF 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE7, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_288)
{
    // FC1F 0021;	
    // (‎‎ﰟ‎‎) ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM	[23BF 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1F, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_289)
{
    // FCB0 003F;	
    // (‎‎ﲰ‎‎) ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM	[23BF 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB0, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_290)
{
    // FCE7 003F;	
    // (‎‎ﳧ‎‎) ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM	[23BF 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE7, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_291)
{
    // FC1F 003F;	
    // (‎‎ﰟ‎‎) ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM	[23BF 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1F, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_292)
{
    // FCB0 0061;	
    // (‎‎ﲰ‎‎) ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM	[23BF 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB0, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_293)
{
    // FCB0 0041;	
    // (‎‎ﲰ‎‎) ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM	[23BF 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB0, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_294)
{
    // FCE7 0061;	
    // (‎‎ﳧ‎‎) ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM	[23BF 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE7, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_295)
{
    // FCE7 0041;	
    // (‎‎ﳧ‎‎) ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM	[23BF 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE7, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_296)
{
    // FC1F 0061;	
    // (‎‎ﰟ‎‎) ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM	[23BF 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1F, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_297)
{
    // FC1F 0041;	
    // (‎‎ﰟ‎‎) ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM	[23BF 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1F, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_298)
{
    // FCB0 0062;	
    // (‎‎ﲰ‎‎) ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM	[23BF 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB0, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_299)
{
    // FCE7 0062;	
    // (‎‎ﳧ‎‎) ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM	[23BF 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE7, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_300)
{
    // FC1F 0062;	
    // (‎‎ﰟ‎‎) ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM	[23BF 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1F, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_301)
{
    // FD61 0021;	
    // (‎‎ﵡ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM	[23BF 2409 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD61, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_302)
{
    // FD61 003F;	
    // (‎‎ﵡ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM	[23BF 2409 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD61, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_303)
{
    // FD61 0061;	
    // (‎‎ﵡ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM	[23BF 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD61, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_304)
{
    // FD61 0041;	
    // (‎‎ﵡ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM	[23BF 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD61, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_305)
{
    // FD61 0062;	
    // (‎‎ﵡ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM	[23BF 2409 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD61, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_306)
{
    // FD60 0021;	
    // (‎‎ﵠ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM	[23BF 2409 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD60, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_307)
{
    // FD5F 0021;	
    // (‎‎ﵟ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM	[23BF 2409 2392 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5F, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_308)
{
    // FD60 003F;	
    // (‎‎ﵠ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM	[23BF 2409 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD60, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_309)
{
    // FD5F 003F;	
    // (‎‎ﵟ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM	[23BF 2409 2392 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5F, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_310)
{
    // FD60 0061;	
    // (‎‎ﵠ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM	[23BF 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD60, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_311)
{
    // FD60 0041;	
    // (‎‎ﵠ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM	[23BF 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD60, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_312)
{
    // FD5F 0061;	
    // (‎‎ﵟ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM	[23BF 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5F, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_313)
{
    // FD5F 0041;	
    // (‎‎ﵟ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM	[23BF 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD5F, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_314)
{
    // FD60 0062;	
    // (‎‎ﵠ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM	[23BF 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD60, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_315)
{
    // FD5F 0062;	
    // (‎‎ﵟ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM	[23BF 2409 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5F, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_316)
{
    // FD63 0021;	
    // (‎‎ﵣ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM	[23BF 2409 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD63, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_317)
{
    // FD62 0021;	
    // (‎‎ﵢ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM	[23BF 2409 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD62, 0x0021 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_318)
{
    // FD63 003F;	
    // (‎‎ﵣ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM	[23BF 2409 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD63, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_319)
{
    // FD62 003F;	
    // (‎‎ﵢ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM	[23BF 2409 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD62, 0x003F };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_320)
{
    // FD63 0061;	
    // (‎‎ﵣ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM	[23BF 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD63, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_321)
{
    // FD63 0041;	
    // (‎‎ﵣ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM	[23BF 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD63, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_322)
{
    // FD62 0061;	
    // (‎‎ﵢ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM	[23BF 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD62, 0x0061 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_323)
{
    // FD62 0041;	
    // (‎‎ﵢ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM	[23BF 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD62, 0x0041 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_324)
{
    // FD63 0062;	
    // (‎‎ﵣ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM	[23BF 2409 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD63, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_325)
{
    // FD62 0062;	
    // (‎‎ﵢ‎‎) ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM	[23BF 2409 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD62, 0x0062 };
    uint32_t const ces[15] = { 0x23BF, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_326)
{
    // FD31 0021;	
    // (‎‎ﴱ‎‎) ARABIC LIGATURE SEEN WITH HEH INITIAL FORM	[23BF 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD31, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_327)
{
    // FCE8 0021;	
    // (‎‎ﳨ‎‎) ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM	[23BF 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE8, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_328)
{
    // FD31 003F;	
    // (‎‎ﴱ‎‎) ARABIC LIGATURE SEEN WITH HEH INITIAL FORM	[23BF 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD31, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_329)
{
    // FCE8 003F;	
    // (‎‎ﳨ‎‎) ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM	[23BF 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE8, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_330)
{
    // FD31 0061;	
    // (‎‎ﴱ‎‎) ARABIC LIGATURE SEEN WITH HEH INITIAL FORM	[23BF 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD31, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_331)
{
    // FD31 0041;	
    // (‎‎ﴱ‎‎) ARABIC LIGATURE SEEN WITH HEH INITIAL FORM	[23BF 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD31, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_332)
{
    // FCE8 0061;	
    // (‎‎ﳨ‎‎) ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM	[23BF 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE8, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_333)
{
    // FCE8 0041;	
    // (‎‎ﳨ‎‎) ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM	[23BF 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE8, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_334)
{
    // FD31 0062;	
    // (‎‎ﴱ‎‎) ARABIC LIGATURE SEEN WITH HEH INITIAL FORM	[23BF 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD31, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_335)
{
    // FCE8 0062;	
    // (‎‎ﳨ‎‎) ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM	[23BF 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE8, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_336)
{
    // FD17 0021;	
    // (‎‎ﴗ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM	[23BF 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD17, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_337)
{
    // FCFB 0021;	
    // (‎‎ﳻ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM	[23BF 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFB, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_338)
{
    // FD17 003F;	
    // (‎‎ﴗ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM	[23BF 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD17, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_339)
{
    // FCFB 003F;	
    // (‎‎ﳻ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM	[23BF 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFB, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_340)
{
    // FD17 0061;	
    // (‎‎ﴗ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM	[23BF 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD17, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_341)
{
    // FD17 0041;	
    // (‎‎ﴗ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM	[23BF 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD17, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_342)
{
    // FCFB 0061;	
    // (‎‎ﳻ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM	[23BF 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFB, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_343)
{
    // FCFB 0041;	
    // (‎‎ﳻ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM	[23BF 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFCFB, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_344)
{
    // FD17 0062;	
    // (‎‎ﴗ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM	[23BF 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD17, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_345)
{
    // FCFB 0062;	
    // (‎‎ﳻ‎‎) ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM	[23BF 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFB, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_346)
{
    // FD18 0021;	
    // (‎‎ﴘ‎‎) ARABIC LIGATURE SEEN WITH YEH FINAL FORM	[23BF 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD18, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_347)
{
    // FCFC 0021;	
    // (‎‎ﳼ‎‎) ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM	[23BF 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFC, 0x0021 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_348)
{
    // FD18 003F;	
    // (‎‎ﴘ‎‎) ARABIC LIGATURE SEEN WITH YEH FINAL FORM	[23BF 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD18, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_349)
{
    // FCFC 003F;	
    // (‎‎ﳼ‎‎) ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM	[23BF 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFC, 0x003F };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_350)
{
    // FD18 0061;	
    // (‎‎ﴘ‎‎) ARABIC LIGATURE SEEN WITH YEH FINAL FORM	[23BF 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD18, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_351)
{
    // FD18 0041;	
    // (‎‎ﴘ‎‎) ARABIC LIGATURE SEEN WITH YEH FINAL FORM	[23BF 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD18, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_352)
{
    // FCFC 0061;	
    // (‎‎ﳼ‎‎) ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM	[23BF 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFC, 0x0061 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_353)
{
    // FCFC 0041;	
    // (‎‎ﳼ‎‎) ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM	[23BF 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFCFC, 0x0041 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_354)
{
    // FD18 0062;	
    // (‎‎ﴘ‎‎) ARABIC LIGATURE SEEN WITH YEH FINAL FORM	[23BF 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD18, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_355)
{
    // FCFC 0062;	
    // (‎‎ﳼ‎‎) ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM	[23BF 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFC, 0x0062 };
    uint32_t const ces[12] = { 0x23BF, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_356)
{
    // 0634 0021;	
    // (‎‎ش‎‎) ARABIC LETTER SHEEN	[23C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0634, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_357)
{
    // 1EE14 0021;	
    // (‎‎𞸔‎‎) ARABIC MATHEMATICAL SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE14, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_358)
{
    // 1EE34 0021;	
    // (‎‎𞸴‎‎) ARABIC MATHEMATICAL INITIAL SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE34, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_359)
{
    // 1EE54 0021;	
    // (‎‎𞹔‎‎) ARABIC MATHEMATICAL TAILED SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE54, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_360)
{
    // 1EE74 0021;	
    // (‎‎𞹴‎‎) ARABIC MATHEMATICAL STRETCHED SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE74, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_361)
{
    // 1EE94 0021;	
    // (‎‎𞺔‎‎) ARABIC MATHEMATICAL LOOPED SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE94, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_362)
{
    // 1EEB4 0021;	
    // (‎‎𞺴‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN	[23C0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB4, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_363)
{
    // FEB7 0021;	
    // (‎‎ﺷ‎‎) ARABIC LETTER SHEEN INITIAL FORM	[23C0 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB7, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_364)
{
    // FEB8 0021;	
    // (‎‎ﺸ‎‎) ARABIC LETTER SHEEN MEDIAL FORM	[23C0 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB8, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_365)
{
    // FEB6 0021;	
    // (‎‎ﺶ‎‎) ARABIC LETTER SHEEN FINAL FORM	[23C0 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB6, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_366)
{
    // FEB5 0021;	
    // (‎‎ﺵ‎‎) ARABIC LETTER SHEEN ISOLATED FORM	[23C0 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB5, 0x0021 };
    uint32_t const ces[9] = { 0x23C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_367)
{
    // 0634 003F;	
    // (‎‎ش‎‎) ARABIC LETTER SHEEN	[23C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0634, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_368)
{
    // 1EE14 003F;	
    // (‎‎𞸔‎‎) ARABIC MATHEMATICAL SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE14, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_369)
{
    // 1EE34 003F;	
    // (‎‎𞸴‎‎) ARABIC MATHEMATICAL INITIAL SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE34, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_370)
{
    // 1EE54 003F;	
    // (‎‎𞹔‎‎) ARABIC MATHEMATICAL TAILED SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE54, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_371)
{
    // 1EE74 003F;	
    // (‎‎𞹴‎‎) ARABIC MATHEMATICAL STRETCHED SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE74, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_372)
{
    // 1EE94 003F;	
    // (‎‎𞺔‎‎) ARABIC MATHEMATICAL LOOPED SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE94, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_373)
{
    // 1EEB4 003F;	
    // (‎‎𞺴‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN	[23C0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB4, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_374)
{
    // FEB7 003F;	
    // (‎‎ﺷ‎‎) ARABIC LETTER SHEEN INITIAL FORM	[23C0 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB7, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_375)
{
    // FEB8 003F;	
    // (‎‎ﺸ‎‎) ARABIC LETTER SHEEN MEDIAL FORM	[23C0 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB8, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_376)
{
    // FEB6 003F;	
    // (‎‎ﺶ‎‎) ARABIC LETTER SHEEN FINAL FORM	[23C0 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB6, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_377)
{
    // FEB5 003F;	
    // (‎‎ﺵ‎‎) ARABIC LETTER SHEEN ISOLATED FORM	[23C0 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB5, 0x003F };
    uint32_t const ces[9] = { 0x23C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_378)
{
    // 0634 0061;	
    // (‎‎ش‎‎) ARABIC LETTER SHEEN	[23C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0634, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_379)
{
    // 0634 0041;	
    // (‎‎ش‎‎) ARABIC LETTER SHEEN	[23C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0634, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_380)
{
    // 1EE14 0061;	
    // (‎‎𞸔‎‎) ARABIC MATHEMATICAL SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE14, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_381)
{
    // 1EE34 0061;	
    // (‎‎𞸴‎‎) ARABIC MATHEMATICAL INITIAL SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE34, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_382)
{
    // 1EE54 0061;	
    // (‎‎𞹔‎‎) ARABIC MATHEMATICAL TAILED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE54, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_383)
{
    // 1EE74 0061;	
    // (‎‎𞹴‎‎) ARABIC MATHEMATICAL STRETCHED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE74, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_384)
{
    // 1EE94 0061;	
    // (‎‎𞺔‎‎) ARABIC MATHEMATICAL LOOPED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE94, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_385)
{
    // 1EEB4 0061;	
    // (‎‎𞺴‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN	[23C0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB4, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_386)
{
    // 1EE14 0041;	
    // (‎‎𞸔‎‎) ARABIC MATHEMATICAL SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE14, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_387)
{
    // 1EE34 0041;	
    // (‎‎𞸴‎‎) ARABIC MATHEMATICAL INITIAL SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE34, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_388)
{
    // 1EE54 0041;	
    // (‎‎𞹔‎‎) ARABIC MATHEMATICAL TAILED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE54, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_389)
{
    // 1EE74 0041;	
    // (‎‎𞹴‎‎) ARABIC MATHEMATICAL STRETCHED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE74, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_390)
{
    // 1EE94 0041;	
    // (‎‎𞺔‎‎) ARABIC MATHEMATICAL LOOPED SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE94, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_391)
{
    // 1EEB4 0041;	
    // (‎‎𞺴‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN	[23C0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB4, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_392)
{
    // FEB7 0061;	
    // (‎‎ﺷ‎‎) ARABIC LETTER SHEEN INITIAL FORM	[23C0 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB7, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_393)
{
    // FEB7 0041;	
    // (‎‎ﺷ‎‎) ARABIC LETTER SHEEN INITIAL FORM	[23C0 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEB7, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_394)
{
    // FEB8 0061;	
    // (‎‎ﺸ‎‎) ARABIC LETTER SHEEN MEDIAL FORM	[23C0 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB8, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_395)
{
    // FEB8 0041;	
    // (‎‎ﺸ‎‎) ARABIC LETTER SHEEN MEDIAL FORM	[23C0 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEB8, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_396)
{
    // FEB6 0061;	
    // (‎‎ﺶ‎‎) ARABIC LETTER SHEEN FINAL FORM	[23C0 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB6, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_397)
{
    // FEB6 0041;	
    // (‎‎ﺶ‎‎) ARABIC LETTER SHEEN FINAL FORM	[23C0 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEB6, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_398)
{
    // FEB5 0061;	
    // (‎‎ﺵ‎‎) ARABIC LETTER SHEEN ISOLATED FORM	[23C0 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB5, 0x0061 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_399)
{
    // FEB5 0041;	
    // (‎‎ﺵ‎‎) ARABIC LETTER SHEEN ISOLATED FORM	[23C0 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEB5, 0x0041 };
    uint32_t const ces[9] = { 0x23C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_400)
{
    // 0634 0062;	
    // (‎‎ش‎‎) ARABIC LETTER SHEEN	[23C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0634, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_401)
{
    // 1EE14 0062;	
    // (‎‎𞸔‎‎) ARABIC MATHEMATICAL SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE14, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_402)
{
    // 1EE34 0062;	
    // (‎‎𞸴‎‎) ARABIC MATHEMATICAL INITIAL SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE34, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_403)
{
    // 1EE54 0062;	
    // (‎‎𞹔‎‎) ARABIC MATHEMATICAL TAILED SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE54, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_404)
{
    // 1EE74 0062;	
    // (‎‎𞹴‎‎) ARABIC MATHEMATICAL STRETCHED SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE74, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_405)
{
    // 1EE94 0062;	
    // (‎‎𞺔‎‎) ARABIC MATHEMATICAL LOOPED SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE94, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_406)
{
    // 1EEB4 0062;	
    // (‎‎𞺴‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN	[23C0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB4, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_407)
{
    // FEB7 0062;	
    // (‎‎ﺷ‎‎) ARABIC LETTER SHEEN INITIAL FORM	[23C0 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEB7, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_408)
{
    // FEB8 0062;	
    // (‎‎ﺸ‎‎) ARABIC LETTER SHEEN MEDIAL FORM	[23C0 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEB8, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_409)
{
    // FEB6 0062;	
    // (‎‎ﺶ‎‎) ARABIC LETTER SHEEN FINAL FORM	[23C0 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEB6, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_410)
{
    // FEB5 0062;	
    // (‎‎ﺵ‎‎) ARABIC LETTER SHEEN ISOLATED FORM	[23C0 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB5, 0x0062 };
    uint32_t const ces[9] = { 0x23C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_411)
{
    // FD2D 0021;	
    // (‎‎ﴭ‎‎) ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM	[23C0 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2D, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_412)
{
    // FD37 0021;	
    // (‎‎ﴷ‎‎) ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM	[23C0 238B 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD37, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_413)
{
    // FD25 0021;	
    // (‎‎ﴥ‎‎) ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM	[23C0 238B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD25, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_414)
{
    // FD09 0021;	
    // (‎‎ﴉ‎‎) ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM	[23C0 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD09, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_415)
{
    // FD2D 003F;	
    // (‎‎ﴭ‎‎) ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM	[23C0 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2D, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_416)
{
    // FD37 003F;	
    // (‎‎ﴷ‎‎) ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM	[23C0 238B 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD37, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_417)
{
    // FD25 003F;	
    // (‎‎ﴥ‎‎) ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM	[23C0 238B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD25, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_418)
{
    // FD09 003F;	
    // (‎‎ﴉ‎‎) ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM	[23C0 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD09, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_419)
{
    // FD2D 0061;	
    // (‎‎ﴭ‎‎) ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2D, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_420)
{
    // FD2D 0041;	
    // (‎‎ﴭ‎‎) ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD2D, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_421)
{
    // FD37 0061;	
    // (‎‎ﴷ‎‎) ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD37, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_422)
{
    // FD37 0041;	
    // (‎‎ﴷ‎‎) ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD37, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_423)
{
    // FD25 0061;	
    // (‎‎ﴥ‎‎) ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD25, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_424)
{
    // FD25 0041;	
    // (‎‎ﴥ‎‎) ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM	[23C0 238B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD25, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_425)
{
    // FD09 0061;	
    // (‎‎ﴉ‎‎) ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM	[23C0 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD09, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_426)
{
    // FD09 0041;	
    // (‎‎ﴉ‎‎) ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM	[23C0 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD09, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_427)
{
    // FD2D 0062;	
    // (‎‎ﴭ‎‎) ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM	[23C0 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2D, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_428)
{
    // FD37 0062;	
    // (‎‎ﴷ‎‎) ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM	[23C0 238B 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD37, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_429)
{
    // FD25 0062;	
    // (‎‎ﴥ‎‎) ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM	[23C0 238B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD25, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_430)
{
    // FD09 0062;	
    // (‎‎ﴉ‎‎) ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM	[23C0 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD09, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_431)
{
    // FD69 0021;	
    // (‎‎ﵩ‎‎) ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM	[23C0 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD69, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_432)
{
    // FD69 003F;	
    // (‎‎ﵩ‎‎) ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM	[23C0 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD69, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_433)
{
    // FD69 0061;	
    // (‎‎ﵩ‎‎) ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM	[23C0 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD69, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_434)
{
    // FD69 0041;	
    // (‎‎ﵩ‎‎) ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM	[23C0 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD69, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_435)
{
    // FD69 0062;	
    // (‎‎ﵩ‎‎) ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM	[23C0 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD69, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_436)
{
    // FD2E 0021;	
    // (‎‎ﴮ‎‎) ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM	[23C0 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2E, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_437)
{
    // FD38 0021;	
    // (‎‎ﴸ‎‎) ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM	[23C0 2392 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD38, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_438)
{
    // FD26 0021;	
    // (‎‎ﴦ‎‎) ARABIC LIGATURE SHEEN WITH HAH FINAL FORM	[23C0 2392 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD26, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_439)
{
    // FD0A 0021;	
    // (‎‎ﴊ‎‎) ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM	[23C0 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0A, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_440)
{
    // FD2E 003F;	
    // (‎‎ﴮ‎‎) ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM	[23C0 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2E, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_441)
{
    // FD38 003F;	
    // (‎‎ﴸ‎‎) ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM	[23C0 2392 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD38, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_442)
{
    // FD26 003F;	
    // (‎‎ﴦ‎‎) ARABIC LIGATURE SHEEN WITH HAH FINAL FORM	[23C0 2392 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD26, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_443)
{
    // FD0A 003F;	
    // (‎‎ﴊ‎‎) ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM	[23C0 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0A, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_444)
{
    // FD2E 0061;	
    // (‎‎ﴮ‎‎) ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2E, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_445)
{
    // FD2E 0041;	
    // (‎‎ﴮ‎‎) ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD2E, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_446)
{
    // FD38 0061;	
    // (‎‎ﴸ‎‎) ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD38, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_447)
{
    // FD38 0041;	
    // (‎‎ﴸ‎‎) ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD38, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_448)
{
    // FD26 0061;	
    // (‎‎ﴦ‎‎) ARABIC LIGATURE SHEEN WITH HAH FINAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD26, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_449)
{
    // FD26 0041;	
    // (‎‎ﴦ‎‎) ARABIC LIGATURE SHEEN WITH HAH FINAL FORM	[23C0 2392 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD26, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_450)
{
    // FD0A 0061;	
    // (‎‎ﴊ‎‎) ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM	[23C0 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0A, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_451)
{
    // FD0A 0041;	
    // (‎‎ﴊ‎‎) ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM	[23C0 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0A, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_452)
{
    // FD2E 0062;	
    // (‎‎ﴮ‎‎) ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM	[23C0 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2E, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_453)
{
    // FD38 0062;	
    // (‎‎ﴸ‎‎) ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM	[23C0 2392 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD38, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_454)
{
    // FD26 0062;	
    // (‎‎ﴦ‎‎) ARABIC LIGATURE SHEEN WITH HAH FINAL FORM	[23C0 2392 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD26, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_455)
{
    // FD0A 0062;	
    // (‎‎ﴊ‎‎) ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM	[23C0 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0A, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_456)
{
    // FD68 0021;	
    // (‎‎ﵨ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM	[23C0 2392 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD68, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_457)
{
    // FD67 0021;	
    // (‎‎ﵧ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM	[23C0 2392 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD67, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_458)
{
    // FD68 003F;	
    // (‎‎ﵨ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM	[23C0 2392 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD68, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_459)
{
    // FD67 003F;	
    // (‎‎ﵧ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM	[23C0 2392 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD67, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_460)
{
    // FD68 0061;	
    // (‎‎ﵨ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM	[23C0 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD68, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_461)
{
    // FD68 0041;	
    // (‎‎ﵨ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM	[23C0 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD68, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_462)
{
    // FD67 0061;	
    // (‎‎ﵧ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM	[23C0 2392 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD67, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_463)
{
    // FD67 0041;	
    // (‎‎ﵧ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM	[23C0 2392 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD67, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_464)
{
    // FD68 0062;	
    // (‎‎ﵨ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM	[23C0 2392 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD68, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_465)
{
    // FD67 0062;	
    // (‎‎ﵧ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM	[23C0 2392 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD67, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_466)
{
    // FDAA 0021;	
    // (‎‎ﶪ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM	[23C0 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAA, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_467)
{
    // FDAA 003F;	
    // (‎‎ﶪ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM	[23C0 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAA, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_468)
{
    // FDAA 0061;	
    // (‎‎ﶪ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM	[23C0 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAA, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_469)
{
    // FDAA 0041;	
    // (‎‎ﶪ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM	[23C0 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDAA, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_470)
{
    // FDAA 0062;	
    // (‎‎ﶪ‎‎) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM	[23C0 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAA, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_471)
{
    // FD2F 0021;	
    // (‎‎ﴯ‎‎) ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM	[23C0 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2F, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_472)
{
    // FD39 0021;	
    // (‎‎ﴹ‎‎) ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM	[23C0 2393 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD39, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_473)
{
    // FD27 0021;	
    // (‎‎ﴧ‎‎) ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM	[23C0 2393 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD27, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_474)
{
    // FD0B 0021;	
    // (‎‎ﴋ‎‎) ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM	[23C0 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0B, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_475)
{
    // FD2F 003F;	
    // (‎‎ﴯ‎‎) ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM	[23C0 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2F, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_476)
{
    // FD39 003F;	
    // (‎‎ﴹ‎‎) ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM	[23C0 2393 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD39, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_477)
{
    // FD27 003F;	
    // (‎‎ﴧ‎‎) ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM	[23C0 2393 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD27, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_478)
{
    // FD0B 003F;	
    // (‎‎ﴋ‎‎) ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM	[23C0 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0B, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_479)
{
    // FD2F 0061;	
    // (‎‎ﴯ‎‎) ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2F, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_480)
{
    // FD2F 0041;	
    // (‎‎ﴯ‎‎) ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD2F, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_481)
{
    // FD39 0061;	
    // (‎‎ﴹ‎‎) ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD39, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_482)
{
    // FD39 0041;	
    // (‎‎ﴹ‎‎) ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFD39, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_483)
{
    // FD27 0061;	
    // (‎‎ﴧ‎‎) ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD27, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_484)
{
    // FD27 0041;	
    // (‎‎ﴧ‎‎) ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM	[23C0 2393 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD27, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_485)
{
    // FD0B 0061;	
    // (‎‎ﴋ‎‎) ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM	[23C0 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0B, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_486)
{
    // FD0B 0041;	
    // (‎‎ﴋ‎‎) ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM	[23C0 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0B, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_487)
{
    // FD2F 0062;	
    // (‎‎ﴯ‎‎) ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM	[23C0 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD2F, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_488)
{
    // FD39 0062;	
    // (‎‎ﴹ‎‎) ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM	[23C0 2393 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD39, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_489)
{
    // FD27 0062;	
    // (‎‎ﴧ‎‎) ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM	[23C0 2393 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD27, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_490)
{
    // FD0B 0062;	
    // (‎‎ﴋ‎‎) ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM	[23C0 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0B, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_491)
{
    // FD29 0021;	
    // (‎‎ﴩ‎‎) ARABIC LIGATURE SHEEN WITH REH FINAL FORM	[23C0 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD29, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_492)
{
    // FD0D 0021;	
    // (‎‎ﴍ‎‎) ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM	[23C0 23AC 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0D, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_493)
{
    // FD29 003F;	
    // (‎‎ﴩ‎‎) ARABIC LIGATURE SHEEN WITH REH FINAL FORM	[23C0 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD29, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_494)
{
    // FD0D 003F;	
    // (‎‎ﴍ‎‎) ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM	[23C0 23AC 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0D, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_495)
{
    // FD29 0061;	
    // (‎‎ﴩ‎‎) ARABIC LIGATURE SHEEN WITH REH FINAL FORM	[23C0 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD29, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_496)
{
    // FD29 0041;	
    // (‎‎ﴩ‎‎) ARABIC LIGATURE SHEEN WITH REH FINAL FORM	[23C0 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD29, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_497)
{
    // FD0D 0061;	
    // (‎‎ﴍ‎‎) ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM	[23C0 23AC 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0D, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_498)
{
    // FD0D 0041;	
    // (‎‎ﴍ‎‎) ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM	[23C0 23AC 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0D, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_151_499)
{
    // FD29 0062;	
    // (‎‎ﴩ‎‎) ARABIC LIGATURE SHEEN WITH REH FINAL FORM	[23C0 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD29, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

