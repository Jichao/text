// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_106_000)
{
    // 1D46C 0062;	
    // (ùë¨) MATHEMATICAL BOLD ITALIC CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46C, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_001)
{
    // 1D4D4 0062;	
    // (ùìî) MATHEMATICAL BOLD SCRIPT CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D4, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_002)
{
    // 1D508 0062;	
    // (ùîà) MATHEMATICAL FRAKTUR CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D508, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_003)
{
    // 1D53C 0062;	
    // (ùîº) MATHEMATICAL DOUBLE-STRUCK CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53C, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_004)
{
    // 1D570 0062;	
    // (ùï∞) MATHEMATICAL BOLD FRAKTUR CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D570, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_005)
{
    // 1D5A4 0062;	
    // (ùñ§) MATHEMATICAL SANS-SERIF CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A4, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_006)
{
    // 1D5D8 0062;	
    // (ùóò) MATHEMATICAL SANS-SERIF BOLD CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D8, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_007)
{
    // 1D60C 0062;	
    // (ùòå) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60C, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_008)
{
    // 1D640 0062;	
    // (ùôÄ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D640, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_009)
{
    // 1D674 0062;	
    // (ùô¥) MATHEMATICAL MONOSPACE CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D674, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_010)
{
    // 24BA 0062;	
    // (‚í∫) CIRCLED LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BA, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_011)
{
    // 1F154 0062;	
    // (üÖî) NEGATIVE CIRCLED LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F154, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_012)
{
    // 1D49 0062;	
    // (·µâ) MODIFIER LETTER SMALL E	[1D10 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D49, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_013)
{
    // 2091 0062;	
    // (‚Çë) LATIN SUBSCRIPT SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2091, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_014)
{
    // 1D31 0062;	
    // (·¥±) MODIFIER LETTER CAPITAL E	[1D10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D31, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_015)
{
    // 1F134 0062;	
    // (üÑ¥) SQUARED LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F134, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_016)
{
    // 1F174 0062;	
    // (üÖ¥) NEGATIVE SQUARED LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F174, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_017)
{
    // 00E9 0062;	
    // (√©) LATIN SMALL LETTER E WITH ACUTE	[1D10 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E9, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_018)
{
    // 00C9 0062;	
    // (√â) LATIN CAPITAL LETTER E WITH ACUTE	[1D10 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C9, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_019)
{
    // 00E8 0062;	
    // (√®) LATIN SMALL LETTER E WITH GRAVE	[1D10 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E8, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_020)
{
    // 00C8 0062;	
    // (√à) LATIN CAPITAL LETTER E WITH GRAVE	[1D10 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C8, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_021)
{
    // 0115 0062;	
    // (ƒï) LATIN SMALL LETTER E WITH BREVE	[1D10 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0115, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_022)
{
    // 0114 0062;	
    // (ƒî) LATIN CAPITAL LETTER E WITH BREVE	[1D10 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0114, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_023)
{
    // 00EA 0062;	
    // (√™) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EA, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_024)
{
    // 00CA 0062;	
    // (√ä) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CA, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_025)
{
    // 1EBF 0062;	
    // (·∫ø) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CC6 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBF, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_026)
{
    // 1EBE 0062;	
    // (·∫æ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CC6 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBE, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_027)
{
    // 1EC1 0062;	
    // (·ªÅ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CC6 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC1, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_028)
{
    // 1EC0 0062;	
    // (·ªÄ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CC6 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC0, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_029)
{
    // 1EC5 0062;	
    // (·ªÖ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CC6 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC5, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_030)
{
    // 1EC4 0062;	
    // (·ªÑ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CC6 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC4, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_031)
{
    // 1EC3 0062;	
    // (·ªÉ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CC6 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC3, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_032)
{
    // 1EC2 0062;	
    // (·ªÇ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CC6 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC2, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_033)
{
    // 011B 0062;	
    // (ƒõ) LATIN SMALL LETTER E WITH CARON	[1D10 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011B, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_034)
{
    // 011A 0062;	
    // (ƒö) LATIN CAPITAL LETTER E WITH CARON	[1D10 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011A, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_035)
{
    // 00EB 0062;	
    // (√´) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EB, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_036)
{
    // 00CB 0062;	
    // (√ã) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CB, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_037)
{
    // 1EBD 0062;	
    // (·∫Ω) LATIN SMALL LETTER E WITH TILDE	[1D10 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBD, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_038)
{
    // 1EBC 0062;	
    // (·∫º) LATIN CAPITAL LETTER E WITH TILDE	[1D10 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBC, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_039)
{
    // 0117 0062;	
    // (ƒó) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0117, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_040)
{
    // 0116 0062;	
    // (ƒñ) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0116, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_041)
{
    // 0229 0062;	
    // (»©) LATIN SMALL LETTER E WITH CEDILLA	[1D10 1CC6 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0229, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_042)
{
    // 0228 0062;	
    // (»®) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 1CC6 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0228, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_043)
{
    // 1E1D 0062;	
    // (·∏ù) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 1CC6 | 0020 0030 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1D, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_044)
{
    // 1E1C 0062;	
    // (·∏ú) LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE	[1D10 1CC6 | 0020 0030 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1C, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_045)
{
    // 0119 0062;	
    // (ƒô) LATIN SMALL LETTER E WITH OGONEK	[1D10 1CC6 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0119, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_046)
{
    // 0118 0062;	
    // (ƒò) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 1CC6 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0118, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_047)
{
    // 0113 0062;	
    // (ƒì) LATIN SMALL LETTER E WITH MACRON	[1D10 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0113, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_048)
{
    // 0112 0062;	
    // (ƒí) LATIN CAPITAL LETTER E WITH MACRON	[1D10 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0112, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_049)
{
    // 1E17 0062;	
    // (·∏ó) LATIN SMALL LETTER E WITH MACRON AND ACUTE	[1D10 1CC6 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E17, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_050)
{
    // 1E16 0062;	
    // (·∏ñ) LATIN CAPITAL LETTER E WITH MACRON AND ACUTE	[1D10 1CC6 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E16, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_051)
{
    // 1E15 0062;	
    // (·∏ï) LATIN SMALL LETTER E WITH MACRON AND GRAVE	[1D10 1CC6 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E15, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_052)
{
    // 1E14 0062;	
    // (·∏î) LATIN CAPITAL LETTER E WITH MACRON AND GRAVE	[1D10 1CC6 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E14, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_053)
{
    // 1EBB 0062;	
    // (·∫ª) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 1CC6 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBB, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_054)
{
    // 1EBA 0062;	
    // (·∫∫) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 1CC6 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBA, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_055)
{
    // 0205 0062;	
    // (»Ö) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 1CC6 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0205, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_056)
{
    // 0204 0062;	
    // (»Ñ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 1CC6 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0204, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_057)
{
    // 0207 0062;	
    // (»á) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 1CC6 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0207, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_058)
{
    // 0206 0062;	
    // (»Ü) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 1CC6 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0206, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_059)
{
    // 1EB9 0062;	
    // (·∫π) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB9, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_060)
{
    // 1EB8 0062;	
    // (·∫∏) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EB8, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_061)
{
    // 1EC7 0062;	
    // (·ªá) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CC6 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC7, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_062)
{
    // 1EC6 0062;	
    // (·ªÜ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CC6 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC6, 0x0062 };
    uint32_t const ces[13] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_063)
{
    // 1E19 0062;	
    // (·∏ô) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CC6 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E19, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_064)
{
    // 1E18 0062;	
    // (·∏ò) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CC6 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E18, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_065)
{
    // 1E1B 0062;	
    // (·∏õ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 1CC6 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1B, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_066)
{
    // 1E1A 0062;	
    // (·∏ö) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 1CC6 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1A, 0x0062 };
    uint32_t const ces[11] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_067)
{
    // 32CD 0021;	
    // („ãç) SQUARE ERG	[1D10 1E99 1D5A 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x32CD, 0x0021 };
    uint32_t const ces[15] = { 0x1D10, 0x1E99, 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_068)
{
    // 32CD 003F;	
    // („ãç) SQUARE ERG	[1D10 1E99 1D5A 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x32CD, 0x003F };
    uint32_t const ces[15] = { 0x1D10, 0x1E99, 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_069)
{
    // 32CD 0061;	
    // („ãç) SQUARE ERG	[1D10 1E99 1D5A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x32CD, 0x0061 };
    uint32_t const ces[15] = { 0x1D10, 0x1E99, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_070)
{
    // 32CD 0041;	
    // („ãç) SQUARE ERG	[1D10 1E99 1D5A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x32CD, 0x0041 };
    uint32_t const ces[15] = { 0x1D10, 0x1E99, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_071)
{
    // 32CD 0062;	
    // („ãç) SQUARE ERG	[1D10 1E99 1D5A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x32CD, 0x0062 };
    uint32_t const ces[15] = { 0x1D10, 0x1E99, 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_072)
{
    // 32CE 0021;	
    // („ãé) SQUARE EV	[1D10 1F49 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x32CE, 0x0021 };
    uint32_t const ces[12] = { 0x1D10, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_073)
{
    // 32CE 003F;	
    // („ãé) SQUARE EV	[1D10 1F49 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x32CE, 0x003F };
    uint32_t const ces[12] = { 0x1D10, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_074)
{
    // 32CE 0061;	
    // („ãé) SQUARE EV	[1D10 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x32CE, 0x0061 };
    uint32_t const ces[12] = { 0x1D10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_075)
{
    // 32CE 0041;	
    // („ãé) SQUARE EV	[1D10 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x32CE, 0x0041 };
    uint32_t const ces[12] = { 0x1D10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_076)
{
    // 32CE 0062;	
    // („ãé) SQUARE EV	[1D10 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x32CE, 0x0062 };
    uint32_t const ces[12] = { 0x1D10, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_077)
{
    // 1D07 0021;	
    // (·¥á) LATIN LETTER SMALL CAPITAL E	[1D14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07, 0x0021 };
    uint32_t const ces[9] = { 0x1D14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_078)
{
    // 1D07 003F;	
    // (·¥á) LATIN LETTER SMALL CAPITAL E	[1D14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07, 0x003F };
    uint32_t const ces[9] = { 0x1D14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_079)
{
    // 1D07 0061;	
    // (·¥á) LATIN LETTER SMALL CAPITAL E	[1D14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07, 0x0061 };
    uint32_t const ces[9] = { 0x1D14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_080)
{
    // 1D07 0041;	
    // (·¥á) LATIN LETTER SMALL CAPITAL E	[1D14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07, 0x0041 };
    uint32_t const ces[9] = { 0x1D14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_081)
{
    // 1D07 0062;	
    // (·¥á) LATIN LETTER SMALL CAPITAL E	[1D14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07, 0x0062 };
    uint32_t const ces[9] = { 0x1D14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_082)
{
    // AB32 0021;	
    // (Í¨≤) LATIN SMALL LETTER BLACKLETTER E	[1D15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB32, 0x0021 };
    uint32_t const ces[9] = { 0x1D15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_083)
{
    // AB32 003F;	
    // (Í¨≤) LATIN SMALL LETTER BLACKLETTER E	[1D15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB32, 0x003F };
    uint32_t const ces[9] = { 0x1D15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_084)
{
    // AB32 0061;	
    // (Í¨≤) LATIN SMALL LETTER BLACKLETTER E	[1D15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB32, 0x0061 };
    uint32_t const ces[9] = { 0x1D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_085)
{
    // AB32 0041;	
    // (Í¨≤) LATIN SMALL LETTER BLACKLETTER E	[1D15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB32, 0x0041 };
    uint32_t const ces[9] = { 0x1D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_086)
{
    // AB32 0062;	
    // (Í¨≤) LATIN SMALL LETTER BLACKLETTER E	[1D15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB32, 0x0062 };
    uint32_t const ces[9] = { 0x1D15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_087)
{
    // AB33 0021;	
    // (Í¨≥) LATIN SMALL LETTER BARRED E	[1D16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB33, 0x0021 };
    uint32_t const ces[9] = { 0x1D16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_088)
{
    // AB33 003F;	
    // (Í¨≥) LATIN SMALL LETTER BARRED E	[1D16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB33, 0x003F };
    uint32_t const ces[9] = { 0x1D16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_089)
{
    // AB33 0061;	
    // (Í¨≥) LATIN SMALL LETTER BARRED E	[1D16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB33, 0x0061 };
    uint32_t const ces[9] = { 0x1D16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_090)
{
    // AB33 0041;	
    // (Í¨≥) LATIN SMALL LETTER BARRED E	[1D16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB33, 0x0041 };
    uint32_t const ces[9] = { 0x1D16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_091)
{
    // AB33 0062;	
    // (Í¨≥) LATIN SMALL LETTER BARRED E	[1D16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB33, 0x0062 };
    uint32_t const ces[9] = { 0x1D16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_092)
{
    // 0247 0021;	
    // (…á) LATIN SMALL LETTER E WITH STROKE	[1D17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0247, 0x0021 };
    uint32_t const ces[9] = { 0x1D17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_093)
{
    // 0246 0021;	
    // (…Ü) LATIN CAPITAL LETTER E WITH STROKE	[1D17 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0246, 0x0021 };
    uint32_t const ces[9] = { 0x1D17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_094)
{
    // 0247 003F;	
    // (…á) LATIN SMALL LETTER E WITH STROKE	[1D17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0247, 0x003F };
    uint32_t const ces[9] = { 0x1D17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_095)
{
    // 0246 003F;	
    // (…Ü) LATIN CAPITAL LETTER E WITH STROKE	[1D17 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0246, 0x003F };
    uint32_t const ces[9] = { 0x1D17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_096)
{
    // 0247 0061;	
    // (…á) LATIN SMALL LETTER E WITH STROKE	[1D17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0247, 0x0061 };
    uint32_t const ces[9] = { 0x1D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_097)
{
    // 0247 0041;	
    // (…á) LATIN SMALL LETTER E WITH STROKE	[1D17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0247, 0x0041 };
    uint32_t const ces[9] = { 0x1D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_098)
{
    // 0246 0061;	
    // (…Ü) LATIN CAPITAL LETTER E WITH STROKE	[1D17 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0246, 0x0061 };
    uint32_t const ces[9] = { 0x1D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_099)
{
    // 0246 0041;	
    // (…Ü) LATIN CAPITAL LETTER E WITH STROKE	[1D17 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0246, 0x0041 };
    uint32_t const ces[9] = { 0x1D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_100)
{
    // 0247 0062;	
    // (…á) LATIN SMALL LETTER E WITH STROKE	[1D17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0247, 0x0062 };
    uint32_t const ces[9] = { 0x1D17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_101)
{
    // 0246 0062;	
    // (…Ü) LATIN CAPITAL LETTER E WITH STROKE	[1D17 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0246, 0x0062 };
    uint32_t const ces[9] = { 0x1D17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_102)
{
    // 1D92 0021;	
    // (·∂í) LATIN SMALL LETTER E WITH RETROFLEX HOOK	[1D1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D92, 0x0021 };
    uint32_t const ces[9] = { 0x1D1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_103)
{
    // 1D92 003F;	
    // (·∂í) LATIN SMALL LETTER E WITH RETROFLEX HOOK	[1D1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D92, 0x003F };
    uint32_t const ces[9] = { 0x1D1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_104)
{
    // 1D92 0061;	
    // (·∂í) LATIN SMALL LETTER E WITH RETROFLEX HOOK	[1D1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D92, 0x0061 };
    uint32_t const ces[9] = { 0x1D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_105)
{
    // 1D92 0041;	
    // (·∂í) LATIN SMALL LETTER E WITH RETROFLEX HOOK	[1D1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D92, 0x0041 };
    uint32_t const ces[9] = { 0x1D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_106)
{
    // 1D92 0062;	
    // (·∂í) LATIN SMALL LETTER E WITH RETROFLEX HOOK	[1D1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D92, 0x0062 };
    uint32_t const ces[9] = { 0x1D1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_107)
{
    // AB34 0021;	
    // (Í¨¥) LATIN SMALL LETTER E WITH FLOURISH	[1D1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB34, 0x0021 };
    uint32_t const ces[9] = { 0x1D1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_108)
{
    // AB34 003F;	
    // (Í¨¥) LATIN SMALL LETTER E WITH FLOURISH	[1D1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB34, 0x003F };
    uint32_t const ces[9] = { 0x1D1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_109)
{
    // AB34 0061;	
    // (Í¨¥) LATIN SMALL LETTER E WITH FLOURISH	[1D1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB34, 0x0061 };
    uint32_t const ces[9] = { 0x1D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_110)
{
    // AB34 0041;	
    // (Í¨¥) LATIN SMALL LETTER E WITH FLOURISH	[1D1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB34, 0x0041 };
    uint32_t const ces[9] = { 0x1D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_111)
{
    // AB34 0062;	
    // (Í¨¥) LATIN SMALL LETTER E WITH FLOURISH	[1D1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB34, 0x0062 };
    uint32_t const ces[9] = { 0x1D1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_112)
{
    // 2C78 0021;	
    // (‚±∏) LATIN SMALL LETTER E WITH NOTCH	[1D1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C78, 0x0021 };
    uint32_t const ces[9] = { 0x1D1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_113)
{
    // 2C78 003F;	
    // (‚±∏) LATIN SMALL LETTER E WITH NOTCH	[1D1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C78, 0x003F };
    uint32_t const ces[9] = { 0x1D1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_114)
{
    // 2C78 0061;	
    // (‚±∏) LATIN SMALL LETTER E WITH NOTCH	[1D1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C78, 0x0061 };
    uint32_t const ces[9] = { 0x1D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_115)
{
    // 2C78 0041;	
    // (‚±∏) LATIN SMALL LETTER E WITH NOTCH	[1D1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C78, 0x0041 };
    uint32_t const ces[9] = { 0x1D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_116)
{
    // 2C78 0062;	
    // (‚±∏) LATIN SMALL LETTER E WITH NOTCH	[1D1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C78, 0x0062 };
    uint32_t const ces[9] = { 0x1D1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_117)
{
    // 01DD 0021;	
    // («ù) LATIN SMALL LETTER TURNED E	[1D1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01DD, 0x0021 };
    uint32_t const ces[9] = { 0x1D1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_118)
{
    // 018E 0021;	
    // (∆é) LATIN CAPITAL LETTER REVERSED E	[1D1E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018E, 0x0021 };
    uint32_t const ces[9] = { 0x1D1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_119)
{
    // 1D32 0021;	
    // (·¥≤) MODIFIER LETTER CAPITAL REVERSED E	[1D1E 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D32, 0x0021 };
    uint32_t const ces[9] = { 0x1D1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_120)
{
    // 01DD 003F;	
    // («ù) LATIN SMALL LETTER TURNED E	[1D1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01DD, 0x003F };
    uint32_t const ces[9] = { 0x1D1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_121)
{
    // 018E 003F;	
    // (∆é) LATIN CAPITAL LETTER REVERSED E	[1D1E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018E, 0x003F };
    uint32_t const ces[9] = { 0x1D1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_122)
{
    // 1D32 003F;	
    // (·¥≤) MODIFIER LETTER CAPITAL REVERSED E	[1D1E 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D32, 0x003F };
    uint32_t const ces[9] = { 0x1D1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_123)
{
    // 01DD 0061;	
    // («ù) LATIN SMALL LETTER TURNED E	[1D1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01DD, 0x0061 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_124)
{
    // 01DD 0041;	
    // («ù) LATIN SMALL LETTER TURNED E	[1D1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01DD, 0x0041 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_125)
{
    // 018E 0061;	
    // (∆é) LATIN CAPITAL LETTER REVERSED E	[1D1E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018E, 0x0061 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_126)
{
    // 018E 0041;	
    // (∆é) LATIN CAPITAL LETTER REVERSED E	[1D1E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x018E, 0x0041 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_127)
{
    // 1D32 0061;	
    // (·¥≤) MODIFIER LETTER CAPITAL REVERSED E	[1D1E 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D32, 0x0061 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_128)
{
    // 1D32 0041;	
    // (·¥≤) MODIFIER LETTER CAPITAL REVERSED E	[1D1E 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D32, 0x0041 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_129)
{
    // 01DD 0062;	
    // («ù) LATIN SMALL LETTER TURNED E	[1D1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01DD, 0x0062 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_130)
{
    // 018E 0062;	
    // (∆é) LATIN CAPITAL LETTER REVERSED E	[1D1E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018E, 0x0062 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_131)
{
    // 1D32 0062;	
    // (·¥≤) MODIFIER LETTER CAPITAL REVERSED E	[1D1E 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D32, 0x0062 };
    uint32_t const ces[9] = { 0x1D1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_132)
{
    // 2C7B 0021;	
    // (‚±ª) LATIN LETTER SMALL CAPITAL TURNED E	[1D22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C7B, 0x0021 };
    uint32_t const ces[9] = { 0x1D22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_133)
{
    // 2C7B 003F;	
    // (‚±ª) LATIN LETTER SMALL CAPITAL TURNED E	[1D22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C7B, 0x003F };
    uint32_t const ces[9] = { 0x1D22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_134)
{
    // 2C7B 0061;	
    // (‚±ª) LATIN LETTER SMALL CAPITAL TURNED E	[1D22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C7B, 0x0061 };
    uint32_t const ces[9] = { 0x1D22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_135)
{
    // 2C7B 0041;	
    // (‚±ª) LATIN LETTER SMALL CAPITAL TURNED E	[1D22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C7B, 0x0041 };
    uint32_t const ces[9] = { 0x1D22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_136)
{
    // 2C7B 0062;	
    // (‚±ª) LATIN LETTER SMALL CAPITAL TURNED E	[1D22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C7B, 0x0062 };
    uint32_t const ces[9] = { 0x1D22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_137)
{
    // 0334 1DEA;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DEA };
    uint32_t const ces[8] = { 0x1D23, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_138)
{
    // 1DEA 0334;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DEA, 0x0334 };
    uint32_t const ces[8] = { 0x1D23, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_139)
{
    // 0259 0021;	
    // (…ô) LATIN SMALL LETTER SCHWA	[1D23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0259, 0x0021 };
    uint32_t const ces[9] = { 0x1D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_140)
{
    // 1DEA 0021;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEA, 0x0021 };
    uint32_t const ces[9] = { 0x1D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_141)
{
    // 018F 0021;	
    // (∆è) LATIN CAPITAL LETTER SCHWA	[1D23 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018F, 0x0021 };
    uint32_t const ces[9] = { 0x1D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_142)
{
    // 1D4A 0021;	
    // (·µä) MODIFIER LETTER SMALL SCHWA	[1D23 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4A, 0x0021 };
    uint32_t const ces[9] = { 0x1D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_143)
{
    // 2094 0021;	
    // (‚Çî) LATIN SUBSCRIPT SMALL LETTER SCHWA	[1D23 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2094, 0x0021 };
    uint32_t const ces[9] = { 0x1D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_144)
{
    // 0259 003F;	
    // (…ô) LATIN SMALL LETTER SCHWA	[1D23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0259, 0x003F };
    uint32_t const ces[9] = { 0x1D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_145)
{
    // 1DEA 003F;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEA, 0x003F };
    uint32_t const ces[9] = { 0x1D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_146)
{
    // 018F 003F;	
    // (∆è) LATIN CAPITAL LETTER SCHWA	[1D23 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018F, 0x003F };
    uint32_t const ces[9] = { 0x1D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_147)
{
    // 1D4A 003F;	
    // (·µä) MODIFIER LETTER SMALL SCHWA	[1D23 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4A, 0x003F };
    uint32_t const ces[9] = { 0x1D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_148)
{
    // 2094 003F;	
    // (‚Çî) LATIN SUBSCRIPT SMALL LETTER SCHWA	[1D23 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2094, 0x003F };
    uint32_t const ces[9] = { 0x1D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_149)
{
    // 0259 0061;	
    // (…ô) LATIN SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0259, 0x0061 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_150)
{
    // 0259 0041;	
    // (…ô) LATIN SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0259, 0x0041 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_151)
{
    // 1DEA 0061;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEA, 0x0061 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_152)
{
    // 1DEA 0041;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DEA, 0x0041 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_153)
{
    // 018F 0061;	
    // (∆è) LATIN CAPITAL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018F, 0x0061 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_154)
{
    // 018F 0041;	
    // (∆è) LATIN CAPITAL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x018F, 0x0041 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_155)
{
    // 1D4A 0061;	
    // (·µä) MODIFIER LETTER SMALL SCHWA	[1D23 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4A, 0x0061 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_156)
{
    // 1D4A 0041;	
    // (·µä) MODIFIER LETTER SMALL SCHWA	[1D23 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D4A, 0x0041 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_157)
{
    // 2094 0061;	
    // (‚Çî) LATIN SUBSCRIPT SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2094, 0x0061 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_158)
{
    // 2094 0041;	
    // (‚Çî) LATIN SUBSCRIPT SMALL LETTER SCHWA	[1D23 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2094, 0x0041 };
    uint32_t const ces[9] = { 0x1D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_159)
{
    // 0259 0062;	
    // (…ô) LATIN SMALL LETTER SCHWA	[1D23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0259, 0x0062 };
    uint32_t const ces[9] = { 0x1D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_160)
{
    // 1DEA 0062;	
    // (·∑™) COMBINING LATIN SMALL LETTER SCHWA	[1D23 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEA, 0x0062 };
    uint32_t const ces[9] = { 0x1D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_161)
{
    // 018F 0062;	
    // (∆è) LATIN CAPITAL LETTER SCHWA	[1D23 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x018F, 0x0062 };
    uint32_t const ces[9] = { 0x1D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_162)
{
    // 1D4A 0062;	
    // (·µä) MODIFIER LETTER SMALL SCHWA	[1D23 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4A, 0x0062 };
    uint32_t const ces[9] = { 0x1D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_163)
{
    // 2094 0062;	
    // (‚Çî) LATIN SUBSCRIPT SMALL LETTER SCHWA	[1D23 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2094, 0x0062 };
    uint32_t const ces[9] = { 0x1D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_164)
{
    // 1D95 0021;	
    // (·∂ï) LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK	[1D27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D95, 0x0021 };
    uint32_t const ces[9] = { 0x1D27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_165)
{
    // 1D95 003F;	
    // (·∂ï) LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK	[1D27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D95, 0x003F };
    uint32_t const ces[9] = { 0x1D27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_166)
{
    // 1D95 0061;	
    // (·∂ï) LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK	[1D27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D95, 0x0061 };
    uint32_t const ces[9] = { 0x1D27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_167)
{
    // 1D95 0041;	
    // (·∂ï) LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK	[1D27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D95, 0x0041 };
    uint32_t const ces[9] = { 0x1D27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_168)
{
    // 1D95 0062;	
    // (·∂ï) LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK	[1D27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D95, 0x0062 };
    uint32_t const ces[9] = { 0x1D27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_169)
{
    // 025B 0021;	
    // (…õ) LATIN SMALL LETTER OPEN E	[1D28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025B, 0x0021 };
    uint32_t const ces[9] = { 0x1D28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_170)
{
    // 0190 0021;	
    // (∆ê) LATIN CAPITAL LETTER OPEN E	[1D28 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0190, 0x0021 };
    uint32_t const ces[9] = { 0x1D28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_171)
{
    // 2107 0021;	
    // (‚Ñá) EULER CONSTANT	[1D28 0261 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2107, 0x0021 };
    uint32_t const ces[9] = { 0x1D28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_172)
{
    // 1D4B 0021;	
    // (·µã) MODIFIER LETTER SMALL OPEN E	[1D28 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4B, 0x0021 };
    uint32_t const ces[9] = { 0x1D28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_173)
{
    // 025B 003F;	
    // (…õ) LATIN SMALL LETTER OPEN E	[1D28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025B, 0x003F };
    uint32_t const ces[9] = { 0x1D28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_174)
{
    // 0190 003F;	
    // (∆ê) LATIN CAPITAL LETTER OPEN E	[1D28 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0190, 0x003F };
    uint32_t const ces[9] = { 0x1D28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_175)
{
    // 2107 003F;	
    // (‚Ñá) EULER CONSTANT	[1D28 0267 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2107, 0x003F };
    uint32_t const ces[9] = { 0x1D28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_176)
{
    // 1D4B 003F;	
    // (·µã) MODIFIER LETTER SMALL OPEN E	[1D28 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4B, 0x003F };
    uint32_t const ces[9] = { 0x1D28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_177)
{
    // 025B 0061;	
    // (…õ) LATIN SMALL LETTER OPEN E	[1D28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025B, 0x0061 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_178)
{
    // 025B 0041;	
    // (…õ) LATIN SMALL LETTER OPEN E	[1D28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x025B, 0x0041 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_179)
{
    // 0190 0061;	
    // (∆ê) LATIN CAPITAL LETTER OPEN E	[1D28 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0190, 0x0061 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_180)
{
    // 0190 0041;	
    // (∆ê) LATIN CAPITAL LETTER OPEN E	[1D28 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0190, 0x0041 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_181)
{
    // 2107 0061;	
    // (‚Ñá) EULER CONSTANT	[1D28 1CAD | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2107, 0x0061 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_182)
{
    // 2107 0041;	
    // (‚Ñá) EULER CONSTANT	[1D28 1CAD | 0020 0020 | 000A 0008 |]

    uint32_t cps[2] = { 0x2107, 0x0041 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_183)
{
    // 1D4B 0061;	
    // (·µã) MODIFIER LETTER SMALL OPEN E	[1D28 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4B, 0x0061 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_184)
{
    // 1D4B 0041;	
    // (·µã) MODIFIER LETTER SMALL OPEN E	[1D28 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D4B, 0x0041 };
    uint32_t const ces[9] = { 0x1D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_185)
{
    // 025B 0062;	
    // (…õ) LATIN SMALL LETTER OPEN E	[1D28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025B, 0x0062 };
    uint32_t const ces[9] = { 0x1D28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_186)
{
    // 0190 0062;	
    // (∆ê) LATIN CAPITAL LETTER OPEN E	[1D28 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0190, 0x0062 };
    uint32_t const ces[9] = { 0x1D28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_187)
{
    // 2107 0062;	
    // (‚Ñá) EULER CONSTANT	[1D28 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2107, 0x0062 };
    uint32_t const ces[9] = { 0x1D28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_188)
{
    // 1D4B 0062;	
    // (·µã) MODIFIER LETTER SMALL OPEN E	[1D28 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4B, 0x0062 };
    uint32_t const ces[9] = { 0x1D28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_189)
{
    // 1D93 0021;	
    // (·∂ì) LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK	[1D2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D93, 0x0021 };
    uint32_t const ces[9] = { 0x1D2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_190)
{
    // 1D93 003F;	
    // (·∂ì) LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK	[1D2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D93, 0x003F };
    uint32_t const ces[9] = { 0x1D2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_191)
{
    // 1D93 0061;	
    // (·∂ì) LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK	[1D2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D93, 0x0061 };
    uint32_t const ces[9] = { 0x1D2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_192)
{
    // 1D93 0041;	
    // (·∂ì) LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK	[1D2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D93, 0x0041 };
    uint32_t const ces[9] = { 0x1D2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_193)
{
    // 1D93 0062;	
    // (·∂ì) LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK	[1D2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D93, 0x0062 };
    uint32_t const ces[9] = { 0x1D2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_194)
{
    // 0258 0021;	
    // (…ò) LATIN SMALL LETTER REVERSED E	[1D2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0258, 0x0021 };
    uint32_t const ces[9] = { 0x1D2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_195)
{
    // 0258 003F;	
    // (…ò) LATIN SMALL LETTER REVERSED E	[1D2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0258, 0x003F };
    uint32_t const ces[9] = { 0x1D2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_196)
{
    // 0258 0061;	
    // (…ò) LATIN SMALL LETTER REVERSED E	[1D2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0258, 0x0061 };
    uint32_t const ces[9] = { 0x1D2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_197)
{
    // 0258 0041;	
    // (…ò) LATIN SMALL LETTER REVERSED E	[1D2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0258, 0x0041 };
    uint32_t const ces[9] = { 0x1D2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_198)
{
    // 0258 0062;	
    // (…ò) LATIN SMALL LETTER REVERSED E	[1D2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0258, 0x0062 };
    uint32_t const ces[9] = { 0x1D2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_199)
{
    // 025A 0021;	
    // (…ö) LATIN SMALL LETTER SCHWA WITH HOOK	[1D31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025A, 0x0021 };
    uint32_t const ces[9] = { 0x1D31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_200)
{
    // 025A 003F;	
    // (…ö) LATIN SMALL LETTER SCHWA WITH HOOK	[1D31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025A, 0x003F };
    uint32_t const ces[9] = { 0x1D31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_201)
{
    // 025A 0061;	
    // (…ö) LATIN SMALL LETTER SCHWA WITH HOOK	[1D31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025A, 0x0061 };
    uint32_t const ces[9] = { 0x1D31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_202)
{
    // 025A 0041;	
    // (…ö) LATIN SMALL LETTER SCHWA WITH HOOK	[1D31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x025A, 0x0041 };
    uint32_t const ces[9] = { 0x1D31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_203)
{
    // 025A 0062;	
    // (…ö) LATIN SMALL LETTER SCHWA WITH HOOK	[1D31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025A, 0x0062 };
    uint32_t const ces[9] = { 0x1D31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_204)
{
    // 025C 0021;	
    // (…ú) LATIN SMALL LETTER REVERSED OPEN E	[1D35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025C, 0x0021 };
    uint32_t const ces[9] = { 0x1D35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_205)
{
    // A7AB 0021;	
    // (Íû´) LATIN CAPITAL LETTER REVERSED OPEN E	[1D35 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AB, 0x0021 };
    uint32_t const ces[9] = { 0x1D35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_206)
{
    // 1D9F 0021;	
    // (·∂ü) MODIFIER LETTER SMALL REVERSED OPEN E	[1D35 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D9F, 0x0021 };
    uint32_t const ces[9] = { 0x1D35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_207)
{
    // 025C 003F;	
    // (…ú) LATIN SMALL LETTER REVERSED OPEN E	[1D35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025C, 0x003F };
    uint32_t const ces[9] = { 0x1D35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_208)
{
    // A7AB 003F;	
    // (Íû´) LATIN CAPITAL LETTER REVERSED OPEN E	[1D35 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AB, 0x003F };
    uint32_t const ces[9] = { 0x1D35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_209)
{
    // 1D9F 003F;	
    // (·∂ü) MODIFIER LETTER SMALL REVERSED OPEN E	[1D35 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D9F, 0x003F };
    uint32_t const ces[9] = { 0x1D35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_210)
{
    // 025C 0061;	
    // (…ú) LATIN SMALL LETTER REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025C, 0x0061 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_211)
{
    // 025C 0041;	
    // (…ú) LATIN SMALL LETTER REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x025C, 0x0041 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_212)
{
    // A7AB 0061;	
    // (Íû´) LATIN CAPITAL LETTER REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AB, 0x0061 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_213)
{
    // A7AB 0041;	
    // (Íû´) LATIN CAPITAL LETTER REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA7AB, 0x0041 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_214)
{
    // 1D9F 0061;	
    // (·∂ü) MODIFIER LETTER SMALL REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D9F, 0x0061 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_215)
{
    // 1D9F 0041;	
    // (·∂ü) MODIFIER LETTER SMALL REVERSED OPEN E	[1D35 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D9F, 0x0041 };
    uint32_t const ces[9] = { 0x1D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_216)
{
    // 025C 0062;	
    // (…ú) LATIN SMALL LETTER REVERSED OPEN E	[1D35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025C, 0x0062 };
    uint32_t const ces[9] = { 0x1D35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_217)
{
    // A7AB 0062;	
    // (Íû´) LATIN CAPITAL LETTER REVERSED OPEN E	[1D35 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AB, 0x0062 };
    uint32_t const ces[9] = { 0x1D35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_218)
{
    // 1D9F 0062;	
    // (·∂ü) MODIFIER LETTER SMALL REVERSED OPEN E	[1D35 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D9F, 0x0062 };
    uint32_t const ces[9] = { 0x1D35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_219)
{
    // 1D94 0021;	
    // (·∂î) LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK	[1D39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D94, 0x0021 };
    uint32_t const ces[9] = { 0x1D39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_220)
{
    // 1D94 003F;	
    // (·∂î) LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK	[1D39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D94, 0x003F };
    uint32_t const ces[9] = { 0x1D39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_221)
{
    // 1D94 0061;	
    // (·∂î) LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK	[1D39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D94, 0x0061 };
    uint32_t const ces[9] = { 0x1D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_222)
{
    // 1D94 0041;	
    // (·∂î) LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK	[1D39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D94, 0x0041 };
    uint32_t const ces[9] = { 0x1D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_223)
{
    // 1D94 0062;	
    // (·∂î) LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK	[1D39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D94, 0x0062 };
    uint32_t const ces[9] = { 0x1D39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_224)
{
    // 1D08 0021;	
    // (·¥à) LATIN SMALL LETTER TURNED OPEN E	[1D3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08, 0x0021 };
    uint32_t const ces[9] = { 0x1D3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_225)
{
    // 1D4C 0021;	
    // (·µå) MODIFIER LETTER SMALL TURNED OPEN E	[1D3A 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4C, 0x0021 };
    uint32_t const ces[9] = { 0x1D3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_226)
{
    // 1D08 003F;	
    // (·¥à) LATIN SMALL LETTER TURNED OPEN E	[1D3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08, 0x003F };
    uint32_t const ces[9] = { 0x1D3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_227)
{
    // 1D4C 003F;	
    // (·µå) MODIFIER LETTER SMALL TURNED OPEN E	[1D3A 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4C, 0x003F };
    uint32_t const ces[9] = { 0x1D3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_228)
{
    // 1D08 0061;	
    // (·¥à) LATIN SMALL LETTER TURNED OPEN E	[1D3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08, 0x0061 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_229)
{
    // 1D08 0041;	
    // (·¥à) LATIN SMALL LETTER TURNED OPEN E	[1D3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08, 0x0041 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_230)
{
    // 1D4C 0061;	
    // (·µå) MODIFIER LETTER SMALL TURNED OPEN E	[1D3A 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4C, 0x0061 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_231)
{
    // 1D4C 0041;	
    // (·µå) MODIFIER LETTER SMALL TURNED OPEN E	[1D3A 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D4C, 0x0041 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_232)
{
    // 1D08 0062;	
    // (·¥à) LATIN SMALL LETTER TURNED OPEN E	[1D3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08, 0x0062 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_233)
{
    // 1D4C 0062;	
    // (·µå) MODIFIER LETTER SMALL TURNED OPEN E	[1D3A 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4C, 0x0062 };
    uint32_t const ces[9] = { 0x1D3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_234)
{
    // 025D 0021;	
    // (…ù) LATIN SMALL LETTER REVERSED OPEN E WITH HOOK	[1D3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025D, 0x0021 };
    uint32_t const ces[9] = { 0x1D3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_235)
{
    // 025D 003F;	
    // (…ù) LATIN SMALL LETTER REVERSED OPEN E WITH HOOK	[1D3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025D, 0x003F };
    uint32_t const ces[9] = { 0x1D3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_236)
{
    // 025D 0061;	
    // (…ù) LATIN SMALL LETTER REVERSED OPEN E WITH HOOK	[1D3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025D, 0x0061 };
    uint32_t const ces[9] = { 0x1D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_237)
{
    // 025D 0041;	
    // (…ù) LATIN SMALL LETTER REVERSED OPEN E WITH HOOK	[1D3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x025D, 0x0041 };
    uint32_t const ces[9] = { 0x1D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_238)
{
    // 025D 0062;	
    // (…ù) LATIN SMALL LETTER REVERSED OPEN E WITH HOOK	[1D3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025D, 0x0062 };
    uint32_t const ces[9] = { 0x1D3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_239)
{
    // 025E 0021;	
    // (…û) LATIN SMALL LETTER CLOSED REVERSED OPEN E	[1D3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025E, 0x0021 };
    uint32_t const ces[9] = { 0x1D3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_240)
{
    // 025E 003F;	
    // (…û) LATIN SMALL LETTER CLOSED REVERSED OPEN E	[1D3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025E, 0x003F };
    uint32_t const ces[9] = { 0x1D3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_241)
{
    // 025E 0061;	
    // (…û) LATIN SMALL LETTER CLOSED REVERSED OPEN E	[1D3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025E, 0x0061 };
    uint32_t const ces[9] = { 0x1D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_242)
{
    // 025E 0041;	
    // (…û) LATIN SMALL LETTER CLOSED REVERSED OPEN E	[1D3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x025E, 0x0041 };
    uint32_t const ces[9] = { 0x1D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_243)
{
    // 025E 0062;	
    // (…û) LATIN SMALL LETTER CLOSED REVERSED OPEN E	[1D3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x025E, 0x0062 };
    uint32_t const ces[9] = { 0x1D3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_244)
{
    // 029A 0021;	
    // ( ö) LATIN SMALL LETTER CLOSED OPEN E	[1D43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029A, 0x0021 };
    uint32_t const ces[9] = { 0x1D43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_245)
{
    // 029A 003F;	
    // ( ö) LATIN SMALL LETTER CLOSED OPEN E	[1D43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029A, 0x003F };
    uint32_t const ces[9] = { 0x1D43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_246)
{
    // 029A 0061;	
    // ( ö) LATIN SMALL LETTER CLOSED OPEN E	[1D43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029A, 0x0061 };
    uint32_t const ces[9] = { 0x1D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_247)
{
    // 029A 0041;	
    // ( ö) LATIN SMALL LETTER CLOSED OPEN E	[1D43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x029A, 0x0041 };
    uint32_t const ces[9] = { 0x1D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_248)
{
    // 029A 0062;	
    // ( ö) LATIN SMALL LETTER CLOSED OPEN E	[1D43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029A, 0x0062 };
    uint32_t const ces[9] = { 0x1D43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_249)
{
    // 0264 0021;	
    // (…§) LATIN SMALL LETTER RAMS HORN	[1D47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0264, 0x0021 };
    uint32_t const ces[9] = { 0x1D47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_250)
{
    // 0264 003F;	
    // (…§) LATIN SMALL LETTER RAMS HORN	[1D47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0264, 0x003F };
    uint32_t const ces[9] = { 0x1D47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_251)
{
    // 0264 0061;	
    // (…§) LATIN SMALL LETTER RAMS HORN	[1D47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0264, 0x0061 };
    uint32_t const ces[9] = { 0x1D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_252)
{
    // 0264 0041;	
    // (…§) LATIN SMALL LETTER RAMS HORN	[1D47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0264, 0x0041 };
    uint32_t const ces[9] = { 0x1D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_253)
{
    // 0264 0062;	
    // (…§) LATIN SMALL LETTER RAMS HORN	[1D47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0264, 0x0062 };
    uint32_t const ces[9] = { 0x1D47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_254)
{
    // 0066 0307 0334;	
    // (·∏ü) LATIN SMALL LETTER F, COMBINING DOT ABOVE	[1D4B | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0066, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_255)
{
    // 0066 0334 0307;	
    // (fÃ¥) LATIN SMALL LETTER F, COMBINING TILDE OVERLAY	[1D4B | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0066, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_256)
{
    // 1E1F 0334;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1F, 0x0334 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_257)
{
    // 0046 0307 0334;	
    // (·∏û) LATIN CAPITAL LETTER F, COMBINING DOT ABOVE	[1D4B | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0046, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_258)
{
    // 0046 0334 0307;	
    // (FÃ¥) LATIN CAPITAL LETTER F, COMBINING TILDE OVERLAY	[1D4B | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0046, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_259)
{
    // 1E1E 0334;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1E, 0x0334 };
    uint32_t const ces[10] = { 0x1D4B, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_260)
{
    // 0334 1DEB;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DEB };
    uint32_t const ces[8] = { 0x1D4B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_261)
{
    // 1DEB 0334;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DEB, 0x0334 };
    uint32_t const ces[8] = { 0x1D4B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_262)
{
    // 0066 0021;	
    // (f) LATIN SMALL LETTER F	[1D4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0066, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_263)
{
    // FF46 0021;	
    // (ÔΩÜ) FULLWIDTH LATIN SMALL LETTER F	[1D4B 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF46, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_264)
{
    // 1DEB 0021;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEB, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_265)
{
    // 1D41F 0021;	
    // (ùêü) MATHEMATICAL BOLD SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41F, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_266)
{
    // 1D453 0021;	
    // (ùëì) MATHEMATICAL ITALIC SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D453, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_267)
{
    // 1D487 0021;	
    // (ùíá) MATHEMATICAL BOLD ITALIC SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D487, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_268)
{
    // 1D4BB 0021;	
    // (ùíª) MATHEMATICAL SCRIPT SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BB, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_269)
{
    // 1D4EF 0021;	
    // (ùìØ) MATHEMATICAL BOLD SCRIPT SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EF, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_270)
{
    // 1D523 0021;	
    // (ùî£) MATHEMATICAL FRAKTUR SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D523, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_271)
{
    // 1D557 0021;	
    // (ùïó) MATHEMATICAL DOUBLE-STRUCK SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D557, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_272)
{
    // 1D58B 0021;	
    // (ùñã) MATHEMATICAL BOLD FRAKTUR SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58B, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_273)
{
    // 1D5BF 0021;	
    // (ùñø) MATHEMATICAL SANS-SERIF SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BF, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_274)
{
    // 1D5F3 0021;	
    // (ùó≥) MATHEMATICAL SANS-SERIF BOLD SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F3, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_275)
{
    // 1D627 0021;	
    // (ùòß) MATHEMATICAL SANS-SERIF ITALIC SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D627, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_276)
{
    // 1D65B 0021;	
    // (ùôõ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65B, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_277)
{
    // 1D68F 0021;	
    // (ùöè) MATHEMATICAL MONOSPACE SMALL F	[1D4B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68F, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_278)
{
    // 24D5 0021;	
    // (‚ìï) CIRCLED LATIN SMALL LETTER F	[1D4B 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D5, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_279)
{
    // 0046 0021;	
    // (F) LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0046, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_280)
{
    // FF26 0021;	
    // (Ôº¶) FULLWIDTH LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF26, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_281)
{
    // 2131 0021;	
    // (‚Ñ±) SCRIPT CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2131, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_282)
{
    // 1D405 0021;	
    // (ùêÖ) MATHEMATICAL BOLD CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D405, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_283)
{
    // 1D439 0021;	
    // (ùêπ) MATHEMATICAL ITALIC CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D439, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_284)
{
    // 1D46D 0021;	
    // (ùë≠) MATHEMATICAL BOLD ITALIC CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46D, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_285)
{
    // 1D4D5 0021;	
    // (ùìï) MATHEMATICAL BOLD SCRIPT CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D5, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_286)
{
    // 1D509 0021;	
    // (ùîâ) MATHEMATICAL FRAKTUR CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D509, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_287)
{
    // 1D53D 0021;	
    // (ùîΩ) MATHEMATICAL DOUBLE-STRUCK CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53D, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_288)
{
    // 1D571 0021;	
    // (ùï±) MATHEMATICAL BOLD FRAKTUR CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D571, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_289)
{
    // 1D5A5 0021;	
    // (ùñ•) MATHEMATICAL SANS-SERIF CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A5, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_290)
{
    // 1D5D9 0021;	
    // (ùóô) MATHEMATICAL SANS-SERIF BOLD CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D9, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_291)
{
    // 1D60D 0021;	
    // (ùòç) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60D, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_292)
{
    // 1D641 0021;	
    // (ùôÅ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D641, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_293)
{
    // 1D675 0021;	
    // (ùôµ) MATHEMATICAL MONOSPACE CAPITAL F	[1D4B 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D675, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_294)
{
    // 24BB 0021;	
    // (‚íª) CIRCLED LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BB, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_295)
{
    // 1F155 0021;	
    // (üÖï) NEGATIVE CIRCLED LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F155, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_296)
{
    // 1DA0 0021;	
    // (·∂†) MODIFIER LETTER SMALL F	[1D4B 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA0, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_297)
{
    // 1F135 0021;	
    // (üÑµ) SQUARED LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F135, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_298)
{
    // 1F175 0021;	
    // (üÖµ) NEGATIVE SQUARED LATIN CAPITAL LETTER F	[1D4B 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F175, 0x0021 };
    uint32_t const ces[9] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_299)
{
    // 1E1F 0021;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1F, 0x0021 };
    uint32_t const ces[11] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_300)
{
    // 1E1E 0021;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1E, 0x0021 };
    uint32_t const ces[11] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_301)
{
    // A77C 0021;	
    // (Íùº) LATIN SMALL LETTER INSULAR F	[1D4B 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA77C, 0x0021 };
    uint32_t const ces[11] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_302)
{
    // A77B 0021;	
    // (Íùª) LATIN CAPITAL LETTER INSULAR F	[1D4B 0261 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77B, 0x0021 };
    uint32_t const ces[11] = { 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_303)
{
    // 0066 003F;	
    // (f) LATIN SMALL LETTER F	[1D4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0066, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_304)
{
    // FF46 003F;	
    // (ÔΩÜ) FULLWIDTH LATIN SMALL LETTER F	[1D4B 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF46, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_305)
{
    // 1DEB 003F;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEB, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_306)
{
    // 1D41F 003F;	
    // (ùêü) MATHEMATICAL BOLD SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41F, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_307)
{
    // 1D453 003F;	
    // (ùëì) MATHEMATICAL ITALIC SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D453, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_308)
{
    // 1D487 003F;	
    // (ùíá) MATHEMATICAL BOLD ITALIC SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D487, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_309)
{
    // 1D4BB 003F;	
    // (ùíª) MATHEMATICAL SCRIPT SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BB, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_310)
{
    // 1D4EF 003F;	
    // (ùìØ) MATHEMATICAL BOLD SCRIPT SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EF, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_311)
{
    // 1D523 003F;	
    // (ùî£) MATHEMATICAL FRAKTUR SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D523, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_312)
{
    // 1D557 003F;	
    // (ùïó) MATHEMATICAL DOUBLE-STRUCK SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D557, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_313)
{
    // 1D58B 003F;	
    // (ùñã) MATHEMATICAL BOLD FRAKTUR SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58B, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_314)
{
    // 1D5BF 003F;	
    // (ùñø) MATHEMATICAL SANS-SERIF SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BF, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_315)
{
    // 1D5F3 003F;	
    // (ùó≥) MATHEMATICAL SANS-SERIF BOLD SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F3, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_316)
{
    // 1D627 003F;	
    // (ùòß) MATHEMATICAL SANS-SERIF ITALIC SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D627, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_317)
{
    // 1D65B 003F;	
    // (ùôõ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65B, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_318)
{
    // 1D68F 003F;	
    // (ùöè) MATHEMATICAL MONOSPACE SMALL F	[1D4B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68F, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_319)
{
    // 24D5 003F;	
    // (‚ìï) CIRCLED LATIN SMALL LETTER F	[1D4B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D5, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_320)
{
    // 0046 003F;	
    // (F) LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0046, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_321)
{
    // FF26 003F;	
    // (Ôº¶) FULLWIDTH LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF26, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_322)
{
    // 2131 003F;	
    // (‚Ñ±) SCRIPT CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2131, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_323)
{
    // 1D405 003F;	
    // (ùêÖ) MATHEMATICAL BOLD CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D405, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_324)
{
    // 1D439 003F;	
    // (ùêπ) MATHEMATICAL ITALIC CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D439, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_325)
{
    // 1D46D 003F;	
    // (ùë≠) MATHEMATICAL BOLD ITALIC CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46D, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_326)
{
    // 1D4D5 003F;	
    // (ùìï) MATHEMATICAL BOLD SCRIPT CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D5, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_327)
{
    // 1D509 003F;	
    // (ùîâ) MATHEMATICAL FRAKTUR CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D509, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_328)
{
    // 1D53D 003F;	
    // (ùîΩ) MATHEMATICAL DOUBLE-STRUCK CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53D, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_329)
{
    // 1D571 003F;	
    // (ùï±) MATHEMATICAL BOLD FRAKTUR CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D571, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_330)
{
    // 1D5A5 003F;	
    // (ùñ•) MATHEMATICAL SANS-SERIF CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A5, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_331)
{
    // 1D5D9 003F;	
    // (ùóô) MATHEMATICAL SANS-SERIF BOLD CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D9, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_332)
{
    // 1D60D 003F;	
    // (ùòç) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60D, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_333)
{
    // 1D641 003F;	
    // (ùôÅ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D641, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_334)
{
    // 1D675 003F;	
    // (ùôµ) MATHEMATICAL MONOSPACE CAPITAL F	[1D4B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D675, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_335)
{
    // 24BB 003F;	
    // (‚íª) CIRCLED LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BB, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_336)
{
    // 1F155 003F;	
    // (üÖï) NEGATIVE CIRCLED LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F155, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_337)
{
    // 1DA0 003F;	
    // (·∂†) MODIFIER LETTER SMALL F	[1D4B 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA0, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_338)
{
    // 1F135 003F;	
    // (üÑµ) SQUARED LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F135, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_339)
{
    // 1F175 003F;	
    // (üÖµ) NEGATIVE SQUARED LATIN CAPITAL LETTER F	[1D4B 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F175, 0x003F };
    uint32_t const ces[9] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_340)
{
    // 1E1F 003F;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1F, 0x003F };
    uint32_t const ces[11] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_341)
{
    // 1E1E 003F;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1E, 0x003F };
    uint32_t const ces[11] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_342)
{
    // A77C 003F;	
    // (Íùº) LATIN SMALL LETTER INSULAR F	[1D4B 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA77C, 0x003F };
    uint32_t const ces[11] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_343)
{
    // A77B 003F;	
    // (Íùª) LATIN CAPITAL LETTER INSULAR F	[1D4B 0267 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77B, 0x003F };
    uint32_t const ces[11] = { 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_344)
{
    // 0066 0061;	
    // (f) LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0066, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_345)
{
    // 0066 0041;	
    // (f) LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0066, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_346)
{
    // FF46 0061;	
    // (ÔΩÜ) FULLWIDTH LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF46, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_347)
{
    // FF46 0041;	
    // (ÔΩÜ) FULLWIDTH LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF46, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_348)
{
    // 1DEB 0061;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEB, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_349)
{
    // 1DEB 0041;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DEB, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_350)
{
    // 1D41F 0061;	
    // (ùêü) MATHEMATICAL BOLD SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41F, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_351)
{
    // 1D453 0061;	
    // (ùëì) MATHEMATICAL ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D453, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_352)
{
    // 1D487 0061;	
    // (ùíá) MATHEMATICAL BOLD ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D487, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_353)
{
    // 1D4BB 0061;	
    // (ùíª) MATHEMATICAL SCRIPT SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BB, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_354)
{
    // 1D4EF 0061;	
    // (ùìØ) MATHEMATICAL BOLD SCRIPT SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EF, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_355)
{
    // 1D523 0061;	
    // (ùî£) MATHEMATICAL FRAKTUR SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D523, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_356)
{
    // 1D557 0061;	
    // (ùïó) MATHEMATICAL DOUBLE-STRUCK SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D557, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_357)
{
    // 1D58B 0061;	
    // (ùñã) MATHEMATICAL BOLD FRAKTUR SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58B, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_358)
{
    // 1D5BF 0061;	
    // (ùñø) MATHEMATICAL SANS-SERIF SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BF, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_359)
{
    // 1D5F3 0061;	
    // (ùó≥) MATHEMATICAL SANS-SERIF BOLD SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F3, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_360)
{
    // 1D627 0061;	
    // (ùòß) MATHEMATICAL SANS-SERIF ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D627, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_361)
{
    // 1D65B 0061;	
    // (ùôõ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65B, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_362)
{
    // 1D68F 0061;	
    // (ùöè) MATHEMATICAL MONOSPACE SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68F, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_363)
{
    // 1D41F 0041;	
    // (ùêü) MATHEMATICAL BOLD SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D41F, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_364)
{
    // 1D453 0041;	
    // (ùëì) MATHEMATICAL ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D453, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_365)
{
    // 1D487 0041;	
    // (ùíá) MATHEMATICAL BOLD ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D487, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_366)
{
    // 1D4BB 0041;	
    // (ùíª) MATHEMATICAL SCRIPT SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4BB, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_367)
{
    // 1D4EF 0041;	
    // (ùìØ) MATHEMATICAL BOLD SCRIPT SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4EF, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_368)
{
    // 1D523 0041;	
    // (ùî£) MATHEMATICAL FRAKTUR SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D523, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_369)
{
    // 1D557 0041;	
    // (ùïó) MATHEMATICAL DOUBLE-STRUCK SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D557, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_370)
{
    // 1D58B 0041;	
    // (ùñã) MATHEMATICAL BOLD FRAKTUR SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D58B, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_371)
{
    // 1D5BF 0041;	
    // (ùñø) MATHEMATICAL SANS-SERIF SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5BF, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_372)
{
    // 1D5F3 0041;	
    // (ùó≥) MATHEMATICAL SANS-SERIF BOLD SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5F3, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_373)
{
    // 1D627 0041;	
    // (ùòß) MATHEMATICAL SANS-SERIF ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D627, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_374)
{
    // 1D65B 0041;	
    // (ùôõ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D65B, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_375)
{
    // 1D68F 0041;	
    // (ùöè) MATHEMATICAL MONOSPACE SMALL F	[1D4B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D68F, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_376)
{
    // 24D5 0061;	
    // (‚ìï) CIRCLED LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D5, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_377)
{
    // 24D5 0041;	
    // (‚ìï) CIRCLED LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24D5, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_378)
{
    // 0046 0061;	
    // (F) LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0046, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_379)
{
    // 0046 0041;	
    // (F) LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0046, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_380)
{
    // FF26 0061;	
    // (Ôº¶) FULLWIDTH LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF26, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_381)
{
    // FF26 0041;	
    // (Ôº¶) FULLWIDTH LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF26, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_382)
{
    // 2131 0061;	
    // (‚Ñ±) SCRIPT CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2131, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_383)
{
    // 1D405 0061;	
    // (ùêÖ) MATHEMATICAL BOLD CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D405, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_384)
{
    // 1D439 0061;	
    // (ùêπ) MATHEMATICAL ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D439, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_385)
{
    // 1D46D 0061;	
    // (ùë≠) MATHEMATICAL BOLD ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46D, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_386)
{
    // 1D4D5 0061;	
    // (ùìï) MATHEMATICAL BOLD SCRIPT CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D5, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_387)
{
    // 1D509 0061;	
    // (ùîâ) MATHEMATICAL FRAKTUR CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D509, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_388)
{
    // 1D53D 0061;	
    // (ùîΩ) MATHEMATICAL DOUBLE-STRUCK CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53D, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_389)
{
    // 1D571 0061;	
    // (ùï±) MATHEMATICAL BOLD FRAKTUR CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D571, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_390)
{
    // 1D5A5 0061;	
    // (ùñ•) MATHEMATICAL SANS-SERIF CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A5, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_391)
{
    // 1D5D9 0061;	
    // (ùóô) MATHEMATICAL SANS-SERIF BOLD CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D9, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_392)
{
    // 1D60D 0061;	
    // (ùòç) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60D, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_393)
{
    // 1D641 0061;	
    // (ùôÅ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D641, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_394)
{
    // 1D675 0061;	
    // (ùôµ) MATHEMATICAL MONOSPACE CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D675, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_395)
{
    // 2131 0041;	
    // (‚Ñ±) SCRIPT CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2131, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_396)
{
    // 1D405 0041;	
    // (ùêÖ) MATHEMATICAL BOLD CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D405, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_397)
{
    // 1D439 0041;	
    // (ùêπ) MATHEMATICAL ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D439, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_398)
{
    // 1D46D 0041;	
    // (ùë≠) MATHEMATICAL BOLD ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D46D, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_399)
{
    // 1D4D5 0041;	
    // (ùìï) MATHEMATICAL BOLD SCRIPT CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4D5, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_400)
{
    // 1D509 0041;	
    // (ùîâ) MATHEMATICAL FRAKTUR CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D509, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_401)
{
    // 1D53D 0041;	
    // (ùîΩ) MATHEMATICAL DOUBLE-STRUCK CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D53D, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_402)
{
    // 1D571 0041;	
    // (ùï±) MATHEMATICAL BOLD FRAKTUR CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D571, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_403)
{
    // 1D5A5 0041;	
    // (ùñ•) MATHEMATICAL SANS-SERIF CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5A5, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_404)
{
    // 1D5D9 0041;	
    // (ùóô) MATHEMATICAL SANS-SERIF BOLD CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5D9, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_405)
{
    // 1D60D 0041;	
    // (ùòç) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D60D, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_406)
{
    // 1D641 0041;	
    // (ùôÅ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D641, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_407)
{
    // 1D675 0041;	
    // (ùôµ) MATHEMATICAL MONOSPACE CAPITAL F	[1D4B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D675, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_408)
{
    // 24BB 0061;	
    // (‚íª) CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BB, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_409)
{
    // 1F155 0061;	
    // (üÖï) NEGATIVE CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F155, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_410)
{
    // 24BB 0041;	
    // (‚íª) CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24BB, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_411)
{
    // 1F155 0041;	
    // (üÖï) NEGATIVE CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F155, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_412)
{
    // 1DA0 0061;	
    // (·∂†) MODIFIER LETTER SMALL F	[1D4B 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA0, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_413)
{
    // 1DA0 0041;	
    // (·∂†) MODIFIER LETTER SMALL F	[1D4B 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DA0, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_414)
{
    // 1F135 0061;	
    // (üÑµ) SQUARED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F135, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_415)
{
    // 1F175 0061;	
    // (üÖµ) NEGATIVE SQUARED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F175, 0x0061 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_416)
{
    // 1F135 0041;	
    // (üÑµ) SQUARED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F135, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_417)
{
    // 1F175 0041;	
    // (üÖµ) NEGATIVE SQUARED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F175, 0x0041 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_418)
{
    // 1E1F 0061;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1F, 0x0061 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_419)
{
    // 1E1F 0041;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E1F, 0x0041 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_420)
{
    // 1E1E 0061;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1E, 0x0061 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_421)
{
    // 1E1E 0041;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E1E, 0x0041 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_422)
{
    // A77C 0061;	
    // (Íùº) LATIN SMALL LETTER INSULAR F	[1D4B 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA77C, 0x0061 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_423)
{
    // A77C 0041;	
    // (Íùº) LATIN SMALL LETTER INSULAR F	[1D4B 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA77C, 0x0041 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_424)
{
    // A77B 0061;	
    // (Íùª) LATIN CAPITAL LETTER INSULAR F	[1D4B 1CAD | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77B, 0x0061 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_425)
{
    // A77B 0041;	
    // (Íùª) LATIN CAPITAL LETTER INSULAR F	[1D4B 1CAD | 0020 0112 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0xA77B, 0x0041 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_426)
{
    // 213B 0021;	
    // (‚Ñª) FACSIMILE SIGN	[1D4B 1CAD 1F65 0261 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x213B, 0x0021 };
    uint32_t const ces[15] = { 0x1D4B, 0x1CAD, 0x1F65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_427)
{
    // 213B 003F;	
    // (‚Ñª) FACSIMILE SIGN	[1D4B 1CAD 1F65 0267 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x213B, 0x003F };
    uint32_t const ces[15] = { 0x1D4B, 0x1CAD, 0x1F65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_428)
{
    // 213B 0061;	
    // (‚Ñª) FACSIMILE SIGN	[1D4B 1CAD 1F65 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x213B, 0x0061 };
    uint32_t const ces[15] = { 0x1D4B, 0x1CAD, 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_429)
{
    // 213B 0041;	
    // (‚Ñª) FACSIMILE SIGN	[1D4B 1CAD 1F65 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0008 |]

    uint32_t cps[2] = { 0x213B, 0x0041 };
    uint32_t const ces[15] = { 0x1D4B, 0x1CAD, 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_430)
{
    // 213B 0062;	
    // (‚Ñª) FACSIMILE SIGN	[1D4B 1CAD 1F65 1CC6 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x213B, 0x0062 };
    uint32_t const ces[15] = { 0x1D4B, 0x1CAD, 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_431)
{
    // 0066 0062;	
    // (f) LATIN SMALL LETTER F	[1D4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0066, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_432)
{
    // FF46 0062;	
    // (ÔΩÜ) FULLWIDTH LATIN SMALL LETTER F	[1D4B 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF46, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_433)
{
    // 1DEB 0062;	
    // (·∑´) COMBINING LATIN SMALL LETTER F	[1D4B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEB, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_434)
{
    // 1D41F 0062;	
    // (ùêü) MATHEMATICAL BOLD SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41F, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_435)
{
    // 1D453 0062;	
    // (ùëì) MATHEMATICAL ITALIC SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D453, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_436)
{
    // 1D487 0062;	
    // (ùíá) MATHEMATICAL BOLD ITALIC SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D487, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_437)
{
    // 1D4BB 0062;	
    // (ùíª) MATHEMATICAL SCRIPT SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BB, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_438)
{
    // 1D4EF 0062;	
    // (ùìØ) MATHEMATICAL BOLD SCRIPT SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EF, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_439)
{
    // 1D523 0062;	
    // (ùî£) MATHEMATICAL FRAKTUR SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D523, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_440)
{
    // 1D557 0062;	
    // (ùïó) MATHEMATICAL DOUBLE-STRUCK SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D557, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_441)
{
    // 1D58B 0062;	
    // (ùñã) MATHEMATICAL BOLD FRAKTUR SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58B, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_442)
{
    // 1D5BF 0062;	
    // (ùñø) MATHEMATICAL SANS-SERIF SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BF, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_443)
{
    // 1D5F3 0062;	
    // (ùó≥) MATHEMATICAL SANS-SERIF BOLD SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F3, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_444)
{
    // 1D627 0062;	
    // (ùòß) MATHEMATICAL SANS-SERIF ITALIC SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D627, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_445)
{
    // 1D65B 0062;	
    // (ùôõ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65B, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_446)
{
    // 1D68F 0062;	
    // (ùöè) MATHEMATICAL MONOSPACE SMALL F	[1D4B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68F, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_447)
{
    // 24D5 0062;	
    // (‚ìï) CIRCLED LATIN SMALL LETTER F	[1D4B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D5, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_448)
{
    // 0046 0062;	
    // (F) LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0046, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_449)
{
    // FF26 0062;	
    // (Ôº¶) FULLWIDTH LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF26, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_450)
{
    // 2131 0062;	
    // (‚Ñ±) SCRIPT CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2131, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_451)
{
    // 1D405 0062;	
    // (ùêÖ) MATHEMATICAL BOLD CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D405, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_452)
{
    // 1D439 0062;	
    // (ùêπ) MATHEMATICAL ITALIC CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D439, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_453)
{
    // 1D46D 0062;	
    // (ùë≠) MATHEMATICAL BOLD ITALIC CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46D, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_454)
{
    // 1D4D5 0062;	
    // (ùìï) MATHEMATICAL BOLD SCRIPT CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D5, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_455)
{
    // 1D509 0062;	
    // (ùîâ) MATHEMATICAL FRAKTUR CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D509, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_456)
{
    // 1D53D 0062;	
    // (ùîΩ) MATHEMATICAL DOUBLE-STRUCK CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53D, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_457)
{
    // 1D571 0062;	
    // (ùï±) MATHEMATICAL BOLD FRAKTUR CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D571, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_458)
{
    // 1D5A5 0062;	
    // (ùñ•) MATHEMATICAL SANS-SERIF CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A5, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_459)
{
    // 1D5D9 0062;	
    // (ùóô) MATHEMATICAL SANS-SERIF BOLD CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D9, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_460)
{
    // 1D60D 0062;	
    // (ùòç) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60D, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_461)
{
    // 1D641 0062;	
    // (ùôÅ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D641, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_462)
{
    // 1D675 0062;	
    // (ùôµ) MATHEMATICAL MONOSPACE CAPITAL F	[1D4B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D675, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_463)
{
    // 24BB 0062;	
    // (‚íª) CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BB, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_464)
{
    // 1F155 0062;	
    // (üÖï) NEGATIVE CIRCLED LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F155, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_465)
{
    // 1DA0 0062;	
    // (·∂†) MODIFIER LETTER SMALL F	[1D4B 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA0, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_466)
{
    // 1F135 0062;	
    // (üÑµ) SQUARED LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F135, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_467)
{
    // 1F175 0062;	
    // (üÖµ) NEGATIVE SQUARED LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F175, 0x0062 };
    uint32_t const ces[9] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_468)
{
    // 1E1F 0062;	
    // (·∏ü) LATIN SMALL LETTER F WITH DOT ABOVE	[1D4B 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1F, 0x0062 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_469)
{
    // 1E1E 0062;	
    // (·∏û) LATIN CAPITAL LETTER F WITH DOT ABOVE	[1D4B 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1E, 0x0062 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_470)
{
    // A77C 0062;	
    // (Íùº) LATIN SMALL LETTER INSULAR F	[1D4B 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA77C, 0x0062 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_471)
{
    // A77B 0062;	
    // (Íùª) LATIN CAPITAL LETTER INSULAR F	[1D4B 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77B, 0x0062 };
    uint32_t const ces[11] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_472)
{
    // FB00 0021;	
    // (Ô¨Ä) LATIN SMALL LIGATURE FF	[1D4B 1D4B 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB00, 0x0021 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_473)
{
    // FB00 003F;	
    // (Ô¨Ä) LATIN SMALL LIGATURE FF	[1D4B 1D4B 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB00, 0x003F };
    uint32_t const ces[12] = { 0x1D4B, 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_474)
{
    // FB00 0061;	
    // (Ô¨Ä) LATIN SMALL LIGATURE FF	[1D4B 1D4B 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB00, 0x0061 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_475)
{
    // FB00 0041;	
    // (Ô¨Ä) LATIN SMALL LIGATURE FF	[1D4B 1D4B 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xFB00, 0x0041 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_476)
{
    // FB00 0062;	
    // (Ô¨Ä) LATIN SMALL LIGATURE FF	[1D4B 1D4B 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB00, 0x0062 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_477)
{
    // FB03 0021;	
    // (Ô¨É) LATIN SMALL LIGATURE FFI	[1D4B 1D4B 1D98 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB03, 0x0021 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_478)
{
    // FB03 003F;	
    // (Ô¨É) LATIN SMALL LIGATURE FFI	[1D4B 1D4B 1D98 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB03, 0x003F };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_479)
{
    // FB03 0061;	
    // (Ô¨É) LATIN SMALL LIGATURE FFI	[1D4B 1D4B 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB03, 0x0061 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_480)
{
    // FB03 0041;	
    // (Ô¨É) LATIN SMALL LIGATURE FFI	[1D4B 1D4B 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0xFB03, 0x0041 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_481)
{
    // FB03 0062;	
    // (Ô¨É) LATIN SMALL LIGATURE FFI	[1D4B 1D4B 1D98 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB03, 0x0062 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_482)
{
    // FB04 0021;	
    // (Ô¨Ñ) LATIN SMALL LIGATURE FFL	[1D4B 1D4B 1DDD 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB04, 0x0021 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_483)
{
    // FB04 003F;	
    // (Ô¨Ñ) LATIN SMALL LIGATURE FFL	[1D4B 1D4B 1DDD 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB04, 0x003F };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_484)
{
    // FB04 0061;	
    // (Ô¨Ñ) LATIN SMALL LIGATURE FFL	[1D4B 1D4B 1DDD 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB04, 0x0061 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_485)
{
    // FB04 0041;	
    // (Ô¨Ñ) LATIN SMALL LIGATURE FFL	[1D4B 1D4B 1DDD 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0xFB04, 0x0041 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_486)
{
    // FB04 0062;	
    // (Ô¨Ñ) LATIN SMALL LIGATURE FFL	[1D4B 1D4B 1DDD 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB04, 0x0062 };
    uint32_t const ces[15] = { 0x1D4B, 0x1D4B, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_487)
{
    // FB01 0021;	
    // (Ô¨Å) LATIN SMALL LIGATURE FI	[1D4B 1D98 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB01, 0x0021 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_488)
{
    // FB01 003F;	
    // (Ô¨Å) LATIN SMALL LIGATURE FI	[1D4B 1D98 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB01, 0x003F };
    uint32_t const ces[12] = { 0x1D4B, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_489)
{
    // FB01 0061;	
    // (Ô¨Å) LATIN SMALL LIGATURE FI	[1D4B 1D98 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB01, 0x0061 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_490)
{
    // FB01 0041;	
    // (Ô¨Å) LATIN SMALL LIGATURE FI	[1D4B 1D98 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xFB01, 0x0041 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_491)
{
    // FB01 0062;	
    // (Ô¨Å) LATIN SMALL LIGATURE FI	[1D4B 1D98 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB01, 0x0062 };
    uint32_t const ces[12] = { 0x1D4B, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_492)
{
    // FB02 0021;	
    // (Ô¨Ç) LATIN SMALL LIGATURE FL	[1D4B 1DDD 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB02, 0x0021 };
    uint32_t const ces[12] = { 0x1D4B, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_493)
{
    // FB02 003F;	
    // (Ô¨Ç) LATIN SMALL LIGATURE FL	[1D4B 1DDD 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB02, 0x003F };
    uint32_t const ces[12] = { 0x1D4B, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_494)
{
    // FB02 0061;	
    // (Ô¨Ç) LATIN SMALL LIGATURE FL	[1D4B 1DDD 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB02, 0x0061 };
    uint32_t const ces[12] = { 0x1D4B, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_495)
{
    // FB02 0041;	
    // (Ô¨Ç) LATIN SMALL LIGATURE FL	[1D4B 1DDD 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xFB02, 0x0041 };
    uint32_t const ces[12] = { 0x1D4B, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_496)
{
    // FB02 0062;	
    // (Ô¨Ç) LATIN SMALL LIGATURE FL	[1D4B 1DDD 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xFB02, 0x0062 };
    uint32_t const ces[12] = { 0x1D4B, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_497)
{
    // 3399 0021;	
    // („éô) SQUARE FM	[1D4B 1E10 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3399, 0x0021 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_498)
{
    // 3399 003F;	
    // („éô) SQUARE FM	[1D4B 1E10 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3399, 0x003F };
    uint32_t const ces[12] = { 0x1D4B, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_106_499)
{
    // 3399 0061;	
    // („éô) SQUARE FM	[1D4B 1E10 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3399, 0x0061 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

