// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_144_000)
{
    // 10A9 0041;	
    // (Ⴉ) GEORGIAN CAPITAL LETTER KAN	[22B5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10A9, 0x0041 };
    uint32_t const ces[9] = { 0x22B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_001)
{
    // 2D09 0062;	
    // (ⴉ) GEORGIAN SMALL LETTER KAN	[22B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D09, 0x0062 };
    uint32_t const ces[9] = { 0x22B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_002)
{
    // 10A9 0062;	
    // (Ⴉ) GEORGIAN CAPITAL LETTER KAN	[22B5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10A9, 0x0062 };
    uint32_t const ces[9] = { 0x22B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_003)
{
    // 10DA 0021;	
    // (ლ) GEORGIAN LETTER LAS	[22B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DA, 0x0021 };
    uint32_t const ces[9] = { 0x22B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_004)
{
    // 10DA 003F;	
    // (ლ) GEORGIAN LETTER LAS	[22B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DA, 0x003F };
    uint32_t const ces[9] = { 0x22B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_005)
{
    // 10DA 0061;	
    // (ლ) GEORGIAN LETTER LAS	[22B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DA, 0x0061 };
    uint32_t const ces[9] = { 0x22B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_006)
{
    // 10DA 0041;	
    // (ლ) GEORGIAN LETTER LAS	[22B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DA, 0x0041 };
    uint32_t const ces[9] = { 0x22B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_007)
{
    // 10DA 0062;	
    // (ლ) GEORGIAN LETTER LAS	[22B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DA, 0x0062 };
    uint32_t const ces[9] = { 0x22B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_008)
{
    // 2D0A 0021;	
    // (ⴊ) GEORGIAN SMALL LETTER LAS	[22B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0A, 0x0021 };
    uint32_t const ces[9] = { 0x22B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_009)
{
    // 10AA 0021;	
    // (Ⴊ) GEORGIAN CAPITAL LETTER LAS	[22B7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AA, 0x0021 };
    uint32_t const ces[9] = { 0x22B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_010)
{
    // 2D0A 003F;	
    // (ⴊ) GEORGIAN SMALL LETTER LAS	[22B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0A, 0x003F };
    uint32_t const ces[9] = { 0x22B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_011)
{
    // 10AA 003F;	
    // (Ⴊ) GEORGIAN CAPITAL LETTER LAS	[22B7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AA, 0x003F };
    uint32_t const ces[9] = { 0x22B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_012)
{
    // 2D0A 0061;	
    // (ⴊ) GEORGIAN SMALL LETTER LAS	[22B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0A, 0x0061 };
    uint32_t const ces[9] = { 0x22B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_013)
{
    // 2D0A 0041;	
    // (ⴊ) GEORGIAN SMALL LETTER LAS	[22B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0A, 0x0041 };
    uint32_t const ces[9] = { 0x22B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_014)
{
    // 10AA 0061;	
    // (Ⴊ) GEORGIAN CAPITAL LETTER LAS	[22B7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AA, 0x0061 };
    uint32_t const ces[9] = { 0x22B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_015)
{
    // 10AA 0041;	
    // (Ⴊ) GEORGIAN CAPITAL LETTER LAS	[22B7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AA, 0x0041 };
    uint32_t const ces[9] = { 0x22B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_016)
{
    // 2D0A 0062;	
    // (ⴊ) GEORGIAN SMALL LETTER LAS	[22B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0A, 0x0062 };
    uint32_t const ces[9] = { 0x22B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_017)
{
    // 10AA 0062;	
    // (Ⴊ) GEORGIAN CAPITAL LETTER LAS	[22B7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AA, 0x0062 };
    uint32_t const ces[9] = { 0x22B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_018)
{
    // 10DB 0021;	
    // (მ) GEORGIAN LETTER MAN	[22B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DB, 0x0021 };
    uint32_t const ces[9] = { 0x22B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_019)
{
    // 10DB 003F;	
    // (მ) GEORGIAN LETTER MAN	[22B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DB, 0x003F };
    uint32_t const ces[9] = { 0x22B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_020)
{
    // 10DB 0061;	
    // (მ) GEORGIAN LETTER MAN	[22B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DB, 0x0061 };
    uint32_t const ces[9] = { 0x22B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_021)
{
    // 10DB 0041;	
    // (მ) GEORGIAN LETTER MAN	[22B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DB, 0x0041 };
    uint32_t const ces[9] = { 0x22B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_022)
{
    // 10DB 0062;	
    // (მ) GEORGIAN LETTER MAN	[22B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DB, 0x0062 };
    uint32_t const ces[9] = { 0x22B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_023)
{
    // 2D0B 0021;	
    // (ⴋ) GEORGIAN SMALL LETTER MAN	[22B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0B, 0x0021 };
    uint32_t const ces[9] = { 0x22B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_024)
{
    // 10AB 0021;	
    // (Ⴋ) GEORGIAN CAPITAL LETTER MAN	[22B9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AB, 0x0021 };
    uint32_t const ces[9] = { 0x22B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_025)
{
    // 2D0B 003F;	
    // (ⴋ) GEORGIAN SMALL LETTER MAN	[22B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0B, 0x003F };
    uint32_t const ces[9] = { 0x22B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_026)
{
    // 10AB 003F;	
    // (Ⴋ) GEORGIAN CAPITAL LETTER MAN	[22B9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AB, 0x003F };
    uint32_t const ces[9] = { 0x22B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_027)
{
    // 2D0B 0061;	
    // (ⴋ) GEORGIAN SMALL LETTER MAN	[22B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0B, 0x0061 };
    uint32_t const ces[9] = { 0x22B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_028)
{
    // 2D0B 0041;	
    // (ⴋ) GEORGIAN SMALL LETTER MAN	[22B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0B, 0x0041 };
    uint32_t const ces[9] = { 0x22B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_029)
{
    // 10AB 0061;	
    // (Ⴋ) GEORGIAN CAPITAL LETTER MAN	[22B9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AB, 0x0061 };
    uint32_t const ces[9] = { 0x22B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_030)
{
    // 10AB 0041;	
    // (Ⴋ) GEORGIAN CAPITAL LETTER MAN	[22B9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AB, 0x0041 };
    uint32_t const ces[9] = { 0x22B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_031)
{
    // 2D0B 0062;	
    // (ⴋ) GEORGIAN SMALL LETTER MAN	[22B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0B, 0x0062 };
    uint32_t const ces[9] = { 0x22B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_032)
{
    // 10AB 0062;	
    // (Ⴋ) GEORGIAN CAPITAL LETTER MAN	[22B9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AB, 0x0062 };
    uint32_t const ces[9] = { 0x22B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_033)
{
    // 10DC 0021;	
    // (ნ) GEORGIAN LETTER NAR	[22BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DC, 0x0021 };
    uint32_t const ces[9] = { 0x22BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_034)
{
    // 10FC 0021;	
    // (ჼ) MODIFIER LETTER GEORGIAN NAR	[22BA 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x10FC, 0x0021 };
    uint32_t const ces[9] = { 0x22BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_035)
{
    // 10DC 003F;	
    // (ნ) GEORGIAN LETTER NAR	[22BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DC, 0x003F };
    uint32_t const ces[9] = { 0x22BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_036)
{
    // 10FC 003F;	
    // (ჼ) MODIFIER LETTER GEORGIAN NAR	[22BA 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x10FC, 0x003F };
    uint32_t const ces[9] = { 0x22BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_037)
{
    // 10DC 0061;	
    // (ნ) GEORGIAN LETTER NAR	[22BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DC, 0x0061 };
    uint32_t const ces[9] = { 0x22BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_038)
{
    // 10DC 0041;	
    // (ნ) GEORGIAN LETTER NAR	[22BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DC, 0x0041 };
    uint32_t const ces[9] = { 0x22BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_039)
{
    // 10FC 0061;	
    // (ჼ) MODIFIER LETTER GEORGIAN NAR	[22BA 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x10FC, 0x0061 };
    uint32_t const ces[9] = { 0x22BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_040)
{
    // 10FC 0041;	
    // (ჼ) MODIFIER LETTER GEORGIAN NAR	[22BA 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x10FC, 0x0041 };
    uint32_t const ces[9] = { 0x22BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_041)
{
    // 10DC 0062;	
    // (ნ) GEORGIAN LETTER NAR	[22BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DC, 0x0062 };
    uint32_t const ces[9] = { 0x22BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_042)
{
    // 10FC 0062;	
    // (ჼ) MODIFIER LETTER GEORGIAN NAR	[22BA 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x10FC, 0x0062 };
    uint32_t const ces[9] = { 0x22BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_043)
{
    // 2D0C 0021;	
    // (ⴌ) GEORGIAN SMALL LETTER NAR	[22BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0C, 0x0021 };
    uint32_t const ces[9] = { 0x22BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_044)
{
    // 10AC 0021;	
    // (Ⴌ) GEORGIAN CAPITAL LETTER NAR	[22BB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AC, 0x0021 };
    uint32_t const ces[9] = { 0x22BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_045)
{
    // 2D0C 003F;	
    // (ⴌ) GEORGIAN SMALL LETTER NAR	[22BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0C, 0x003F };
    uint32_t const ces[9] = { 0x22BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_046)
{
    // 10AC 003F;	
    // (Ⴌ) GEORGIAN CAPITAL LETTER NAR	[22BB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AC, 0x003F };
    uint32_t const ces[9] = { 0x22BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_047)
{
    // 2D0C 0061;	
    // (ⴌ) GEORGIAN SMALL LETTER NAR	[22BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0C, 0x0061 };
    uint32_t const ces[9] = { 0x22BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_048)
{
    // 2D0C 0041;	
    // (ⴌ) GEORGIAN SMALL LETTER NAR	[22BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0C, 0x0041 };
    uint32_t const ces[9] = { 0x22BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_049)
{
    // 10AC 0061;	
    // (Ⴌ) GEORGIAN CAPITAL LETTER NAR	[22BB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AC, 0x0061 };
    uint32_t const ces[9] = { 0x22BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_050)
{
    // 10AC 0041;	
    // (Ⴌ) GEORGIAN CAPITAL LETTER NAR	[22BB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AC, 0x0041 };
    uint32_t const ces[9] = { 0x22BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_051)
{
    // 2D0C 0062;	
    // (ⴌ) GEORGIAN SMALL LETTER NAR	[22BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0C, 0x0062 };
    uint32_t const ces[9] = { 0x22BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_052)
{
    // 10AC 0062;	
    // (Ⴌ) GEORGIAN CAPITAL LETTER NAR	[22BB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AC, 0x0062 };
    uint32_t const ces[9] = { 0x22BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_053)
{
    // 10F2 0021;	
    // (ჲ) GEORGIAN LETTER HIE	[22BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F2, 0x0021 };
    uint32_t const ces[9] = { 0x22BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_054)
{
    // 10F2 003F;	
    // (ჲ) GEORGIAN LETTER HIE	[22BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F2, 0x003F };
    uint32_t const ces[9] = { 0x22BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_055)
{
    // 10F2 0061;	
    // (ჲ) GEORGIAN LETTER HIE	[22BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F2, 0x0061 };
    uint32_t const ces[9] = { 0x22BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_056)
{
    // 10F2 0041;	
    // (ჲ) GEORGIAN LETTER HIE	[22BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F2, 0x0041 };
    uint32_t const ces[9] = { 0x22BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_057)
{
    // 10F2 0062;	
    // (ჲ) GEORGIAN LETTER HIE	[22BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F2, 0x0062 };
    uint32_t const ces[9] = { 0x22BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_058)
{
    // 2D22 0021;	
    // (ⴢ) GEORGIAN SMALL LETTER HIE	[22BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D22, 0x0021 };
    uint32_t const ces[9] = { 0x22BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_059)
{
    // 10C2 0021;	
    // (Ⴢ) GEORGIAN CAPITAL LETTER HIE	[22BD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C2, 0x0021 };
    uint32_t const ces[9] = { 0x22BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_060)
{
    // 2D22 003F;	
    // (ⴢ) GEORGIAN SMALL LETTER HIE	[22BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D22, 0x003F };
    uint32_t const ces[9] = { 0x22BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_061)
{
    // 10C2 003F;	
    // (Ⴢ) GEORGIAN CAPITAL LETTER HIE	[22BD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C2, 0x003F };
    uint32_t const ces[9] = { 0x22BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_062)
{
    // 2D22 0061;	
    // (ⴢ) GEORGIAN SMALL LETTER HIE	[22BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D22, 0x0061 };
    uint32_t const ces[9] = { 0x22BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_063)
{
    // 2D22 0041;	
    // (ⴢ) GEORGIAN SMALL LETTER HIE	[22BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D22, 0x0041 };
    uint32_t const ces[9] = { 0x22BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_064)
{
    // 10C2 0061;	
    // (Ⴢ) GEORGIAN CAPITAL LETTER HIE	[22BD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C2, 0x0061 };
    uint32_t const ces[9] = { 0x22BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_065)
{
    // 10C2 0041;	
    // (Ⴢ) GEORGIAN CAPITAL LETTER HIE	[22BD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C2, 0x0041 };
    uint32_t const ces[9] = { 0x22BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_066)
{
    // 2D22 0062;	
    // (ⴢ) GEORGIAN SMALL LETTER HIE	[22BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D22, 0x0062 };
    uint32_t const ces[9] = { 0x22BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_067)
{
    // 10C2 0062;	
    // (Ⴢ) GEORGIAN CAPITAL LETTER HIE	[22BD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C2, 0x0062 };
    uint32_t const ces[9] = { 0x22BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_068)
{
    // 10DD 0021;	
    // (ო) GEORGIAN LETTER ON	[22BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DD, 0x0021 };
    uint32_t const ces[9] = { 0x22BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_069)
{
    // 10DD 003F;	
    // (ო) GEORGIAN LETTER ON	[22BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DD, 0x003F };
    uint32_t const ces[9] = { 0x22BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_070)
{
    // 10DD 0061;	
    // (ო) GEORGIAN LETTER ON	[22BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DD, 0x0061 };
    uint32_t const ces[9] = { 0x22BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_071)
{
    // 10DD 0041;	
    // (ო) GEORGIAN LETTER ON	[22BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DD, 0x0041 };
    uint32_t const ces[9] = { 0x22BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_072)
{
    // 10DD 0062;	
    // (ო) GEORGIAN LETTER ON	[22BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DD, 0x0062 };
    uint32_t const ces[9] = { 0x22BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_073)
{
    // 2D0D 0021;	
    // (ⴍ) GEORGIAN SMALL LETTER ON	[22BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0D, 0x0021 };
    uint32_t const ces[9] = { 0x22BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_074)
{
    // 10AD 0021;	
    // (Ⴍ) GEORGIAN CAPITAL LETTER ON	[22BF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AD, 0x0021 };
    uint32_t const ces[9] = { 0x22BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_075)
{
    // 2D0D 003F;	
    // (ⴍ) GEORGIAN SMALL LETTER ON	[22BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0D, 0x003F };
    uint32_t const ces[9] = { 0x22BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_076)
{
    // 10AD 003F;	
    // (Ⴍ) GEORGIAN CAPITAL LETTER ON	[22BF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AD, 0x003F };
    uint32_t const ces[9] = { 0x22BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_077)
{
    // 2D0D 0061;	
    // (ⴍ) GEORGIAN SMALL LETTER ON	[22BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0D, 0x0061 };
    uint32_t const ces[9] = { 0x22BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_078)
{
    // 2D0D 0041;	
    // (ⴍ) GEORGIAN SMALL LETTER ON	[22BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0D, 0x0041 };
    uint32_t const ces[9] = { 0x22BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_079)
{
    // 10AD 0061;	
    // (Ⴍ) GEORGIAN CAPITAL LETTER ON	[22BF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AD, 0x0061 };
    uint32_t const ces[9] = { 0x22BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_080)
{
    // 10AD 0041;	
    // (Ⴍ) GEORGIAN CAPITAL LETTER ON	[22BF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AD, 0x0041 };
    uint32_t const ces[9] = { 0x22BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_081)
{
    // 2D0D 0062;	
    // (ⴍ) GEORGIAN SMALL LETTER ON	[22BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0D, 0x0062 };
    uint32_t const ces[9] = { 0x22BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_082)
{
    // 10AD 0062;	
    // (Ⴍ) GEORGIAN CAPITAL LETTER ON	[22BF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AD, 0x0062 };
    uint32_t const ces[9] = { 0x22BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_083)
{
    // 10DE 0021;	
    // (პ) GEORGIAN LETTER PAR	[22C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DE, 0x0021 };
    uint32_t const ces[9] = { 0x22C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_084)
{
    // 10DE 003F;	
    // (პ) GEORGIAN LETTER PAR	[22C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DE, 0x003F };
    uint32_t const ces[9] = { 0x22C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_085)
{
    // 10DE 0061;	
    // (პ) GEORGIAN LETTER PAR	[22C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DE, 0x0061 };
    uint32_t const ces[9] = { 0x22C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_086)
{
    // 10DE 0041;	
    // (პ) GEORGIAN LETTER PAR	[22C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DE, 0x0041 };
    uint32_t const ces[9] = { 0x22C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_087)
{
    // 10DE 0062;	
    // (პ) GEORGIAN LETTER PAR	[22C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DE, 0x0062 };
    uint32_t const ces[9] = { 0x22C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_088)
{
    // 2D0E 0021;	
    // (ⴎ) GEORGIAN SMALL LETTER PAR	[22C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0E, 0x0021 };
    uint32_t const ces[9] = { 0x22C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_089)
{
    // 10AE 0021;	
    // (Ⴎ) GEORGIAN CAPITAL LETTER PAR	[22C1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AE, 0x0021 };
    uint32_t const ces[9] = { 0x22C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_090)
{
    // 2D0E 003F;	
    // (ⴎ) GEORGIAN SMALL LETTER PAR	[22C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0E, 0x003F };
    uint32_t const ces[9] = { 0x22C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_091)
{
    // 10AE 003F;	
    // (Ⴎ) GEORGIAN CAPITAL LETTER PAR	[22C1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AE, 0x003F };
    uint32_t const ces[9] = { 0x22C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_092)
{
    // 2D0E 0061;	
    // (ⴎ) GEORGIAN SMALL LETTER PAR	[22C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0E, 0x0061 };
    uint32_t const ces[9] = { 0x22C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_093)
{
    // 2D0E 0041;	
    // (ⴎ) GEORGIAN SMALL LETTER PAR	[22C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0E, 0x0041 };
    uint32_t const ces[9] = { 0x22C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_094)
{
    // 10AE 0061;	
    // (Ⴎ) GEORGIAN CAPITAL LETTER PAR	[22C1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AE, 0x0061 };
    uint32_t const ces[9] = { 0x22C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_095)
{
    // 10AE 0041;	
    // (Ⴎ) GEORGIAN CAPITAL LETTER PAR	[22C1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AE, 0x0041 };
    uint32_t const ces[9] = { 0x22C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_096)
{
    // 2D0E 0062;	
    // (ⴎ) GEORGIAN SMALL LETTER PAR	[22C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0E, 0x0062 };
    uint32_t const ces[9] = { 0x22C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_097)
{
    // 10AE 0062;	
    // (Ⴎ) GEORGIAN CAPITAL LETTER PAR	[22C1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AE, 0x0062 };
    uint32_t const ces[9] = { 0x22C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_098)
{
    // 10DF 0021;	
    // (ჟ) GEORGIAN LETTER ZHAR	[22C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DF, 0x0021 };
    uint32_t const ces[9] = { 0x22C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_099)
{
    // 10DF 003F;	
    // (ჟ) GEORGIAN LETTER ZHAR	[22C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DF, 0x003F };
    uint32_t const ces[9] = { 0x22C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_100)
{
    // 10DF 0061;	
    // (ჟ) GEORGIAN LETTER ZHAR	[22C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DF, 0x0061 };
    uint32_t const ces[9] = { 0x22C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_101)
{
    // 10DF 0041;	
    // (ჟ) GEORGIAN LETTER ZHAR	[22C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10DF, 0x0041 };
    uint32_t const ces[9] = { 0x22C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_102)
{
    // 10DF 0062;	
    // (ჟ) GEORGIAN LETTER ZHAR	[22C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10DF, 0x0062 };
    uint32_t const ces[9] = { 0x22C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_103)
{
    // 2D0F 0021;	
    // (ⴏ) GEORGIAN SMALL LETTER ZHAR	[22C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0F, 0x0021 };
    uint32_t const ces[9] = { 0x22C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_104)
{
    // 10AF 0021;	
    // (Ⴏ) GEORGIAN CAPITAL LETTER ZHAR	[22C3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AF, 0x0021 };
    uint32_t const ces[9] = { 0x22C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_105)
{
    // 2D0F 003F;	
    // (ⴏ) GEORGIAN SMALL LETTER ZHAR	[22C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0F, 0x003F };
    uint32_t const ces[9] = { 0x22C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_106)
{
    // 10AF 003F;	
    // (Ⴏ) GEORGIAN CAPITAL LETTER ZHAR	[22C3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AF, 0x003F };
    uint32_t const ces[9] = { 0x22C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_107)
{
    // 2D0F 0061;	
    // (ⴏ) GEORGIAN SMALL LETTER ZHAR	[22C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0F, 0x0061 };
    uint32_t const ces[9] = { 0x22C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_108)
{
    // 2D0F 0041;	
    // (ⴏ) GEORGIAN SMALL LETTER ZHAR	[22C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D0F, 0x0041 };
    uint32_t const ces[9] = { 0x22C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_109)
{
    // 10AF 0061;	
    // (Ⴏ) GEORGIAN CAPITAL LETTER ZHAR	[22C3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AF, 0x0061 };
    uint32_t const ces[9] = { 0x22C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_110)
{
    // 10AF 0041;	
    // (Ⴏ) GEORGIAN CAPITAL LETTER ZHAR	[22C3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10AF, 0x0041 };
    uint32_t const ces[9] = { 0x22C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_111)
{
    // 2D0F 0062;	
    // (ⴏ) GEORGIAN SMALL LETTER ZHAR	[22C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D0F, 0x0062 };
    uint32_t const ces[9] = { 0x22C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_112)
{
    // 10AF 0062;	
    // (Ⴏ) GEORGIAN CAPITAL LETTER ZHAR	[22C3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10AF, 0x0062 };
    uint32_t const ces[9] = { 0x22C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_113)
{
    // 10E0 0021;	
    // (რ) GEORGIAN LETTER RAE	[22C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E0, 0x0021 };
    uint32_t const ces[9] = { 0x22C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_114)
{
    // 10E0 003F;	
    // (რ) GEORGIAN LETTER RAE	[22C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E0, 0x003F };
    uint32_t const ces[9] = { 0x22C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_115)
{
    // 10E0 0061;	
    // (რ) GEORGIAN LETTER RAE	[22C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E0, 0x0061 };
    uint32_t const ces[9] = { 0x22C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_116)
{
    // 10E0 0041;	
    // (რ) GEORGIAN LETTER RAE	[22C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E0, 0x0041 };
    uint32_t const ces[9] = { 0x22C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_117)
{
    // 10E0 0062;	
    // (რ) GEORGIAN LETTER RAE	[22C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E0, 0x0062 };
    uint32_t const ces[9] = { 0x22C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_118)
{
    // 2D10 0021;	
    // (ⴐ) GEORGIAN SMALL LETTER RAE	[22C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D10, 0x0021 };
    uint32_t const ces[9] = { 0x22C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_119)
{
    // 10B0 0021;	
    // (Ⴐ) GEORGIAN CAPITAL LETTER RAE	[22C5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B0, 0x0021 };
    uint32_t const ces[9] = { 0x22C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_120)
{
    // 2D10 003F;	
    // (ⴐ) GEORGIAN SMALL LETTER RAE	[22C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D10, 0x003F };
    uint32_t const ces[9] = { 0x22C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_121)
{
    // 10B0 003F;	
    // (Ⴐ) GEORGIAN CAPITAL LETTER RAE	[22C5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B0, 0x003F };
    uint32_t const ces[9] = { 0x22C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_122)
{
    // 2D10 0061;	
    // (ⴐ) GEORGIAN SMALL LETTER RAE	[22C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D10, 0x0061 };
    uint32_t const ces[9] = { 0x22C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_123)
{
    // 2D10 0041;	
    // (ⴐ) GEORGIAN SMALL LETTER RAE	[22C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D10, 0x0041 };
    uint32_t const ces[9] = { 0x22C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_124)
{
    // 10B0 0061;	
    // (Ⴐ) GEORGIAN CAPITAL LETTER RAE	[22C5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B0, 0x0061 };
    uint32_t const ces[9] = { 0x22C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_125)
{
    // 10B0 0041;	
    // (Ⴐ) GEORGIAN CAPITAL LETTER RAE	[22C5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B0, 0x0041 };
    uint32_t const ces[9] = { 0x22C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_126)
{
    // 2D10 0062;	
    // (ⴐ) GEORGIAN SMALL LETTER RAE	[22C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D10, 0x0062 };
    uint32_t const ces[9] = { 0x22C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_127)
{
    // 10B0 0062;	
    // (Ⴐ) GEORGIAN CAPITAL LETTER RAE	[22C5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B0, 0x0062 };
    uint32_t const ces[9] = { 0x22C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_128)
{
    // 10E1 0021;	
    // (ს) GEORGIAN LETTER SAN	[22C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E1, 0x0021 };
    uint32_t const ces[9] = { 0x22C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_129)
{
    // 10E1 003F;	
    // (ს) GEORGIAN LETTER SAN	[22C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E1, 0x003F };
    uint32_t const ces[9] = { 0x22C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_130)
{
    // 10E1 0061;	
    // (ს) GEORGIAN LETTER SAN	[22C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E1, 0x0061 };
    uint32_t const ces[9] = { 0x22C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_131)
{
    // 10E1 0041;	
    // (ს) GEORGIAN LETTER SAN	[22C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E1, 0x0041 };
    uint32_t const ces[9] = { 0x22C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_132)
{
    // 10E1 0062;	
    // (ს) GEORGIAN LETTER SAN	[22C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E1, 0x0062 };
    uint32_t const ces[9] = { 0x22C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_133)
{
    // 2D11 0021;	
    // (ⴑ) GEORGIAN SMALL LETTER SAN	[22C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D11, 0x0021 };
    uint32_t const ces[9] = { 0x22C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_134)
{
    // 10B1 0021;	
    // (Ⴑ) GEORGIAN CAPITAL LETTER SAN	[22C7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B1, 0x0021 };
    uint32_t const ces[9] = { 0x22C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_135)
{
    // 2D11 003F;	
    // (ⴑ) GEORGIAN SMALL LETTER SAN	[22C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D11, 0x003F };
    uint32_t const ces[9] = { 0x22C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_136)
{
    // 10B1 003F;	
    // (Ⴑ) GEORGIAN CAPITAL LETTER SAN	[22C7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B1, 0x003F };
    uint32_t const ces[9] = { 0x22C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_137)
{
    // 2D11 0061;	
    // (ⴑ) GEORGIAN SMALL LETTER SAN	[22C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D11, 0x0061 };
    uint32_t const ces[9] = { 0x22C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_138)
{
    // 2D11 0041;	
    // (ⴑ) GEORGIAN SMALL LETTER SAN	[22C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D11, 0x0041 };
    uint32_t const ces[9] = { 0x22C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_139)
{
    // 10B1 0061;	
    // (Ⴑ) GEORGIAN CAPITAL LETTER SAN	[22C7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B1, 0x0061 };
    uint32_t const ces[9] = { 0x22C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_140)
{
    // 10B1 0041;	
    // (Ⴑ) GEORGIAN CAPITAL LETTER SAN	[22C7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B1, 0x0041 };
    uint32_t const ces[9] = { 0x22C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_141)
{
    // 2D11 0062;	
    // (ⴑ) GEORGIAN SMALL LETTER SAN	[22C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D11, 0x0062 };
    uint32_t const ces[9] = { 0x22C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_142)
{
    // 10B1 0062;	
    // (Ⴑ) GEORGIAN CAPITAL LETTER SAN	[22C7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B1, 0x0062 };
    uint32_t const ces[9] = { 0x22C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_143)
{
    // 10E2 0021;	
    // (ტ) GEORGIAN LETTER TAR	[22C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E2, 0x0021 };
    uint32_t const ces[9] = { 0x22C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_144)
{
    // 10E2 003F;	
    // (ტ) GEORGIAN LETTER TAR	[22C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E2, 0x003F };
    uint32_t const ces[9] = { 0x22C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_145)
{
    // 10E2 0061;	
    // (ტ) GEORGIAN LETTER TAR	[22C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E2, 0x0061 };
    uint32_t const ces[9] = { 0x22C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_146)
{
    // 10E2 0041;	
    // (ტ) GEORGIAN LETTER TAR	[22C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E2, 0x0041 };
    uint32_t const ces[9] = { 0x22C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_147)
{
    // 10E2 0062;	
    // (ტ) GEORGIAN LETTER TAR	[22C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E2, 0x0062 };
    uint32_t const ces[9] = { 0x22C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_148)
{
    // 2D12 0021;	
    // (ⴒ) GEORGIAN SMALL LETTER TAR	[22C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D12, 0x0021 };
    uint32_t const ces[9] = { 0x22C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_149)
{
    // 10B2 0021;	
    // (Ⴒ) GEORGIAN CAPITAL LETTER TAR	[22C9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B2, 0x0021 };
    uint32_t const ces[9] = { 0x22C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_150)
{
    // 2D12 003F;	
    // (ⴒ) GEORGIAN SMALL LETTER TAR	[22C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D12, 0x003F };
    uint32_t const ces[9] = { 0x22C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_151)
{
    // 10B2 003F;	
    // (Ⴒ) GEORGIAN CAPITAL LETTER TAR	[22C9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B2, 0x003F };
    uint32_t const ces[9] = { 0x22C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_152)
{
    // 2D12 0061;	
    // (ⴒ) GEORGIAN SMALL LETTER TAR	[22C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D12, 0x0061 };
    uint32_t const ces[9] = { 0x22C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_153)
{
    // 2D12 0041;	
    // (ⴒ) GEORGIAN SMALL LETTER TAR	[22C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D12, 0x0041 };
    uint32_t const ces[9] = { 0x22C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_154)
{
    // 10B2 0061;	
    // (Ⴒ) GEORGIAN CAPITAL LETTER TAR	[22C9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B2, 0x0061 };
    uint32_t const ces[9] = { 0x22C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_155)
{
    // 10B2 0041;	
    // (Ⴒ) GEORGIAN CAPITAL LETTER TAR	[22C9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B2, 0x0041 };
    uint32_t const ces[9] = { 0x22C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_156)
{
    // 2D12 0062;	
    // (ⴒ) GEORGIAN SMALL LETTER TAR	[22C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D12, 0x0062 };
    uint32_t const ces[9] = { 0x22C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_157)
{
    // 10B2 0062;	
    // (Ⴒ) GEORGIAN CAPITAL LETTER TAR	[22C9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B2, 0x0062 };
    uint32_t const ces[9] = { 0x22C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_158)
{
    // 10F3 0021;	
    // (ჳ) GEORGIAN LETTER WE	[22CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F3, 0x0021 };
    uint32_t const ces[9] = { 0x22CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_159)
{
    // 10F3 003F;	
    // (ჳ) GEORGIAN LETTER WE	[22CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F3, 0x003F };
    uint32_t const ces[9] = { 0x22CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_160)
{
    // 10F3 0061;	
    // (ჳ) GEORGIAN LETTER WE	[22CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F3, 0x0061 };
    uint32_t const ces[9] = { 0x22CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_161)
{
    // 10F3 0041;	
    // (ჳ) GEORGIAN LETTER WE	[22CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F3, 0x0041 };
    uint32_t const ces[9] = { 0x22CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_162)
{
    // 10F3 0062;	
    // (ჳ) GEORGIAN LETTER WE	[22CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F3, 0x0062 };
    uint32_t const ces[9] = { 0x22CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_163)
{
    // 2D23 0021;	
    // (ⴣ) GEORGIAN SMALL LETTER WE	[22CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D23, 0x0021 };
    uint32_t const ces[9] = { 0x22CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_164)
{
    // 10C3 0021;	
    // (Ⴣ) GEORGIAN CAPITAL LETTER WE	[22CB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C3, 0x0021 };
    uint32_t const ces[9] = { 0x22CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_165)
{
    // 2D23 003F;	
    // (ⴣ) GEORGIAN SMALL LETTER WE	[22CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D23, 0x003F };
    uint32_t const ces[9] = { 0x22CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_166)
{
    // 10C3 003F;	
    // (Ⴣ) GEORGIAN CAPITAL LETTER WE	[22CB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C3, 0x003F };
    uint32_t const ces[9] = { 0x22CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_167)
{
    // 2D23 0061;	
    // (ⴣ) GEORGIAN SMALL LETTER WE	[22CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D23, 0x0061 };
    uint32_t const ces[9] = { 0x22CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_168)
{
    // 2D23 0041;	
    // (ⴣ) GEORGIAN SMALL LETTER WE	[22CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D23, 0x0041 };
    uint32_t const ces[9] = { 0x22CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_169)
{
    // 10C3 0061;	
    // (Ⴣ) GEORGIAN CAPITAL LETTER WE	[22CB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C3, 0x0061 };
    uint32_t const ces[9] = { 0x22CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_170)
{
    // 10C3 0041;	
    // (Ⴣ) GEORGIAN CAPITAL LETTER WE	[22CB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C3, 0x0041 };
    uint32_t const ces[9] = { 0x22CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_171)
{
    // 2D23 0062;	
    // (ⴣ) GEORGIAN SMALL LETTER WE	[22CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D23, 0x0062 };
    uint32_t const ces[9] = { 0x22CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_172)
{
    // 10C3 0062;	
    // (Ⴣ) GEORGIAN CAPITAL LETTER WE	[22CB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C3, 0x0062 };
    uint32_t const ces[9] = { 0x22CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_173)
{
    // 10E3 0021;	
    // (უ) GEORGIAN LETTER UN	[22CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E3, 0x0021 };
    uint32_t const ces[9] = { 0x22CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_174)
{
    // 10E3 003F;	
    // (უ) GEORGIAN LETTER UN	[22CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E3, 0x003F };
    uint32_t const ces[9] = { 0x22CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_175)
{
    // 10E3 0061;	
    // (უ) GEORGIAN LETTER UN	[22CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E3, 0x0061 };
    uint32_t const ces[9] = { 0x22CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_176)
{
    // 10E3 0041;	
    // (უ) GEORGIAN LETTER UN	[22CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E3, 0x0041 };
    uint32_t const ces[9] = { 0x22CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_177)
{
    // 10E3 0062;	
    // (უ) GEORGIAN LETTER UN	[22CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E3, 0x0062 };
    uint32_t const ces[9] = { 0x22CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_178)
{
    // 2D13 0021;	
    // (ⴓ) GEORGIAN SMALL LETTER UN	[22CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D13, 0x0021 };
    uint32_t const ces[9] = { 0x22CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_179)
{
    // 10B3 0021;	
    // (Ⴓ) GEORGIAN CAPITAL LETTER UN	[22CD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B3, 0x0021 };
    uint32_t const ces[9] = { 0x22CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_180)
{
    // 2D13 003F;	
    // (ⴓ) GEORGIAN SMALL LETTER UN	[22CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D13, 0x003F };
    uint32_t const ces[9] = { 0x22CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_181)
{
    // 10B3 003F;	
    // (Ⴓ) GEORGIAN CAPITAL LETTER UN	[22CD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B3, 0x003F };
    uint32_t const ces[9] = { 0x22CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_182)
{
    // 2D13 0061;	
    // (ⴓ) GEORGIAN SMALL LETTER UN	[22CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D13, 0x0061 };
    uint32_t const ces[9] = { 0x22CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_183)
{
    // 2D13 0041;	
    // (ⴓ) GEORGIAN SMALL LETTER UN	[22CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D13, 0x0041 };
    uint32_t const ces[9] = { 0x22CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_184)
{
    // 10B3 0061;	
    // (Ⴓ) GEORGIAN CAPITAL LETTER UN	[22CD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B3, 0x0061 };
    uint32_t const ces[9] = { 0x22CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_185)
{
    // 10B3 0041;	
    // (Ⴓ) GEORGIAN CAPITAL LETTER UN	[22CD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B3, 0x0041 };
    uint32_t const ces[9] = { 0x22CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_186)
{
    // 2D13 0062;	
    // (ⴓ) GEORGIAN SMALL LETTER UN	[22CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D13, 0x0062 };
    uint32_t const ces[9] = { 0x22CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_187)
{
    // 10B3 0062;	
    // (Ⴓ) GEORGIAN CAPITAL LETTER UN	[22CD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B3, 0x0062 };
    uint32_t const ces[9] = { 0x22CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_188)
{
    // 10E4 0021;	
    // (ფ) GEORGIAN LETTER PHAR	[22CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E4, 0x0021 };
    uint32_t const ces[9] = { 0x22CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_189)
{
    // 10E4 003F;	
    // (ფ) GEORGIAN LETTER PHAR	[22CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E4, 0x003F };
    uint32_t const ces[9] = { 0x22CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_190)
{
    // 10E4 0061;	
    // (ფ) GEORGIAN LETTER PHAR	[22CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E4, 0x0061 };
    uint32_t const ces[9] = { 0x22CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_191)
{
    // 10E4 0041;	
    // (ფ) GEORGIAN LETTER PHAR	[22CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E4, 0x0041 };
    uint32_t const ces[9] = { 0x22CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_192)
{
    // 10E4 0062;	
    // (ფ) GEORGIAN LETTER PHAR	[22CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E4, 0x0062 };
    uint32_t const ces[9] = { 0x22CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_193)
{
    // 2D14 0021;	
    // (ⴔ) GEORGIAN SMALL LETTER PHAR	[22CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D14, 0x0021 };
    uint32_t const ces[9] = { 0x22CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_194)
{
    // 10B4 0021;	
    // (Ⴔ) GEORGIAN CAPITAL LETTER PHAR	[22CF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B4, 0x0021 };
    uint32_t const ces[9] = { 0x22CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_195)
{
    // 2D14 003F;	
    // (ⴔ) GEORGIAN SMALL LETTER PHAR	[22CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D14, 0x003F };
    uint32_t const ces[9] = { 0x22CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_196)
{
    // 10B4 003F;	
    // (Ⴔ) GEORGIAN CAPITAL LETTER PHAR	[22CF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B4, 0x003F };
    uint32_t const ces[9] = { 0x22CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_197)
{
    // 2D14 0061;	
    // (ⴔ) GEORGIAN SMALL LETTER PHAR	[22CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D14, 0x0061 };
    uint32_t const ces[9] = { 0x22CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_198)
{
    // 2D14 0041;	
    // (ⴔ) GEORGIAN SMALL LETTER PHAR	[22CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D14, 0x0041 };
    uint32_t const ces[9] = { 0x22CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_199)
{
    // 10B4 0061;	
    // (Ⴔ) GEORGIAN CAPITAL LETTER PHAR	[22CF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B4, 0x0061 };
    uint32_t const ces[9] = { 0x22CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_200)
{
    // 10B4 0041;	
    // (Ⴔ) GEORGIAN CAPITAL LETTER PHAR	[22CF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B4, 0x0041 };
    uint32_t const ces[9] = { 0x22CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_201)
{
    // 2D14 0062;	
    // (ⴔ) GEORGIAN SMALL LETTER PHAR	[22CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D14, 0x0062 };
    uint32_t const ces[9] = { 0x22CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_202)
{
    // 10B4 0062;	
    // (Ⴔ) GEORGIAN CAPITAL LETTER PHAR	[22CF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B4, 0x0062 };
    uint32_t const ces[9] = { 0x22CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_203)
{
    // 10E5 0021;	
    // (ქ) GEORGIAN LETTER KHAR	[22D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E5, 0x0021 };
    uint32_t const ces[9] = { 0x22D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_204)
{
    // 10E5 003F;	
    // (ქ) GEORGIAN LETTER KHAR	[22D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E5, 0x003F };
    uint32_t const ces[9] = { 0x22D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_205)
{
    // 10E5 0061;	
    // (ქ) GEORGIAN LETTER KHAR	[22D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E5, 0x0061 };
    uint32_t const ces[9] = { 0x22D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_206)
{
    // 10E5 0041;	
    // (ქ) GEORGIAN LETTER KHAR	[22D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E5, 0x0041 };
    uint32_t const ces[9] = { 0x22D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_207)
{
    // 10E5 0062;	
    // (ქ) GEORGIAN LETTER KHAR	[22D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E5, 0x0062 };
    uint32_t const ces[9] = { 0x22D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_208)
{
    // 2D15 0021;	
    // (ⴕ) GEORGIAN SMALL LETTER KHAR	[22D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D15, 0x0021 };
    uint32_t const ces[9] = { 0x22D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_209)
{
    // 10B5 0021;	
    // (Ⴕ) GEORGIAN CAPITAL LETTER KHAR	[22D1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B5, 0x0021 };
    uint32_t const ces[9] = { 0x22D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_210)
{
    // 2D15 003F;	
    // (ⴕ) GEORGIAN SMALL LETTER KHAR	[22D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D15, 0x003F };
    uint32_t const ces[9] = { 0x22D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_211)
{
    // 10B5 003F;	
    // (Ⴕ) GEORGIAN CAPITAL LETTER KHAR	[22D1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B5, 0x003F };
    uint32_t const ces[9] = { 0x22D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_212)
{
    // 2D15 0061;	
    // (ⴕ) GEORGIAN SMALL LETTER KHAR	[22D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D15, 0x0061 };
    uint32_t const ces[9] = { 0x22D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_213)
{
    // 2D15 0041;	
    // (ⴕ) GEORGIAN SMALL LETTER KHAR	[22D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D15, 0x0041 };
    uint32_t const ces[9] = { 0x22D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_214)
{
    // 10B5 0061;	
    // (Ⴕ) GEORGIAN CAPITAL LETTER KHAR	[22D1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B5, 0x0061 };
    uint32_t const ces[9] = { 0x22D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_215)
{
    // 10B5 0041;	
    // (Ⴕ) GEORGIAN CAPITAL LETTER KHAR	[22D1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B5, 0x0041 };
    uint32_t const ces[9] = { 0x22D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_216)
{
    // 2D15 0062;	
    // (ⴕ) GEORGIAN SMALL LETTER KHAR	[22D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D15, 0x0062 };
    uint32_t const ces[9] = { 0x22D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_217)
{
    // 10B5 0062;	
    // (Ⴕ) GEORGIAN CAPITAL LETTER KHAR	[22D1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B5, 0x0062 };
    uint32_t const ces[9] = { 0x22D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_218)
{
    // 10E6 0021;	
    // (ღ) GEORGIAN LETTER GHAN	[22D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6, 0x0021 };
    uint32_t const ces[9] = { 0x22D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_219)
{
    // 10E6 003F;	
    // (ღ) GEORGIAN LETTER GHAN	[22D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6, 0x003F };
    uint32_t const ces[9] = { 0x22D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_220)
{
    // 10E6 0061;	
    // (ღ) GEORGIAN LETTER GHAN	[22D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6, 0x0061 };
    uint32_t const ces[9] = { 0x22D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_221)
{
    // 10E6 0041;	
    // (ღ) GEORGIAN LETTER GHAN	[22D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6, 0x0041 };
    uint32_t const ces[9] = { 0x22D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_222)
{
    // 10E6 0062;	
    // (ღ) GEORGIAN LETTER GHAN	[22D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6, 0x0062 };
    uint32_t const ces[9] = { 0x22D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_223)
{
    // 2D16 0021;	
    // (ⴖ) GEORGIAN SMALL LETTER GHAN	[22D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D16, 0x0021 };
    uint32_t const ces[9] = { 0x22D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_224)
{
    // 10B6 0021;	
    // (Ⴖ) GEORGIAN CAPITAL LETTER GHAN	[22D3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B6, 0x0021 };
    uint32_t const ces[9] = { 0x22D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_225)
{
    // 2D16 003F;	
    // (ⴖ) GEORGIAN SMALL LETTER GHAN	[22D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D16, 0x003F };
    uint32_t const ces[9] = { 0x22D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_226)
{
    // 10B6 003F;	
    // (Ⴖ) GEORGIAN CAPITAL LETTER GHAN	[22D3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B6, 0x003F };
    uint32_t const ces[9] = { 0x22D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_227)
{
    // 2D16 0061;	
    // (ⴖ) GEORGIAN SMALL LETTER GHAN	[22D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D16, 0x0061 };
    uint32_t const ces[9] = { 0x22D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_228)
{
    // 2D16 0041;	
    // (ⴖ) GEORGIAN SMALL LETTER GHAN	[22D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D16, 0x0041 };
    uint32_t const ces[9] = { 0x22D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_229)
{
    // 10B6 0061;	
    // (Ⴖ) GEORGIAN CAPITAL LETTER GHAN	[22D3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B6, 0x0061 };
    uint32_t const ces[9] = { 0x22D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_230)
{
    // 10B6 0041;	
    // (Ⴖ) GEORGIAN CAPITAL LETTER GHAN	[22D3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B6, 0x0041 };
    uint32_t const ces[9] = { 0x22D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_231)
{
    // 2D16 0062;	
    // (ⴖ) GEORGIAN SMALL LETTER GHAN	[22D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D16, 0x0062 };
    uint32_t const ces[9] = { 0x22D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_232)
{
    // 10B6 0062;	
    // (Ⴖ) GEORGIAN CAPITAL LETTER GHAN	[22D3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B6, 0x0062 };
    uint32_t const ces[9] = { 0x22D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_233)
{
    // 10E7 0021;	
    // (ყ) GEORGIAN LETTER QAR	[22D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7, 0x0021 };
    uint32_t const ces[9] = { 0x22D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_234)
{
    // 10E7 003F;	
    // (ყ) GEORGIAN LETTER QAR	[22D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7, 0x003F };
    uint32_t const ces[9] = { 0x22D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_235)
{
    // 10E7 0061;	
    // (ყ) GEORGIAN LETTER QAR	[22D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7, 0x0061 };
    uint32_t const ces[9] = { 0x22D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_236)
{
    // 10E7 0041;	
    // (ყ) GEORGIAN LETTER QAR	[22D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7, 0x0041 };
    uint32_t const ces[9] = { 0x22D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_237)
{
    // 10E7 0062;	
    // (ყ) GEORGIAN LETTER QAR	[22D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7, 0x0062 };
    uint32_t const ces[9] = { 0x22D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_238)
{
    // 2D17 0021;	
    // (ⴗ) GEORGIAN SMALL LETTER QAR	[22D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D17, 0x0021 };
    uint32_t const ces[9] = { 0x22D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_239)
{
    // 10B7 0021;	
    // (Ⴗ) GEORGIAN CAPITAL LETTER QAR	[22D5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B7, 0x0021 };
    uint32_t const ces[9] = { 0x22D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_240)
{
    // 2D17 003F;	
    // (ⴗ) GEORGIAN SMALL LETTER QAR	[22D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D17, 0x003F };
    uint32_t const ces[9] = { 0x22D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_241)
{
    // 10B7 003F;	
    // (Ⴗ) GEORGIAN CAPITAL LETTER QAR	[22D5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B7, 0x003F };
    uint32_t const ces[9] = { 0x22D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_242)
{
    // 2D17 0061;	
    // (ⴗ) GEORGIAN SMALL LETTER QAR	[22D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D17, 0x0061 };
    uint32_t const ces[9] = { 0x22D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_243)
{
    // 2D17 0041;	
    // (ⴗ) GEORGIAN SMALL LETTER QAR	[22D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D17, 0x0041 };
    uint32_t const ces[9] = { 0x22D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_244)
{
    // 10B7 0061;	
    // (Ⴗ) GEORGIAN CAPITAL LETTER QAR	[22D5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B7, 0x0061 };
    uint32_t const ces[9] = { 0x22D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_245)
{
    // 10B7 0041;	
    // (Ⴗ) GEORGIAN CAPITAL LETTER QAR	[22D5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B7, 0x0041 };
    uint32_t const ces[9] = { 0x22D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_246)
{
    // 2D17 0062;	
    // (ⴗ) GEORGIAN SMALL LETTER QAR	[22D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D17, 0x0062 };
    uint32_t const ces[9] = { 0x22D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_247)
{
    // 10B7 0062;	
    // (Ⴗ) GEORGIAN CAPITAL LETTER QAR	[22D5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B7, 0x0062 };
    uint32_t const ces[9] = { 0x22D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_248)
{
    // 10E8 0021;	
    // (შ) GEORGIAN LETTER SHIN	[22D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E8, 0x0021 };
    uint32_t const ces[9] = { 0x22D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_249)
{
    // 10E8 003F;	
    // (შ) GEORGIAN LETTER SHIN	[22D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E8, 0x003F };
    uint32_t const ces[9] = { 0x22D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_250)
{
    // 10E8 0061;	
    // (შ) GEORGIAN LETTER SHIN	[22D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E8, 0x0061 };
    uint32_t const ces[9] = { 0x22D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_251)
{
    // 10E8 0041;	
    // (შ) GEORGIAN LETTER SHIN	[22D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E8, 0x0041 };
    uint32_t const ces[9] = { 0x22D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_252)
{
    // 10E8 0062;	
    // (შ) GEORGIAN LETTER SHIN	[22D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E8, 0x0062 };
    uint32_t const ces[9] = { 0x22D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_253)
{
    // 2D18 0021;	
    // (ⴘ) GEORGIAN SMALL LETTER SHIN	[22D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D18, 0x0021 };
    uint32_t const ces[9] = { 0x22D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_254)
{
    // 10B8 0021;	
    // (Ⴘ) GEORGIAN CAPITAL LETTER SHIN	[22D7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B8, 0x0021 };
    uint32_t const ces[9] = { 0x22D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_255)
{
    // 2D18 003F;	
    // (ⴘ) GEORGIAN SMALL LETTER SHIN	[22D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D18, 0x003F };
    uint32_t const ces[9] = { 0x22D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_256)
{
    // 10B8 003F;	
    // (Ⴘ) GEORGIAN CAPITAL LETTER SHIN	[22D7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B8, 0x003F };
    uint32_t const ces[9] = { 0x22D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_257)
{
    // 2D18 0061;	
    // (ⴘ) GEORGIAN SMALL LETTER SHIN	[22D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D18, 0x0061 };
    uint32_t const ces[9] = { 0x22D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_258)
{
    // 2D18 0041;	
    // (ⴘ) GEORGIAN SMALL LETTER SHIN	[22D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D18, 0x0041 };
    uint32_t const ces[9] = { 0x22D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_259)
{
    // 10B8 0061;	
    // (Ⴘ) GEORGIAN CAPITAL LETTER SHIN	[22D7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B8, 0x0061 };
    uint32_t const ces[9] = { 0x22D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_260)
{
    // 10B8 0041;	
    // (Ⴘ) GEORGIAN CAPITAL LETTER SHIN	[22D7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B8, 0x0041 };
    uint32_t const ces[9] = { 0x22D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_261)
{
    // 2D18 0062;	
    // (ⴘ) GEORGIAN SMALL LETTER SHIN	[22D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D18, 0x0062 };
    uint32_t const ces[9] = { 0x22D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_262)
{
    // 10B8 0062;	
    // (Ⴘ) GEORGIAN CAPITAL LETTER SHIN	[22D7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B8, 0x0062 };
    uint32_t const ces[9] = { 0x22D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_263)
{
    // 10E9 0021;	
    // (ჩ) GEORGIAN LETTER CHIN	[22D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E9, 0x0021 };
    uint32_t const ces[9] = { 0x22D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_264)
{
    // 10E9 003F;	
    // (ჩ) GEORGIAN LETTER CHIN	[22D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E9, 0x003F };
    uint32_t const ces[9] = { 0x22D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_265)
{
    // 10E9 0061;	
    // (ჩ) GEORGIAN LETTER CHIN	[22D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E9, 0x0061 };
    uint32_t const ces[9] = { 0x22D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_266)
{
    // 10E9 0041;	
    // (ჩ) GEORGIAN LETTER CHIN	[22D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E9, 0x0041 };
    uint32_t const ces[9] = { 0x22D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_267)
{
    // 10E9 0062;	
    // (ჩ) GEORGIAN LETTER CHIN	[22D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E9, 0x0062 };
    uint32_t const ces[9] = { 0x22D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_268)
{
    // 2D19 0021;	
    // (ⴙ) GEORGIAN SMALL LETTER CHIN	[22D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D19, 0x0021 };
    uint32_t const ces[9] = { 0x22D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_269)
{
    // 10B9 0021;	
    // (Ⴙ) GEORGIAN CAPITAL LETTER CHIN	[22D9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B9, 0x0021 };
    uint32_t const ces[9] = { 0x22D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_270)
{
    // 2D19 003F;	
    // (ⴙ) GEORGIAN SMALL LETTER CHIN	[22D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D19, 0x003F };
    uint32_t const ces[9] = { 0x22D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_271)
{
    // 10B9 003F;	
    // (Ⴙ) GEORGIAN CAPITAL LETTER CHIN	[22D9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B9, 0x003F };
    uint32_t const ces[9] = { 0x22D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_272)
{
    // 2D19 0061;	
    // (ⴙ) GEORGIAN SMALL LETTER CHIN	[22D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D19, 0x0061 };
    uint32_t const ces[9] = { 0x22D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_273)
{
    // 2D19 0041;	
    // (ⴙ) GEORGIAN SMALL LETTER CHIN	[22D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D19, 0x0041 };
    uint32_t const ces[9] = { 0x22D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_274)
{
    // 10B9 0061;	
    // (Ⴙ) GEORGIAN CAPITAL LETTER CHIN	[22D9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B9, 0x0061 };
    uint32_t const ces[9] = { 0x22D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_275)
{
    // 10B9 0041;	
    // (Ⴙ) GEORGIAN CAPITAL LETTER CHIN	[22D9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10B9, 0x0041 };
    uint32_t const ces[9] = { 0x22D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_276)
{
    // 2D19 0062;	
    // (ⴙ) GEORGIAN SMALL LETTER CHIN	[22D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D19, 0x0062 };
    uint32_t const ces[9] = { 0x22D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_277)
{
    // 10B9 0062;	
    // (Ⴙ) GEORGIAN CAPITAL LETTER CHIN	[22D9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10B9, 0x0062 };
    uint32_t const ces[9] = { 0x22D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_278)
{
    // 10EA 0021;	
    // (ც) GEORGIAN LETTER CAN	[22DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EA, 0x0021 };
    uint32_t const ces[9] = { 0x22DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_279)
{
    // 10EA 003F;	
    // (ც) GEORGIAN LETTER CAN	[22DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EA, 0x003F };
    uint32_t const ces[9] = { 0x22DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_280)
{
    // 10EA 0061;	
    // (ც) GEORGIAN LETTER CAN	[22DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EA, 0x0061 };
    uint32_t const ces[9] = { 0x22DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_281)
{
    // 10EA 0041;	
    // (ც) GEORGIAN LETTER CAN	[22DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10EA, 0x0041 };
    uint32_t const ces[9] = { 0x22DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_282)
{
    // 10EA 0062;	
    // (ც) GEORGIAN LETTER CAN	[22DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EA, 0x0062 };
    uint32_t const ces[9] = { 0x22DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_283)
{
    // 2D1A 0021;	
    // (ⴚ) GEORGIAN SMALL LETTER CAN	[22DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1A, 0x0021 };
    uint32_t const ces[9] = { 0x22DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_284)
{
    // 10BA 0021;	
    // (Ⴚ) GEORGIAN CAPITAL LETTER CAN	[22DB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BA, 0x0021 };
    uint32_t const ces[9] = { 0x22DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_285)
{
    // 2D1A 003F;	
    // (ⴚ) GEORGIAN SMALL LETTER CAN	[22DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1A, 0x003F };
    uint32_t const ces[9] = { 0x22DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_286)
{
    // 10BA 003F;	
    // (Ⴚ) GEORGIAN CAPITAL LETTER CAN	[22DB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BA, 0x003F };
    uint32_t const ces[9] = { 0x22DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_287)
{
    // 2D1A 0061;	
    // (ⴚ) GEORGIAN SMALL LETTER CAN	[22DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1A, 0x0061 };
    uint32_t const ces[9] = { 0x22DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_288)
{
    // 2D1A 0041;	
    // (ⴚ) GEORGIAN SMALL LETTER CAN	[22DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1A, 0x0041 };
    uint32_t const ces[9] = { 0x22DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_289)
{
    // 10BA 0061;	
    // (Ⴚ) GEORGIAN CAPITAL LETTER CAN	[22DB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BA, 0x0061 };
    uint32_t const ces[9] = { 0x22DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_290)
{
    // 10BA 0041;	
    // (Ⴚ) GEORGIAN CAPITAL LETTER CAN	[22DB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BA, 0x0041 };
    uint32_t const ces[9] = { 0x22DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_291)
{
    // 2D1A 0062;	
    // (ⴚ) GEORGIAN SMALL LETTER CAN	[22DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1A, 0x0062 };
    uint32_t const ces[9] = { 0x22DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_292)
{
    // 10BA 0062;	
    // (Ⴚ) GEORGIAN CAPITAL LETTER CAN	[22DB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BA, 0x0062 };
    uint32_t const ces[9] = { 0x22DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_293)
{
    // 10EB 0021;	
    // (ძ) GEORGIAN LETTER JIL	[22DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EB, 0x0021 };
    uint32_t const ces[9] = { 0x22DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_294)
{
    // 10EB 003F;	
    // (ძ) GEORGIAN LETTER JIL	[22DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EB, 0x003F };
    uint32_t const ces[9] = { 0x22DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_295)
{
    // 10EB 0061;	
    // (ძ) GEORGIAN LETTER JIL	[22DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EB, 0x0061 };
    uint32_t const ces[9] = { 0x22DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_296)
{
    // 10EB 0041;	
    // (ძ) GEORGIAN LETTER JIL	[22DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10EB, 0x0041 };
    uint32_t const ces[9] = { 0x22DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_297)
{
    // 10EB 0062;	
    // (ძ) GEORGIAN LETTER JIL	[22DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EB, 0x0062 };
    uint32_t const ces[9] = { 0x22DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_298)
{
    // 2D1B 0021;	
    // (ⴛ) GEORGIAN SMALL LETTER JIL	[22DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1B, 0x0021 };
    uint32_t const ces[9] = { 0x22DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_299)
{
    // 10BB 0021;	
    // (Ⴛ) GEORGIAN CAPITAL LETTER JIL	[22DD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BB, 0x0021 };
    uint32_t const ces[9] = { 0x22DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_300)
{
    // 2D1B 003F;	
    // (ⴛ) GEORGIAN SMALL LETTER JIL	[22DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1B, 0x003F };
    uint32_t const ces[9] = { 0x22DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_301)
{
    // 10BB 003F;	
    // (Ⴛ) GEORGIAN CAPITAL LETTER JIL	[22DD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BB, 0x003F };
    uint32_t const ces[9] = { 0x22DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_302)
{
    // 2D1B 0061;	
    // (ⴛ) GEORGIAN SMALL LETTER JIL	[22DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1B, 0x0061 };
    uint32_t const ces[9] = { 0x22DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_303)
{
    // 2D1B 0041;	
    // (ⴛ) GEORGIAN SMALL LETTER JIL	[22DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1B, 0x0041 };
    uint32_t const ces[9] = { 0x22DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_304)
{
    // 10BB 0061;	
    // (Ⴛ) GEORGIAN CAPITAL LETTER JIL	[22DD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BB, 0x0061 };
    uint32_t const ces[9] = { 0x22DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_305)
{
    // 10BB 0041;	
    // (Ⴛ) GEORGIAN CAPITAL LETTER JIL	[22DD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BB, 0x0041 };
    uint32_t const ces[9] = { 0x22DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_306)
{
    // 2D1B 0062;	
    // (ⴛ) GEORGIAN SMALL LETTER JIL	[22DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1B, 0x0062 };
    uint32_t const ces[9] = { 0x22DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_307)
{
    // 10BB 0062;	
    // (Ⴛ) GEORGIAN CAPITAL LETTER JIL	[22DD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BB, 0x0062 };
    uint32_t const ces[9] = { 0x22DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_308)
{
    // 10EC 0021;	
    // (წ) GEORGIAN LETTER CIL	[22DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EC, 0x0021 };
    uint32_t const ces[9] = { 0x22DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_309)
{
    // 10EC 003F;	
    // (წ) GEORGIAN LETTER CIL	[22DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EC, 0x003F };
    uint32_t const ces[9] = { 0x22DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_310)
{
    // 10EC 0061;	
    // (წ) GEORGIAN LETTER CIL	[22DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EC, 0x0061 };
    uint32_t const ces[9] = { 0x22DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_311)
{
    // 10EC 0041;	
    // (წ) GEORGIAN LETTER CIL	[22DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10EC, 0x0041 };
    uint32_t const ces[9] = { 0x22DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_312)
{
    // 10EC 0062;	
    // (წ) GEORGIAN LETTER CIL	[22DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EC, 0x0062 };
    uint32_t const ces[9] = { 0x22DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_313)
{
    // 2D1C 0021;	
    // (ⴜ) GEORGIAN SMALL LETTER CIL	[22DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1C, 0x0021 };
    uint32_t const ces[9] = { 0x22DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_314)
{
    // 10BC 0021;	
    // (Ⴜ) GEORGIAN CAPITAL LETTER CIL	[22DF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BC, 0x0021 };
    uint32_t const ces[9] = { 0x22DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_315)
{
    // 2D1C 003F;	
    // (ⴜ) GEORGIAN SMALL LETTER CIL	[22DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1C, 0x003F };
    uint32_t const ces[9] = { 0x22DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_316)
{
    // 10BC 003F;	
    // (Ⴜ) GEORGIAN CAPITAL LETTER CIL	[22DF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BC, 0x003F };
    uint32_t const ces[9] = { 0x22DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_317)
{
    // 2D1C 0061;	
    // (ⴜ) GEORGIAN SMALL LETTER CIL	[22DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1C, 0x0061 };
    uint32_t const ces[9] = { 0x22DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_318)
{
    // 2D1C 0041;	
    // (ⴜ) GEORGIAN SMALL LETTER CIL	[22DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1C, 0x0041 };
    uint32_t const ces[9] = { 0x22DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_319)
{
    // 10BC 0061;	
    // (Ⴜ) GEORGIAN CAPITAL LETTER CIL	[22DF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BC, 0x0061 };
    uint32_t const ces[9] = { 0x22DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_320)
{
    // 10BC 0041;	
    // (Ⴜ) GEORGIAN CAPITAL LETTER CIL	[22DF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BC, 0x0041 };
    uint32_t const ces[9] = { 0x22DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_321)
{
    // 2D1C 0062;	
    // (ⴜ) GEORGIAN SMALL LETTER CIL	[22DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1C, 0x0062 };
    uint32_t const ces[9] = { 0x22DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_322)
{
    // 10BC 0062;	
    // (Ⴜ) GEORGIAN CAPITAL LETTER CIL	[22DF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BC, 0x0062 };
    uint32_t const ces[9] = { 0x22DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_323)
{
    // 10ED 0021;	
    // (ჭ) GEORGIAN LETTER CHAR	[22E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ED, 0x0021 };
    uint32_t const ces[9] = { 0x22E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_324)
{
    // 10ED 003F;	
    // (ჭ) GEORGIAN LETTER CHAR	[22E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ED, 0x003F };
    uint32_t const ces[9] = { 0x22E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_325)
{
    // 10ED 0061;	
    // (ჭ) GEORGIAN LETTER CHAR	[22E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ED, 0x0061 };
    uint32_t const ces[9] = { 0x22E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_326)
{
    // 10ED 0041;	
    // (ჭ) GEORGIAN LETTER CHAR	[22E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10ED, 0x0041 };
    uint32_t const ces[9] = { 0x22E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_327)
{
    // 10ED 0062;	
    // (ჭ) GEORGIAN LETTER CHAR	[22E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10ED, 0x0062 };
    uint32_t const ces[9] = { 0x22E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_328)
{
    // 2D1D 0021;	
    // (ⴝ) GEORGIAN SMALL LETTER CHAR	[22E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1D, 0x0021 };
    uint32_t const ces[9] = { 0x22E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_329)
{
    // 10BD 0021;	
    // (Ⴝ) GEORGIAN CAPITAL LETTER CHAR	[22E1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BD, 0x0021 };
    uint32_t const ces[9] = { 0x22E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_330)
{
    // 2D1D 003F;	
    // (ⴝ) GEORGIAN SMALL LETTER CHAR	[22E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1D, 0x003F };
    uint32_t const ces[9] = { 0x22E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_331)
{
    // 10BD 003F;	
    // (Ⴝ) GEORGIAN CAPITAL LETTER CHAR	[22E1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BD, 0x003F };
    uint32_t const ces[9] = { 0x22E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_332)
{
    // 2D1D 0061;	
    // (ⴝ) GEORGIAN SMALL LETTER CHAR	[22E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1D, 0x0061 };
    uint32_t const ces[9] = { 0x22E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_333)
{
    // 2D1D 0041;	
    // (ⴝ) GEORGIAN SMALL LETTER CHAR	[22E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1D, 0x0041 };
    uint32_t const ces[9] = { 0x22E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_334)
{
    // 10BD 0061;	
    // (Ⴝ) GEORGIAN CAPITAL LETTER CHAR	[22E1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BD, 0x0061 };
    uint32_t const ces[9] = { 0x22E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_335)
{
    // 10BD 0041;	
    // (Ⴝ) GEORGIAN CAPITAL LETTER CHAR	[22E1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BD, 0x0041 };
    uint32_t const ces[9] = { 0x22E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_336)
{
    // 2D1D 0062;	
    // (ⴝ) GEORGIAN SMALL LETTER CHAR	[22E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1D, 0x0062 };
    uint32_t const ces[9] = { 0x22E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_337)
{
    // 10BD 0062;	
    // (Ⴝ) GEORGIAN CAPITAL LETTER CHAR	[22E1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BD, 0x0062 };
    uint32_t const ces[9] = { 0x22E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_338)
{
    // 10EE 0021;	
    // (ხ) GEORGIAN LETTER XAN	[22E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EE, 0x0021 };
    uint32_t const ces[9] = { 0x22E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_339)
{
    // 10EE 003F;	
    // (ხ) GEORGIAN LETTER XAN	[22E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EE, 0x003F };
    uint32_t const ces[9] = { 0x22E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_340)
{
    // 10EE 0061;	
    // (ხ) GEORGIAN LETTER XAN	[22E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EE, 0x0061 };
    uint32_t const ces[9] = { 0x22E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_341)
{
    // 10EE 0041;	
    // (ხ) GEORGIAN LETTER XAN	[22E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10EE, 0x0041 };
    uint32_t const ces[9] = { 0x22E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_342)
{
    // 10EE 0062;	
    // (ხ) GEORGIAN LETTER XAN	[22E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EE, 0x0062 };
    uint32_t const ces[9] = { 0x22E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_343)
{
    // 2D1E 0021;	
    // (ⴞ) GEORGIAN SMALL LETTER XAN	[22E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1E, 0x0021 };
    uint32_t const ces[9] = { 0x22E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_344)
{
    // 10BE 0021;	
    // (Ⴞ) GEORGIAN CAPITAL LETTER XAN	[22E3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BE, 0x0021 };
    uint32_t const ces[9] = { 0x22E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_345)
{
    // 2D1E 003F;	
    // (ⴞ) GEORGIAN SMALL LETTER XAN	[22E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1E, 0x003F };
    uint32_t const ces[9] = { 0x22E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_346)
{
    // 10BE 003F;	
    // (Ⴞ) GEORGIAN CAPITAL LETTER XAN	[22E3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BE, 0x003F };
    uint32_t const ces[9] = { 0x22E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_347)
{
    // 2D1E 0061;	
    // (ⴞ) GEORGIAN SMALL LETTER XAN	[22E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1E, 0x0061 };
    uint32_t const ces[9] = { 0x22E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_348)
{
    // 2D1E 0041;	
    // (ⴞ) GEORGIAN SMALL LETTER XAN	[22E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1E, 0x0041 };
    uint32_t const ces[9] = { 0x22E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_349)
{
    // 10BE 0061;	
    // (Ⴞ) GEORGIAN CAPITAL LETTER XAN	[22E3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BE, 0x0061 };
    uint32_t const ces[9] = { 0x22E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_350)
{
    // 10BE 0041;	
    // (Ⴞ) GEORGIAN CAPITAL LETTER XAN	[22E3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BE, 0x0041 };
    uint32_t const ces[9] = { 0x22E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_351)
{
    // 2D1E 0062;	
    // (ⴞ) GEORGIAN SMALL LETTER XAN	[22E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1E, 0x0062 };
    uint32_t const ces[9] = { 0x22E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_352)
{
    // 10BE 0062;	
    // (Ⴞ) GEORGIAN CAPITAL LETTER XAN	[22E3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BE, 0x0062 };
    uint32_t const ces[9] = { 0x22E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_353)
{
    // 10F4 0021;	
    // (ჴ) GEORGIAN LETTER HAR	[22E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F4, 0x0021 };
    uint32_t const ces[9] = { 0x22E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_354)
{
    // 10F4 003F;	
    // (ჴ) GEORGIAN LETTER HAR	[22E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F4, 0x003F };
    uint32_t const ces[9] = { 0x22E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_355)
{
    // 10F4 0061;	
    // (ჴ) GEORGIAN LETTER HAR	[22E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F4, 0x0061 };
    uint32_t const ces[9] = { 0x22E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_356)
{
    // 10F4 0041;	
    // (ჴ) GEORGIAN LETTER HAR	[22E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F4, 0x0041 };
    uint32_t const ces[9] = { 0x22E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_357)
{
    // 10F4 0062;	
    // (ჴ) GEORGIAN LETTER HAR	[22E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F4, 0x0062 };
    uint32_t const ces[9] = { 0x22E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_358)
{
    // 2D24 0021;	
    // (ⴤ) GEORGIAN SMALL LETTER HAR	[22E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D24, 0x0021 };
    uint32_t const ces[9] = { 0x22E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_359)
{
    // 10C4 0021;	
    // (Ⴤ) GEORGIAN CAPITAL LETTER HAR	[22E5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C4, 0x0021 };
    uint32_t const ces[9] = { 0x22E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_360)
{
    // 2D24 003F;	
    // (ⴤ) GEORGIAN SMALL LETTER HAR	[22E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D24, 0x003F };
    uint32_t const ces[9] = { 0x22E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_361)
{
    // 10C4 003F;	
    // (Ⴤ) GEORGIAN CAPITAL LETTER HAR	[22E5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C4, 0x003F };
    uint32_t const ces[9] = { 0x22E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_362)
{
    // 2D24 0061;	
    // (ⴤ) GEORGIAN SMALL LETTER HAR	[22E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D24, 0x0061 };
    uint32_t const ces[9] = { 0x22E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_363)
{
    // 2D24 0041;	
    // (ⴤ) GEORGIAN SMALL LETTER HAR	[22E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D24, 0x0041 };
    uint32_t const ces[9] = { 0x22E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_364)
{
    // 10C4 0061;	
    // (Ⴤ) GEORGIAN CAPITAL LETTER HAR	[22E5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C4, 0x0061 };
    uint32_t const ces[9] = { 0x22E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_365)
{
    // 10C4 0041;	
    // (Ⴤ) GEORGIAN CAPITAL LETTER HAR	[22E5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C4, 0x0041 };
    uint32_t const ces[9] = { 0x22E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_366)
{
    // 2D24 0062;	
    // (ⴤ) GEORGIAN SMALL LETTER HAR	[22E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D24, 0x0062 };
    uint32_t const ces[9] = { 0x22E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_367)
{
    // 10C4 0062;	
    // (Ⴤ) GEORGIAN CAPITAL LETTER HAR	[22E5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C4, 0x0062 };
    uint32_t const ces[9] = { 0x22E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_368)
{
    // 10EF 0021;	
    // (ჯ) GEORGIAN LETTER JHAN	[22E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EF, 0x0021 };
    uint32_t const ces[9] = { 0x22E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_369)
{
    // 10EF 003F;	
    // (ჯ) GEORGIAN LETTER JHAN	[22E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EF, 0x003F };
    uint32_t const ces[9] = { 0x22E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_370)
{
    // 10EF 0061;	
    // (ჯ) GEORGIAN LETTER JHAN	[22E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EF, 0x0061 };
    uint32_t const ces[9] = { 0x22E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_371)
{
    // 10EF 0041;	
    // (ჯ) GEORGIAN LETTER JHAN	[22E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10EF, 0x0041 };
    uint32_t const ces[9] = { 0x22E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_372)
{
    // 10EF 0062;	
    // (ჯ) GEORGIAN LETTER JHAN	[22E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10EF, 0x0062 };
    uint32_t const ces[9] = { 0x22E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_373)
{
    // 2D1F 0021;	
    // (ⴟ) GEORGIAN SMALL LETTER JHAN	[22E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1F, 0x0021 };
    uint32_t const ces[9] = { 0x22E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_374)
{
    // 10BF 0021;	
    // (Ⴟ) GEORGIAN CAPITAL LETTER JHAN	[22E7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BF, 0x0021 };
    uint32_t const ces[9] = { 0x22E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_375)
{
    // 2D1F 003F;	
    // (ⴟ) GEORGIAN SMALL LETTER JHAN	[22E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1F, 0x003F };
    uint32_t const ces[9] = { 0x22E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_376)
{
    // 10BF 003F;	
    // (Ⴟ) GEORGIAN CAPITAL LETTER JHAN	[22E7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BF, 0x003F };
    uint32_t const ces[9] = { 0x22E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_377)
{
    // 2D1F 0061;	
    // (ⴟ) GEORGIAN SMALL LETTER JHAN	[22E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1F, 0x0061 };
    uint32_t const ces[9] = { 0x22E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_378)
{
    // 2D1F 0041;	
    // (ⴟ) GEORGIAN SMALL LETTER JHAN	[22E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D1F, 0x0041 };
    uint32_t const ces[9] = { 0x22E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_379)
{
    // 10BF 0061;	
    // (Ⴟ) GEORGIAN CAPITAL LETTER JHAN	[22E7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BF, 0x0061 };
    uint32_t const ces[9] = { 0x22E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_380)
{
    // 10BF 0041;	
    // (Ⴟ) GEORGIAN CAPITAL LETTER JHAN	[22E7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10BF, 0x0041 };
    uint32_t const ces[9] = { 0x22E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_381)
{
    // 2D1F 0062;	
    // (ⴟ) GEORGIAN SMALL LETTER JHAN	[22E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D1F, 0x0062 };
    uint32_t const ces[9] = { 0x22E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_382)
{
    // 10BF 0062;	
    // (Ⴟ) GEORGIAN CAPITAL LETTER JHAN	[22E7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10BF, 0x0062 };
    uint32_t const ces[9] = { 0x22E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_383)
{
    // 10F0 0021;	
    // (ჰ) GEORGIAN LETTER HAE	[22E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F0, 0x0021 };
    uint32_t const ces[9] = { 0x22E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_384)
{
    // 10F0 003F;	
    // (ჰ) GEORGIAN LETTER HAE	[22E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F0, 0x003F };
    uint32_t const ces[9] = { 0x22E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_385)
{
    // 10F0 0061;	
    // (ჰ) GEORGIAN LETTER HAE	[22E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F0, 0x0061 };
    uint32_t const ces[9] = { 0x22E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_386)
{
    // 10F0 0041;	
    // (ჰ) GEORGIAN LETTER HAE	[22E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F0, 0x0041 };
    uint32_t const ces[9] = { 0x22E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_387)
{
    // 10F0 0062;	
    // (ჰ) GEORGIAN LETTER HAE	[22E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F0, 0x0062 };
    uint32_t const ces[9] = { 0x22E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_388)
{
    // 2D20 0021;	
    // (ⴠ) GEORGIAN SMALL LETTER HAE	[22E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D20, 0x0021 };
    uint32_t const ces[9] = { 0x22E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_389)
{
    // 10C0 0021;	
    // (Ⴠ) GEORGIAN CAPITAL LETTER HAE	[22E9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C0, 0x0021 };
    uint32_t const ces[9] = { 0x22E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_390)
{
    // 2D20 003F;	
    // (ⴠ) GEORGIAN SMALL LETTER HAE	[22E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D20, 0x003F };
    uint32_t const ces[9] = { 0x22E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_391)
{
    // 10C0 003F;	
    // (Ⴠ) GEORGIAN CAPITAL LETTER HAE	[22E9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C0, 0x003F };
    uint32_t const ces[9] = { 0x22E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_392)
{
    // 2D20 0061;	
    // (ⴠ) GEORGIAN SMALL LETTER HAE	[22E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D20, 0x0061 };
    uint32_t const ces[9] = { 0x22E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_393)
{
    // 2D20 0041;	
    // (ⴠ) GEORGIAN SMALL LETTER HAE	[22E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D20, 0x0041 };
    uint32_t const ces[9] = { 0x22E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_394)
{
    // 10C0 0061;	
    // (Ⴠ) GEORGIAN CAPITAL LETTER HAE	[22E9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C0, 0x0061 };
    uint32_t const ces[9] = { 0x22E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_395)
{
    // 10C0 0041;	
    // (Ⴠ) GEORGIAN CAPITAL LETTER HAE	[22E9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C0, 0x0041 };
    uint32_t const ces[9] = { 0x22E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_396)
{
    // 2D20 0062;	
    // (ⴠ) GEORGIAN SMALL LETTER HAE	[22E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D20, 0x0062 };
    uint32_t const ces[9] = { 0x22E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_397)
{
    // 10C0 0062;	
    // (Ⴠ) GEORGIAN CAPITAL LETTER HAE	[22E9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C0, 0x0062 };
    uint32_t const ces[9] = { 0x22E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_398)
{
    // 10F5 0021;	
    // (ჵ) GEORGIAN LETTER HOE	[22EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F5, 0x0021 };
    uint32_t const ces[9] = { 0x22EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_399)
{
    // 10F5 003F;	
    // (ჵ) GEORGIAN LETTER HOE	[22EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F5, 0x003F };
    uint32_t const ces[9] = { 0x22EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_400)
{
    // 10F5 0061;	
    // (ჵ) GEORGIAN LETTER HOE	[22EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F5, 0x0061 };
    uint32_t const ces[9] = { 0x22EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_401)
{
    // 10F5 0041;	
    // (ჵ) GEORGIAN LETTER HOE	[22EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F5, 0x0041 };
    uint32_t const ces[9] = { 0x22EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_402)
{
    // 10F5 0062;	
    // (ჵ) GEORGIAN LETTER HOE	[22EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F5, 0x0062 };
    uint32_t const ces[9] = { 0x22EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_403)
{
    // 2D25 0021;	
    // (ⴥ) GEORGIAN SMALL LETTER HOE	[22EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D25, 0x0021 };
    uint32_t const ces[9] = { 0x22EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_404)
{
    // 10C5 0021;	
    // (Ⴥ) GEORGIAN CAPITAL LETTER HOE	[22EB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C5, 0x0021 };
    uint32_t const ces[9] = { 0x22EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_405)
{
    // 2D25 003F;	
    // (ⴥ) GEORGIAN SMALL LETTER HOE	[22EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D25, 0x003F };
    uint32_t const ces[9] = { 0x22EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_406)
{
    // 10C5 003F;	
    // (Ⴥ) GEORGIAN CAPITAL LETTER HOE	[22EB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C5, 0x003F };
    uint32_t const ces[9] = { 0x22EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_407)
{
    // 2D25 0061;	
    // (ⴥ) GEORGIAN SMALL LETTER HOE	[22EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D25, 0x0061 };
    uint32_t const ces[9] = { 0x22EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_408)
{
    // 2D25 0041;	
    // (ⴥ) GEORGIAN SMALL LETTER HOE	[22EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D25, 0x0041 };
    uint32_t const ces[9] = { 0x22EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_409)
{
    // 10C5 0061;	
    // (Ⴥ) GEORGIAN CAPITAL LETTER HOE	[22EB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C5, 0x0061 };
    uint32_t const ces[9] = { 0x22EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_410)
{
    // 10C5 0041;	
    // (Ⴥ) GEORGIAN CAPITAL LETTER HOE	[22EB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C5, 0x0041 };
    uint32_t const ces[9] = { 0x22EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_411)
{
    // 2D25 0062;	
    // (ⴥ) GEORGIAN SMALL LETTER HOE	[22EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D25, 0x0062 };
    uint32_t const ces[9] = { 0x22EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_412)
{
    // 10C5 0062;	
    // (Ⴥ) GEORGIAN CAPITAL LETTER HOE	[22EB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C5, 0x0062 };
    uint32_t const ces[9] = { 0x22EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_413)
{
    // 10F6 0021;	
    // (ჶ) GEORGIAN LETTER FI	[22EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F6, 0x0021 };
    uint32_t const ces[9] = { 0x22EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_414)
{
    // 10F6 003F;	
    // (ჶ) GEORGIAN LETTER FI	[22EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F6, 0x003F };
    uint32_t const ces[9] = { 0x22EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_415)
{
    // 10F6 0061;	
    // (ჶ) GEORGIAN LETTER FI	[22EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F6, 0x0061 };
    uint32_t const ces[9] = { 0x22EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_416)
{
    // 10F6 0041;	
    // (ჶ) GEORGIAN LETTER FI	[22EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F6, 0x0041 };
    uint32_t const ces[9] = { 0x22EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_417)
{
    // 10F6 0062;	
    // (ჶ) GEORGIAN LETTER FI	[22EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F6, 0x0062 };
    uint32_t const ces[9] = { 0x22EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_418)
{
    // 10F7 0021;	
    // (ჷ) GEORGIAN LETTER YN	[22ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F7, 0x0021 };
    uint32_t const ces[9] = { 0x22ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_419)
{
    // 10F7 003F;	
    // (ჷ) GEORGIAN LETTER YN	[22ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F7, 0x003F };
    uint32_t const ces[9] = { 0x22ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_420)
{
    // 10F7 0061;	
    // (ჷ) GEORGIAN LETTER YN	[22ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F7, 0x0061 };
    uint32_t const ces[9] = { 0x22ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_421)
{
    // 10F7 0041;	
    // (ჷ) GEORGIAN LETTER YN	[22ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F7, 0x0041 };
    uint32_t const ces[9] = { 0x22ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_422)
{
    // 10F7 0062;	
    // (ჷ) GEORGIAN LETTER YN	[22ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F7, 0x0062 };
    uint32_t const ces[9] = { 0x22ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_423)
{
    // 2D27 0021;	
    // (ⴧ) GEORGIAN SMALL LETTER YN	[22EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D27, 0x0021 };
    uint32_t const ces[9] = { 0x22EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_424)
{
    // 10C7 0021;	
    // (Ⴧ) GEORGIAN CAPITAL LETTER YN	[22EE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C7, 0x0021 };
    uint32_t const ces[9] = { 0x22EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_425)
{
    // 2D27 003F;	
    // (ⴧ) GEORGIAN SMALL LETTER YN	[22EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D27, 0x003F };
    uint32_t const ces[9] = { 0x22EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_426)
{
    // 10C7 003F;	
    // (Ⴧ) GEORGIAN CAPITAL LETTER YN	[22EE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C7, 0x003F };
    uint32_t const ces[9] = { 0x22EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_427)
{
    // 2D27 0061;	
    // (ⴧ) GEORGIAN SMALL LETTER YN	[22EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D27, 0x0061 };
    uint32_t const ces[9] = { 0x22EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_428)
{
    // 2D27 0041;	
    // (ⴧ) GEORGIAN SMALL LETTER YN	[22EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D27, 0x0041 };
    uint32_t const ces[9] = { 0x22EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_429)
{
    // 10C7 0061;	
    // (Ⴧ) GEORGIAN CAPITAL LETTER YN	[22EE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C7, 0x0061 };
    uint32_t const ces[9] = { 0x22EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_430)
{
    // 10C7 0041;	
    // (Ⴧ) GEORGIAN CAPITAL LETTER YN	[22EE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10C7, 0x0041 };
    uint32_t const ces[9] = { 0x22EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_431)
{
    // 2D27 0062;	
    // (ⴧ) GEORGIAN SMALL LETTER YN	[22EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D27, 0x0062 };
    uint32_t const ces[9] = { 0x22EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_432)
{
    // 10C7 0062;	
    // (Ⴧ) GEORGIAN CAPITAL LETTER YN	[22EE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10C7, 0x0062 };
    uint32_t const ces[9] = { 0x22EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_433)
{
    // 10F8 0021;	
    // (ჸ) GEORGIAN LETTER ELIFI	[22EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F8, 0x0021 };
    uint32_t const ces[9] = { 0x22EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_434)
{
    // 10F8 003F;	
    // (ჸ) GEORGIAN LETTER ELIFI	[22EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F8, 0x003F };
    uint32_t const ces[9] = { 0x22EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_435)
{
    // 10F8 0061;	
    // (ჸ) GEORGIAN LETTER ELIFI	[22EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F8, 0x0061 };
    uint32_t const ces[9] = { 0x22EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_436)
{
    // 10F8 0041;	
    // (ჸ) GEORGIAN LETTER ELIFI	[22EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F8, 0x0041 };
    uint32_t const ces[9] = { 0x22EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_437)
{
    // 10F8 0062;	
    // (ჸ) GEORGIAN LETTER ELIFI	[22EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F8, 0x0062 };
    uint32_t const ces[9] = { 0x22EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_438)
{
    // 10F9 0021;	
    // (ჹ) GEORGIAN LETTER TURNED GAN	[22F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F9, 0x0021 };
    uint32_t const ces[9] = { 0x22F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_439)
{
    // 10F9 003F;	
    // (ჹ) GEORGIAN LETTER TURNED GAN	[22F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F9, 0x003F };
    uint32_t const ces[9] = { 0x22F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_440)
{
    // 10F9 0061;	
    // (ჹ) GEORGIAN LETTER TURNED GAN	[22F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F9, 0x0061 };
    uint32_t const ces[9] = { 0x22F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_441)
{
    // 10F9 0041;	
    // (ჹ) GEORGIAN LETTER TURNED GAN	[22F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10F9, 0x0041 };
    uint32_t const ces[9] = { 0x22F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_442)
{
    // 10F9 0062;	
    // (ჹ) GEORGIAN LETTER TURNED GAN	[22F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10F9, 0x0062 };
    uint32_t const ces[9] = { 0x22F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_443)
{
    // 10FA 0021;	
    // (ჺ) GEORGIAN LETTER AIN	[22F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FA, 0x0021 };
    uint32_t const ces[9] = { 0x22F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_444)
{
    // 10FA 003F;	
    // (ჺ) GEORGIAN LETTER AIN	[22F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FA, 0x003F };
    uint32_t const ces[9] = { 0x22F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_445)
{
    // 10FA 0061;	
    // (ჺ) GEORGIAN LETTER AIN	[22F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FA, 0x0061 };
    uint32_t const ces[9] = { 0x22F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_446)
{
    // 10FA 0041;	
    // (ჺ) GEORGIAN LETTER AIN	[22F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FA, 0x0041 };
    uint32_t const ces[9] = { 0x22F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_447)
{
    // 10FA 0062;	
    // (ჺ) GEORGIAN LETTER AIN	[22F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FA, 0x0062 };
    uint32_t const ces[9] = { 0x22F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_448)
{
    // 10FD 0021;	
    // (ჽ) GEORGIAN LETTER AEN	[22F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FD, 0x0021 };
    uint32_t const ces[9] = { 0x22F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_449)
{
    // 10FD 003F;	
    // (ჽ) GEORGIAN LETTER AEN	[22F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FD, 0x003F };
    uint32_t const ces[9] = { 0x22F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_450)
{
    // 10FD 0061;	
    // (ჽ) GEORGIAN LETTER AEN	[22F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FD, 0x0061 };
    uint32_t const ces[9] = { 0x22F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_451)
{
    // 10FD 0041;	
    // (ჽ) GEORGIAN LETTER AEN	[22F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FD, 0x0041 };
    uint32_t const ces[9] = { 0x22F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_452)
{
    // 10FD 0062;	
    // (ჽ) GEORGIAN LETTER AEN	[22F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FD, 0x0062 };
    uint32_t const ces[9] = { 0x22F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_453)
{
    // 2D2D 0021;	
    // (ⴭ) GEORGIAN SMALL LETTER AEN	[22F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D2D, 0x0021 };
    uint32_t const ces[9] = { 0x22F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_454)
{
    // 10CD 0021;	
    // (Ⴭ) GEORGIAN CAPITAL LETTER AEN	[22F3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CD, 0x0021 };
    uint32_t const ces[9] = { 0x22F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_455)
{
    // 2D2D 003F;	
    // (ⴭ) GEORGIAN SMALL LETTER AEN	[22F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D2D, 0x003F };
    uint32_t const ces[9] = { 0x22F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_456)
{
    // 10CD 003F;	
    // (Ⴭ) GEORGIAN CAPITAL LETTER AEN	[22F3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CD, 0x003F };
    uint32_t const ces[9] = { 0x22F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_457)
{
    // 2D2D 0061;	
    // (ⴭ) GEORGIAN SMALL LETTER AEN	[22F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D2D, 0x0061 };
    uint32_t const ces[9] = { 0x22F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_458)
{
    // 2D2D 0041;	
    // (ⴭ) GEORGIAN SMALL LETTER AEN	[22F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D2D, 0x0041 };
    uint32_t const ces[9] = { 0x22F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_459)
{
    // 10CD 0061;	
    // (Ⴭ) GEORGIAN CAPITAL LETTER AEN	[22F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CD, 0x0061 };
    uint32_t const ces[9] = { 0x22F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_460)
{
    // 10CD 0041;	
    // (Ⴭ) GEORGIAN CAPITAL LETTER AEN	[22F3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x10CD, 0x0041 };
    uint32_t const ces[9] = { 0x22F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_461)
{
    // 2D2D 0062;	
    // (ⴭ) GEORGIAN SMALL LETTER AEN	[22F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D2D, 0x0062 };
    uint32_t const ces[9] = { 0x22F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_462)
{
    // 10CD 0062;	
    // (Ⴭ) GEORGIAN CAPITAL LETTER AEN	[22F3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x10CD, 0x0062 };
    uint32_t const ces[9] = { 0x22F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_463)
{
    // 10FE 0021;	
    // (ჾ) GEORGIAN LETTER HARD SIGN	[22F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FE, 0x0021 };
    uint32_t const ces[9] = { 0x22F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_464)
{
    // 10FE 003F;	
    // (ჾ) GEORGIAN LETTER HARD SIGN	[22F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FE, 0x003F };
    uint32_t const ces[9] = { 0x22F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_465)
{
    // 10FE 0061;	
    // (ჾ) GEORGIAN LETTER HARD SIGN	[22F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FE, 0x0061 };
    uint32_t const ces[9] = { 0x22F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_466)
{
    // 10FE 0041;	
    // (ჾ) GEORGIAN LETTER HARD SIGN	[22F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FE, 0x0041 };
    uint32_t const ces[9] = { 0x22F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_467)
{
    // 10FE 0062;	
    // (ჾ) GEORGIAN LETTER HARD SIGN	[22F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FE, 0x0062 };
    uint32_t const ces[9] = { 0x22F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_468)
{
    // 10FF 0021;	
    // (ჿ) GEORGIAN LETTER LABIAL SIGN	[22F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF, 0x0021 };
    uint32_t const ces[9] = { 0x22F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_469)
{
    // 10FF 003F;	
    // (ჿ) GEORGIAN LETTER LABIAL SIGN	[22F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF, 0x003F };
    uint32_t const ces[9] = { 0x22F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_470)
{
    // 10FF 0061;	
    // (ჿ) GEORGIAN LETTER LABIAL SIGN	[22F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF, 0x0061 };
    uint32_t const ces[9] = { 0x22F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_471)
{
    // 10FF 0041;	
    // (ჿ) GEORGIAN LETTER LABIAL SIGN	[22F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FF, 0x0041 };
    uint32_t const ces[9] = { 0x22F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_472)
{
    // 10FF 0062;	
    // (ჿ) GEORGIAN LETTER LABIAL SIGN	[22F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF, 0x0062 };
    uint32_t const ces[9] = { 0x22F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_473)
{
    // 0561 0021;	
    // (ա) ARMENIAN SMALL LETTER AYB	[22F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0561, 0x0021 };
    uint32_t const ces[9] = { 0x22F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_474)
{
    // 0531 0021;	
    // (Ա) ARMENIAN CAPITAL LETTER AYB	[22F6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0531, 0x0021 };
    uint32_t const ces[9] = { 0x22F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_475)
{
    // 0561 003F;	
    // (ա) ARMENIAN SMALL LETTER AYB	[22F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0561, 0x003F };
    uint32_t const ces[9] = { 0x22F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_476)
{
    // 0531 003F;	
    // (Ա) ARMENIAN CAPITAL LETTER AYB	[22F6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0531, 0x003F };
    uint32_t const ces[9] = { 0x22F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_477)
{
    // 0561 0061;	
    // (ա) ARMENIAN SMALL LETTER AYB	[22F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0561, 0x0061 };
    uint32_t const ces[9] = { 0x22F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_478)
{
    // 0561 0041;	
    // (ա) ARMENIAN SMALL LETTER AYB	[22F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0561, 0x0041 };
    uint32_t const ces[9] = { 0x22F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_479)
{
    // 0531 0061;	
    // (Ա) ARMENIAN CAPITAL LETTER AYB	[22F6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0531, 0x0061 };
    uint32_t const ces[9] = { 0x22F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_480)
{
    // 0531 0041;	
    // (Ա) ARMENIAN CAPITAL LETTER AYB	[22F6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0531, 0x0041 };
    uint32_t const ces[9] = { 0x22F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_481)
{
    // 0561 0062;	
    // (ա) ARMENIAN SMALL LETTER AYB	[22F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0561, 0x0062 };
    uint32_t const ces[9] = { 0x22F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_482)
{
    // 0531 0062;	
    // (Ա) ARMENIAN CAPITAL LETTER AYB	[22F6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0531, 0x0062 };
    uint32_t const ces[9] = { 0x22F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_483)
{
    // 0562 0021;	
    // (բ) ARMENIAN SMALL LETTER BEN	[22F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0562, 0x0021 };
    uint32_t const ces[9] = { 0x22F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_484)
{
    // 0532 0021;	
    // (Բ) ARMENIAN CAPITAL LETTER BEN	[22F7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0532, 0x0021 };
    uint32_t const ces[9] = { 0x22F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_485)
{
    // 0562 003F;	
    // (բ) ARMENIAN SMALL LETTER BEN	[22F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0562, 0x003F };
    uint32_t const ces[9] = { 0x22F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_486)
{
    // 0532 003F;	
    // (Բ) ARMENIAN CAPITAL LETTER BEN	[22F7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0532, 0x003F };
    uint32_t const ces[9] = { 0x22F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_487)
{
    // 0562 0061;	
    // (բ) ARMENIAN SMALL LETTER BEN	[22F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0562, 0x0061 };
    uint32_t const ces[9] = { 0x22F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_488)
{
    // 0562 0041;	
    // (բ) ARMENIAN SMALL LETTER BEN	[22F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0562, 0x0041 };
    uint32_t const ces[9] = { 0x22F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_489)
{
    // 0532 0061;	
    // (Բ) ARMENIAN CAPITAL LETTER BEN	[22F7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0532, 0x0061 };
    uint32_t const ces[9] = { 0x22F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_490)
{
    // 0532 0041;	
    // (Բ) ARMENIAN CAPITAL LETTER BEN	[22F7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0532, 0x0041 };
    uint32_t const ces[9] = { 0x22F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_491)
{
    // 0562 0062;	
    // (բ) ARMENIAN SMALL LETTER BEN	[22F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0562, 0x0062 };
    uint32_t const ces[9] = { 0x22F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_492)
{
    // 0532 0062;	
    // (Բ) ARMENIAN CAPITAL LETTER BEN	[22F7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0532, 0x0062 };
    uint32_t const ces[9] = { 0x22F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_493)
{
    // 0563 0021;	
    // (գ) ARMENIAN SMALL LETTER GIM	[22F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0563, 0x0021 };
    uint32_t const ces[9] = { 0x22F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_494)
{
    // 0533 0021;	
    // (Գ) ARMENIAN CAPITAL LETTER GIM	[22F8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0533, 0x0021 };
    uint32_t const ces[9] = { 0x22F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_495)
{
    // 0563 003F;	
    // (գ) ARMENIAN SMALL LETTER GIM	[22F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0563, 0x003F };
    uint32_t const ces[9] = { 0x22F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_496)
{
    // 0533 003F;	
    // (Գ) ARMENIAN CAPITAL LETTER GIM	[22F8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0533, 0x003F };
    uint32_t const ces[9] = { 0x22F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_497)
{
    // 0563 0061;	
    // (գ) ARMENIAN SMALL LETTER GIM	[22F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0563, 0x0061 };
    uint32_t const ces[9] = { 0x22F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_498)
{
    // 0563 0041;	
    // (գ) ARMENIAN SMALL LETTER GIM	[22F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0563, 0x0041 };
    uint32_t const ces[9] = { 0x22F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_144_499)
{
    // 0533 0061;	
    // (Գ) ARMENIAN CAPITAL LETTER GIM	[22F8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0533, 0x0061 };
    uint32_t const ces[9] = { 0x22F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

