// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_023_000)
{
    // 224D 0062;	
    // (≍) EQUIVALENT TO	[066C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224D, 0x0062 };
    uint32_t const ces[9] = { 0x066C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_001)
{
    // 226D 0062;	
    // (≭) NOT EQUIVALENT TO	[066C 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x226D, 0x0062 };
    uint32_t const ces[11] = { 0x066C, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_002)
{
    // 224E 0021;	
    // (≎) GEOMETRICALLY EQUIVALENT TO	[066D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224E, 0x0021 };
    uint32_t const ces[9] = { 0x066D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_003)
{
    // 224E 003F;	
    // (≎) GEOMETRICALLY EQUIVALENT TO	[066D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224E, 0x003F };
    uint32_t const ces[9] = { 0x066D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_004)
{
    // 224E 0061;	
    // (≎) GEOMETRICALLY EQUIVALENT TO	[066D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224E, 0x0061 };
    uint32_t const ces[9] = { 0x066D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_005)
{
    // 224E 0041;	
    // (≎) GEOMETRICALLY EQUIVALENT TO	[066D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224E, 0x0041 };
    uint32_t const ces[9] = { 0x066D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_006)
{
    // 224E 0062;	
    // (≎) GEOMETRICALLY EQUIVALENT TO	[066D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224E, 0x0062 };
    uint32_t const ces[9] = { 0x066D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_007)
{
    // 224F 0021;	
    // (≏) DIFFERENCE BETWEEN	[066E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224F, 0x0021 };
    uint32_t const ces[9] = { 0x066E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_008)
{
    // 224F 003F;	
    // (≏) DIFFERENCE BETWEEN	[066E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224F, 0x003F };
    uint32_t const ces[9] = { 0x066E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_009)
{
    // 224F 0061;	
    // (≏) DIFFERENCE BETWEEN	[066E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224F, 0x0061 };
    uint32_t const ces[9] = { 0x066E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_010)
{
    // 224F 0041;	
    // (≏) DIFFERENCE BETWEEN	[066E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x224F, 0x0041 };
    uint32_t const ces[9] = { 0x066E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_011)
{
    // 224F 0062;	
    // (≏) DIFFERENCE BETWEEN	[066E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x224F, 0x0062 };
    uint32_t const ces[9] = { 0x066E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_012)
{
    // 2250 0021;	
    // (≐) APPROACHES THE LIMIT	[066F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2250, 0x0021 };
    uint32_t const ces[9] = { 0x066F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_013)
{
    // 2250 003F;	
    // (≐) APPROACHES THE LIMIT	[066F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2250, 0x003F };
    uint32_t const ces[9] = { 0x066F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_014)
{
    // 2250 0061;	
    // (≐) APPROACHES THE LIMIT	[066F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2250, 0x0061 };
    uint32_t const ces[9] = { 0x066F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_015)
{
    // 2250 0041;	
    // (≐) APPROACHES THE LIMIT	[066F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2250, 0x0041 };
    uint32_t const ces[9] = { 0x066F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_016)
{
    // 2250 0062;	
    // (≐) APPROACHES THE LIMIT	[066F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2250, 0x0062 };
    uint32_t const ces[9] = { 0x066F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_017)
{
    // 2251 0021;	
    // (≑) GEOMETRICALLY EQUAL TO	[0670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2251, 0x0021 };
    uint32_t const ces[9] = { 0x0670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_018)
{
    // 2251 003F;	
    // (≑) GEOMETRICALLY EQUAL TO	[0670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2251, 0x003F };
    uint32_t const ces[9] = { 0x0670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_019)
{
    // 2251 0061;	
    // (≑) GEOMETRICALLY EQUAL TO	[0670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2251, 0x0061 };
    uint32_t const ces[9] = { 0x0670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_020)
{
    // 2251 0041;	
    // (≑) GEOMETRICALLY EQUAL TO	[0670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2251, 0x0041 };
    uint32_t const ces[9] = { 0x0670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_021)
{
    // 2251 0062;	
    // (≑) GEOMETRICALLY EQUAL TO	[0670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2251, 0x0062 };
    uint32_t const ces[9] = { 0x0670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_022)
{
    // 2252 0021;	
    // (≒) APPROXIMATELY EQUAL TO OR THE IMAGE OF	[0671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2252, 0x0021 };
    uint32_t const ces[9] = { 0x0671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_023)
{
    // 2252 003F;	
    // (≒) APPROXIMATELY EQUAL TO OR THE IMAGE OF	[0671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2252, 0x003F };
    uint32_t const ces[9] = { 0x0671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_024)
{
    // 2252 0061;	
    // (≒) APPROXIMATELY EQUAL TO OR THE IMAGE OF	[0671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2252, 0x0061 };
    uint32_t const ces[9] = { 0x0671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_025)
{
    // 2252 0041;	
    // (≒) APPROXIMATELY EQUAL TO OR THE IMAGE OF	[0671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2252, 0x0041 };
    uint32_t const ces[9] = { 0x0671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_026)
{
    // 2252 0062;	
    // (≒) APPROXIMATELY EQUAL TO OR THE IMAGE OF	[0671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2252, 0x0062 };
    uint32_t const ces[9] = { 0x0671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_027)
{
    // 2253 0021;	
    // (≓) IMAGE OF OR APPROXIMATELY EQUAL TO	[0672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2253, 0x0021 };
    uint32_t const ces[9] = { 0x0672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_028)
{
    // 2253 003F;	
    // (≓) IMAGE OF OR APPROXIMATELY EQUAL TO	[0672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2253, 0x003F };
    uint32_t const ces[9] = { 0x0672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_029)
{
    // 2253 0061;	
    // (≓) IMAGE OF OR APPROXIMATELY EQUAL TO	[0672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2253, 0x0061 };
    uint32_t const ces[9] = { 0x0672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_030)
{
    // 2253 0041;	
    // (≓) IMAGE OF OR APPROXIMATELY EQUAL TO	[0672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2253, 0x0041 };
    uint32_t const ces[9] = { 0x0672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_031)
{
    // 2253 0062;	
    // (≓) IMAGE OF OR APPROXIMATELY EQUAL TO	[0672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2253, 0x0062 };
    uint32_t const ces[9] = { 0x0672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_032)
{
    // 2254 0021;	
    // (≔) COLON EQUALS	[0673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2254, 0x0021 };
    uint32_t const ces[9] = { 0x0673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_033)
{
    // 2254 003F;	
    // (≔) COLON EQUALS	[0673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2254, 0x003F };
    uint32_t const ces[9] = { 0x0673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_034)
{
    // 2254 0061;	
    // (≔) COLON EQUALS	[0673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2254, 0x0061 };
    uint32_t const ces[9] = { 0x0673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_035)
{
    // 2254 0041;	
    // (≔) COLON EQUALS	[0673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2254, 0x0041 };
    uint32_t const ces[9] = { 0x0673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_036)
{
    // 2254 0062;	
    // (≔) COLON EQUALS	[0673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2254, 0x0062 };
    uint32_t const ces[9] = { 0x0673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_037)
{
    // 2255 0021;	
    // (≕) EQUALS COLON	[0674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2255, 0x0021 };
    uint32_t const ces[9] = { 0x0674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_038)
{
    // 2255 003F;	
    // (≕) EQUALS COLON	[0674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2255, 0x003F };
    uint32_t const ces[9] = { 0x0674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_039)
{
    // 2255 0061;	
    // (≕) EQUALS COLON	[0674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2255, 0x0061 };
    uint32_t const ces[9] = { 0x0674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_040)
{
    // 2255 0041;	
    // (≕) EQUALS COLON	[0674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2255, 0x0041 };
    uint32_t const ces[9] = { 0x0674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_041)
{
    // 2255 0062;	
    // (≕) EQUALS COLON	[0674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2255, 0x0062 };
    uint32_t const ces[9] = { 0x0674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_042)
{
    // 2256 0021;	
    // (≖) RING IN EQUAL TO	[0675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2256, 0x0021 };
    uint32_t const ces[9] = { 0x0675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_043)
{
    // 2256 003F;	
    // (≖) RING IN EQUAL TO	[0675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2256, 0x003F };
    uint32_t const ces[9] = { 0x0675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_044)
{
    // 2256 0061;	
    // (≖) RING IN EQUAL TO	[0675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2256, 0x0061 };
    uint32_t const ces[9] = { 0x0675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_045)
{
    // 2256 0041;	
    // (≖) RING IN EQUAL TO	[0675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2256, 0x0041 };
    uint32_t const ces[9] = { 0x0675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_046)
{
    // 2256 0062;	
    // (≖) RING IN EQUAL TO	[0675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2256, 0x0062 };
    uint32_t const ces[9] = { 0x0675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_047)
{
    // 2257 0021;	
    // (≗) RING EQUAL TO	[0676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2257, 0x0021 };
    uint32_t const ces[9] = { 0x0676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_048)
{
    // 2257 003F;	
    // (≗) RING EQUAL TO	[0676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2257, 0x003F };
    uint32_t const ces[9] = { 0x0676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_049)
{
    // 2257 0061;	
    // (≗) RING EQUAL TO	[0676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2257, 0x0061 };
    uint32_t const ces[9] = { 0x0676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_050)
{
    // 2257 0041;	
    // (≗) RING EQUAL TO	[0676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2257, 0x0041 };
    uint32_t const ces[9] = { 0x0676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_051)
{
    // 2257 0062;	
    // (≗) RING EQUAL TO	[0676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2257, 0x0062 };
    uint32_t const ces[9] = { 0x0676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_052)
{
    // 2258 0021;	
    // (≘) CORRESPONDS TO	[0677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2258, 0x0021 };
    uint32_t const ces[9] = { 0x0677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_053)
{
    // 2258 003F;	
    // (≘) CORRESPONDS TO	[0677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2258, 0x003F };
    uint32_t const ces[9] = { 0x0677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_054)
{
    // 2258 0061;	
    // (≘) CORRESPONDS TO	[0677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2258, 0x0061 };
    uint32_t const ces[9] = { 0x0677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_055)
{
    // 2258 0041;	
    // (≘) CORRESPONDS TO	[0677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2258, 0x0041 };
    uint32_t const ces[9] = { 0x0677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_056)
{
    // 2258 0062;	
    // (≘) CORRESPONDS TO	[0677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2258, 0x0062 };
    uint32_t const ces[9] = { 0x0677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_057)
{
    // 2259 0021;	
    // (≙) ESTIMATES	[0678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2259, 0x0021 };
    uint32_t const ces[9] = { 0x0678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_058)
{
    // 2259 003F;	
    // (≙) ESTIMATES	[0678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2259, 0x003F };
    uint32_t const ces[9] = { 0x0678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_059)
{
    // 2259 0061;	
    // (≙) ESTIMATES	[0678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2259, 0x0061 };
    uint32_t const ces[9] = { 0x0678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_060)
{
    // 2259 0041;	
    // (≙) ESTIMATES	[0678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2259, 0x0041 };
    uint32_t const ces[9] = { 0x0678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_061)
{
    // 2259 0062;	
    // (≙) ESTIMATES	[0678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2259, 0x0062 };
    uint32_t const ces[9] = { 0x0678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_062)
{
    // 225A 0021;	
    // (≚) EQUIANGULAR TO	[0679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225A, 0x0021 };
    uint32_t const ces[9] = { 0x0679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_063)
{
    // 225A 003F;	
    // (≚) EQUIANGULAR TO	[0679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225A, 0x003F };
    uint32_t const ces[9] = { 0x0679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_064)
{
    // 225A 0061;	
    // (≚) EQUIANGULAR TO	[0679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225A, 0x0061 };
    uint32_t const ces[9] = { 0x0679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_065)
{
    // 225A 0041;	
    // (≚) EQUIANGULAR TO	[0679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225A, 0x0041 };
    uint32_t const ces[9] = { 0x0679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_066)
{
    // 225A 0062;	
    // (≚) EQUIANGULAR TO	[0679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225A, 0x0062 };
    uint32_t const ces[9] = { 0x0679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_067)
{
    // 225B 0021;	
    // (≛) STAR EQUALS	[067A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225B, 0x0021 };
    uint32_t const ces[9] = { 0x067A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_068)
{
    // 225B 003F;	
    // (≛) STAR EQUALS	[067A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225B, 0x003F };
    uint32_t const ces[9] = { 0x067A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_069)
{
    // 225B 0061;	
    // (≛) STAR EQUALS	[067A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225B, 0x0061 };
    uint32_t const ces[9] = { 0x067A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_070)
{
    // 225B 0041;	
    // (≛) STAR EQUALS	[067A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225B, 0x0041 };
    uint32_t const ces[9] = { 0x067A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_071)
{
    // 225B 0062;	
    // (≛) STAR EQUALS	[067A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225B, 0x0062 };
    uint32_t const ces[9] = { 0x067A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_072)
{
    // 225C 0021;	
    // (≜) DELTA EQUAL TO	[067B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225C, 0x0021 };
    uint32_t const ces[9] = { 0x067B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_073)
{
    // 225C 003F;	
    // (≜) DELTA EQUAL TO	[067B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225C, 0x003F };
    uint32_t const ces[9] = { 0x067B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_074)
{
    // 225C 0061;	
    // (≜) DELTA EQUAL TO	[067B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225C, 0x0061 };
    uint32_t const ces[9] = { 0x067B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_075)
{
    // 225C 0041;	
    // (≜) DELTA EQUAL TO	[067B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225C, 0x0041 };
    uint32_t const ces[9] = { 0x067B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_076)
{
    // 225C 0062;	
    // (≜) DELTA EQUAL TO	[067B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225C, 0x0062 };
    uint32_t const ces[9] = { 0x067B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_077)
{
    // 225D 0021;	
    // (≝) EQUAL TO BY DEFINITION	[067C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225D, 0x0021 };
    uint32_t const ces[9] = { 0x067C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_078)
{
    // 225D 003F;	
    // (≝) EQUAL TO BY DEFINITION	[067C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225D, 0x003F };
    uint32_t const ces[9] = { 0x067C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_079)
{
    // 225D 0061;	
    // (≝) EQUAL TO BY DEFINITION	[067C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225D, 0x0061 };
    uint32_t const ces[9] = { 0x067C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_080)
{
    // 225D 0041;	
    // (≝) EQUAL TO BY DEFINITION	[067C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225D, 0x0041 };
    uint32_t const ces[9] = { 0x067C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_081)
{
    // 225D 0062;	
    // (≝) EQUAL TO BY DEFINITION	[067C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225D, 0x0062 };
    uint32_t const ces[9] = { 0x067C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_082)
{
    // 225E 0021;	
    // (≞) MEASURED BY	[067D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225E, 0x0021 };
    uint32_t const ces[9] = { 0x067D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_083)
{
    // 225E 003F;	
    // (≞) MEASURED BY	[067D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225E, 0x003F };
    uint32_t const ces[9] = { 0x067D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_084)
{
    // 225E 0061;	
    // (≞) MEASURED BY	[067D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225E, 0x0061 };
    uint32_t const ces[9] = { 0x067D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_085)
{
    // 225E 0041;	
    // (≞) MEASURED BY	[067D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225E, 0x0041 };
    uint32_t const ces[9] = { 0x067D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_086)
{
    // 225E 0062;	
    // (≞) MEASURED BY	[067D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225E, 0x0062 };
    uint32_t const ces[9] = { 0x067D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_087)
{
    // 225F 0021;	
    // (≟) QUESTIONED EQUAL TO	[067E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225F, 0x0021 };
    uint32_t const ces[9] = { 0x067E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_088)
{
    // 225F 003F;	
    // (≟) QUESTIONED EQUAL TO	[067E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225F, 0x003F };
    uint32_t const ces[9] = { 0x067E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_089)
{
    // 225F 0061;	
    // (≟) QUESTIONED EQUAL TO	[067E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225F, 0x0061 };
    uint32_t const ces[9] = { 0x067E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_090)
{
    // 225F 0041;	
    // (≟) QUESTIONED EQUAL TO	[067E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x225F, 0x0041 };
    uint32_t const ces[9] = { 0x067E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_091)
{
    // 225F 0062;	
    // (≟) QUESTIONED EQUAL TO	[067E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x225F, 0x0062 };
    uint32_t const ces[9] = { 0x067E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_092)
{
    // 2261 0338 0334;	
    // (≢) IDENTICAL TO, COMBINING LONG SOLIDUS OVERLAY	[067F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2261, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x067F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_093)
{
    // 2262 0334;	
    // (≢) NOT IDENTICAL TO	[067F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2262, 0x0334 };
    uint32_t const ces[10] = { 0x067F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_094)
{
    // 2261 0021;	
    // (≡) IDENTICAL TO	[067F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2261, 0x0021 };
    uint32_t const ces[9] = { 0x067F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_095)
{
    // 2262 0021;	
    // (≢) NOT IDENTICAL TO	[067F 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2262, 0x0021 };
    uint32_t const ces[11] = { 0x067F, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_096)
{
    // 2261 003F;	
    // (≡) IDENTICAL TO	[067F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2261, 0x003F };
    uint32_t const ces[9] = { 0x067F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_097)
{
    // 2262 003F;	
    // (≢) NOT IDENTICAL TO	[067F 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2262, 0x003F };
    uint32_t const ces[11] = { 0x067F, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_098)
{
    // 2261 0061;	
    // (≡) IDENTICAL TO	[067F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2261, 0x0061 };
    uint32_t const ces[9] = { 0x067F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_099)
{
    // 2261 0041;	
    // (≡) IDENTICAL TO	[067F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2261, 0x0041 };
    uint32_t const ces[9] = { 0x067F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_100)
{
    // 2262 0061;	
    // (≢) NOT IDENTICAL TO	[067F 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2262, 0x0061 };
    uint32_t const ces[11] = { 0x067F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_101)
{
    // 2262 0041;	
    // (≢) NOT IDENTICAL TO	[067F 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2262, 0x0041 };
    uint32_t const ces[11] = { 0x067F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_102)
{
    // 2261 0062;	
    // (≡) IDENTICAL TO	[067F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2261, 0x0062 };
    uint32_t const ces[9] = { 0x067F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_103)
{
    // 2262 0062;	
    // (≢) NOT IDENTICAL TO	[067F 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2262, 0x0062 };
    uint32_t const ces[11] = { 0x067F, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_104)
{
    // 2263 0021;	
    // (≣) STRICTLY EQUIVALENT TO	[0680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2263, 0x0021 };
    uint32_t const ces[9] = { 0x0680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_105)
{
    // 2263 003F;	
    // (≣) STRICTLY EQUIVALENT TO	[0680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2263, 0x003F };
    uint32_t const ces[9] = { 0x0680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_106)
{
    // 2263 0061;	
    // (≣) STRICTLY EQUIVALENT TO	[0680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2263, 0x0061 };
    uint32_t const ces[9] = { 0x0680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_107)
{
    // 2263 0041;	
    // (≣) STRICTLY EQUIVALENT TO	[0680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2263, 0x0041 };
    uint32_t const ces[9] = { 0x0680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_108)
{
    // 2263 0062;	
    // (≣) STRICTLY EQUIVALENT TO	[0680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2263, 0x0062 };
    uint32_t const ces[9] = { 0x0680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_109)
{
    // 2264 0338 0334;	
    // (≰) LESS-THAN OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0681 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2264, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0681, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_110)
{
    // 2270 0334;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2270, 0x0334 };
    uint32_t const ces[10] = { 0x0681, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_111)
{
    // 2264 0021;	
    // (≤) LESS-THAN OR EQUAL TO	[0681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2264, 0x0021 };
    uint32_t const ces[9] = { 0x0681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_112)
{
    // 2270 0021;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2270, 0x0021 };
    uint32_t const ces[11] = { 0x0681, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_113)
{
    // 2264 003F;	
    // (≤) LESS-THAN OR EQUAL TO	[0681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2264, 0x003F };
    uint32_t const ces[9] = { 0x0681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_114)
{
    // 2270 003F;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2270, 0x003F };
    uint32_t const ces[11] = { 0x0681, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_115)
{
    // 2264 0061;	
    // (≤) LESS-THAN OR EQUAL TO	[0681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2264, 0x0061 };
    uint32_t const ces[9] = { 0x0681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_116)
{
    // 2264 0041;	
    // (≤) LESS-THAN OR EQUAL TO	[0681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2264, 0x0041 };
    uint32_t const ces[9] = { 0x0681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_117)
{
    // 2270 0061;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2270, 0x0061 };
    uint32_t const ces[11] = { 0x0681, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_118)
{
    // 2270 0041;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2270, 0x0041 };
    uint32_t const ces[11] = { 0x0681, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_119)
{
    // 2264 0062;	
    // (≤) LESS-THAN OR EQUAL TO	[0681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2264, 0x0062 };
    uint32_t const ces[9] = { 0x0681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_120)
{
    // 2270 0062;	
    // (≰) NEITHER LESS-THAN NOR EQUAL TO	[0681 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2270, 0x0062 };
    uint32_t const ces[11] = { 0x0681, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_121)
{
    // 2265 0338 0334;	
    // (≱) GREATER-THAN OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0682 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2265, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0682, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_122)
{
    // 2271 0334;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2271, 0x0334 };
    uint32_t const ces[10] = { 0x0682, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_123)
{
    // 2265 0021;	
    // (≥) GREATER-THAN OR EQUAL TO	[0682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2265, 0x0021 };
    uint32_t const ces[9] = { 0x0682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_124)
{
    // 2271 0021;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2271, 0x0021 };
    uint32_t const ces[11] = { 0x0682, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_125)
{
    // 2265 003F;	
    // (≥) GREATER-THAN OR EQUAL TO	[0682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2265, 0x003F };
    uint32_t const ces[9] = { 0x0682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_126)
{
    // 2271 003F;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2271, 0x003F };
    uint32_t const ces[11] = { 0x0682, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_127)
{
    // 2265 0061;	
    // (≥) GREATER-THAN OR EQUAL TO	[0682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2265, 0x0061 };
    uint32_t const ces[9] = { 0x0682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_128)
{
    // 2265 0041;	
    // (≥) GREATER-THAN OR EQUAL TO	[0682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2265, 0x0041 };
    uint32_t const ces[9] = { 0x0682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_129)
{
    // 2271 0061;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2271, 0x0061 };
    uint32_t const ces[11] = { 0x0682, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_130)
{
    // 2271 0041;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2271, 0x0041 };
    uint32_t const ces[11] = { 0x0682, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_131)
{
    // 2265 0062;	
    // (≥) GREATER-THAN OR EQUAL TO	[0682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2265, 0x0062 };
    uint32_t const ces[9] = { 0x0682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_132)
{
    // 2271 0062;	
    // (≱) NEITHER GREATER-THAN NOR EQUAL TO	[0682 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2271, 0x0062 };
    uint32_t const ces[11] = { 0x0682, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_133)
{
    // 2266 0021;	
    // (≦) LESS-THAN OVER EQUAL TO	[0683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2266, 0x0021 };
    uint32_t const ces[9] = { 0x0683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_134)
{
    // 2266 003F;	
    // (≦) LESS-THAN OVER EQUAL TO	[0683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2266, 0x003F };
    uint32_t const ces[9] = { 0x0683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_135)
{
    // 2266 0061;	
    // (≦) LESS-THAN OVER EQUAL TO	[0683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2266, 0x0061 };
    uint32_t const ces[9] = { 0x0683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_136)
{
    // 2266 0041;	
    // (≦) LESS-THAN OVER EQUAL TO	[0683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2266, 0x0041 };
    uint32_t const ces[9] = { 0x0683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_137)
{
    // 2266 0062;	
    // (≦) LESS-THAN OVER EQUAL TO	[0683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2266, 0x0062 };
    uint32_t const ces[9] = { 0x0683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_138)
{
    // 2267 0021;	
    // (≧) GREATER-THAN OVER EQUAL TO	[0684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2267, 0x0021 };
    uint32_t const ces[9] = { 0x0684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_139)
{
    // 2267 003F;	
    // (≧) GREATER-THAN OVER EQUAL TO	[0684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2267, 0x003F };
    uint32_t const ces[9] = { 0x0684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_140)
{
    // 2267 0061;	
    // (≧) GREATER-THAN OVER EQUAL TO	[0684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2267, 0x0061 };
    uint32_t const ces[9] = { 0x0684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_141)
{
    // 2267 0041;	
    // (≧) GREATER-THAN OVER EQUAL TO	[0684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2267, 0x0041 };
    uint32_t const ces[9] = { 0x0684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_142)
{
    // 2267 0062;	
    // (≧) GREATER-THAN OVER EQUAL TO	[0684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2267, 0x0062 };
    uint32_t const ces[9] = { 0x0684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_143)
{
    // 2268 0021;	
    // (≨) LESS-THAN BUT NOT EQUAL TO	[0685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2268, 0x0021 };
    uint32_t const ces[9] = { 0x0685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_144)
{
    // 2268 003F;	
    // (≨) LESS-THAN BUT NOT EQUAL TO	[0685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2268, 0x003F };
    uint32_t const ces[9] = { 0x0685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_145)
{
    // 2268 0061;	
    // (≨) LESS-THAN BUT NOT EQUAL TO	[0685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2268, 0x0061 };
    uint32_t const ces[9] = { 0x0685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_146)
{
    // 2268 0041;	
    // (≨) LESS-THAN BUT NOT EQUAL TO	[0685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2268, 0x0041 };
    uint32_t const ces[9] = { 0x0685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_147)
{
    // 2268 0062;	
    // (≨) LESS-THAN BUT NOT EQUAL TO	[0685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2268, 0x0062 };
    uint32_t const ces[9] = { 0x0685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_148)
{
    // 2269 0021;	
    // (≩) GREATER-THAN BUT NOT EQUAL TO	[0686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2269, 0x0021 };
    uint32_t const ces[9] = { 0x0686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_149)
{
    // 2269 003F;	
    // (≩) GREATER-THAN BUT NOT EQUAL TO	[0686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2269, 0x003F };
    uint32_t const ces[9] = { 0x0686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_150)
{
    // 2269 0061;	
    // (≩) GREATER-THAN BUT NOT EQUAL TO	[0686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2269, 0x0061 };
    uint32_t const ces[9] = { 0x0686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_151)
{
    // 2269 0041;	
    // (≩) GREATER-THAN BUT NOT EQUAL TO	[0686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2269, 0x0041 };
    uint32_t const ces[9] = { 0x0686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_152)
{
    // 2269 0062;	
    // (≩) GREATER-THAN BUT NOT EQUAL TO	[0686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2269, 0x0062 };
    uint32_t const ces[9] = { 0x0686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_153)
{
    // 226A 0021;	
    // (≪) MUCH LESS-THAN	[0687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226A, 0x0021 };
    uint32_t const ces[9] = { 0x0687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_154)
{
    // 226A 003F;	
    // (≪) MUCH LESS-THAN	[0687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226A, 0x003F };
    uint32_t const ces[9] = { 0x0687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_155)
{
    // 226A 0061;	
    // (≪) MUCH LESS-THAN	[0687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226A, 0x0061 };
    uint32_t const ces[9] = { 0x0687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_156)
{
    // 226A 0041;	
    // (≪) MUCH LESS-THAN	[0687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x226A, 0x0041 };
    uint32_t const ces[9] = { 0x0687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_157)
{
    // 226A 0062;	
    // (≪) MUCH LESS-THAN	[0687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226A, 0x0062 };
    uint32_t const ces[9] = { 0x0687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_158)
{
    // 226B 0021;	
    // (≫) MUCH GREATER-THAN	[0688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226B, 0x0021 };
    uint32_t const ces[9] = { 0x0688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_159)
{
    // 226B 003F;	
    // (≫) MUCH GREATER-THAN	[0688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226B, 0x003F };
    uint32_t const ces[9] = { 0x0688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_160)
{
    // 226B 0061;	
    // (≫) MUCH GREATER-THAN	[0688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226B, 0x0061 };
    uint32_t const ces[9] = { 0x0688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_161)
{
    // 226B 0041;	
    // (≫) MUCH GREATER-THAN	[0688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x226B, 0x0041 };
    uint32_t const ces[9] = { 0x0688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_162)
{
    // 226B 0062;	
    // (≫) MUCH GREATER-THAN	[0688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226B, 0x0062 };
    uint32_t const ces[9] = { 0x0688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_163)
{
    // 226C 0021;	
    // (≬) BETWEEN	[0689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226C, 0x0021 };
    uint32_t const ces[9] = { 0x0689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_164)
{
    // 226C 003F;	
    // (≬) BETWEEN	[0689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226C, 0x003F };
    uint32_t const ces[9] = { 0x0689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_165)
{
    // 226C 0061;	
    // (≬) BETWEEN	[0689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226C, 0x0061 };
    uint32_t const ces[9] = { 0x0689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_166)
{
    // 226C 0041;	
    // (≬) BETWEEN	[0689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x226C, 0x0041 };
    uint32_t const ces[9] = { 0x0689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_167)
{
    // 226C 0062;	
    // (≬) BETWEEN	[0689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x226C, 0x0062 };
    uint32_t const ces[9] = { 0x0689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_168)
{
    // 2272 0338 0334;	
    // (≴) LESS-THAN OR EQUIVALENT TO, COMBINING LONG SOLIDUS OVERLAY	[068A | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2272, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068A, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_169)
{
    // 2274 0334;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2274, 0x0334 };
    uint32_t const ces[10] = { 0x068A, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_170)
{
    // 2272 0021;	
    // (≲) LESS-THAN OR EQUIVALENT TO	[068A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2272, 0x0021 };
    uint32_t const ces[9] = { 0x068A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_171)
{
    // 2274 0021;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2274, 0x0021 };
    uint32_t const ces[11] = { 0x068A, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_172)
{
    // 2272 003F;	
    // (≲) LESS-THAN OR EQUIVALENT TO	[068A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2272, 0x003F };
    uint32_t const ces[9] = { 0x068A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_173)
{
    // 2274 003F;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2274, 0x003F };
    uint32_t const ces[11] = { 0x068A, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_174)
{
    // 2272 0061;	
    // (≲) LESS-THAN OR EQUIVALENT TO	[068A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2272, 0x0061 };
    uint32_t const ces[9] = { 0x068A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_175)
{
    // 2272 0041;	
    // (≲) LESS-THAN OR EQUIVALENT TO	[068A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2272, 0x0041 };
    uint32_t const ces[9] = { 0x068A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_176)
{
    // 2274 0061;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2274, 0x0061 };
    uint32_t const ces[11] = { 0x068A, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_177)
{
    // 2274 0041;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2274, 0x0041 };
    uint32_t const ces[11] = { 0x068A, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_178)
{
    // 2272 0062;	
    // (≲) LESS-THAN OR EQUIVALENT TO	[068A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2272, 0x0062 };
    uint32_t const ces[9] = { 0x068A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_179)
{
    // 2274 0062;	
    // (≴) NEITHER LESS-THAN NOR EQUIVALENT TO	[068A 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2274, 0x0062 };
    uint32_t const ces[11] = { 0x068A, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_180)
{
    // 2273 0338 0334;	
    // (≵) GREATER-THAN OR EQUIVALENT TO, COMBINING LONG SOLIDUS OVERLAY	[068B | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2273, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068B, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_181)
{
    // 2275 0334;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2275, 0x0334 };
    uint32_t const ces[10] = { 0x068B, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_182)
{
    // 2273 0021;	
    // (≳) GREATER-THAN OR EQUIVALENT TO	[068B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2273, 0x0021 };
    uint32_t const ces[9] = { 0x068B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_183)
{
    // 2275 0021;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2275, 0x0021 };
    uint32_t const ces[11] = { 0x068B, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_184)
{
    // 2273 003F;	
    // (≳) GREATER-THAN OR EQUIVALENT TO	[068B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2273, 0x003F };
    uint32_t const ces[9] = { 0x068B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_185)
{
    // 2275 003F;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2275, 0x003F };
    uint32_t const ces[11] = { 0x068B, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_186)
{
    // 2273 0061;	
    // (≳) GREATER-THAN OR EQUIVALENT TO	[068B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2273, 0x0061 };
    uint32_t const ces[9] = { 0x068B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_187)
{
    // 2273 0041;	
    // (≳) GREATER-THAN OR EQUIVALENT TO	[068B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2273, 0x0041 };
    uint32_t const ces[9] = { 0x068B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_188)
{
    // 2275 0061;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2275, 0x0061 };
    uint32_t const ces[11] = { 0x068B, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_189)
{
    // 2275 0041;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2275, 0x0041 };
    uint32_t const ces[11] = { 0x068B, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_190)
{
    // 2273 0062;	
    // (≳) GREATER-THAN OR EQUIVALENT TO	[068B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2273, 0x0062 };
    uint32_t const ces[9] = { 0x068B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_191)
{
    // 2275 0062;	
    // (≵) NEITHER GREATER-THAN NOR EQUIVALENT TO	[068B 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2275, 0x0062 };
    uint32_t const ces[11] = { 0x068B, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_192)
{
    // 2276 0338 0334;	
    // (≸) LESS-THAN OR GREATER-THAN, COMBINING LONG SOLIDUS OVERLAY	[068C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2276, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_193)
{
    // 2278 0334;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2278, 0x0334 };
    uint32_t const ces[10] = { 0x068C, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_194)
{
    // 2276 0021;	
    // (≶) LESS-THAN OR GREATER-THAN	[068C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2276, 0x0021 };
    uint32_t const ces[9] = { 0x068C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_195)
{
    // 2278 0021;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2278, 0x0021 };
    uint32_t const ces[11] = { 0x068C, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_196)
{
    // 2276 003F;	
    // (≶) LESS-THAN OR GREATER-THAN	[068C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2276, 0x003F };
    uint32_t const ces[9] = { 0x068C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_197)
{
    // 2278 003F;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2278, 0x003F };
    uint32_t const ces[11] = { 0x068C, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_198)
{
    // 2276 0061;	
    // (≶) LESS-THAN OR GREATER-THAN	[068C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2276, 0x0061 };
    uint32_t const ces[9] = { 0x068C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_199)
{
    // 2276 0041;	
    // (≶) LESS-THAN OR GREATER-THAN	[068C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2276, 0x0041 };
    uint32_t const ces[9] = { 0x068C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_200)
{
    // 2278 0061;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2278, 0x0061 };
    uint32_t const ces[11] = { 0x068C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_201)
{
    // 2278 0041;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2278, 0x0041 };
    uint32_t const ces[11] = { 0x068C, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_202)
{
    // 2276 0062;	
    // (≶) LESS-THAN OR GREATER-THAN	[068C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2276, 0x0062 };
    uint32_t const ces[9] = { 0x068C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_203)
{
    // 2278 0062;	
    // (≸) NEITHER LESS-THAN NOR GREATER-THAN	[068C 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2278, 0x0062 };
    uint32_t const ces[11] = { 0x068C, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_204)
{
    // 2277 0338 0334;	
    // (≹) GREATER-THAN OR LESS-THAN, COMBINING LONG SOLIDUS OVERLAY	[068D | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2277, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068D, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_205)
{
    // 2279 0334;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2279, 0x0334 };
    uint32_t const ces[10] = { 0x068D, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_206)
{
    // 2277 0021;	
    // (≷) GREATER-THAN OR LESS-THAN	[068D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2277, 0x0021 };
    uint32_t const ces[9] = { 0x068D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_207)
{
    // 2279 0021;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2279, 0x0021 };
    uint32_t const ces[11] = { 0x068D, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_208)
{
    // 2277 003F;	
    // (≷) GREATER-THAN OR LESS-THAN	[068D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2277, 0x003F };
    uint32_t const ces[9] = { 0x068D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_209)
{
    // 2279 003F;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2279, 0x003F };
    uint32_t const ces[11] = { 0x068D, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_210)
{
    // 2277 0061;	
    // (≷) GREATER-THAN OR LESS-THAN	[068D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2277, 0x0061 };
    uint32_t const ces[9] = { 0x068D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_211)
{
    // 2277 0041;	
    // (≷) GREATER-THAN OR LESS-THAN	[068D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2277, 0x0041 };
    uint32_t const ces[9] = { 0x068D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_212)
{
    // 2279 0061;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2279, 0x0061 };
    uint32_t const ces[11] = { 0x068D, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_213)
{
    // 2279 0041;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2279, 0x0041 };
    uint32_t const ces[11] = { 0x068D, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_214)
{
    // 2277 0062;	
    // (≷) GREATER-THAN OR LESS-THAN	[068D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2277, 0x0062 };
    uint32_t const ces[9] = { 0x068D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_215)
{
    // 2279 0062;	
    // (≹) NEITHER GREATER-THAN NOR LESS-THAN	[068D 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2279, 0x0062 };
    uint32_t const ces[11] = { 0x068D, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_216)
{
    // 227A 0338 0334;	
    // (⊀) PRECEDES, COMBINING LONG SOLIDUS OVERLAY	[068E | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x227A, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068E, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_217)
{
    // 2280 0334;	
    // (⊀) DOES NOT PRECEDE	[068E | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2280, 0x0334 };
    uint32_t const ces[10] = { 0x068E, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_218)
{
    // 227A 0021;	
    // (≺) PRECEDES	[068E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227A, 0x0021 };
    uint32_t const ces[9] = { 0x068E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_219)
{
    // 2280 0021;	
    // (⊀) DOES NOT PRECEDE	[068E 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2280, 0x0021 };
    uint32_t const ces[11] = { 0x068E, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_220)
{
    // 227A 003F;	
    // (≺) PRECEDES	[068E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227A, 0x003F };
    uint32_t const ces[9] = { 0x068E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_221)
{
    // 2280 003F;	
    // (⊀) DOES NOT PRECEDE	[068E 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2280, 0x003F };
    uint32_t const ces[11] = { 0x068E, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_222)
{
    // 227A 0061;	
    // (≺) PRECEDES	[068E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227A, 0x0061 };
    uint32_t const ces[9] = { 0x068E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_223)
{
    // 227A 0041;	
    // (≺) PRECEDES	[068E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227A, 0x0041 };
    uint32_t const ces[9] = { 0x068E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_224)
{
    // 2280 0061;	
    // (⊀) DOES NOT PRECEDE	[068E 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2280, 0x0061 };
    uint32_t const ces[11] = { 0x068E, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_225)
{
    // 2280 0041;	
    // (⊀) DOES NOT PRECEDE	[068E 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2280, 0x0041 };
    uint32_t const ces[11] = { 0x068E, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_226)
{
    // 227A 0062;	
    // (≺) PRECEDES	[068E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227A, 0x0062 };
    uint32_t const ces[9] = { 0x068E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_227)
{
    // 2280 0062;	
    // (⊀) DOES NOT PRECEDE	[068E 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2280, 0x0062 };
    uint32_t const ces[11] = { 0x068E, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_228)
{
    // 227B 0338 0334;	
    // (⊁) SUCCEEDS, COMBINING LONG SOLIDUS OVERLAY	[068F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x227B, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x068F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_229)
{
    // 2281 0334;	
    // (⊁) DOES NOT SUCCEED	[068F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2281, 0x0334 };
    uint32_t const ces[10] = { 0x068F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_230)
{
    // 227B 0021;	
    // (≻) SUCCEEDS	[068F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227B, 0x0021 };
    uint32_t const ces[9] = { 0x068F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_231)
{
    // 2281 0021;	
    // (⊁) DOES NOT SUCCEED	[068F 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2281, 0x0021 };
    uint32_t const ces[11] = { 0x068F, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_232)
{
    // 227B 003F;	
    // (≻) SUCCEEDS	[068F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227B, 0x003F };
    uint32_t const ces[9] = { 0x068F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_233)
{
    // 2281 003F;	
    // (⊁) DOES NOT SUCCEED	[068F 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2281, 0x003F };
    uint32_t const ces[11] = { 0x068F, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_234)
{
    // 227B 0061;	
    // (≻) SUCCEEDS	[068F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227B, 0x0061 };
    uint32_t const ces[9] = { 0x068F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_235)
{
    // 227B 0041;	
    // (≻) SUCCEEDS	[068F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227B, 0x0041 };
    uint32_t const ces[9] = { 0x068F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_236)
{
    // 2281 0061;	
    // (⊁) DOES NOT SUCCEED	[068F 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2281, 0x0061 };
    uint32_t const ces[11] = { 0x068F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_237)
{
    // 2281 0041;	
    // (⊁) DOES NOT SUCCEED	[068F 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2281, 0x0041 };
    uint32_t const ces[11] = { 0x068F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_238)
{
    // 227B 0062;	
    // (≻) SUCCEEDS	[068F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227B, 0x0062 };
    uint32_t const ces[9] = { 0x068F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_239)
{
    // 2281 0062;	
    // (⊁) DOES NOT SUCCEED	[068F 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2281, 0x0062 };
    uint32_t const ces[11] = { 0x068F, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_240)
{
    // 227C 0338 0334;	
    // (⋠) PRECEDES OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0690 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x227C, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0690, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_241)
{
    // 22E0 0334;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E0, 0x0334 };
    uint32_t const ces[10] = { 0x0690, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_242)
{
    // 227C 0021;	
    // (≼) PRECEDES OR EQUAL TO	[0690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227C, 0x0021 };
    uint32_t const ces[9] = { 0x0690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_243)
{
    // 22E0 0021;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E0, 0x0021 };
    uint32_t const ces[11] = { 0x0690, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_244)
{
    // 227C 003F;	
    // (≼) PRECEDES OR EQUAL TO	[0690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227C, 0x003F };
    uint32_t const ces[9] = { 0x0690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_245)
{
    // 22E0 003F;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E0, 0x003F };
    uint32_t const ces[11] = { 0x0690, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_246)
{
    // 227C 0061;	
    // (≼) PRECEDES OR EQUAL TO	[0690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227C, 0x0061 };
    uint32_t const ces[9] = { 0x0690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_247)
{
    // 227C 0041;	
    // (≼) PRECEDES OR EQUAL TO	[0690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227C, 0x0041 };
    uint32_t const ces[9] = { 0x0690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_248)
{
    // 22E0 0061;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E0, 0x0061 };
    uint32_t const ces[11] = { 0x0690, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_249)
{
    // 22E0 0041;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22E0, 0x0041 };
    uint32_t const ces[11] = { 0x0690, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_250)
{
    // 227C 0062;	
    // (≼) PRECEDES OR EQUAL TO	[0690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227C, 0x0062 };
    uint32_t const ces[9] = { 0x0690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_251)
{
    // 22E0 0062;	
    // (⋠) DOES NOT PRECEDE OR EQUAL	[0690 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E0, 0x0062 };
    uint32_t const ces[11] = { 0x0690, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_252)
{
    // 227D 0338 0334;	
    // (⋡) SUCCEEDS OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0691 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x227D, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0691, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_253)
{
    // 22E1 0334;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E1, 0x0334 };
    uint32_t const ces[10] = { 0x0691, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_254)
{
    // 227D 0021;	
    // (≽) SUCCEEDS OR EQUAL TO	[0691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227D, 0x0021 };
    uint32_t const ces[9] = { 0x0691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_255)
{
    // 22E1 0021;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E1, 0x0021 };
    uint32_t const ces[11] = { 0x0691, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_256)
{
    // 227D 003F;	
    // (≽) SUCCEEDS OR EQUAL TO	[0691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227D, 0x003F };
    uint32_t const ces[9] = { 0x0691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_257)
{
    // 22E1 003F;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E1, 0x003F };
    uint32_t const ces[11] = { 0x0691, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_258)
{
    // 227D 0061;	
    // (≽) SUCCEEDS OR EQUAL TO	[0691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227D, 0x0061 };
    uint32_t const ces[9] = { 0x0691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_259)
{
    // 227D 0041;	
    // (≽) SUCCEEDS OR EQUAL TO	[0691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227D, 0x0041 };
    uint32_t const ces[9] = { 0x0691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_260)
{
    // 22E1 0061;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E1, 0x0061 };
    uint32_t const ces[11] = { 0x0691, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_261)
{
    // 22E1 0041;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22E1, 0x0041 };
    uint32_t const ces[11] = { 0x0691, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_262)
{
    // 227D 0062;	
    // (≽) SUCCEEDS OR EQUAL TO	[0691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227D, 0x0062 };
    uint32_t const ces[9] = { 0x0691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_263)
{
    // 22E1 0062;	
    // (⋡) DOES NOT SUCCEED OR EQUAL	[0691 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E1, 0x0062 };
    uint32_t const ces[11] = { 0x0691, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_264)
{
    // 227E 0021;	
    // (≾) PRECEDES OR EQUIVALENT TO	[0692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227E, 0x0021 };
    uint32_t const ces[9] = { 0x0692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_265)
{
    // 227E 003F;	
    // (≾) PRECEDES OR EQUIVALENT TO	[0692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227E, 0x003F };
    uint32_t const ces[9] = { 0x0692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_266)
{
    // 227E 0061;	
    // (≾) PRECEDES OR EQUIVALENT TO	[0692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227E, 0x0061 };
    uint32_t const ces[9] = { 0x0692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_267)
{
    // 227E 0041;	
    // (≾) PRECEDES OR EQUIVALENT TO	[0692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227E, 0x0041 };
    uint32_t const ces[9] = { 0x0692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_268)
{
    // 227E 0062;	
    // (≾) PRECEDES OR EQUIVALENT TO	[0692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227E, 0x0062 };
    uint32_t const ces[9] = { 0x0692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_269)
{
    // 227F 0021;	
    // (≿) SUCCEEDS OR EQUIVALENT TO	[0693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227F, 0x0021 };
    uint32_t const ces[9] = { 0x0693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_270)
{
    // 227F 003F;	
    // (≿) SUCCEEDS OR EQUIVALENT TO	[0693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227F, 0x003F };
    uint32_t const ces[9] = { 0x0693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_271)
{
    // 227F 0061;	
    // (≿) SUCCEEDS OR EQUIVALENT TO	[0693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227F, 0x0061 };
    uint32_t const ces[9] = { 0x0693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_272)
{
    // 227F 0041;	
    // (≿) SUCCEEDS OR EQUIVALENT TO	[0693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x227F, 0x0041 };
    uint32_t const ces[9] = { 0x0693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_273)
{
    // 227F 0062;	
    // (≿) SUCCEEDS OR EQUIVALENT TO	[0693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x227F, 0x0062 };
    uint32_t const ces[9] = { 0x0693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_274)
{
    // 2282 0338 0334;	
    // (⊄) SUBSET OF, COMBINING LONG SOLIDUS OVERLAY	[0694 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2282, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0694, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_275)
{
    // 2284 0334;	
    // (⊄) NOT A SUBSET OF	[0694 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2284, 0x0334 };
    uint32_t const ces[10] = { 0x0694, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_276)
{
    // 2282 0021;	
    // (⊂) SUBSET OF	[0694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2282, 0x0021 };
    uint32_t const ces[9] = { 0x0694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_277)
{
    // 2284 0021;	
    // (⊄) NOT A SUBSET OF	[0694 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2284, 0x0021 };
    uint32_t const ces[11] = { 0x0694, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_278)
{
    // 2282 003F;	
    // (⊂) SUBSET OF	[0694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2282, 0x003F };
    uint32_t const ces[9] = { 0x0694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_279)
{
    // 2284 003F;	
    // (⊄) NOT A SUBSET OF	[0694 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2284, 0x003F };
    uint32_t const ces[11] = { 0x0694, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_280)
{
    // 2282 0061;	
    // (⊂) SUBSET OF	[0694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2282, 0x0061 };
    uint32_t const ces[9] = { 0x0694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_281)
{
    // 2282 0041;	
    // (⊂) SUBSET OF	[0694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2282, 0x0041 };
    uint32_t const ces[9] = { 0x0694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_282)
{
    // 2284 0061;	
    // (⊄) NOT A SUBSET OF	[0694 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2284, 0x0061 };
    uint32_t const ces[11] = { 0x0694, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_283)
{
    // 2284 0041;	
    // (⊄) NOT A SUBSET OF	[0694 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2284, 0x0041 };
    uint32_t const ces[11] = { 0x0694, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_284)
{
    // 2282 0062;	
    // (⊂) SUBSET OF	[0694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2282, 0x0062 };
    uint32_t const ces[9] = { 0x0694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_285)
{
    // 2284 0062;	
    // (⊄) NOT A SUBSET OF	[0694 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2284, 0x0062 };
    uint32_t const ces[11] = { 0x0694, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_286)
{
    // 2283 0338 0334;	
    // (⊅) SUPERSET OF, COMBINING LONG SOLIDUS OVERLAY	[0695 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2283, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0695, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_287)
{
    // 2285 0334;	
    // (⊅) NOT A SUPERSET OF	[0695 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2285, 0x0334 };
    uint32_t const ces[10] = { 0x0695, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_288)
{
    // 2283 0021;	
    // (⊃) SUPERSET OF	[0695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2283, 0x0021 };
    uint32_t const ces[9] = { 0x0695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_289)
{
    // 2285 0021;	
    // (⊅) NOT A SUPERSET OF	[0695 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2285, 0x0021 };
    uint32_t const ces[11] = { 0x0695, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_290)
{
    // 2283 003F;	
    // (⊃) SUPERSET OF	[0695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2283, 0x003F };
    uint32_t const ces[9] = { 0x0695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_291)
{
    // 2285 003F;	
    // (⊅) NOT A SUPERSET OF	[0695 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2285, 0x003F };
    uint32_t const ces[11] = { 0x0695, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_292)
{
    // 2283 0061;	
    // (⊃) SUPERSET OF	[0695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2283, 0x0061 };
    uint32_t const ces[9] = { 0x0695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_293)
{
    // 2283 0041;	
    // (⊃) SUPERSET OF	[0695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2283, 0x0041 };
    uint32_t const ces[9] = { 0x0695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_294)
{
    // 2285 0061;	
    // (⊅) NOT A SUPERSET OF	[0695 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2285, 0x0061 };
    uint32_t const ces[11] = { 0x0695, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_295)
{
    // 2285 0041;	
    // (⊅) NOT A SUPERSET OF	[0695 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2285, 0x0041 };
    uint32_t const ces[11] = { 0x0695, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_296)
{
    // 2283 0062;	
    // (⊃) SUPERSET OF	[0695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2283, 0x0062 };
    uint32_t const ces[9] = { 0x0695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_297)
{
    // 2285 0062;	
    // (⊅) NOT A SUPERSET OF	[0695 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2285, 0x0062 };
    uint32_t const ces[11] = { 0x0695, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_298)
{
    // 2286 0338 0334;	
    // (⊈) SUBSET OF OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0696 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2286, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0696, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_299)
{
    // 2288 0334;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2288, 0x0334 };
    uint32_t const ces[10] = { 0x0696, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_300)
{
    // 2286 0021;	
    // (⊆) SUBSET OF OR EQUAL TO	[0696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2286, 0x0021 };
    uint32_t const ces[9] = { 0x0696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_301)
{
    // 2288 0021;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2288, 0x0021 };
    uint32_t const ces[11] = { 0x0696, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_302)
{
    // 2286 003F;	
    // (⊆) SUBSET OF OR EQUAL TO	[0696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2286, 0x003F };
    uint32_t const ces[9] = { 0x0696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_303)
{
    // 2288 003F;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2288, 0x003F };
    uint32_t const ces[11] = { 0x0696, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_304)
{
    // 2286 0061;	
    // (⊆) SUBSET OF OR EQUAL TO	[0696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2286, 0x0061 };
    uint32_t const ces[9] = { 0x0696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_305)
{
    // 2286 0041;	
    // (⊆) SUBSET OF OR EQUAL TO	[0696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2286, 0x0041 };
    uint32_t const ces[9] = { 0x0696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_306)
{
    // 2288 0061;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2288, 0x0061 };
    uint32_t const ces[11] = { 0x0696, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_307)
{
    // 2288 0041;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2288, 0x0041 };
    uint32_t const ces[11] = { 0x0696, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_308)
{
    // 2286 0062;	
    // (⊆) SUBSET OF OR EQUAL TO	[0696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2286, 0x0062 };
    uint32_t const ces[9] = { 0x0696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_309)
{
    // 2288 0062;	
    // (⊈) NEITHER A SUBSET OF NOR EQUAL TO	[0696 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2288, 0x0062 };
    uint32_t const ces[11] = { 0x0696, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_310)
{
    // 2287 0338 0334;	
    // (⊉) SUPERSET OF OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[0697 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2287, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0697, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_311)
{
    // 2289 0334;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2289, 0x0334 };
    uint32_t const ces[10] = { 0x0697, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_312)
{
    // 2287 0021;	
    // (⊇) SUPERSET OF OR EQUAL TO	[0697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2287, 0x0021 };
    uint32_t const ces[9] = { 0x0697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_313)
{
    // 2289 0021;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2289, 0x0021 };
    uint32_t const ces[11] = { 0x0697, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_314)
{
    // 2287 003F;	
    // (⊇) SUPERSET OF OR EQUAL TO	[0697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2287, 0x003F };
    uint32_t const ces[9] = { 0x0697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_315)
{
    // 2289 003F;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2289, 0x003F };
    uint32_t const ces[11] = { 0x0697, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_316)
{
    // 2287 0061;	
    // (⊇) SUPERSET OF OR EQUAL TO	[0697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2287, 0x0061 };
    uint32_t const ces[9] = { 0x0697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_317)
{
    // 2287 0041;	
    // (⊇) SUPERSET OF OR EQUAL TO	[0697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2287, 0x0041 };
    uint32_t const ces[9] = { 0x0697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_318)
{
    // 2289 0061;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2289, 0x0061 };
    uint32_t const ces[11] = { 0x0697, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_319)
{
    // 2289 0041;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2289, 0x0041 };
    uint32_t const ces[11] = { 0x0697, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_320)
{
    // 2287 0062;	
    // (⊇) SUPERSET OF OR EQUAL TO	[0697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2287, 0x0062 };
    uint32_t const ces[9] = { 0x0697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_321)
{
    // 2289 0062;	
    // (⊉) NEITHER A SUPERSET OF NOR EQUAL TO	[0697 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2289, 0x0062 };
    uint32_t const ces[11] = { 0x0697, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_322)
{
    // 228A 0021;	
    // (⊊) SUBSET OF WITH NOT EQUAL TO	[0698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228A, 0x0021 };
    uint32_t const ces[9] = { 0x0698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_323)
{
    // 228A 003F;	
    // (⊊) SUBSET OF WITH NOT EQUAL TO	[0698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228A, 0x003F };
    uint32_t const ces[9] = { 0x0698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_324)
{
    // 228A 0061;	
    // (⊊) SUBSET OF WITH NOT EQUAL TO	[0698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228A, 0x0061 };
    uint32_t const ces[9] = { 0x0698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_325)
{
    // 228A 0041;	
    // (⊊) SUBSET OF WITH NOT EQUAL TO	[0698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228A, 0x0041 };
    uint32_t const ces[9] = { 0x0698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_326)
{
    // 228A 0062;	
    // (⊊) SUBSET OF WITH NOT EQUAL TO	[0698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228A, 0x0062 };
    uint32_t const ces[9] = { 0x0698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_327)
{
    // 228B 0021;	
    // (⊋) SUPERSET OF WITH NOT EQUAL TO	[0699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228B, 0x0021 };
    uint32_t const ces[9] = { 0x0699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_328)
{
    // 228B 003F;	
    // (⊋) SUPERSET OF WITH NOT EQUAL TO	[0699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228B, 0x003F };
    uint32_t const ces[9] = { 0x0699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_329)
{
    // 228B 0061;	
    // (⊋) SUPERSET OF WITH NOT EQUAL TO	[0699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228B, 0x0061 };
    uint32_t const ces[9] = { 0x0699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_330)
{
    // 228B 0041;	
    // (⊋) SUPERSET OF WITH NOT EQUAL TO	[0699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228B, 0x0041 };
    uint32_t const ces[9] = { 0x0699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_331)
{
    // 228B 0062;	
    // (⊋) SUPERSET OF WITH NOT EQUAL TO	[0699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228B, 0x0062 };
    uint32_t const ces[9] = { 0x0699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_332)
{
    // 228C 0021;	
    // (⊌) MULTISET	[069A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228C, 0x0021 };
    uint32_t const ces[9] = { 0x069A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_333)
{
    // 228C 003F;	
    // (⊌) MULTISET	[069A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228C, 0x003F };
    uint32_t const ces[9] = { 0x069A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_334)
{
    // 228C 0061;	
    // (⊌) MULTISET	[069A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228C, 0x0061 };
    uint32_t const ces[9] = { 0x069A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_335)
{
    // 228C 0041;	
    // (⊌) MULTISET	[069A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228C, 0x0041 };
    uint32_t const ces[9] = { 0x069A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_336)
{
    // 228C 0062;	
    // (⊌) MULTISET	[069A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228C, 0x0062 };
    uint32_t const ces[9] = { 0x069A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_337)
{
    // 228D 0021;	
    // (⊍) MULTISET MULTIPLICATION	[069B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228D, 0x0021 };
    uint32_t const ces[9] = { 0x069B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_338)
{
    // 228D 003F;	
    // (⊍) MULTISET MULTIPLICATION	[069B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228D, 0x003F };
    uint32_t const ces[9] = { 0x069B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_339)
{
    // 228D 0061;	
    // (⊍) MULTISET MULTIPLICATION	[069B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228D, 0x0061 };
    uint32_t const ces[9] = { 0x069B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_340)
{
    // 228D 0041;	
    // (⊍) MULTISET MULTIPLICATION	[069B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228D, 0x0041 };
    uint32_t const ces[9] = { 0x069B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_341)
{
    // 228D 0062;	
    // (⊍) MULTISET MULTIPLICATION	[069B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228D, 0x0062 };
    uint32_t const ces[9] = { 0x069B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_342)
{
    // 228E 0021;	
    // (⊎) MULTISET UNION	[069C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228E, 0x0021 };
    uint32_t const ces[9] = { 0x069C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_343)
{
    // 228E 003F;	
    // (⊎) MULTISET UNION	[069C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228E, 0x003F };
    uint32_t const ces[9] = { 0x069C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_344)
{
    // 228E 0061;	
    // (⊎) MULTISET UNION	[069C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228E, 0x0061 };
    uint32_t const ces[9] = { 0x069C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_345)
{
    // 228E 0041;	
    // (⊎) MULTISET UNION	[069C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228E, 0x0041 };
    uint32_t const ces[9] = { 0x069C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_346)
{
    // 228E 0062;	
    // (⊎) MULTISET UNION	[069C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228E, 0x0062 };
    uint32_t const ces[9] = { 0x069C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_347)
{
    // 228F 0021;	
    // (⊏) SQUARE IMAGE OF	[069D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228F, 0x0021 };
    uint32_t const ces[9] = { 0x069D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_348)
{
    // 228F 003F;	
    // (⊏) SQUARE IMAGE OF	[069D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228F, 0x003F };
    uint32_t const ces[9] = { 0x069D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_349)
{
    // 228F 0061;	
    // (⊏) SQUARE IMAGE OF	[069D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228F, 0x0061 };
    uint32_t const ces[9] = { 0x069D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_350)
{
    // 228F 0041;	
    // (⊏) SQUARE IMAGE OF	[069D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x228F, 0x0041 };
    uint32_t const ces[9] = { 0x069D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_351)
{
    // 228F 0062;	
    // (⊏) SQUARE IMAGE OF	[069D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x228F, 0x0062 };
    uint32_t const ces[9] = { 0x069D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_352)
{
    // 2290 0021;	
    // (⊐) SQUARE ORIGINAL OF	[069E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2290, 0x0021 };
    uint32_t const ces[9] = { 0x069E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_353)
{
    // 2290 003F;	
    // (⊐) SQUARE ORIGINAL OF	[069E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2290, 0x003F };
    uint32_t const ces[9] = { 0x069E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_354)
{
    // 2290 0061;	
    // (⊐) SQUARE ORIGINAL OF	[069E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2290, 0x0061 };
    uint32_t const ces[9] = { 0x069E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_355)
{
    // 2290 0041;	
    // (⊐) SQUARE ORIGINAL OF	[069E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2290, 0x0041 };
    uint32_t const ces[9] = { 0x069E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_356)
{
    // 2290 0062;	
    // (⊐) SQUARE ORIGINAL OF	[069E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2290, 0x0062 };
    uint32_t const ces[9] = { 0x069E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_357)
{
    // 2291 0338 0334;	
    // (⋢) SQUARE IMAGE OF OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[069F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2291, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x069F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_358)
{
    // 22E2 0334;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E2, 0x0334 };
    uint32_t const ces[10] = { 0x069F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_359)
{
    // 2291 0021;	
    // (⊑) SQUARE IMAGE OF OR EQUAL TO	[069F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2291, 0x0021 };
    uint32_t const ces[9] = { 0x069F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_360)
{
    // 22E2 0021;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E2, 0x0021 };
    uint32_t const ces[11] = { 0x069F, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_361)
{
    // 2291 003F;	
    // (⊑) SQUARE IMAGE OF OR EQUAL TO	[069F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2291, 0x003F };
    uint32_t const ces[9] = { 0x069F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_362)
{
    // 22E2 003F;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E2, 0x003F };
    uint32_t const ces[11] = { 0x069F, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_363)
{
    // 2291 0061;	
    // (⊑) SQUARE IMAGE OF OR EQUAL TO	[069F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2291, 0x0061 };
    uint32_t const ces[9] = { 0x069F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_364)
{
    // 2291 0041;	
    // (⊑) SQUARE IMAGE OF OR EQUAL TO	[069F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2291, 0x0041 };
    uint32_t const ces[9] = { 0x069F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_365)
{
    // 22E2 0061;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E2, 0x0061 };
    uint32_t const ces[11] = { 0x069F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_366)
{
    // 22E2 0041;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22E2, 0x0041 };
    uint32_t const ces[11] = { 0x069F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_367)
{
    // 2291 0062;	
    // (⊑) SQUARE IMAGE OF OR EQUAL TO	[069F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2291, 0x0062 };
    uint32_t const ces[9] = { 0x069F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_368)
{
    // 22E2 0062;	
    // (⋢) NOT SQUARE IMAGE OF OR EQUAL TO	[069F 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E2, 0x0062 };
    uint32_t const ces[11] = { 0x069F, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_369)
{
    // 2292 0338 0334;	
    // (⋣) SQUARE ORIGINAL OF OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[06A0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2292, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06A0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_370)
{
    // 22E3 0334;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E3, 0x0334 };
    uint32_t const ces[10] = { 0x06A0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_371)
{
    // 2292 0021;	
    // (⊒) SQUARE ORIGINAL OF OR EQUAL TO	[06A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2292, 0x0021 };
    uint32_t const ces[9] = { 0x06A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_372)
{
    // 22E3 0021;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E3, 0x0021 };
    uint32_t const ces[11] = { 0x06A0, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_373)
{
    // 2292 003F;	
    // (⊒) SQUARE ORIGINAL OF OR EQUAL TO	[06A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2292, 0x003F };
    uint32_t const ces[9] = { 0x06A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_374)
{
    // 22E3 003F;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E3, 0x003F };
    uint32_t const ces[11] = { 0x06A0, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_375)
{
    // 2292 0061;	
    // (⊒) SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2292, 0x0061 };
    uint32_t const ces[9] = { 0x06A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_376)
{
    // 2292 0041;	
    // (⊒) SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2292, 0x0041 };
    uint32_t const ces[9] = { 0x06A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_377)
{
    // 22E3 0061;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E3, 0x0061 };
    uint32_t const ces[11] = { 0x06A0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_378)
{
    // 22E3 0041;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22E3, 0x0041 };
    uint32_t const ces[11] = { 0x06A0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_379)
{
    // 2292 0062;	
    // (⊒) SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2292, 0x0062 };
    uint32_t const ces[9] = { 0x06A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_380)
{
    // 22E3 0062;	
    // (⋣) NOT SQUARE ORIGINAL OF OR EQUAL TO	[06A0 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22E3, 0x0062 };
    uint32_t const ces[11] = { 0x06A0, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_381)
{
    // 2293 0021;	
    // (⊓) SQUARE CAP	[06A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2293, 0x0021 };
    uint32_t const ces[9] = { 0x06A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_382)
{
    // 2293 003F;	
    // (⊓) SQUARE CAP	[06A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2293, 0x003F };
    uint32_t const ces[9] = { 0x06A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_383)
{
    // 2293 0061;	
    // (⊓) SQUARE CAP	[06A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2293, 0x0061 };
    uint32_t const ces[9] = { 0x06A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_384)
{
    // 2293 0041;	
    // (⊓) SQUARE CAP	[06A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2293, 0x0041 };
    uint32_t const ces[9] = { 0x06A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_385)
{
    // 2293 0062;	
    // (⊓) SQUARE CAP	[06A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2293, 0x0062 };
    uint32_t const ces[9] = { 0x06A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_386)
{
    // 2294 0021;	
    // (⊔) SQUARE CUP	[06A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2294, 0x0021 };
    uint32_t const ces[9] = { 0x06A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_387)
{
    // 2294 003F;	
    // (⊔) SQUARE CUP	[06A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2294, 0x003F };
    uint32_t const ces[9] = { 0x06A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_388)
{
    // 2294 0061;	
    // (⊔) SQUARE CUP	[06A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2294, 0x0061 };
    uint32_t const ces[9] = { 0x06A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_389)
{
    // 2294 0041;	
    // (⊔) SQUARE CUP	[06A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2294, 0x0041 };
    uint32_t const ces[9] = { 0x06A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_390)
{
    // 2294 0062;	
    // (⊔) SQUARE CUP	[06A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2294, 0x0062 };
    uint32_t const ces[9] = { 0x06A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_391)
{
    // 2295 0021;	
    // (⊕) CIRCLED PLUS	[06A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2295, 0x0021 };
    uint32_t const ces[9] = { 0x06A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_392)
{
    // 2295 003F;	
    // (⊕) CIRCLED PLUS	[06A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2295, 0x003F };
    uint32_t const ces[9] = { 0x06A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_393)
{
    // 2295 0061;	
    // (⊕) CIRCLED PLUS	[06A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2295, 0x0061 };
    uint32_t const ces[9] = { 0x06A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_394)
{
    // 2295 0041;	
    // (⊕) CIRCLED PLUS	[06A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2295, 0x0041 };
    uint32_t const ces[9] = { 0x06A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_395)
{
    // 2295 0062;	
    // (⊕) CIRCLED PLUS	[06A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2295, 0x0062 };
    uint32_t const ces[9] = { 0x06A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_396)
{
    // 2296 0021;	
    // (⊖) CIRCLED MINUS	[06A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2296, 0x0021 };
    uint32_t const ces[9] = { 0x06A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_397)
{
    // 2296 003F;	
    // (⊖) CIRCLED MINUS	[06A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2296, 0x003F };
    uint32_t const ces[9] = { 0x06A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_398)
{
    // 2296 0061;	
    // (⊖) CIRCLED MINUS	[06A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2296, 0x0061 };
    uint32_t const ces[9] = { 0x06A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_399)
{
    // 2296 0041;	
    // (⊖) CIRCLED MINUS	[06A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2296, 0x0041 };
    uint32_t const ces[9] = { 0x06A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_400)
{
    // 2296 0062;	
    // (⊖) CIRCLED MINUS	[06A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2296, 0x0062 };
    uint32_t const ces[9] = { 0x06A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_401)
{
    // 2297 0021;	
    // (⊗) CIRCLED TIMES	[06A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2297, 0x0021 };
    uint32_t const ces[9] = { 0x06A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_402)
{
    // 2297 003F;	
    // (⊗) CIRCLED TIMES	[06A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2297, 0x003F };
    uint32_t const ces[9] = { 0x06A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_403)
{
    // 2297 0061;	
    // (⊗) CIRCLED TIMES	[06A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2297, 0x0061 };
    uint32_t const ces[9] = { 0x06A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_404)
{
    // 2297 0041;	
    // (⊗) CIRCLED TIMES	[06A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2297, 0x0041 };
    uint32_t const ces[9] = { 0x06A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_405)
{
    // 2297 0062;	
    // (⊗) CIRCLED TIMES	[06A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2297, 0x0062 };
    uint32_t const ces[9] = { 0x06A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_406)
{
    // 2298 0021;	
    // (⊘) CIRCLED DIVISION SLASH	[06A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2298, 0x0021 };
    uint32_t const ces[9] = { 0x06A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_407)
{
    // 2298 003F;	
    // (⊘) CIRCLED DIVISION SLASH	[06A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2298, 0x003F };
    uint32_t const ces[9] = { 0x06A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_408)
{
    // 2298 0061;	
    // (⊘) CIRCLED DIVISION SLASH	[06A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2298, 0x0061 };
    uint32_t const ces[9] = { 0x06A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_409)
{
    // 2298 0041;	
    // (⊘) CIRCLED DIVISION SLASH	[06A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2298, 0x0041 };
    uint32_t const ces[9] = { 0x06A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_410)
{
    // 2298 0062;	
    // (⊘) CIRCLED DIVISION SLASH	[06A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2298, 0x0062 };
    uint32_t const ces[9] = { 0x06A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_411)
{
    // 2299 0021;	
    // (⊙) CIRCLED DOT OPERATOR	[06A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2299, 0x0021 };
    uint32_t const ces[9] = { 0x06A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_412)
{
    // 2299 003F;	
    // (⊙) CIRCLED DOT OPERATOR	[06A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2299, 0x003F };
    uint32_t const ces[9] = { 0x06A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_413)
{
    // 2299 0061;	
    // (⊙) CIRCLED DOT OPERATOR	[06A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2299, 0x0061 };
    uint32_t const ces[9] = { 0x06A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_414)
{
    // 2299 0041;	
    // (⊙) CIRCLED DOT OPERATOR	[06A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2299, 0x0041 };
    uint32_t const ces[9] = { 0x06A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_415)
{
    // 2299 0062;	
    // (⊙) CIRCLED DOT OPERATOR	[06A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2299, 0x0062 };
    uint32_t const ces[9] = { 0x06A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_416)
{
    // 229A 0021;	
    // (⊚) CIRCLED RING OPERATOR	[06A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229A, 0x0021 };
    uint32_t const ces[9] = { 0x06A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_417)
{
    // 229A 003F;	
    // (⊚) CIRCLED RING OPERATOR	[06A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229A, 0x003F };
    uint32_t const ces[9] = { 0x06A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_418)
{
    // 229A 0061;	
    // (⊚) CIRCLED RING OPERATOR	[06A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229A, 0x0061 };
    uint32_t const ces[9] = { 0x06A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_419)
{
    // 229A 0041;	
    // (⊚) CIRCLED RING OPERATOR	[06A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229A, 0x0041 };
    uint32_t const ces[9] = { 0x06A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_420)
{
    // 229A 0062;	
    // (⊚) CIRCLED RING OPERATOR	[06A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229A, 0x0062 };
    uint32_t const ces[9] = { 0x06A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_421)
{
    // 229B 0021;	
    // (⊛) CIRCLED ASTERISK OPERATOR	[06A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229B, 0x0021 };
    uint32_t const ces[9] = { 0x06A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_422)
{
    // 229B 003F;	
    // (⊛) CIRCLED ASTERISK OPERATOR	[06A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229B, 0x003F };
    uint32_t const ces[9] = { 0x06A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_423)
{
    // 229B 0061;	
    // (⊛) CIRCLED ASTERISK OPERATOR	[06A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229B, 0x0061 };
    uint32_t const ces[9] = { 0x06A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_424)
{
    // 229B 0041;	
    // (⊛) CIRCLED ASTERISK OPERATOR	[06A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229B, 0x0041 };
    uint32_t const ces[9] = { 0x06A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_425)
{
    // 229B 0062;	
    // (⊛) CIRCLED ASTERISK OPERATOR	[06A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229B, 0x0062 };
    uint32_t const ces[9] = { 0x06A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_426)
{
    // 229C 0021;	
    // (⊜) CIRCLED EQUALS	[06AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229C, 0x0021 };
    uint32_t const ces[9] = { 0x06AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_427)
{
    // 229C 003F;	
    // (⊜) CIRCLED EQUALS	[06AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229C, 0x003F };
    uint32_t const ces[9] = { 0x06AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_428)
{
    // 229C 0061;	
    // (⊜) CIRCLED EQUALS	[06AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229C, 0x0061 };
    uint32_t const ces[9] = { 0x06AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_429)
{
    // 229C 0041;	
    // (⊜) CIRCLED EQUALS	[06AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229C, 0x0041 };
    uint32_t const ces[9] = { 0x06AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_430)
{
    // 229C 0062;	
    // (⊜) CIRCLED EQUALS	[06AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229C, 0x0062 };
    uint32_t const ces[9] = { 0x06AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_431)
{
    // 229D 0021;	
    // (⊝) CIRCLED DASH	[06AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229D, 0x0021 };
    uint32_t const ces[9] = { 0x06AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_432)
{
    // 229D 003F;	
    // (⊝) CIRCLED DASH	[06AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229D, 0x003F };
    uint32_t const ces[9] = { 0x06AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_433)
{
    // 229D 0061;	
    // (⊝) CIRCLED DASH	[06AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229D, 0x0061 };
    uint32_t const ces[9] = { 0x06AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_434)
{
    // 229D 0041;	
    // (⊝) CIRCLED DASH	[06AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229D, 0x0041 };
    uint32_t const ces[9] = { 0x06AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_435)
{
    // 229D 0062;	
    // (⊝) CIRCLED DASH	[06AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229D, 0x0062 };
    uint32_t const ces[9] = { 0x06AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_436)
{
    // 229E 0021;	
    // (⊞) SQUARED PLUS	[06AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229E, 0x0021 };
    uint32_t const ces[9] = { 0x06AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_437)
{
    // 229E 003F;	
    // (⊞) SQUARED PLUS	[06AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229E, 0x003F };
    uint32_t const ces[9] = { 0x06AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_438)
{
    // 229E 0061;	
    // (⊞) SQUARED PLUS	[06AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229E, 0x0061 };
    uint32_t const ces[9] = { 0x06AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_439)
{
    // 229E 0041;	
    // (⊞) SQUARED PLUS	[06AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229E, 0x0041 };
    uint32_t const ces[9] = { 0x06AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_440)
{
    // 229E 0062;	
    // (⊞) SQUARED PLUS	[06AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229E, 0x0062 };
    uint32_t const ces[9] = { 0x06AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_441)
{
    // 229F 0021;	
    // (⊟) SQUARED MINUS	[06AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229F, 0x0021 };
    uint32_t const ces[9] = { 0x06AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_442)
{
    // 229F 003F;	
    // (⊟) SQUARED MINUS	[06AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229F, 0x003F };
    uint32_t const ces[9] = { 0x06AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_443)
{
    // 229F 0061;	
    // (⊟) SQUARED MINUS	[06AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229F, 0x0061 };
    uint32_t const ces[9] = { 0x06AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_444)
{
    // 229F 0041;	
    // (⊟) SQUARED MINUS	[06AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x229F, 0x0041 };
    uint32_t const ces[9] = { 0x06AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_445)
{
    // 229F 0062;	
    // (⊟) SQUARED MINUS	[06AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x229F, 0x0062 };
    uint32_t const ces[9] = { 0x06AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_446)
{
    // 22A0 0021;	
    // (⊠) SQUARED TIMES	[06AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A0, 0x0021 };
    uint32_t const ces[9] = { 0x06AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_447)
{
    // 22A0 003F;	
    // (⊠) SQUARED TIMES	[06AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A0, 0x003F };
    uint32_t const ces[9] = { 0x06AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_448)
{
    // 22A0 0061;	
    // (⊠) SQUARED TIMES	[06AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A0, 0x0061 };
    uint32_t const ces[9] = { 0x06AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_449)
{
    // 22A0 0041;	
    // (⊠) SQUARED TIMES	[06AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A0, 0x0041 };
    uint32_t const ces[9] = { 0x06AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_450)
{
    // 22A0 0062;	
    // (⊠) SQUARED TIMES	[06AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A0, 0x0062 };
    uint32_t const ces[9] = { 0x06AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_451)
{
    // 22A1 0021;	
    // (⊡) SQUARED DOT OPERATOR	[06AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A1, 0x0021 };
    uint32_t const ces[9] = { 0x06AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_452)
{
    // 22A1 003F;	
    // (⊡) SQUARED DOT OPERATOR	[06AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A1, 0x003F };
    uint32_t const ces[9] = { 0x06AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_453)
{
    // 22A1 0061;	
    // (⊡) SQUARED DOT OPERATOR	[06AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A1, 0x0061 };
    uint32_t const ces[9] = { 0x06AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_454)
{
    // 22A1 0041;	
    // (⊡) SQUARED DOT OPERATOR	[06AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A1, 0x0041 };
    uint32_t const ces[9] = { 0x06AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_455)
{
    // 22A1 0062;	
    // (⊡) SQUARED DOT OPERATOR	[06AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A1, 0x0062 };
    uint32_t const ces[9] = { 0x06AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_456)
{
    // 22A2 0338 0334;	
    // (⊬) RIGHT TACK, COMBINING LONG SOLIDUS OVERLAY	[06B0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22A2, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06B0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_457)
{
    // 22AC 0334;	
    // (⊬) DOES NOT PROVE	[06B0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AC, 0x0334 };
    uint32_t const ces[10] = { 0x06B0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_458)
{
    // 22A2 0021;	
    // (⊢) RIGHT TACK	[06B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A2, 0x0021 };
    uint32_t const ces[9] = { 0x06B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_459)
{
    // 22AC 0021;	
    // (⊬) DOES NOT PROVE	[06B0 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AC, 0x0021 };
    uint32_t const ces[11] = { 0x06B0, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_460)
{
    // 22A2 003F;	
    // (⊢) RIGHT TACK	[06B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A2, 0x003F };
    uint32_t const ces[9] = { 0x06B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_461)
{
    // 22AC 003F;	
    // (⊬) DOES NOT PROVE	[06B0 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AC, 0x003F };
    uint32_t const ces[11] = { 0x06B0, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_462)
{
    // 22A2 0061;	
    // (⊢) RIGHT TACK	[06B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A2, 0x0061 };
    uint32_t const ces[9] = { 0x06B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_463)
{
    // 22A2 0041;	
    // (⊢) RIGHT TACK	[06B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A2, 0x0041 };
    uint32_t const ces[9] = { 0x06B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_464)
{
    // 22AC 0061;	
    // (⊬) DOES NOT PROVE	[06B0 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AC, 0x0061 };
    uint32_t const ces[11] = { 0x06B0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_465)
{
    // 22AC 0041;	
    // (⊬) DOES NOT PROVE	[06B0 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22AC, 0x0041 };
    uint32_t const ces[11] = { 0x06B0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_466)
{
    // 22A2 0062;	
    // (⊢) RIGHT TACK	[06B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A2, 0x0062 };
    uint32_t const ces[9] = { 0x06B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_467)
{
    // 22AC 0062;	
    // (⊬) DOES NOT PROVE	[06B0 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AC, 0x0062 };
    uint32_t const ces[11] = { 0x06B0, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_468)
{
    // 22A3 0021;	
    // (⊣) LEFT TACK	[06B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A3, 0x0021 };
    uint32_t const ces[9] = { 0x06B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_469)
{
    // 22A3 003F;	
    // (⊣) LEFT TACK	[06B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A3, 0x003F };
    uint32_t const ces[9] = { 0x06B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_470)
{
    // 22A3 0061;	
    // (⊣) LEFT TACK	[06B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A3, 0x0061 };
    uint32_t const ces[9] = { 0x06B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_471)
{
    // 22A3 0041;	
    // (⊣) LEFT TACK	[06B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A3, 0x0041 };
    uint32_t const ces[9] = { 0x06B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_472)
{
    // 22A3 0062;	
    // (⊣) LEFT TACK	[06B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A3, 0x0062 };
    uint32_t const ces[9] = { 0x06B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_473)
{
    // 22A4 0021;	
    // (⊤) DOWN TACK	[06B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A4, 0x0021 };
    uint32_t const ces[9] = { 0x06B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_474)
{
    // 22A4 003F;	
    // (⊤) DOWN TACK	[06B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A4, 0x003F };
    uint32_t const ces[9] = { 0x06B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_475)
{
    // 22A4 0061;	
    // (⊤) DOWN TACK	[06B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A4, 0x0061 };
    uint32_t const ces[9] = { 0x06B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_476)
{
    // 22A4 0041;	
    // (⊤) DOWN TACK	[06B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A4, 0x0041 };
    uint32_t const ces[9] = { 0x06B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_477)
{
    // 22A4 0062;	
    // (⊤) DOWN TACK	[06B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A4, 0x0062 };
    uint32_t const ces[9] = { 0x06B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_478)
{
    // 22A5 0021;	
    // (⊥) UP TACK	[06B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A5, 0x0021 };
    uint32_t const ces[9] = { 0x06B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_479)
{
    // 22A5 003F;	
    // (⊥) UP TACK	[06B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A5, 0x003F };
    uint32_t const ces[9] = { 0x06B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_480)
{
    // 22A5 0061;	
    // (⊥) UP TACK	[06B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A5, 0x0061 };
    uint32_t const ces[9] = { 0x06B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_481)
{
    // 22A5 0041;	
    // (⊥) UP TACK	[06B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A5, 0x0041 };
    uint32_t const ces[9] = { 0x06B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_482)
{
    // 22A5 0062;	
    // (⊥) UP TACK	[06B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A5, 0x0062 };
    uint32_t const ces[9] = { 0x06B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_483)
{
    // 22A6 0021;	
    // (⊦) ASSERTION	[06B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A6, 0x0021 };
    uint32_t const ces[9] = { 0x06B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_484)
{
    // 22A6 003F;	
    // (⊦) ASSERTION	[06B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A6, 0x003F };
    uint32_t const ces[9] = { 0x06B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_485)
{
    // 22A6 0061;	
    // (⊦) ASSERTION	[06B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A6, 0x0061 };
    uint32_t const ces[9] = { 0x06B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_486)
{
    // 22A6 0041;	
    // (⊦) ASSERTION	[06B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A6, 0x0041 };
    uint32_t const ces[9] = { 0x06B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_487)
{
    // 22A6 0062;	
    // (⊦) ASSERTION	[06B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A6, 0x0062 };
    uint32_t const ces[9] = { 0x06B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_488)
{
    // 22A7 0021;	
    // (⊧) MODELS	[06B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A7, 0x0021 };
    uint32_t const ces[9] = { 0x06B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_489)
{
    // 22A7 003F;	
    // (⊧) MODELS	[06B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A7, 0x003F };
    uint32_t const ces[9] = { 0x06B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_490)
{
    // 22A7 0061;	
    // (⊧) MODELS	[06B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A7, 0x0061 };
    uint32_t const ces[9] = { 0x06B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_491)
{
    // 22A7 0041;	
    // (⊧) MODELS	[06B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A7, 0x0041 };
    uint32_t const ces[9] = { 0x06B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_492)
{
    // 22A7 0062;	
    // (⊧) MODELS	[06B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A7, 0x0062 };
    uint32_t const ces[9] = { 0x06B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_493)
{
    // 22A8 0338 0334;	
    // (⊭) TRUE, COMBINING LONG SOLIDUS OVERLAY	[06B6 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22A8, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06B6, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_494)
{
    // 22AD 0334;	
    // (⊭) NOT TRUE	[06B6 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AD, 0x0334 };
    uint32_t const ces[10] = { 0x06B6, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_495)
{
    // 22A8 0021;	
    // (⊨) TRUE	[06B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A8, 0x0021 };
    uint32_t const ces[9] = { 0x06B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_496)
{
    // 22AD 0021;	
    // (⊭) NOT TRUE	[06B6 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AD, 0x0021 };
    uint32_t const ces[11] = { 0x06B6, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_497)
{
    // 22A8 003F;	
    // (⊨) TRUE	[06B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A8, 0x003F };
    uint32_t const ces[9] = { 0x06B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_498)
{
    // 22AD 003F;	
    // (⊭) NOT TRUE	[06B6 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AD, 0x003F };
    uint32_t const ces[11] = { 0x06B6, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_023_499)
{
    // 22A8 0061;	
    // (⊨) TRUE	[06B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A8, 0x0061 };
    uint32_t const ces[9] = { 0x06B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

