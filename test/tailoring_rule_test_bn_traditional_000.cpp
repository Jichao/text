
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/table_serialization.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    collation_table table =
        tailored_collation_table(
            data::bn::traditional_collation_tailoring(),
            "bn::traditional_collation_tailoring()", error, warning);
    save_table(table, "table.bin");
    return load_table("table.bin");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, bn_traditional_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0994),
        std::vector<uint32_t>(1, 0x0982),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0982),
        std::vector<uint32_t>(1, 0x0983),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0983),
        std::vector<uint32_t>(1, 0x0981),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0981),
        std::vector<uint32_t>{0x0995, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd},
        std::vector<uint32_t>{0x0996, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd},
        std::vector<uint32_t>{0x0997, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd},
        std::vector<uint32_t>{0x0998, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd},
        std::vector<uint32_t>{0x0999, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd},
        std::vector<uint32_t>{0x099a, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd},
        std::vector<uint32_t>{0x099b, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd},
        std::vector<uint32_t>{0x099c, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd},
        std::vector<uint32_t>{0x099d, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd},
        std::vector<uint32_t>{0x099e, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd},
        std::vector<uint32_t>{0x099f, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd},
        std::vector<uint32_t>{0x09a0, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd},
        std::vector<uint32_t>{0x09a1, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd},
        std::vector<uint32_t>{0x09a2, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd},
        std::vector<uint32_t>{0x09a3, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd},
        std::vector<uint32_t>(1, 0x09ce),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09ce),
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x200d},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x200d},
        std::vector<uint32_t>{0x09a4, 0x09cd},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x200d},
        std::vector<uint32_t>{0x09a4, 0x09cd},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd},
        std::vector<uint32_t>{0x09a5, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd},
        std::vector<uint32_t>{0x09a6, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd},
        std::vector<uint32_t>{0x09a7, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd},
        std::vector<uint32_t>{0x09a8, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd},
        std::vector<uint32_t>{0x09aa, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd},
        std::vector<uint32_t>{0x09ab, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd},
        std::vector<uint32_t>{0x09ac, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd},
        std::vector<uint32_t>{0x09ad, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd},
        std::vector<uint32_t>{0x09ae, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd},
        std::vector<uint32_t>{0x09af, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd},
        std::vector<uint32_t>{0x09b0, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd},
        std::vector<uint32_t>{0x09f0, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd},
        std::vector<uint32_t>{0x09b2, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd},
        std::vector<uint32_t>{0x09f1, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd},
        std::vector<uint32_t>{0x09b6, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd},
        std::vector<uint32_t>{0x09b7, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd},
        std::vector<uint32_t>{0x09b8, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd},
        std::vector<uint32_t>{0x09b9, 0x09cd},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x0995),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x0995, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x0995, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x0995, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x0995, 0x09c1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x0995, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x0995, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x0995, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x0995, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x0995, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x0995, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x0995, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x0995, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x0995, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x0996),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x0996, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x0996, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x0996, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x0996, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x0996, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x0996, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x0996, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x0996, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x0996, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x0996, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x0996, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x0996, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x0996, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x0997),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x0997, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x0997, 0x09bf},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_003)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x0997, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x0997, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x0997, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x0997, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x0997, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x0997, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x0997, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x0997, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x0997, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x0997, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x0997, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x0998),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x0998, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x0998, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x0998, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x0998, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x0998, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x0998, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x0998, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x0998, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x0998, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x0998, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x0998, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x0998, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0998, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x0998, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x0999),
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_004)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x0999, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x0999, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x0999, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x0999, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x0999, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x0999, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x0999, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x0999, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x0999, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x0999, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x0999, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x0999, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0999, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x0999, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099a),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099a, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099a, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099a, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099a, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099a, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099a, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099a, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099a, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099a, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099a, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099a, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099a, 0x09cb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_005)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099a, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099a, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099b),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099b, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099b, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099b, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099b, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099b, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099b, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099b, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099b, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099b, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099b, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099b, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099b, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099b, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099b, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099c),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099c, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099c, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099c, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099c, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099c, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099c, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099c, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099c, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099c, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099c, 0x09c7},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_006)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099c, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099c, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099c, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099d),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099d, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099d, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099d, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099d, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099d, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099d, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099d, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099d, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099d, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099d, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099d, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099d, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099d, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099d, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099e),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099e, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099e, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099e, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099e, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099e, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099e, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099e, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099e, 0x09e2},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_007)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099e, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099e, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099e, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099e, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099e, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099e, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x099f),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x099f, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x099f, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x099f, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x099f, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x099f, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x099f, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x099f, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x099f, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x099f, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x099f, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x099f, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x099f, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099f, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x099f, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a0),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a0, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a0, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a0, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a0, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a0, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a0, 0x09c3},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_008)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a0, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a0, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a0, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a0, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a0, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a0, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a0, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a0, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a1),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a1, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a1, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a1, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a1, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a1, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a1, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a1, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a1, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a1, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a1, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a1, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a1, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a1, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a2),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a2, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a2, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a2, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a2, 0x09c1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_009)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a2, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a2, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a2, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a2, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a2, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a2, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a2, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a2, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a2, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a3),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a3, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a3, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a3, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a3, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a3, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a3, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a3, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a3, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a3, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a3, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a3, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a3, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a3, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a3, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a4),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a4, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a4, 0x09bf},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_010)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a4, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a4, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a4, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a4, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a4, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a4, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a4, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a4, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a4, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a4, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a4, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a4, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a5),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a5, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a5, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a5, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a5, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a5, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a5, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a5, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a5, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a5, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a5, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a5, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a5, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a5, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a5, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a6),
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_011)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a6, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a6, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a6, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a6, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a6, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a6, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a6, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a6, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a6, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a6, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a6, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a6, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a6, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a6, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a7),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a7, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a7, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a7, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a7, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a7, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a7, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a7, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a7, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a7, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a7, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a7, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a7, 0x09cb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_012)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a7, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a7, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09a8),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09a8, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09a8, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09a8, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09a8, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09a8, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09a8, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09a8, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09a8, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09a8, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09a8, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09a8, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09a8, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a8, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09a8, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09aa),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09aa, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09aa, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09aa, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09aa, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09aa, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09aa, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09aa, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09aa, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09aa, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09aa, 0x09c7},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_013)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09aa, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09aa, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09aa, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09aa, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09ab),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09ab, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09ab, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09ab, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09ab, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09ab, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09ab, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09ab, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09ab, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09ab, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09ab, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09ab, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09ab, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09ab, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09ac),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09ac, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09ac, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09ac, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09ac, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09ac, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09ac, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09ac, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09ac, 0x09e2},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_014)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09ac, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09ac, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09ac, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09ac, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09ac, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09ad),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09ad, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09ad, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09ad, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09ad, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09ad, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09ad, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09ad, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09ad, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09ad, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09ad, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09ad, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09ad, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ad, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09ad, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09ae),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09ae, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09ae, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09ae, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09ae, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09ae, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09ae, 0x09c3},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_015)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09ae, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09ae, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09ae, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09ae, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09ae, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09ae, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ae, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09ae, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09af),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09af, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09af, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09af, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09af, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09af, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09af, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09af, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09af, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09af, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09af, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09af, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09af, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09af, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b0),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b0, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b0, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b0, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b0, 0x09c1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_016)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b0, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b0, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b0, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b0, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b0, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b0, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b0, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b0, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b0, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b0, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09f0),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09f0, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09f0, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09f0, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09f0, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09f0, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09f0, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09f0, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09f0, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09f0, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09f0, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09f0, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09f0, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f0, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09f0, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b2),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b2, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b2, 0x09bf},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_017)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b2, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b2, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b2, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b2, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b2, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b2, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b2, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b2, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b2, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b2, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b2, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b2, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09f1),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09f1, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09f1, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09f1, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09f1, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09f1, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09f1, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09f1, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09f1, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09f1, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09f1, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09f1, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09f1, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09f1, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09f1, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b6),
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_018)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b6, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b6, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b6, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b6, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b6, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b6, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b6, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b6, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b6, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b6, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b6, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b6, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b6, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b6, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b7),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b7, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b7, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b7, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b7, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b7, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b7, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b7, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b7, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b7, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b7, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b7, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b7, 0x09cb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, bn_traditional_000_019)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b7, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b7, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b8),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b8, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b8, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b8, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b8, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b8, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b8, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b8, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b8, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b8, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b8, 0x09c7},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b8, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b8, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b8, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b8, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0985},
        std::vector<uint32_t>(1, 0x09b9),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0986},
        std::vector<uint32_t>{0x09b9, 0x09be},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0987},
        std::vector<uint32_t>{0x09b9, 0x09bf},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0988},
        std::vector<uint32_t>{0x09b9, 0x09c0},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0989},
        std::vector<uint32_t>{0x09b9, 0x09c1},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x098a},
        std::vector<uint32_t>{0x09b9, 0x09c2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x098b},
        std::vector<uint32_t>{0x09b9, 0x09c3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x09e0},
        std::vector<uint32_t>{0x09b9, 0x09c4},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x098c},
        std::vector<uint32_t>{0x09b9, 0x09e2},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x09e1},
        std::vector<uint32_t>{0x09b9, 0x09e3},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x098f},
        std::vector<uint32_t>{0x09b9, 0x09c7},
        table(), collation_strength::quaternary),
        0);
}

