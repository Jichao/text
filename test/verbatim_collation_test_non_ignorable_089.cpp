// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_089_000)
{
    // 111E6 0062;	
    // (𑇦) SINHALA ARCHAIC DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_001)
{
    // 112F6 0062;	
    // (𑋶) KHUDAWADI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_002)
{
    // 11456 0062;	
    // (𑑖) NEWA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11456, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_003)
{
    // 114D6 0062;	
    // (𑓖) TIRHUTA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_004)
{
    // 11656 0062;	
    // (𑙖) MODI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11656, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_005)
{
    // 116C6 0062;	
    // (𑛆) TAKRI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_006)
{
    // 11736 0062;	
    // (𑜶) AHOM DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11736, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_007)
{
    // 118E6 0062;	
    // (𑣦) WARANG CITI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_008)
{
    // 11C56 0062;	
    // (𑱖) BHAIKSUKI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_009)
{
    // 11C5F 0062;	
    // (𑱟) BHAIKSUKI NUMBER SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_010)
{
    // 11D56 0062;	
    // (𑵖) MASARAM GONDI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_011)
{
    // 12404 0062;	
    // (𒐄) CUNEIFORM NUMERIC SIGN SIX ASH	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12404, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_012)
{
    // 1240B 0062;	
    // (𒐋) CUNEIFORM NUMERIC SIGN SIX DISH	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_013)
{
    // 12411 0062;	
    // (𒐑) CUNEIFORM NUMERIC SIGN SIX U	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12411, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_014)
{
    // 1241A 0062;	
    // (𒐚) CUNEIFORM NUMERIC SIGN SIX GESH2	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_015)
{
    // 12428 0062;	
    // (𒐨) CUNEIFORM NUMERIC SIGN SIX SHAR2	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12428, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_016)
{
    // 12440 0062;	
    // (𒑀) CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12440, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_017)
{
    // 1244E 0062;	
    // (𒑎) CUNEIFORM NUMERIC SIGN SIX ASH TENU	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_018)
{
    // 1246B 0062;	
    // (𒑫) CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_019)
{
    // 16A66 0062;	
    // (𖩦) MRO DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A66, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_020)
{
    // 16B56 0062;	
    // (𖭖) PAHAWH HMONG DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_021)
{
    // 1D365 0062;	
    // (𝍥) COUNTING ROD UNIT DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D365, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_022)
{
    // 1E8CC 0062;	
    // (‎‎𞣌‎‎) MENDE KIKAKUI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_023)
{
    // 1E956 0062;	
    // (‎‎𞥖‎‎) ADLAM DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E956, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_024)
{
    // FF16 0062;	
    // (６) FULLWIDTH DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF16, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_025)
{
    // 0F2F 0062;	
    // (༯) TIBETAN DIGIT HALF SIX	[1CA9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_026)
{
    // 1D7D4 0062;	
    // (𝟔) MATHEMATICAL BOLD DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D4, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_027)
{
    // 1D7DE 0062;	
    // (𝟞) MATHEMATICAL DOUBLE-STRUCK DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DE, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_028)
{
    // 1D7E8 0062;	
    // (𝟨) MATHEMATICAL SANS-SERIF DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_029)
{
    // 1D7F2 0062;	
    // (𝟲) MATHEMATICAL SANS-SERIF BOLD DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_030)
{
    // 1D7FC 0062;	
    // (𝟼) MATHEMATICAL MONOSPACE DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_031)
{
    // 2465 0062;	
    // (⑥) CIRCLED DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2465, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_032)
{
    // 24FA 0062;	
    // (⓺) DOUBLE CIRCLED DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FA, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_033)
{
    // 277B 0062;	
    // (❻) DINGBAT NEGATIVE CIRCLED DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_034)
{
    // 2785 0062;	
    // (➅) DINGBAT CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2785, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_035)
{
    // 278F 0062;	
    // (➏) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_036)
{
    // 2076 0062;	
    // (⁶) SUPERSCRIPT SIX	[1CA9 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2076, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_037)
{
    // 2086 0062;	
    // (₆) SUBSCRIPT SIX	[1CA9 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2086, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_038)
{
    // 33E5 0021;	
    // (㏥) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX	[1CA9 FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E5, 0x0021 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_039)
{
    // 33E5 003F;	
    // (㏥) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX	[1CA9 FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E5, 0x003F };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_040)
{
    // 33E5 0061;	
    // (㏥) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX	[1CA9 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E5, 0x0061 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_041)
{
    // 33E5 0041;	
    // (㏥) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX	[1CA9 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E5, 0x0041 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_042)
{
    // 33E5 0062;	
    // (㏥) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX	[1CA9 FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E5, 0x0062 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_043)
{
    // 32C5 0021;	
    // (㋅) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE	[1CA9 FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C5, 0x0021 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_044)
{
    // 32C5 003F;	
    // (㋅) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE	[1CA9 FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C5, 0x003F };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_045)
{
    // 32C5 0061;	
    // (㋅) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE	[1CA9 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C5, 0x0061 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_046)
{
    // 32C5 0041;	
    // (㋅) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE	[1CA9 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C5, 0x0041 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_047)
{
    // 32C5 0062;	
    // (㋅) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE	[1CA9 FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C5, 0x0062 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_048)
{
    // 335E 0021;	
    // (㍞) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX	[1CA9 FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335E, 0x0021 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_049)
{
    // 335E 003F;	
    // (㍞) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX	[1CA9 FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335E, 0x003F };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_050)
{
    // 335E 0061;	
    // (㍞) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX	[1CA9 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335E, 0x0061 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_051)
{
    // 335E 0041;	
    // (㍞) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX	[1CA9 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335E, 0x0041 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_052)
{
    // 335E 0062;	
    // (㍞) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX	[1CA9 FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335E, 0x0062 };
    uint32_t const ces[13] = { 0x1CA9, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_053)
{
    // 1F108 0021;	
    // (🄈) DIGIT SEVEN COMMA	[1CAA 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F108, 0x0021 };
    uint32_t const ces[12] = { 0x1CAA, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_054)
{
    // 1F108 003F;	
    // (🄈) DIGIT SEVEN COMMA	[1CAA 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F108, 0x003F };
    uint32_t const ces[12] = { 0x1CAA, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_055)
{
    // 1F108 0061;	
    // (🄈) DIGIT SEVEN COMMA	[1CAA 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F108, 0x0061 };
    uint32_t const ces[12] = { 0x1CAA, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_056)
{
    // 1F108 0041;	
    // (🄈) DIGIT SEVEN COMMA	[1CAA 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F108, 0x0041 };
    uint32_t const ces[12] = { 0x1CAA, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_057)
{
    // 1F108 0062;	
    // (🄈) DIGIT SEVEN COMMA	[1CAA 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F108, 0x0062 };
    uint32_t const ces[12] = { 0x1CAA, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_058)
{
    // 0037 0021;	
    // (7) DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0037, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_059)
{
    // 0667 0021;	
    // (‎٧‎) ARABIC-INDIC DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0667, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_060)
{
    // 06F7 0021;	
    // (۷) EXTENDED ARABIC-INDIC DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_061)
{
    // 07C7 0021;	
    // (‎‎߇‎‎) NKO DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_062)
{
    // 096D 0021;	
    // (७) DEVANAGARI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_063)
{
    // 09ED 0021;	
    // (৭) BENGALI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09ED, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_064)
{
    // 0A6D 0021;	
    // (੭) GURMUKHI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_065)
{
    // 0AED 0021;	
    // (૭) GUJARATI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AED, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_066)
{
    // 0B6D 0021;	
    // (୭) ORIYA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_067)
{
    // 0BED 0021;	
    // (௭) TAMIL DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BED, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_068)
{
    // 0C6D 0021;	
    // (౭) TELUGU DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_069)
{
    // 0CED 0021;	
    // (೭) KANNADA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CED, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_070)
{
    // 0D6D 0021;	
    // (൭) MALAYALAM DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_071)
{
    // 0DED 0021;	
    // (෭) SINHALA LITH DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DED, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_072)
{
    // 0E57 0021;	
    // (๗) THAI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_073)
{
    // 0ED7 0021;	
    // (໗) LAO DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_074)
{
    // 0F27 0021;	
    // (༧) TIBETAN DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F27, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_075)
{
    // 1047 0021;	
    // (၇) MYANMAR DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1047, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_076)
{
    // 1097 0021;	
    // (႗) MYANMAR SHAN DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1097, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_077)
{
    // 136F 0021;	
    // (፯) ETHIOPIC DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_078)
{
    // 17E7 0021;	
    // (៧) KHMER DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_079)
{
    // 17F7 0021;	
    // (៷) KHMER SYMBOL LEK ATTAK PRAM-PII	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_080)
{
    // 1817 0021;	
    // (᠗) MONGOLIAN DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1817, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_081)
{
    // 194D 0021;	
    // (᥍) LIMBU DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_082)
{
    // 19D7 0021;	
    // (᧗) NEW TAI LUE DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_083)
{
    // 1A87 0021;	
    // (᪇) TAI THAM HORA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A87, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_084)
{
    // 1A97 0021;	
    // (᪗) TAI THAM THAM DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A97, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_085)
{
    // 1B57 0021;	
    // (᭗) BALINESE DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_086)
{
    // 1BB7 0021;	
    // (᮷) SUNDANESE DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_087)
{
    // 1C47 0021;	
    // (᱇) LEPCHA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C47, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_088)
{
    // 1C57 0021;	
    // (᱗) OL CHIKI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_089)
{
    // 3027 0021;	
    // (〧) HANGZHOU NUMERAL SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3027, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_090)
{
    // A627 0021;	
    // (꘧) VAI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA627, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_091)
{
    // A8D7 0021;	
    // (꣗) SAURASHTRA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_092)
{
    // A907 0021;	
    // (꤇) KAYAH LI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA907, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_093)
{
    // A9D7 0021;	
    // (꧗) JAVANESE DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_094)
{
    // A9F7 0021;	
    // (꧷) MYANMAR TAI LAING DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_095)
{
    // AA57 0021;	
    // (꩗) CHAM DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_096)
{
    // ABF7 0021;	
    // (꯷) MEETEI MAYEK DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_097)
{
    // 1010D 0021;	
    // (𐄍) AEGEAN NUMBER SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_098)
{
    // 102E7 0021;	
    // (𐋧) COPTIC EPACT DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_099)
{
    // 104A7 0021;	
    // (𐒧) OSMANYA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_100)
{
    // 109C6 0021;	
    // (‎‎𐧆‎‎) MEROITIC CURSIVE NUMBER SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C6, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_101)
{
    // 10E66 0021;	
    // (‎𐹦‎) RUMI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E66, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_102)
{
    // 11058 0021;	
    // (𑁘) BRAHMI NUMBER SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11058, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_103)
{
    // 1106D 0021;	
    // (𑁭) BRAHMI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_104)
{
    // 110F7 0021;	
    // (𑃷) SORA SOMPENG DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_105)
{
    // 1113D 0021;	
    // (𑄽) CHAKMA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_106)
{
    // 111D7 0021;	
    // (𑇗) SHARADA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_107)
{
    // 111E7 0021;	
    // (𑇧) SINHALA ARCHAIC DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_108)
{
    // 112F7 0021;	
    // (𑋷) KHUDAWADI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_109)
{
    // 11457 0021;	
    // (𑑗) NEWA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11457, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_110)
{
    // 114D7 0021;	
    // (𑓗) TIRHUTA DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_111)
{
    // 11657 0021;	
    // (𑙗) MODI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11657, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_112)
{
    // 116C7 0021;	
    // (𑛇) TAKRI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_113)
{
    // 11737 0021;	
    // (𑜷) AHOM DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11737, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_114)
{
    // 118E7 0021;	
    // (𑣧) WARANG CITI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_115)
{
    // 11C57 0021;	
    // (𑱗) BHAIKSUKI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_116)
{
    // 11C60 0021;	
    // (𑱠) BHAIKSUKI NUMBER SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C60, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_117)
{
    // 11D57 0021;	
    // (𑵗) MASARAM GONDI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_118)
{
    // 12405 0021;	
    // (𒐅) CUNEIFORM NUMERIC SIGN SEVEN ASH	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12405, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_119)
{
    // 1240C 0021;	
    // (𒐌) CUNEIFORM NUMERIC SIGN SEVEN DISH	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240C, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_120)
{
    // 12412 0021;	
    // (𒐒) CUNEIFORM NUMERIC SIGN SEVEN U	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12412, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_121)
{
    // 1241B 0021;	
    // (𒐛) CUNEIFORM NUMERIC SIGN SEVEN GESH2	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241B, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_122)
{
    // 12429 0021;	
    // (𒐩) CUNEIFORM NUMERIC SIGN SEVEN SHAR2	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12429, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_123)
{
    // 12441 0021;	
    // (𒑁) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12441, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_124)
{
    // 12442 0021;	
    // (𒑂) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12442, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_125)
{
    // 12443 0021;	
    // (𒑃) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12443, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_126)
{
    // 1246C 0021;	
    // (𒑬) CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246C, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_127)
{
    // 16A67 0021;	
    // (𖩧) MRO DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A67, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_128)
{
    // 16B57 0021;	
    // (𖭗) PAHAWH HMONG DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B57, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_129)
{
    // 1D366 0021;	
    // (𝍦) COUNTING ROD UNIT DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D366, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_130)
{
    // 1E8CD 0021;	
    // (‎‎𞣍‎‎) MENDE KIKAKUI DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CD, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_131)
{
    // 1E957 0021;	
    // (‎‎𞥗‎‎) ADLAM DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E957, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_132)
{
    // FF17 0021;	
    // (７) FULLWIDTH DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF17, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_133)
{
    // 0F30 0021;	
    // (༰) TIBETAN DIGIT HALF SEVEN	[1CAA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F30, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_134)
{
    // 1D7D5 0021;	
    // (𝟕) MATHEMATICAL BOLD DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_135)
{
    // 1D7DF 0021;	
    // (𝟟) MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_136)
{
    // 1D7E9 0021;	
    // (𝟩) MATHEMATICAL SANS-SERIF DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_137)
{
    // 1D7F3 0021;	
    // (𝟳) MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_138)
{
    // 1D7FD 0021;	
    // (𝟽) MATHEMATICAL MONOSPACE DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FD, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_139)
{
    // 2466 0021;	
    // (⑦) CIRCLED DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2466, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_140)
{
    // 24FB 0021;	
    // (⓻) DOUBLE CIRCLED DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FB, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_141)
{
    // 277C 0021;	
    // (❼) DINGBAT NEGATIVE CIRCLED DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277C, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_142)
{
    // 2786 0021;	
    // (➆) DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2786, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_143)
{
    // 2790 0021;	
    // (➐) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2790, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_144)
{
    // 2077 0021;	
    // (⁷) SUPERSCRIPT SEVEN	[1CAA 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2077, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_145)
{
    // 2087 0021;	
    // (₇) SUBSCRIPT SEVEN	[1CAA 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2087, 0x0021 };
    uint32_t const ces[9] = { 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_146)
{
    // 0037 003F;	
    // (7) DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0037, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_147)
{
    // 0667 003F;	
    // (‎٧‎) ARABIC-INDIC DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0667, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_148)
{
    // 06F7 003F;	
    // (۷) EXTENDED ARABIC-INDIC DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_149)
{
    // 07C7 003F;	
    // (‎‎߇‎‎) NKO DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_150)
{
    // 096D 003F;	
    // (७) DEVANAGARI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_151)
{
    // 09ED 003F;	
    // (৭) BENGALI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09ED, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_152)
{
    // 0A6D 003F;	
    // (੭) GURMUKHI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_153)
{
    // 0AED 003F;	
    // (૭) GUJARATI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AED, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_154)
{
    // 0B6D 003F;	
    // (୭) ORIYA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_155)
{
    // 0BED 003F;	
    // (௭) TAMIL DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BED, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_156)
{
    // 0C6D 003F;	
    // (౭) TELUGU DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_157)
{
    // 0CED 003F;	
    // (೭) KANNADA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CED, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_158)
{
    // 0D6D 003F;	
    // (൭) MALAYALAM DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_159)
{
    // 0DED 003F;	
    // (෭) SINHALA LITH DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DED, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_160)
{
    // 0E57 003F;	
    // (๗) THAI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_161)
{
    // 0ED7 003F;	
    // (໗) LAO DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_162)
{
    // 0F27 003F;	
    // (༧) TIBETAN DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F27, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_163)
{
    // 1047 003F;	
    // (၇) MYANMAR DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1047, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_164)
{
    // 1097 003F;	
    // (႗) MYANMAR SHAN DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1097, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_165)
{
    // 136F 003F;	
    // (፯) ETHIOPIC DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136F, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_166)
{
    // 17E7 003F;	
    // (៧) KHMER DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_167)
{
    // 17F7 003F;	
    // (៷) KHMER SYMBOL LEK ATTAK PRAM-PII	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_168)
{
    // 1817 003F;	
    // (᠗) MONGOLIAN DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1817, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_169)
{
    // 194D 003F;	
    // (᥍) LIMBU DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_170)
{
    // 19D7 003F;	
    // (᧗) NEW TAI LUE DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_171)
{
    // 1A87 003F;	
    // (᪇) TAI THAM HORA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A87, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_172)
{
    // 1A97 003F;	
    // (᪗) TAI THAM THAM DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A97, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_173)
{
    // 1B57 003F;	
    // (᭗) BALINESE DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_174)
{
    // 1BB7 003F;	
    // (᮷) SUNDANESE DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_175)
{
    // 1C47 003F;	
    // (᱇) LEPCHA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C47, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_176)
{
    // 1C57 003F;	
    // (᱗) OL CHIKI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_177)
{
    // 3027 003F;	
    // (〧) HANGZHOU NUMERAL SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3027, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_178)
{
    // A627 003F;	
    // (꘧) VAI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA627, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_179)
{
    // A8D7 003F;	
    // (꣗) SAURASHTRA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_180)
{
    // A907 003F;	
    // (꤇) KAYAH LI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA907, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_181)
{
    // A9D7 003F;	
    // (꧗) JAVANESE DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_182)
{
    // A9F7 003F;	
    // (꧷) MYANMAR TAI LAING DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_183)
{
    // AA57 003F;	
    // (꩗) CHAM DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_184)
{
    // ABF7 003F;	
    // (꯷) MEETEI MAYEK DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_185)
{
    // 1010D 003F;	
    // (𐄍) AEGEAN NUMBER SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_186)
{
    // 102E7 003F;	
    // (𐋧) COPTIC EPACT DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_187)
{
    // 104A7 003F;	
    // (𐒧) OSMANYA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_188)
{
    // 109C6 003F;	
    // (‎‎𐧆‎‎) MEROITIC CURSIVE NUMBER SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C6, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_189)
{
    // 10E66 003F;	
    // (‎𐹦‎) RUMI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E66, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_190)
{
    // 11058 003F;	
    // (𑁘) BRAHMI NUMBER SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11058, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_191)
{
    // 1106D 003F;	
    // (𑁭) BRAHMI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_192)
{
    // 110F7 003F;	
    // (𑃷) SORA SOMPENG DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_193)
{
    // 1113D 003F;	
    // (𑄽) CHAKMA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113D, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_194)
{
    // 111D7 003F;	
    // (𑇗) SHARADA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_195)
{
    // 111E7 003F;	
    // (𑇧) SINHALA ARCHAIC DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_196)
{
    // 112F7 003F;	
    // (𑋷) KHUDAWADI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_197)
{
    // 11457 003F;	
    // (𑑗) NEWA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11457, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_198)
{
    // 114D7 003F;	
    // (𑓗) TIRHUTA DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_199)
{
    // 11657 003F;	
    // (𑙗) MODI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11657, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_200)
{
    // 116C7 003F;	
    // (𑛇) TAKRI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_201)
{
    // 11737 003F;	
    // (𑜷) AHOM DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11737, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_202)
{
    // 118E7 003F;	
    // (𑣧) WARANG CITI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E7, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_203)
{
    // 11C57 003F;	
    // (𑱗) BHAIKSUKI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_204)
{
    // 11C60 003F;	
    // (𑱠) BHAIKSUKI NUMBER SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C60, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_205)
{
    // 11D57 003F;	
    // (𑵗) MASARAM GONDI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_206)
{
    // 12405 003F;	
    // (𒐅) CUNEIFORM NUMERIC SIGN SEVEN ASH	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12405, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_207)
{
    // 1240C 003F;	
    // (𒐌) CUNEIFORM NUMERIC SIGN SEVEN DISH	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240C, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_208)
{
    // 12412 003F;	
    // (𒐒) CUNEIFORM NUMERIC SIGN SEVEN U	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12412, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_209)
{
    // 1241B 003F;	
    // (𒐛) CUNEIFORM NUMERIC SIGN SEVEN GESH2	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241B, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_210)
{
    // 12429 003F;	
    // (𒐩) CUNEIFORM NUMERIC SIGN SEVEN SHAR2	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12429, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_211)
{
    // 12441 003F;	
    // (𒑁) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12441, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_212)
{
    // 12442 003F;	
    // (𒑂) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12442, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_213)
{
    // 12443 003F;	
    // (𒑃) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12443, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_214)
{
    // 1246C 003F;	
    // (𒑬) CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246C, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_215)
{
    // 16A67 003F;	
    // (𖩧) MRO DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A67, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_216)
{
    // 16B57 003F;	
    // (𖭗) PAHAWH HMONG DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B57, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_217)
{
    // 1D366 003F;	
    // (𝍦) COUNTING ROD UNIT DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D366, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_218)
{
    // 1E8CD 003F;	
    // (‎‎𞣍‎‎) MENDE KIKAKUI DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CD, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_219)
{
    // 1E957 003F;	
    // (‎‎𞥗‎‎) ADLAM DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E957, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_220)
{
    // FF17 003F;	
    // (７) FULLWIDTH DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF17, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_221)
{
    // 0F30 003F;	
    // (༰) TIBETAN DIGIT HALF SEVEN	[1CAA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F30, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_222)
{
    // 1D7D5 003F;	
    // (𝟕) MATHEMATICAL BOLD DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D5, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_223)
{
    // 1D7DF 003F;	
    // (𝟟) MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DF, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_224)
{
    // 1D7E9 003F;	
    // (𝟩) MATHEMATICAL SANS-SERIF DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E9, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_225)
{
    // 1D7F3 003F;	
    // (𝟳) MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F3, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_226)
{
    // 1D7FD 003F;	
    // (𝟽) MATHEMATICAL MONOSPACE DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FD, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_227)
{
    // 2466 003F;	
    // (⑦) CIRCLED DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2466, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_228)
{
    // 24FB 003F;	
    // (⓻) DOUBLE CIRCLED DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FB, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_229)
{
    // 277C 003F;	
    // (❼) DINGBAT NEGATIVE CIRCLED DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277C, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_230)
{
    // 2786 003F;	
    // (➆) DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2786, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_231)
{
    // 2790 003F;	
    // (➐) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2790, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_232)
{
    // 2077 003F;	
    // (⁷) SUPERSCRIPT SEVEN	[1CAA 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2077, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_233)
{
    // 2087 003F;	
    // (₇) SUBSCRIPT SEVEN	[1CAA 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2087, 0x003F };
    uint32_t const ces[9] = { 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_234)
{
    // 248E 0021;	
    // (⒎) DIGIT SEVEN FULL STOP	[1CAA 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248E, 0x0021 };
    uint32_t const ces[12] = { 0x1CAA, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_235)
{
    // 248E 003F;	
    // (⒎) DIGIT SEVEN FULL STOP	[1CAA 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248E, 0x003F };
    uint32_t const ces[12] = { 0x1CAA, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_236)
{
    // 1F1A1 0021;	
    // (🆡) SQUARED SEVEN POINT ONE	[1CAA 0278 1CA4 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A1, 0x0021 };
    uint32_t const ces[15] = { 0x1CAA, 0x0278, 0x1CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_237)
{
    // 1F1A1 003F;	
    // (🆡) SQUARED SEVEN POINT ONE	[1CAA 0278 1CA4 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A1, 0x003F };
    uint32_t const ces[15] = { 0x1CAA, 0x0278, 0x1CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_238)
{
    // 1F1A1 0061;	
    // (🆡) SQUARED SEVEN POINT ONE	[1CAA 0278 1CA4 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A1, 0x0061 };
    uint32_t const ces[15] = { 0x1CAA, 0x0278, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_239)
{
    // 1F1A1 0041;	
    // (🆡) SQUARED SEVEN POINT ONE	[1CAA 0278 1CA4 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F1A1, 0x0041 };
    uint32_t const ces[15] = { 0x1CAA, 0x0278, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_240)
{
    // 1F1A1 0062;	
    // (🆡) SQUARED SEVEN POINT ONE	[1CAA 0278 1CA4 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A1, 0x0062 };
    uint32_t const ces[15] = { 0x1CAA, 0x0278, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_241)
{
    // 248E 0061;	
    // (⒎) DIGIT SEVEN FULL STOP	[1CAA 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248E, 0x0061 };
    uint32_t const ces[12] = { 0x1CAA, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_242)
{
    // 248E 0041;	
    // (⒎) DIGIT SEVEN FULL STOP	[1CAA 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x248E, 0x0041 };
    uint32_t const ces[12] = { 0x1CAA, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_243)
{
    // 248E 0062;	
    // (⒎) DIGIT SEVEN FULL STOP	[1CAA 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248E, 0x0062 };
    uint32_t const ces[12] = { 0x1CAA, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_244)
{
    // 215E 0021;	
    // (⅞) VULGAR FRACTION SEVEN EIGHTHS	[1CAA 063C 1CAB 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215E, 0x0021 };
    uint32_t const ces[15] = { 0x1CAA, 0x063C, 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_245)
{
    // 215E 003F;	
    // (⅞) VULGAR FRACTION SEVEN EIGHTHS	[1CAA 063C 1CAB 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215E, 0x003F };
    uint32_t const ces[15] = { 0x1CAA, 0x063C, 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_246)
{
    // 215E 0061;	
    // (⅞) VULGAR FRACTION SEVEN EIGHTHS	[1CAA 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215E, 0x0061 };
    uint32_t const ces[15] = { 0x1CAA, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_247)
{
    // 215E 0041;	
    // (⅞) VULGAR FRACTION SEVEN EIGHTHS	[1CAA 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x215E, 0x0041 };
    uint32_t const ces[15] = { 0x1CAA, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_248)
{
    // 215E 0062;	
    // (⅞) VULGAR FRACTION SEVEN EIGHTHS	[1CAA 063C 1CAB 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215E, 0x0062 };
    uint32_t const ces[15] = { 0x1CAA, 0x063C, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_249)
{
    // 324E 0021;	
    // (㉎) CIRCLED NUMBER SEVENTY ON BLACK SQUARE	[1CAA 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324E, 0x0021 };
    uint32_t const ces[12] = { 0x1CAA, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_250)
{
    // 324E 003F;	
    // (㉎) CIRCLED NUMBER SEVENTY ON BLACK SQUARE	[1CAA 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324E, 0x003F };
    uint32_t const ces[12] = { 0x1CAA, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_251)
{
    // 324E 0061;	
    // (㉎) CIRCLED NUMBER SEVENTY ON BLACK SQUARE	[1CAA 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324E, 0x0061 };
    uint32_t const ces[12] = { 0x1CAA, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_252)
{
    // 324E 0041;	
    // (㉎) CIRCLED NUMBER SEVENTY ON BLACK SQUARE	[1CAA 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x324E, 0x0041 };
    uint32_t const ces[12] = { 0x1CAA, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_253)
{
    // 324E 0062;	
    // (㉎) CIRCLED NUMBER SEVENTY ON BLACK SQUARE	[1CAA 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324E, 0x0062 };
    uint32_t const ces[12] = { 0x1CAA, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_254)
{
    // 0037 0061;	
    // (7) DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0037, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_255)
{
    // 0667 0061;	
    // (‎٧‎) ARABIC-INDIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0667, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_256)
{
    // 06F7 0061;	
    // (۷) EXTENDED ARABIC-INDIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_257)
{
    // 07C7 0061;	
    // (‎‎߇‎‎) NKO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_258)
{
    // 096D 0061;	
    // (७) DEVANAGARI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_259)
{
    // 09ED 0061;	
    // (৭) BENGALI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09ED, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_260)
{
    // 0A6D 0061;	
    // (੭) GURMUKHI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_261)
{
    // 0AED 0061;	
    // (૭) GUJARATI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AED, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_262)
{
    // 0B6D 0061;	
    // (୭) ORIYA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_263)
{
    // 0BED 0061;	
    // (௭) TAMIL DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BED, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_264)
{
    // 0C6D 0061;	
    // (౭) TELUGU DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_265)
{
    // 0CED 0061;	
    // (೭) KANNADA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CED, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_266)
{
    // 0D6D 0061;	
    // (൭) MALAYALAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_267)
{
    // 0DED 0061;	
    // (෭) SINHALA LITH DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DED, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_268)
{
    // 0E57 0061;	
    // (๗) THAI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_269)
{
    // 0ED7 0061;	
    // (໗) LAO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_270)
{
    // 0F27 0061;	
    // (༧) TIBETAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F27, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_271)
{
    // 1047 0061;	
    // (၇) MYANMAR DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1047, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_272)
{
    // 1097 0061;	
    // (႗) MYANMAR SHAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1097, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_273)
{
    // 136F 0061;	
    // (፯) ETHIOPIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_274)
{
    // 17E7 0061;	
    // (៧) KHMER DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_275)
{
    // 17F7 0061;	
    // (៷) KHMER SYMBOL LEK ATTAK PRAM-PII	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_276)
{
    // 1817 0061;	
    // (᠗) MONGOLIAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1817, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_277)
{
    // 194D 0061;	
    // (᥍) LIMBU DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_278)
{
    // 19D7 0061;	
    // (᧗) NEW TAI LUE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_279)
{
    // 1A87 0061;	
    // (᪇) TAI THAM HORA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A87, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_280)
{
    // 1A97 0061;	
    // (᪗) TAI THAM THAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A97, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_281)
{
    // 1B57 0061;	
    // (᭗) BALINESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_282)
{
    // 1BB7 0061;	
    // (᮷) SUNDANESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_283)
{
    // 1C47 0061;	
    // (᱇) LEPCHA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C47, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_284)
{
    // 1C57 0061;	
    // (᱗) OL CHIKI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_285)
{
    // 3027 0061;	
    // (〧) HANGZHOU NUMERAL SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3027, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_286)
{
    // A627 0061;	
    // (꘧) VAI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA627, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_287)
{
    // A8D7 0061;	
    // (꣗) SAURASHTRA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_288)
{
    // A907 0061;	
    // (꤇) KAYAH LI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA907, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_289)
{
    // A9D7 0061;	
    // (꧗) JAVANESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_290)
{
    // A9F7 0061;	
    // (꧷) MYANMAR TAI LAING DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_291)
{
    // AA57 0061;	
    // (꩗) CHAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_292)
{
    // ABF7 0061;	
    // (꯷) MEETEI MAYEK DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_293)
{
    // 1010D 0061;	
    // (𐄍) AEGEAN NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_294)
{
    // 102E7 0061;	
    // (𐋧) COPTIC EPACT DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_295)
{
    // 104A7 0061;	
    // (𐒧) OSMANYA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_296)
{
    // 109C6 0061;	
    // (‎‎𐧆‎‎) MEROITIC CURSIVE NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C6, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_297)
{
    // 10E66 0061;	
    // (‎𐹦‎) RUMI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E66, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_298)
{
    // 11058 0061;	
    // (𑁘) BRAHMI NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11058, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_299)
{
    // 1106D 0061;	
    // (𑁭) BRAHMI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_300)
{
    // 110F7 0061;	
    // (𑃷) SORA SOMPENG DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_301)
{
    // 1113D 0061;	
    // (𑄽) CHAKMA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_302)
{
    // 111D7 0061;	
    // (𑇗) SHARADA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_303)
{
    // 111E7 0061;	
    // (𑇧) SINHALA ARCHAIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_304)
{
    // 112F7 0061;	
    // (𑋷) KHUDAWADI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_305)
{
    // 11457 0061;	
    // (𑑗) NEWA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11457, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_306)
{
    // 114D7 0061;	
    // (𑓗) TIRHUTA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_307)
{
    // 11657 0061;	
    // (𑙗) MODI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11657, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_308)
{
    // 116C7 0061;	
    // (𑛇) TAKRI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_309)
{
    // 11737 0061;	
    // (𑜷) AHOM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11737, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_310)
{
    // 118E7 0061;	
    // (𑣧) WARANG CITI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_311)
{
    // 11C57 0061;	
    // (𑱗) BHAIKSUKI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_312)
{
    // 11C60 0061;	
    // (𑱠) BHAIKSUKI NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C60, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_313)
{
    // 11D57 0061;	
    // (𑵗) MASARAM GONDI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_314)
{
    // 12405 0061;	
    // (𒐅) CUNEIFORM NUMERIC SIGN SEVEN ASH	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12405, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_315)
{
    // 1240C 0061;	
    // (𒐌) CUNEIFORM NUMERIC SIGN SEVEN DISH	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_316)
{
    // 12412 0061;	
    // (𒐒) CUNEIFORM NUMERIC SIGN SEVEN U	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12412, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_317)
{
    // 1241B 0061;	
    // (𒐛) CUNEIFORM NUMERIC SIGN SEVEN GESH2	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241B, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_318)
{
    // 12429 0061;	
    // (𒐩) CUNEIFORM NUMERIC SIGN SEVEN SHAR2	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12429, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_319)
{
    // 12441 0061;	
    // (𒑁) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12441, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_320)
{
    // 12442 0061;	
    // (𒑂) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12442, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_321)
{
    // 12443 0061;	
    // (𒑃) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12443, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_322)
{
    // 1246C 0061;	
    // (𒑬) CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_323)
{
    // 16A67 0061;	
    // (𖩧) MRO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A67, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_324)
{
    // 16B57 0061;	
    // (𖭗) PAHAWH HMONG DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B57, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_325)
{
    // 1D366 0061;	
    // (𝍦) COUNTING ROD UNIT DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D366, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_326)
{
    // 1E8CD 0061;	
    // (‎‎𞣍‎‎) MENDE KIKAKUI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CD, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_327)
{
    // 1E957 0061;	
    // (‎‎𞥗‎‎) ADLAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E957, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_328)
{
    // 0037 0041;	
    // (7) DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0037, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_329)
{
    // 0667 0041;	
    // (‎٧‎) ARABIC-INDIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0667, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_330)
{
    // 06F7 0041;	
    // (۷) EXTENDED ARABIC-INDIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_331)
{
    // 07C7 0041;	
    // (‎‎߇‎‎) NKO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_332)
{
    // 096D 0041;	
    // (७) DEVANAGARI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x096D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_333)
{
    // 09ED 0041;	
    // (৭) BENGALI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09ED, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_334)
{
    // 0A6D 0041;	
    // (੭) GURMUKHI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A6D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_335)
{
    // 0AED 0041;	
    // (૭) GUJARATI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AED, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_336)
{
    // 0B6D 0041;	
    // (୭) ORIYA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B6D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_337)
{
    // 0BED 0041;	
    // (௭) TAMIL DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BED, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_338)
{
    // 0C6D 0041;	
    // (౭) TELUGU DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C6D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_339)
{
    // 0CED 0041;	
    // (೭) KANNADA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CED, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_340)
{
    // 0D6D 0041;	
    // (൭) MALAYALAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D6D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_341)
{
    // 0DED 0041;	
    // (෭) SINHALA LITH DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DED, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_342)
{
    // 0E57 0041;	
    // (๗) THAI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_343)
{
    // 0ED7 0041;	
    // (໗) LAO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_344)
{
    // 0F27 0041;	
    // (༧) TIBETAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F27, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_345)
{
    // 1047 0041;	
    // (၇) MYANMAR DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1047, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_346)
{
    // 1097 0041;	
    // (႗) MYANMAR SHAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1097, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_347)
{
    // 136F 0041;	
    // (፯) ETHIOPIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x136F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_348)
{
    // 17E7 0041;	
    // (៧) KHMER DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_349)
{
    // 17F7 0041;	
    // (៷) KHMER SYMBOL LEK ATTAK PRAM-PII	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_350)
{
    // 1817 0041;	
    // (᠗) MONGOLIAN DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1817, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_351)
{
    // 194D 0041;	
    // (᥍) LIMBU DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x194D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_352)
{
    // 19D7 0041;	
    // (᧗) NEW TAI LUE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_353)
{
    // 1A87 0041;	
    // (᪇) TAI THAM HORA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A87, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_354)
{
    // 1A97 0041;	
    // (᪗) TAI THAM THAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A97, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_355)
{
    // 1B57 0041;	
    // (᭗) BALINESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_356)
{
    // 1BB7 0041;	
    // (᮷) SUNDANESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_357)
{
    // 1C47 0041;	
    // (᱇) LEPCHA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C47, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_358)
{
    // 1C57 0041;	
    // (᱗) OL CHIKI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_359)
{
    // 3027 0041;	
    // (〧) HANGZHOU NUMERAL SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3027, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_360)
{
    // A627 0041;	
    // (꘧) VAI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA627, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_361)
{
    // A8D7 0041;	
    // (꣗) SAURASHTRA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_362)
{
    // A907 0041;	
    // (꤇) KAYAH LI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA907, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_363)
{
    // A9D7 0041;	
    // (꧗) JAVANESE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_364)
{
    // A9F7 0041;	
    // (꧷) MYANMAR TAI LAING DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_365)
{
    // AA57 0041;	
    // (꩗) CHAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_366)
{
    // ABF7 0041;	
    // (꯷) MEETEI MAYEK DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_367)
{
    // 1010D 0041;	
    // (𐄍) AEGEAN NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1010D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_368)
{
    // 102E7 0041;	
    // (𐋧) COPTIC EPACT DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_369)
{
    // 104A7 0041;	
    // (𐒧) OSMANYA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_370)
{
    // 109C6 0041;	
    // (‎‎𐧆‎‎) MEROITIC CURSIVE NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C6, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_371)
{
    // 10E66 0041;	
    // (‎𐹦‎) RUMI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E66, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_372)
{
    // 11058 0041;	
    // (𑁘) BRAHMI NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11058, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_373)
{
    // 1106D 0041;	
    // (𑁭) BRAHMI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1106D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_374)
{
    // 110F7 0041;	
    // (𑃷) SORA SOMPENG DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_375)
{
    // 1113D 0041;	
    // (𑄽) CHAKMA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1113D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_376)
{
    // 111D7 0041;	
    // (𑇗) SHARADA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_377)
{
    // 111E7 0041;	
    // (𑇧) SINHALA ARCHAIC DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_378)
{
    // 112F7 0041;	
    // (𑋷) KHUDAWADI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_379)
{
    // 11457 0041;	
    // (𑑗) NEWA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11457, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_380)
{
    // 114D7 0041;	
    // (𑓗) TIRHUTA DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_381)
{
    // 11657 0041;	
    // (𑙗) MODI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11657, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_382)
{
    // 116C7 0041;	
    // (𑛇) TAKRI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_383)
{
    // 11737 0041;	
    // (𑜷) AHOM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11737, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_384)
{
    // 118E7 0041;	
    // (𑣧) WARANG CITI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_385)
{
    // 11C57 0041;	
    // (𑱗) BHAIKSUKI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_386)
{
    // 11C60 0041;	
    // (𑱠) BHAIKSUKI NUMBER SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C60, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_387)
{
    // 11D57 0041;	
    // (𑵗) MASARAM GONDI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_388)
{
    // 12405 0041;	
    // (𒐅) CUNEIFORM NUMERIC SIGN SEVEN ASH	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12405, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_389)
{
    // 1240C 0041;	
    // (𒐌) CUNEIFORM NUMERIC SIGN SEVEN DISH	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_390)
{
    // 12412 0041;	
    // (𒐒) CUNEIFORM NUMERIC SIGN SEVEN U	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12412, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_391)
{
    // 1241B 0041;	
    // (𒐛) CUNEIFORM NUMERIC SIGN SEVEN GESH2	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241B, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_392)
{
    // 12429 0041;	
    // (𒐩) CUNEIFORM NUMERIC SIGN SEVEN SHAR2	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12429, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_393)
{
    // 12441 0041;	
    // (𒑁) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12441, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_394)
{
    // 12442 0041;	
    // (𒑂) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12442, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_395)
{
    // 12443 0041;	
    // (𒑃) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12443, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_396)
{
    // 1246C 0041;	
    // (𒑬) CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_397)
{
    // 16A67 0041;	
    // (𖩧) MRO DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A67, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_398)
{
    // 16B57 0041;	
    // (𖭗) PAHAWH HMONG DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B57, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_399)
{
    // 1D366 0041;	
    // (𝍦) COUNTING ROD UNIT DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D366, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_400)
{
    // 1E8CD 0041;	
    // (‎‎𞣍‎‎) MENDE KIKAKUI DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8CD, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_401)
{
    // 1E957 0041;	
    // (‎‎𞥗‎‎) ADLAM DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E957, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_402)
{
    // FF17 0061;	
    // (７) FULLWIDTH DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF17, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_403)
{
    // FF17 0041;	
    // (７) FULLWIDTH DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF17, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_404)
{
    // 0F30 0061;	
    // (༰) TIBETAN DIGIT HALF SEVEN	[1CAA 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F30, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_405)
{
    // 0F30 0041;	
    // (༰) TIBETAN DIGIT HALF SEVEN	[1CAA 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F30, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_406)
{
    // 1D7D5 0061;	
    // (𝟕) MATHEMATICAL BOLD DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_407)
{
    // 1D7DF 0061;	
    // (𝟟) MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_408)
{
    // 1D7E9 0061;	
    // (𝟩) MATHEMATICAL SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_409)
{
    // 1D7F3 0061;	
    // (𝟳) MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_410)
{
    // 1D7FD 0061;	
    // (𝟽) MATHEMATICAL MONOSPACE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FD, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_411)
{
    // 1D7D5 0041;	
    // (𝟕) MATHEMATICAL BOLD DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_412)
{
    // 1D7DF 0041;	
    // (𝟟) MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7DF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_413)
{
    // 1D7E9 0041;	
    // (𝟩) MATHEMATICAL SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_414)
{
    // 1D7F3 0041;	
    // (𝟳) MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_415)
{
    // 1D7FD 0041;	
    // (𝟽) MATHEMATICAL MONOSPACE DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7FD, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_416)
{
    // 2466 0061;	
    // (⑦) CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2466, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_417)
{
    // 24FB 0061;	
    // (⓻) DOUBLE CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FB, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_418)
{
    // 277C 0061;	
    // (❼) DINGBAT NEGATIVE CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_419)
{
    // 2786 0061;	
    // (➆) DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2786, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_420)
{
    // 2790 0061;	
    // (➐) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2790, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_421)
{
    // 2466 0041;	
    // (⑦) CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2466, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_422)
{
    // 24FB 0041;	
    // (⓻) DOUBLE CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24FB, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_423)
{
    // 277C 0041;	
    // (❼) DINGBAT NEGATIVE CIRCLED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x277C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_424)
{
    // 2786 0041;	
    // (➆) DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2786, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_425)
{
    // 2790 0041;	
    // (➐) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2790, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_426)
{
    // 2077 0061;	
    // (⁷) SUPERSCRIPT SEVEN	[1CAA 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2077, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_427)
{
    // 2077 0041;	
    // (⁷) SUPERSCRIPT SEVEN	[1CAA 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2077, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_428)
{
    // 2087 0061;	
    // (₇) SUBSCRIPT SEVEN	[1CAA 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2087, 0x0061 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_429)
{
    // 2087 0041;	
    // (₇) SUBSCRIPT SEVEN	[1CAA 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2087, 0x0041 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_430)
{
    // 0037 0062;	
    // (7) DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0037, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_431)
{
    // 0667 0062;	
    // (‎٧‎) ARABIC-INDIC DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0667, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_432)
{
    // 06F7 0062;	
    // (۷) EXTENDED ARABIC-INDIC DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_433)
{
    // 07C7 0062;	
    // (‎‎߇‎‎) NKO DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_434)
{
    // 096D 0062;	
    // (७) DEVANAGARI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_435)
{
    // 09ED 0062;	
    // (৭) BENGALI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09ED, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_436)
{
    // 0A6D 0062;	
    // (੭) GURMUKHI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_437)
{
    // 0AED 0062;	
    // (૭) GUJARATI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AED, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_438)
{
    // 0B6D 0062;	
    // (୭) ORIYA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_439)
{
    // 0BED 0062;	
    // (௭) TAMIL DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BED, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_440)
{
    // 0C6D 0062;	
    // (౭) TELUGU DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_441)
{
    // 0CED 0062;	
    // (೭) KANNADA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CED, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_442)
{
    // 0D6D 0062;	
    // (൭) MALAYALAM DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_443)
{
    // 0DED 0062;	
    // (෭) SINHALA LITH DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DED, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_444)
{
    // 0E57 0062;	
    // (๗) THAI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_445)
{
    // 0ED7 0062;	
    // (໗) LAO DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_446)
{
    // 0F27 0062;	
    // (༧) TIBETAN DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F27, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_447)
{
    // 1047 0062;	
    // (၇) MYANMAR DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1047, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_448)
{
    // 1097 0062;	
    // (႗) MYANMAR SHAN DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1097, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_449)
{
    // 136F 0062;	
    // (፯) ETHIOPIC DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_450)
{
    // 17E7 0062;	
    // (៧) KHMER DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_451)
{
    // 17F7 0062;	
    // (៷) KHMER SYMBOL LEK ATTAK PRAM-PII	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_452)
{
    // 1817 0062;	
    // (᠗) MONGOLIAN DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1817, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_453)
{
    // 194D 0062;	
    // (᥍) LIMBU DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_454)
{
    // 19D7 0062;	
    // (᧗) NEW TAI LUE DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_455)
{
    // 1A87 0062;	
    // (᪇) TAI THAM HORA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A87, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_456)
{
    // 1A97 0062;	
    // (᪗) TAI THAM THAM DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A97, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_457)
{
    // 1B57 0062;	
    // (᭗) BALINESE DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_458)
{
    // 1BB7 0062;	
    // (᮷) SUNDANESE DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_459)
{
    // 1C47 0062;	
    // (᱇) LEPCHA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C47, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_460)
{
    // 1C57 0062;	
    // (᱗) OL CHIKI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_461)
{
    // 3027 0062;	
    // (〧) HANGZHOU NUMERAL SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3027, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_462)
{
    // A627 0062;	
    // (꘧) VAI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA627, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_463)
{
    // A8D7 0062;	
    // (꣗) SAURASHTRA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_464)
{
    // A907 0062;	
    // (꤇) KAYAH LI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA907, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_465)
{
    // A9D7 0062;	
    // (꧗) JAVANESE DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_466)
{
    // A9F7 0062;	
    // (꧷) MYANMAR TAI LAING DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_467)
{
    // AA57 0062;	
    // (꩗) CHAM DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_468)
{
    // ABF7 0062;	
    // (꯷) MEETEI MAYEK DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_469)
{
    // 1010D 0062;	
    // (𐄍) AEGEAN NUMBER SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_470)
{
    // 102E7 0062;	
    // (𐋧) COPTIC EPACT DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_471)
{
    // 104A7 0062;	
    // (𐒧) OSMANYA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_472)
{
    // 109C6 0062;	
    // (‎‎𐧆‎‎) MEROITIC CURSIVE NUMBER SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C6, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_473)
{
    // 10E66 0062;	
    // (‎𐹦‎) RUMI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E66, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_474)
{
    // 11058 0062;	
    // (𑁘) BRAHMI NUMBER SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11058, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_475)
{
    // 1106D 0062;	
    // (𑁭) BRAHMI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_476)
{
    // 110F7 0062;	
    // (𑃷) SORA SOMPENG DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_477)
{
    // 1113D 0062;	
    // (𑄽) CHAKMA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_478)
{
    // 111D7 0062;	
    // (𑇗) SHARADA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_479)
{
    // 111E7 0062;	
    // (𑇧) SINHALA ARCHAIC DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_480)
{
    // 112F7 0062;	
    // (𑋷) KHUDAWADI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_481)
{
    // 11457 0062;	
    // (𑑗) NEWA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11457, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_482)
{
    // 114D7 0062;	
    // (𑓗) TIRHUTA DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_483)
{
    // 11657 0062;	
    // (𑙗) MODI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11657, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_484)
{
    // 116C7 0062;	
    // (𑛇) TAKRI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_485)
{
    // 11737 0062;	
    // (𑜷) AHOM DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11737, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_486)
{
    // 118E7 0062;	
    // (𑣧) WARANG CITI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_487)
{
    // 11C57 0062;	
    // (𑱗) BHAIKSUKI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_488)
{
    // 11C60 0062;	
    // (𑱠) BHAIKSUKI NUMBER SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C60, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_489)
{
    // 11D57 0062;	
    // (𑵗) MASARAM GONDI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_490)
{
    // 12405 0062;	
    // (𒐅) CUNEIFORM NUMERIC SIGN SEVEN ASH	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12405, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_491)
{
    // 1240C 0062;	
    // (𒐌) CUNEIFORM NUMERIC SIGN SEVEN DISH	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_492)
{
    // 12412 0062;	
    // (𒐒) CUNEIFORM NUMERIC SIGN SEVEN U	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12412, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_493)
{
    // 1241B 0062;	
    // (𒐛) CUNEIFORM NUMERIC SIGN SEVEN GESH2	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241B, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_494)
{
    // 12429 0062;	
    // (𒐩) CUNEIFORM NUMERIC SIGN SEVEN SHAR2	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12429, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_495)
{
    // 12441 0062;	
    // (𒑁) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12441, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_496)
{
    // 12442 0062;	
    // (𒑂) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12442, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_497)
{
    // 12443 0062;	
    // (𒑃) CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12443, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_498)
{
    // 1246C 0062;	
    // (𒑬) CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_089_499)
{
    // 16A67 0062;	
    // (𖩧) MRO DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A67, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

