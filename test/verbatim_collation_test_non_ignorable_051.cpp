// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_051_000)
{
    // 1D150 003F;	
    // (ùÖê) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE	[1135 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D150, 0x003F };
    uint32_t const ces[9] = { 0x1135, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_001)
{
    // 1D150 0061;	
    // (ùÖê) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE	[1135 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D150, 0x0061 };
    uint32_t const ces[9] = { 0x1135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_002)
{
    // 1D150 0041;	
    // (ùÖê) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE	[1135 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D150, 0x0041 };
    uint32_t const ces[9] = { 0x1135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_003)
{
    // 1D150 0062;	
    // (ùÖê) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE	[1135 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D150, 0x0062 };
    uint32_t const ces[9] = { 0x1135, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_004)
{
    // 1D151 0021;	
    // (ùÖë) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK	[1136 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D151, 0x0021 };
    uint32_t const ces[9] = { 0x1136, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_005)
{
    // 1D151 003F;	
    // (ùÖë) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK	[1136 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D151, 0x003F };
    uint32_t const ces[9] = { 0x1136, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_006)
{
    // 1D151 0061;	
    // (ùÖë) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK	[1136 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D151, 0x0061 };
    uint32_t const ces[9] = { 0x1136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_007)
{
    // 1D151 0041;	
    // (ùÖë) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK	[1136 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D151, 0x0041 };
    uint32_t const ces[9] = { 0x1136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_008)
{
    // 1D151 0062;	
    // (ùÖë) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK	[1136 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D151, 0x0062 };
    uint32_t const ces[9] = { 0x1136, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_009)
{
    // 1D152 0021;	
    // (ùÖí) MUSICAL SYMBOL MOON NOTEHEAD WHITE	[1137 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D152, 0x0021 };
    uint32_t const ces[9] = { 0x1137, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_010)
{
    // 1D152 003F;	
    // (ùÖí) MUSICAL SYMBOL MOON NOTEHEAD WHITE	[1137 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D152, 0x003F };
    uint32_t const ces[9] = { 0x1137, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_011)
{
    // 1D152 0061;	
    // (ùÖí) MUSICAL SYMBOL MOON NOTEHEAD WHITE	[1137 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D152, 0x0061 };
    uint32_t const ces[9] = { 0x1137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_012)
{
    // 1D152 0041;	
    // (ùÖí) MUSICAL SYMBOL MOON NOTEHEAD WHITE	[1137 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D152, 0x0041 };
    uint32_t const ces[9] = { 0x1137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_013)
{
    // 1D152 0062;	
    // (ùÖí) MUSICAL SYMBOL MOON NOTEHEAD WHITE	[1137 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D152, 0x0062 };
    uint32_t const ces[9] = { 0x1137, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_014)
{
    // 1D153 0021;	
    // (ùÖì) MUSICAL SYMBOL MOON NOTEHEAD BLACK	[1138 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D153, 0x0021 };
    uint32_t const ces[9] = { 0x1138, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_015)
{
    // 1D153 003F;	
    // (ùÖì) MUSICAL SYMBOL MOON NOTEHEAD BLACK	[1138 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D153, 0x003F };
    uint32_t const ces[9] = { 0x1138, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_016)
{
    // 1D153 0061;	
    // (ùÖì) MUSICAL SYMBOL MOON NOTEHEAD BLACK	[1138 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D153, 0x0061 };
    uint32_t const ces[9] = { 0x1138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_017)
{
    // 1D153 0041;	
    // (ùÖì) MUSICAL SYMBOL MOON NOTEHEAD BLACK	[1138 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D153, 0x0041 };
    uint32_t const ces[9] = { 0x1138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_018)
{
    // 1D153 0062;	
    // (ùÖì) MUSICAL SYMBOL MOON NOTEHEAD BLACK	[1138 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D153, 0x0062 };
    uint32_t const ces[9] = { 0x1138, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_019)
{
    // 1D154 0021;	
    // (ùÖî) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE	[1139 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D154, 0x0021 };
    uint32_t const ces[9] = { 0x1139, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_020)
{
    // 1D154 003F;	
    // (ùÖî) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE	[1139 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D154, 0x003F };
    uint32_t const ces[9] = { 0x1139, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_021)
{
    // 1D154 0061;	
    // (ùÖî) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE	[1139 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D154, 0x0061 };
    uint32_t const ces[9] = { 0x1139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_022)
{
    // 1D154 0041;	
    // (ùÖî) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE	[1139 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D154, 0x0041 };
    uint32_t const ces[9] = { 0x1139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_023)
{
    // 1D154 0062;	
    // (ùÖî) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE	[1139 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D154, 0x0062 };
    uint32_t const ces[9] = { 0x1139, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_024)
{
    // 1D155 0021;	
    // (ùÖï) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK	[113A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D155, 0x0021 };
    uint32_t const ces[9] = { 0x113A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_025)
{
    // 1D155 003F;	
    // (ùÖï) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK	[113A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D155, 0x003F };
    uint32_t const ces[9] = { 0x113A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_026)
{
    // 1D155 0061;	
    // (ùÖï) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK	[113A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D155, 0x0061 };
    uint32_t const ces[9] = { 0x113A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_027)
{
    // 1D155 0041;	
    // (ùÖï) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK	[113A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D155, 0x0041 };
    uint32_t const ces[9] = { 0x113A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_028)
{
    // 1D155 0062;	
    // (ùÖï) MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK	[113A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D155, 0x0062 };
    uint32_t const ces[9] = { 0x113A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_029)
{
    // 1D156 0021;	
    // (ùÖñ) MUSICAL SYMBOL PARENTHESIS NOTEHEAD	[113B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D156, 0x0021 };
    uint32_t const ces[9] = { 0x113B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_030)
{
    // 1D156 003F;	
    // (ùÖñ) MUSICAL SYMBOL PARENTHESIS NOTEHEAD	[113B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D156, 0x003F };
    uint32_t const ces[9] = { 0x113B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_031)
{
    // 1D156 0061;	
    // (ùÖñ) MUSICAL SYMBOL PARENTHESIS NOTEHEAD	[113B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D156, 0x0061 };
    uint32_t const ces[9] = { 0x113B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_032)
{
    // 1D156 0041;	
    // (ùÖñ) MUSICAL SYMBOL PARENTHESIS NOTEHEAD	[113B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D156, 0x0041 };
    uint32_t const ces[9] = { 0x113B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_033)
{
    // 1D156 0062;	
    // (ùÖñ) MUSICAL SYMBOL PARENTHESIS NOTEHEAD	[113B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D156, 0x0062 };
    uint32_t const ces[9] = { 0x113B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_034)
{
    // 1D157 0334 1D165;	
    // (ùÖóÃ¥ùÖ•) MUSICAL SYMBOL VOID NOTEHEAD, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM	[113C | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D157, 0x0334, 0x1D165 };
    uint32_t const ces[8] = { 0x113C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_035)
{
    // 1D157 1D165 0334;	
    // (ùÖóùÖ•) MUSICAL SYMBOL VOID NOTEHEAD, MUSICAL SYMBOL COMBINING STEM	[113C | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D157, 0x1D165, 0x0334 };
    uint32_t const ces[8] = { 0x113C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_036)
{
    // 1D15E 0334;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15E, 0x0334 };
    uint32_t const ces[8] = { 0x113C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_037)
{
    // 1D157 0021;	
    // (ùÖó) MUSICAL SYMBOL VOID NOTEHEAD	[113C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D157, 0x0021 };
    uint32_t const ces[9] = { 0x113C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_038)
{
    // 1D15E 0021;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15E, 0x0021 };
    uint32_t const ces[9] = { 0x113C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_039)
{
    // 1D157 003F;	
    // (ùÖó) MUSICAL SYMBOL VOID NOTEHEAD	[113C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D157, 0x003F };
    uint32_t const ces[9] = { 0x113C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_040)
{
    // 1D15E 003F;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15E, 0x003F };
    uint32_t const ces[9] = { 0x113C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_041)
{
    // 1D157 0061;	
    // (ùÖó) MUSICAL SYMBOL VOID NOTEHEAD	[113C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D157, 0x0061 };
    uint32_t const ces[9] = { 0x113C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_042)
{
    // 1D15E 0061;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15E, 0x0061 };
    uint32_t const ces[9] = { 0x113C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_043)
{
    // 1D157 0041;	
    // (ùÖó) MUSICAL SYMBOL VOID NOTEHEAD	[113C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D157, 0x0041 };
    uint32_t const ces[9] = { 0x113C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_044)
{
    // 1D15E 0041;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15E, 0x0041 };
    uint32_t const ces[9] = { 0x113C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_045)
{
    // 1D157 0062;	
    // (ùÖó) MUSICAL SYMBOL VOID NOTEHEAD	[113C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D157, 0x0062 };
    uint32_t const ces[9] = { 0x113C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_046)
{
    // 1D15E 0062;	
    // (ùÖóùÖ•) MUSICAL SYMBOL HALF NOTE	[113C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15E, 0x0062 };
    uint32_t const ces[9] = { 0x113C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_047)
{
    // 1D158 0334 1D165;	
    // (ùÖòÃ¥ùÖ•) MUSICAL SYMBOL NOTEHEAD BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D158, 0x0334, 0x1D165 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_048)
{
    // 1D158 1D165 0334;	
    // (ùÖòùÖ•) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D158, 0x1D165, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_049)
{
    // 1D15F 0334;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15F, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_050)
{
    // 1D158 0334 1D165 1D16E;	
    // (ùÖòÃ¥ùÖ•ùÖÆ) MUSICAL SYMBOL NOTEHEAD BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-1	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x0334, 0x1D165, 0x1D16E };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_051)
{
    // 1D158 1D165 0334 1D16E;	
    // (ùÖòÃ¥ùÖ•ùÖÆ) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-1	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x0334, 0x1D16E };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_052)
{
    // 1D15F 0334 1D16E;	
    // (ùÖòÃ¥ùÖ•ùÖÆ) MUSICAL SYMBOL QUARTER NOTE, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-1	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x0334, 0x1D16E };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_053)
{
    // 1D15F 1D16E 0334;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL QUARTER NOTE, MUSICAL SYMBOL COMBINING FLAG-1	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x1D16E, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_054)
{
    // 1D158 1D165 0334 1D16F;	
    // (ùÖòÃ¥ùÖ•ùÖØ) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-2	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x0334, 0x1D16F };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_055)
{
    // 1D15F 0334 1D16F;	
    // (ùÖòÃ¥ùÖ•ùÖØ) MUSICAL SYMBOL QUARTER NOTE, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-2	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x0334, 0x1D16F };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_056)
{
    // 1D15F 1D16F 0334;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL QUARTER NOTE, MUSICAL SYMBOL COMBINING FLAG-2	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x1D16F, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_057)
{
    // 1D161 0334;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D161, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_058)
{
    // 1D158 1D165 0334 1D170;	
    // (ùÖòÃ¥ùÖ•ùÖ∞) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-3	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x0334, 0x1D170 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_059)
{
    // 1D158 1D165 1D170 0334;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-3	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x1D170, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_060)
{
    // 1D15F 1D170 0334;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL QUARTER NOTE, MUSICAL SYMBOL COMBINING FLAG-3	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x1D170, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_061)
{
    // 1D162 0334;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D162, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_062)
{
    // 1D158 1D165 0334 1D171;	
    // (ùÖòÃ¥ùÖ•ùÖ±) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-4	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x0334, 0x1D171 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_063)
{
    // 1D158 1D165 1D171 0334;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-4	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x1D171, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_064)
{
    // 1D15F 1D171 0334;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL QUARTER NOTE, MUSICAL SYMBOL COMBINING FLAG-4	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x1D171, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_065)
{
    // 1D163 0334;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D163, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_066)
{
    // 1D158 1D165 0334 1D172;	
    // (ùÖòÃ¥ùÖ•ùÖ≤) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-5	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x0334, 0x1D172 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_067)
{
    // 1D158 1D165 1D172 0334;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL NOTEHEAD BLACK, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-5	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D158, 0x1D165, 0x1D172, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_068)
{
    // 1D15F 1D172 0334;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL QUARTER NOTE, MUSICAL SYMBOL COMBINING FLAG-5	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D15F, 0x1D172, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_069)
{
    // 1D164 0334;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D164, 0x0334 };
    uint32_t const ces[8] = { 0x113D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_070)
{
    // 1D158 0021;	
    // (ùÖò) MUSICAL SYMBOL NOTEHEAD BLACK	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D158, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_071)
{
    // 1D15F 0021;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15F, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_072)
{
    // 1D160 0021;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL EIGHTH NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D160, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_073)
{
    // 1D161 0021;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D161, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_074)
{
    // 1D162 0021;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D162, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_075)
{
    // 1D163 0021;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D163, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_076)
{
    // 1D164 0021;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D164, 0x0021 };
    uint32_t const ces[9] = { 0x113D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_077)
{
    // 1D158 003F;	
    // (ùÖò) MUSICAL SYMBOL NOTEHEAD BLACK	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D158, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_078)
{
    // 1D15F 003F;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15F, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_079)
{
    // 1D160 003F;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL EIGHTH NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D160, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_080)
{
    // 1D161 003F;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D161, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_081)
{
    // 1D162 003F;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D162, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_082)
{
    // 1D163 003F;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D163, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_083)
{
    // 1D164 003F;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D164, 0x003F };
    uint32_t const ces[9] = { 0x113D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_084)
{
    // 1D158 0061;	
    // (ùÖò) MUSICAL SYMBOL NOTEHEAD BLACK	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D158, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_085)
{
    // 1D15F 0061;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15F, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_086)
{
    // 1D160 0061;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL EIGHTH NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D160, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_087)
{
    // 1D161 0061;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D161, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_088)
{
    // 1D162 0061;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D162, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_089)
{
    // 1D163 0061;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D163, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_090)
{
    // 1D164 0061;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D164, 0x0061 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_091)
{
    // 1D158 0041;	
    // (ùÖò) MUSICAL SYMBOL NOTEHEAD BLACK	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D158, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_092)
{
    // 1D15F 0041;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15F, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_093)
{
    // 1D160 0041;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL EIGHTH NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D160, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_094)
{
    // 1D161 0041;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D161, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_095)
{
    // 1D162 0041;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D162, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_096)
{
    // 1D163 0041;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D163, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_097)
{
    // 1D164 0041;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D164, 0x0041 };
    uint32_t const ces[9] = { 0x113D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_098)
{
    // 1D158 0062;	
    // (ùÖò) MUSICAL SYMBOL NOTEHEAD BLACK	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D158, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_099)
{
    // 1D15F 0062;	
    // (ùÖòùÖ•) MUSICAL SYMBOL QUARTER NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15F, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_100)
{
    // 1D160 0062;	
    // (ùÖòùÖ•ùÖÆ) MUSICAL SYMBOL EIGHTH NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D160, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_101)
{
    // 1D161 0062;	
    // (ùÖòùÖ•ùÖØ) MUSICAL SYMBOL SIXTEENTH NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D161, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_102)
{
    // 1D162 0062;	
    // (ùÖòùÖ•ùÖ∞) MUSICAL SYMBOL THIRTY-SECOND NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D162, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_103)
{
    // 1D163 0062;	
    // (ùÖòùÖ•ùÖ±) MUSICAL SYMBOL SIXTY-FOURTH NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D163, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_104)
{
    // 1D164 0062;	
    // (ùÖòùÖ•ùÖ≤) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE	[113D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D164, 0x0062 };
    uint32_t const ces[9] = { 0x113D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_105)
{
    // 1D159 0021;	
    // (ùÖô) MUSICAL SYMBOL NULL NOTEHEAD	[113E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D159, 0x0021 };
    uint32_t const ces[9] = { 0x113E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_106)
{
    // 1D159 003F;	
    // (ùÖô) MUSICAL SYMBOL NULL NOTEHEAD	[113E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D159, 0x003F };
    uint32_t const ces[9] = { 0x113E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_107)
{
    // 1D159 0061;	
    // (ùÖô) MUSICAL SYMBOL NULL NOTEHEAD	[113E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D159, 0x0061 };
    uint32_t const ces[9] = { 0x113E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_108)
{
    // 1D159 0041;	
    // (ùÖô) MUSICAL SYMBOL NULL NOTEHEAD	[113E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D159, 0x0041 };
    uint32_t const ces[9] = { 0x113E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_109)
{
    // 1D159 0062;	
    // (ùÖô) MUSICAL SYMBOL NULL NOTEHEAD	[113E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D159, 0x0062 };
    uint32_t const ces[9] = { 0x113E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_110)
{
    // 1D15A 0021;	
    // (ùÖö) MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE	[113F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15A, 0x0021 };
    uint32_t const ces[9] = { 0x113F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_111)
{
    // 1D15A 003F;	
    // (ùÖö) MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE	[113F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15A, 0x003F };
    uint32_t const ces[9] = { 0x113F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_112)
{
    // 1D15A 0061;	
    // (ùÖö) MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE	[113F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15A, 0x0061 };
    uint32_t const ces[9] = { 0x113F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_113)
{
    // 1D15A 0041;	
    // (ùÖö) MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE	[113F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15A, 0x0041 };
    uint32_t const ces[9] = { 0x113F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_114)
{
    // 1D15A 0062;	
    // (ùÖö) MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE	[113F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15A, 0x0062 };
    uint32_t const ces[9] = { 0x113F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_115)
{
    // 1D15B 0021;	
    // (ùÖõ) MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK	[1140 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15B, 0x0021 };
    uint32_t const ces[9] = { 0x1140, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_116)
{
    // 1D15B 003F;	
    // (ùÖõ) MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK	[1140 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15B, 0x003F };
    uint32_t const ces[9] = { 0x1140, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_117)
{
    // 1D15B 0061;	
    // (ùÖõ) MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK	[1140 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15B, 0x0061 };
    uint32_t const ces[9] = { 0x1140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_118)
{
    // 1D15B 0041;	
    // (ùÖõ) MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK	[1140 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15B, 0x0041 };
    uint32_t const ces[9] = { 0x1140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_119)
{
    // 1D15B 0062;	
    // (ùÖõ) MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK	[1140 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15B, 0x0062 };
    uint32_t const ces[9] = { 0x1140, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_120)
{
    // 1D15C 0021;	
    // (ùÖú) MUSICAL SYMBOL BREVE	[1141 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15C, 0x0021 };
    uint32_t const ces[9] = { 0x1141, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_121)
{
    // 1D15C 003F;	
    // (ùÖú) MUSICAL SYMBOL BREVE	[1141 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15C, 0x003F };
    uint32_t const ces[9] = { 0x1141, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_122)
{
    // 1D15C 0061;	
    // (ùÖú) MUSICAL SYMBOL BREVE	[1141 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15C, 0x0061 };
    uint32_t const ces[9] = { 0x1141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_123)
{
    // 1D15C 0041;	
    // (ùÖú) MUSICAL SYMBOL BREVE	[1141 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15C, 0x0041 };
    uint32_t const ces[9] = { 0x1141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_124)
{
    // 1D15C 0062;	
    // (ùÖú) MUSICAL SYMBOL BREVE	[1141 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15C, 0x0062 };
    uint32_t const ces[9] = { 0x1141, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_125)
{
    // 1D15D 0021;	
    // (ùÖù) MUSICAL SYMBOL WHOLE NOTE	[1142 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15D, 0x0021 };
    uint32_t const ces[9] = { 0x1142, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_126)
{
    // 1D15D 003F;	
    // (ùÖù) MUSICAL SYMBOL WHOLE NOTE	[1142 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15D, 0x003F };
    uint32_t const ces[9] = { 0x1142, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_127)
{
    // 1D15D 0061;	
    // (ùÖù) MUSICAL SYMBOL WHOLE NOTE	[1142 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15D, 0x0061 };
    uint32_t const ces[9] = { 0x1142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_128)
{
    // 1D15D 0041;	
    // (ùÖù) MUSICAL SYMBOL WHOLE NOTE	[1142 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15D, 0x0041 };
    uint32_t const ces[9] = { 0x1142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_129)
{
    // 1D15D 0062;	
    // (ùÖù) MUSICAL SYMBOL WHOLE NOTE	[1142 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15D, 0x0062 };
    uint32_t const ces[9] = { 0x1142, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_130)
{
    // 1D16A 0021;	
    // (ùÖ™) MUSICAL SYMBOL FINGERED TREMOLO-1	[1143 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16A, 0x0021 };
    uint32_t const ces[9] = { 0x1143, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_131)
{
    // 1D16A 003F;	
    // (ùÖ™) MUSICAL SYMBOL FINGERED TREMOLO-1	[1143 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16A, 0x003F };
    uint32_t const ces[9] = { 0x1143, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_132)
{
    // 1D16A 0061;	
    // (ùÖ™) MUSICAL SYMBOL FINGERED TREMOLO-1	[1143 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16A, 0x0061 };
    uint32_t const ces[9] = { 0x1143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_133)
{
    // 1D16A 0041;	
    // (ùÖ™) MUSICAL SYMBOL FINGERED TREMOLO-1	[1143 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D16A, 0x0041 };
    uint32_t const ces[9] = { 0x1143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_134)
{
    // 1D16A 0062;	
    // (ùÖ™) MUSICAL SYMBOL FINGERED TREMOLO-1	[1143 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16A, 0x0062 };
    uint32_t const ces[9] = { 0x1143, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_135)
{
    // 1D16B 0021;	
    // (ùÖ´) MUSICAL SYMBOL FINGERED TREMOLO-2	[1144 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16B, 0x0021 };
    uint32_t const ces[9] = { 0x1144, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_136)
{
    // 1D16B 003F;	
    // (ùÖ´) MUSICAL SYMBOL FINGERED TREMOLO-2	[1144 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16B, 0x003F };
    uint32_t const ces[9] = { 0x1144, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_137)
{
    // 1D16B 0061;	
    // (ùÖ´) MUSICAL SYMBOL FINGERED TREMOLO-2	[1144 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16B, 0x0061 };
    uint32_t const ces[9] = { 0x1144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_138)
{
    // 1D16B 0041;	
    // (ùÖ´) MUSICAL SYMBOL FINGERED TREMOLO-2	[1144 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D16B, 0x0041 };
    uint32_t const ces[9] = { 0x1144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_139)
{
    // 1D16B 0062;	
    // (ùÖ´) MUSICAL SYMBOL FINGERED TREMOLO-2	[1144 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16B, 0x0062 };
    uint32_t const ces[9] = { 0x1144, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_140)
{
    // 1D16C 0021;	
    // (ùÖ¨) MUSICAL SYMBOL FINGERED TREMOLO-3	[1145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16C, 0x0021 };
    uint32_t const ces[9] = { 0x1145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_141)
{
    // 1D16C 003F;	
    // (ùÖ¨) MUSICAL SYMBOL FINGERED TREMOLO-3	[1145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16C, 0x003F };
    uint32_t const ces[9] = { 0x1145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_142)
{
    // 1D16C 0061;	
    // (ùÖ¨) MUSICAL SYMBOL FINGERED TREMOLO-3	[1145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16C, 0x0061 };
    uint32_t const ces[9] = { 0x1145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_143)
{
    // 1D16C 0041;	
    // (ùÖ¨) MUSICAL SYMBOL FINGERED TREMOLO-3	[1145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D16C, 0x0041 };
    uint32_t const ces[9] = { 0x1145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_144)
{
    // 1D16C 0062;	
    // (ùÖ¨) MUSICAL SYMBOL FINGERED TREMOLO-3	[1145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D16C, 0x0062 };
    uint32_t const ces[9] = { 0x1145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_145)
{
    // 1D183 0021;	
    // (ùÜÉ) MUSICAL SYMBOL ARPEGGIATO UP	[1146 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D183, 0x0021 };
    uint32_t const ces[9] = { 0x1146, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_146)
{
    // 1D183 003F;	
    // (ùÜÉ) MUSICAL SYMBOL ARPEGGIATO UP	[1146 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D183, 0x003F };
    uint32_t const ces[9] = { 0x1146, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_147)
{
    // 1D183 0061;	
    // (ùÜÉ) MUSICAL SYMBOL ARPEGGIATO UP	[1146 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D183, 0x0061 };
    uint32_t const ces[9] = { 0x1146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_148)
{
    // 1D183 0041;	
    // (ùÜÉ) MUSICAL SYMBOL ARPEGGIATO UP	[1146 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D183, 0x0041 };
    uint32_t const ces[9] = { 0x1146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_149)
{
    // 1D183 0062;	
    // (ùÜÉ) MUSICAL SYMBOL ARPEGGIATO UP	[1146 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D183, 0x0062 };
    uint32_t const ces[9] = { 0x1146, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_150)
{
    // 1D184 0021;	
    // (ùÜÑ) MUSICAL SYMBOL ARPEGGIATO DOWN	[1147 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D184, 0x0021 };
    uint32_t const ces[9] = { 0x1147, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_151)
{
    // 1D184 003F;	
    // (ùÜÑ) MUSICAL SYMBOL ARPEGGIATO DOWN	[1147 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D184, 0x003F };
    uint32_t const ces[9] = { 0x1147, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_152)
{
    // 1D184 0061;	
    // (ùÜÑ) MUSICAL SYMBOL ARPEGGIATO DOWN	[1147 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D184, 0x0061 };
    uint32_t const ces[9] = { 0x1147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_153)
{
    // 1D184 0041;	
    // (ùÜÑ) MUSICAL SYMBOL ARPEGGIATO DOWN	[1147 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D184, 0x0041 };
    uint32_t const ces[9] = { 0x1147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_154)
{
    // 1D184 0062;	
    // (ùÜÑ) MUSICAL SYMBOL ARPEGGIATO DOWN	[1147 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D184, 0x0062 };
    uint32_t const ces[9] = { 0x1147, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_155)
{
    // 1D18C 0021;	
    // (ùÜå) MUSICAL SYMBOL RINFORZANDO	[1148 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18C, 0x0021 };
    uint32_t const ces[9] = { 0x1148, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_156)
{
    // 1D18C 003F;	
    // (ùÜå) MUSICAL SYMBOL RINFORZANDO	[1148 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18C, 0x003F };
    uint32_t const ces[9] = { 0x1148, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_157)
{
    // 1D18C 0061;	
    // (ùÜå) MUSICAL SYMBOL RINFORZANDO	[1148 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18C, 0x0061 };
    uint32_t const ces[9] = { 0x1148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_158)
{
    // 1D18C 0041;	
    // (ùÜå) MUSICAL SYMBOL RINFORZANDO	[1148 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D18C, 0x0041 };
    uint32_t const ces[9] = { 0x1148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_159)
{
    // 1D18C 0062;	
    // (ùÜå) MUSICAL SYMBOL RINFORZANDO	[1148 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18C, 0x0062 };
    uint32_t const ces[9] = { 0x1148, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_160)
{
    // 1D18D 0021;	
    // (ùÜç) MUSICAL SYMBOL SUBITO	[1149 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18D, 0x0021 };
    uint32_t const ces[9] = { 0x1149, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_161)
{
    // 1D18D 003F;	
    // (ùÜç) MUSICAL SYMBOL SUBITO	[1149 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18D, 0x003F };
    uint32_t const ces[9] = { 0x1149, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_162)
{
    // 1D18D 0061;	
    // (ùÜç) MUSICAL SYMBOL SUBITO	[1149 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18D, 0x0061 };
    uint32_t const ces[9] = { 0x1149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_163)
{
    // 1D18D 0041;	
    // (ùÜç) MUSICAL SYMBOL SUBITO	[1149 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D18D, 0x0041 };
    uint32_t const ces[9] = { 0x1149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_164)
{
    // 1D18D 0062;	
    // (ùÜç) MUSICAL SYMBOL SUBITO	[1149 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18D, 0x0062 };
    uint32_t const ces[9] = { 0x1149, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_165)
{
    // 1D18E 0021;	
    // (ùÜé) MUSICAL SYMBOL Z	[114A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18E, 0x0021 };
    uint32_t const ces[9] = { 0x114A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_166)
{
    // 1D18E 003F;	
    // (ùÜé) MUSICAL SYMBOL Z	[114A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18E, 0x003F };
    uint32_t const ces[9] = { 0x114A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_167)
{
    // 1D18E 0061;	
    // (ùÜé) MUSICAL SYMBOL Z	[114A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18E, 0x0061 };
    uint32_t const ces[9] = { 0x114A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_168)
{
    // 1D18E 0041;	
    // (ùÜé) MUSICAL SYMBOL Z	[114A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D18E, 0x0041 };
    uint32_t const ces[9] = { 0x114A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_169)
{
    // 1D18E 0062;	
    // (ùÜé) MUSICAL SYMBOL Z	[114A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18E, 0x0062 };
    uint32_t const ces[9] = { 0x114A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_170)
{
    // 1D18F 0021;	
    // (ùÜè) MUSICAL SYMBOL PIANO	[114B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18F, 0x0021 };
    uint32_t const ces[9] = { 0x114B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_171)
{
    // 1D18F 003F;	
    // (ùÜè) MUSICAL SYMBOL PIANO	[114B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18F, 0x003F };
    uint32_t const ces[9] = { 0x114B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_172)
{
    // 1D18F 0061;	
    // (ùÜè) MUSICAL SYMBOL PIANO	[114B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18F, 0x0061 };
    uint32_t const ces[9] = { 0x114B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_173)
{
    // 1D18F 0041;	
    // (ùÜè) MUSICAL SYMBOL PIANO	[114B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D18F, 0x0041 };
    uint32_t const ces[9] = { 0x114B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_174)
{
    // 1D18F 0062;	
    // (ùÜè) MUSICAL SYMBOL PIANO	[114B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18F, 0x0062 };
    uint32_t const ces[9] = { 0x114B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_175)
{
    // 1D190 0021;	
    // (ùÜê) MUSICAL SYMBOL MEZZO	[114C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D190, 0x0021 };
    uint32_t const ces[9] = { 0x114C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_176)
{
    // 1D190 003F;	
    // (ùÜê) MUSICAL SYMBOL MEZZO	[114C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D190, 0x003F };
    uint32_t const ces[9] = { 0x114C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_177)
{
    // 1D190 0061;	
    // (ùÜê) MUSICAL SYMBOL MEZZO	[114C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D190, 0x0061 };
    uint32_t const ces[9] = { 0x114C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_178)
{
    // 1D190 0041;	
    // (ùÜê) MUSICAL SYMBOL MEZZO	[114C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D190, 0x0041 };
    uint32_t const ces[9] = { 0x114C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_179)
{
    // 1D190 0062;	
    // (ùÜê) MUSICAL SYMBOL MEZZO	[114C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D190, 0x0062 };
    uint32_t const ces[9] = { 0x114C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_180)
{
    // 1D191 0021;	
    // (ùÜë) MUSICAL SYMBOL FORTE	[114D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D191, 0x0021 };
    uint32_t const ces[9] = { 0x114D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_181)
{
    // 1D191 003F;	
    // (ùÜë) MUSICAL SYMBOL FORTE	[114D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D191, 0x003F };
    uint32_t const ces[9] = { 0x114D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_182)
{
    // 1D191 0061;	
    // (ùÜë) MUSICAL SYMBOL FORTE	[114D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D191, 0x0061 };
    uint32_t const ces[9] = { 0x114D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_183)
{
    // 1D191 0041;	
    // (ùÜë) MUSICAL SYMBOL FORTE	[114D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D191, 0x0041 };
    uint32_t const ces[9] = { 0x114D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_184)
{
    // 1D191 0062;	
    // (ùÜë) MUSICAL SYMBOL FORTE	[114D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D191, 0x0062 };
    uint32_t const ces[9] = { 0x114D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_185)
{
    // 1D192 0021;	
    // (ùÜí) MUSICAL SYMBOL CRESCENDO	[114E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D192, 0x0021 };
    uint32_t const ces[9] = { 0x114E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_186)
{
    // 1D192 003F;	
    // (ùÜí) MUSICAL SYMBOL CRESCENDO	[114E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D192, 0x003F };
    uint32_t const ces[9] = { 0x114E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_187)
{
    // 1D192 0061;	
    // (ùÜí) MUSICAL SYMBOL CRESCENDO	[114E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D192, 0x0061 };
    uint32_t const ces[9] = { 0x114E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_188)
{
    // 1D192 0041;	
    // (ùÜí) MUSICAL SYMBOL CRESCENDO	[114E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D192, 0x0041 };
    uint32_t const ces[9] = { 0x114E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_189)
{
    // 1D192 0062;	
    // (ùÜí) MUSICAL SYMBOL CRESCENDO	[114E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D192, 0x0062 };
    uint32_t const ces[9] = { 0x114E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_190)
{
    // 1D193 0021;	
    // (ùÜì) MUSICAL SYMBOL DECRESCENDO	[114F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D193, 0x0021 };
    uint32_t const ces[9] = { 0x114F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_191)
{
    // 1D193 003F;	
    // (ùÜì) MUSICAL SYMBOL DECRESCENDO	[114F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D193, 0x003F };
    uint32_t const ces[9] = { 0x114F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_192)
{
    // 1D193 0061;	
    // (ùÜì) MUSICAL SYMBOL DECRESCENDO	[114F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D193, 0x0061 };
    uint32_t const ces[9] = { 0x114F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_193)
{
    // 1D193 0041;	
    // (ùÜì) MUSICAL SYMBOL DECRESCENDO	[114F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D193, 0x0041 };
    uint32_t const ces[9] = { 0x114F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_194)
{
    // 1D193 0062;	
    // (ùÜì) MUSICAL SYMBOL DECRESCENDO	[114F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D193, 0x0062 };
    uint32_t const ces[9] = { 0x114F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_195)
{
    // 1D194 0021;	
    // (ùÜî) MUSICAL SYMBOL GRACE NOTE SLASH	[1150 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D194, 0x0021 };
    uint32_t const ces[9] = { 0x1150, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_196)
{
    // 1D194 003F;	
    // (ùÜî) MUSICAL SYMBOL GRACE NOTE SLASH	[1150 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D194, 0x003F };
    uint32_t const ces[9] = { 0x1150, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_197)
{
    // 1D194 0061;	
    // (ùÜî) MUSICAL SYMBOL GRACE NOTE SLASH	[1150 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D194, 0x0061 };
    uint32_t const ces[9] = { 0x1150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_198)
{
    // 1D194 0041;	
    // (ùÜî) MUSICAL SYMBOL GRACE NOTE SLASH	[1150 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D194, 0x0041 };
    uint32_t const ces[9] = { 0x1150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_199)
{
    // 1D194 0062;	
    // (ùÜî) MUSICAL SYMBOL GRACE NOTE SLASH	[1150 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D194, 0x0062 };
    uint32_t const ces[9] = { 0x1150, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_200)
{
    // 1D195 0021;	
    // (ùÜï) MUSICAL SYMBOL GRACE NOTE NO SLASH	[1151 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D195, 0x0021 };
    uint32_t const ces[9] = { 0x1151, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_201)
{
    // 1D195 003F;	
    // (ùÜï) MUSICAL SYMBOL GRACE NOTE NO SLASH	[1151 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D195, 0x003F };
    uint32_t const ces[9] = { 0x1151, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_202)
{
    // 1D195 0061;	
    // (ùÜï) MUSICAL SYMBOL GRACE NOTE NO SLASH	[1151 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D195, 0x0061 };
    uint32_t const ces[9] = { 0x1151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_203)
{
    // 1D195 0041;	
    // (ùÜï) MUSICAL SYMBOL GRACE NOTE NO SLASH	[1151 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D195, 0x0041 };
    uint32_t const ces[9] = { 0x1151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_204)
{
    // 1D195 0062;	
    // (ùÜï) MUSICAL SYMBOL GRACE NOTE NO SLASH	[1151 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D195, 0x0062 };
    uint32_t const ces[9] = { 0x1151, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_205)
{
    // 1D196 0021;	
    // (ùÜñ) MUSICAL SYMBOL TR	[1152 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D196, 0x0021 };
    uint32_t const ces[9] = { 0x1152, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_206)
{
    // 1D196 003F;	
    // (ùÜñ) MUSICAL SYMBOL TR	[1152 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D196, 0x003F };
    uint32_t const ces[9] = { 0x1152, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_207)
{
    // 1D196 0061;	
    // (ùÜñ) MUSICAL SYMBOL TR	[1152 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D196, 0x0061 };
    uint32_t const ces[9] = { 0x1152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_208)
{
    // 1D196 0041;	
    // (ùÜñ) MUSICAL SYMBOL TR	[1152 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D196, 0x0041 };
    uint32_t const ces[9] = { 0x1152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_209)
{
    // 1D196 0062;	
    // (ùÜñ) MUSICAL SYMBOL TR	[1152 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D196, 0x0062 };
    uint32_t const ces[9] = { 0x1152, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_210)
{
    // 1D197 0021;	
    // (ùÜó) MUSICAL SYMBOL TURN	[1153 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D197, 0x0021 };
    uint32_t const ces[9] = { 0x1153, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_211)
{
    // 1D197 003F;	
    // (ùÜó) MUSICAL SYMBOL TURN	[1153 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D197, 0x003F };
    uint32_t const ces[9] = { 0x1153, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_212)
{
    // 1D197 0061;	
    // (ùÜó) MUSICAL SYMBOL TURN	[1153 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D197, 0x0061 };
    uint32_t const ces[9] = { 0x1153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_213)
{
    // 1D197 0041;	
    // (ùÜó) MUSICAL SYMBOL TURN	[1153 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D197, 0x0041 };
    uint32_t const ces[9] = { 0x1153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_214)
{
    // 1D197 0062;	
    // (ùÜó) MUSICAL SYMBOL TURN	[1153 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D197, 0x0062 };
    uint32_t const ces[9] = { 0x1153, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_215)
{
    // 1D198 0021;	
    // (ùÜò) MUSICAL SYMBOL INVERTED TURN	[1154 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D198, 0x0021 };
    uint32_t const ces[9] = { 0x1154, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_216)
{
    // 1D198 003F;	
    // (ùÜò) MUSICAL SYMBOL INVERTED TURN	[1154 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D198, 0x003F };
    uint32_t const ces[9] = { 0x1154, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_217)
{
    // 1D198 0061;	
    // (ùÜò) MUSICAL SYMBOL INVERTED TURN	[1154 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D198, 0x0061 };
    uint32_t const ces[9] = { 0x1154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_218)
{
    // 1D198 0041;	
    // (ùÜò) MUSICAL SYMBOL INVERTED TURN	[1154 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D198, 0x0041 };
    uint32_t const ces[9] = { 0x1154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_219)
{
    // 1D198 0062;	
    // (ùÜò) MUSICAL SYMBOL INVERTED TURN	[1154 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D198, 0x0062 };
    uint32_t const ces[9] = { 0x1154, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_220)
{
    // 1D199 0021;	
    // (ùÜô) MUSICAL SYMBOL TURN SLASH	[1155 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D199, 0x0021 };
    uint32_t const ces[9] = { 0x1155, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_221)
{
    // 1D199 003F;	
    // (ùÜô) MUSICAL SYMBOL TURN SLASH	[1155 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D199, 0x003F };
    uint32_t const ces[9] = { 0x1155, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_222)
{
    // 1D199 0061;	
    // (ùÜô) MUSICAL SYMBOL TURN SLASH	[1155 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D199, 0x0061 };
    uint32_t const ces[9] = { 0x1155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_223)
{
    // 1D199 0041;	
    // (ùÜô) MUSICAL SYMBOL TURN SLASH	[1155 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D199, 0x0041 };
    uint32_t const ces[9] = { 0x1155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_224)
{
    // 1D199 0062;	
    // (ùÜô) MUSICAL SYMBOL TURN SLASH	[1155 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D199, 0x0062 };
    uint32_t const ces[9] = { 0x1155, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_225)
{
    // 1D19A 0021;	
    // (ùÜö) MUSICAL SYMBOL TURN UP	[1156 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19A, 0x0021 };
    uint32_t const ces[9] = { 0x1156, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_226)
{
    // 1D19A 003F;	
    // (ùÜö) MUSICAL SYMBOL TURN UP	[1156 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19A, 0x003F };
    uint32_t const ces[9] = { 0x1156, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_227)
{
    // 1D19A 0061;	
    // (ùÜö) MUSICAL SYMBOL TURN UP	[1156 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19A, 0x0061 };
    uint32_t const ces[9] = { 0x1156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_228)
{
    // 1D19A 0041;	
    // (ùÜö) MUSICAL SYMBOL TURN UP	[1156 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19A, 0x0041 };
    uint32_t const ces[9] = { 0x1156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_229)
{
    // 1D19A 0062;	
    // (ùÜö) MUSICAL SYMBOL TURN UP	[1156 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19A, 0x0062 };
    uint32_t const ces[9] = { 0x1156, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_230)
{
    // 1D19B 0021;	
    // (ùÜõ) MUSICAL SYMBOL ORNAMENT STROKE-1	[1157 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19B, 0x0021 };
    uint32_t const ces[9] = { 0x1157, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_231)
{
    // 1D19B 003F;	
    // (ùÜõ) MUSICAL SYMBOL ORNAMENT STROKE-1	[1157 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19B, 0x003F };
    uint32_t const ces[9] = { 0x1157, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_232)
{
    // 1D19B 0061;	
    // (ùÜõ) MUSICAL SYMBOL ORNAMENT STROKE-1	[1157 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19B, 0x0061 };
    uint32_t const ces[9] = { 0x1157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_233)
{
    // 1D19B 0041;	
    // (ùÜõ) MUSICAL SYMBOL ORNAMENT STROKE-1	[1157 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19B, 0x0041 };
    uint32_t const ces[9] = { 0x1157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_234)
{
    // 1D19B 0062;	
    // (ùÜõ) MUSICAL SYMBOL ORNAMENT STROKE-1	[1157 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19B, 0x0062 };
    uint32_t const ces[9] = { 0x1157, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_235)
{
    // 1D19C 0021;	
    // (ùÜú) MUSICAL SYMBOL ORNAMENT STROKE-2	[1158 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19C, 0x0021 };
    uint32_t const ces[9] = { 0x1158, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_236)
{
    // 1D19C 003F;	
    // (ùÜú) MUSICAL SYMBOL ORNAMENT STROKE-2	[1158 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19C, 0x003F };
    uint32_t const ces[9] = { 0x1158, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_237)
{
    // 1D19C 0061;	
    // (ùÜú) MUSICAL SYMBOL ORNAMENT STROKE-2	[1158 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19C, 0x0061 };
    uint32_t const ces[9] = { 0x1158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_238)
{
    // 1D19C 0041;	
    // (ùÜú) MUSICAL SYMBOL ORNAMENT STROKE-2	[1158 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19C, 0x0041 };
    uint32_t const ces[9] = { 0x1158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_239)
{
    // 1D19C 0062;	
    // (ùÜú) MUSICAL SYMBOL ORNAMENT STROKE-2	[1158 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19C, 0x0062 };
    uint32_t const ces[9] = { 0x1158, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_240)
{
    // 1D19D 0021;	
    // (ùÜù) MUSICAL SYMBOL ORNAMENT STROKE-3	[1159 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19D, 0x0021 };
    uint32_t const ces[9] = { 0x1159, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_241)
{
    // 1D19D 003F;	
    // (ùÜù) MUSICAL SYMBOL ORNAMENT STROKE-3	[1159 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19D, 0x003F };
    uint32_t const ces[9] = { 0x1159, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_242)
{
    // 1D19D 0061;	
    // (ùÜù) MUSICAL SYMBOL ORNAMENT STROKE-3	[1159 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19D, 0x0061 };
    uint32_t const ces[9] = { 0x1159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_243)
{
    // 1D19D 0041;	
    // (ùÜù) MUSICAL SYMBOL ORNAMENT STROKE-3	[1159 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19D, 0x0041 };
    uint32_t const ces[9] = { 0x1159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_244)
{
    // 1D19D 0062;	
    // (ùÜù) MUSICAL SYMBOL ORNAMENT STROKE-3	[1159 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19D, 0x0062 };
    uint32_t const ces[9] = { 0x1159, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_245)
{
    // 1D19E 0021;	
    // (ùÜû) MUSICAL SYMBOL ORNAMENT STROKE-4	[115A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19E, 0x0021 };
    uint32_t const ces[9] = { 0x115A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_246)
{
    // 1D19E 003F;	
    // (ùÜû) MUSICAL SYMBOL ORNAMENT STROKE-4	[115A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19E, 0x003F };
    uint32_t const ces[9] = { 0x115A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_247)
{
    // 1D19E 0061;	
    // (ùÜû) MUSICAL SYMBOL ORNAMENT STROKE-4	[115A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19E, 0x0061 };
    uint32_t const ces[9] = { 0x115A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_248)
{
    // 1D19E 0041;	
    // (ùÜû) MUSICAL SYMBOL ORNAMENT STROKE-4	[115A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19E, 0x0041 };
    uint32_t const ces[9] = { 0x115A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_249)
{
    // 1D19E 0062;	
    // (ùÜû) MUSICAL SYMBOL ORNAMENT STROKE-4	[115A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19E, 0x0062 };
    uint32_t const ces[9] = { 0x115A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_250)
{
    // 1D19F 0021;	
    // (ùÜü) MUSICAL SYMBOL ORNAMENT STROKE-5	[115B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19F, 0x0021 };
    uint32_t const ces[9] = { 0x115B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_251)
{
    // 1D19F 003F;	
    // (ùÜü) MUSICAL SYMBOL ORNAMENT STROKE-5	[115B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19F, 0x003F };
    uint32_t const ces[9] = { 0x115B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_252)
{
    // 1D19F 0061;	
    // (ùÜü) MUSICAL SYMBOL ORNAMENT STROKE-5	[115B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19F, 0x0061 };
    uint32_t const ces[9] = { 0x115B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_253)
{
    // 1D19F 0041;	
    // (ùÜü) MUSICAL SYMBOL ORNAMENT STROKE-5	[115B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D19F, 0x0041 };
    uint32_t const ces[9] = { 0x115B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_254)
{
    // 1D19F 0062;	
    // (ùÜü) MUSICAL SYMBOL ORNAMENT STROKE-5	[115B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D19F, 0x0062 };
    uint32_t const ces[9] = { 0x115B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_255)
{
    // 1D1A0 0021;	
    // (ùÜ†) MUSICAL SYMBOL ORNAMENT STROKE-6	[115C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A0, 0x0021 };
    uint32_t const ces[9] = { 0x115C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_256)
{
    // 1D1A0 003F;	
    // (ùÜ†) MUSICAL SYMBOL ORNAMENT STROKE-6	[115C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A0, 0x003F };
    uint32_t const ces[9] = { 0x115C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_257)
{
    // 1D1A0 0061;	
    // (ùÜ†) MUSICAL SYMBOL ORNAMENT STROKE-6	[115C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A0, 0x0061 };
    uint32_t const ces[9] = { 0x115C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_258)
{
    // 1D1A0 0041;	
    // (ùÜ†) MUSICAL SYMBOL ORNAMENT STROKE-6	[115C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A0, 0x0041 };
    uint32_t const ces[9] = { 0x115C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_259)
{
    // 1D1A0 0062;	
    // (ùÜ†) MUSICAL SYMBOL ORNAMENT STROKE-6	[115C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A0, 0x0062 };
    uint32_t const ces[9] = { 0x115C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_260)
{
    // 1D1A1 0021;	
    // (ùÜ°) MUSICAL SYMBOL ORNAMENT STROKE-7	[115D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A1, 0x0021 };
    uint32_t const ces[9] = { 0x115D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_261)
{
    // 1D1A1 003F;	
    // (ùÜ°) MUSICAL SYMBOL ORNAMENT STROKE-7	[115D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A1, 0x003F };
    uint32_t const ces[9] = { 0x115D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_262)
{
    // 1D1A1 0061;	
    // (ùÜ°) MUSICAL SYMBOL ORNAMENT STROKE-7	[115D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A1, 0x0061 };
    uint32_t const ces[9] = { 0x115D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_263)
{
    // 1D1A1 0041;	
    // (ùÜ°) MUSICAL SYMBOL ORNAMENT STROKE-7	[115D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A1, 0x0041 };
    uint32_t const ces[9] = { 0x115D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_264)
{
    // 1D1A1 0062;	
    // (ùÜ°) MUSICAL SYMBOL ORNAMENT STROKE-7	[115D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A1, 0x0062 };
    uint32_t const ces[9] = { 0x115D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_265)
{
    // 1D1A2 0021;	
    // (ùÜ¢) MUSICAL SYMBOL ORNAMENT STROKE-8	[115E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A2, 0x0021 };
    uint32_t const ces[9] = { 0x115E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_266)
{
    // 1D1A2 003F;	
    // (ùÜ¢) MUSICAL SYMBOL ORNAMENT STROKE-8	[115E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A2, 0x003F };
    uint32_t const ces[9] = { 0x115E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_267)
{
    // 1D1A2 0061;	
    // (ùÜ¢) MUSICAL SYMBOL ORNAMENT STROKE-8	[115E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A2, 0x0061 };
    uint32_t const ces[9] = { 0x115E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_268)
{
    // 1D1A2 0041;	
    // (ùÜ¢) MUSICAL SYMBOL ORNAMENT STROKE-8	[115E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A2, 0x0041 };
    uint32_t const ces[9] = { 0x115E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_269)
{
    // 1D1A2 0062;	
    // (ùÜ¢) MUSICAL SYMBOL ORNAMENT STROKE-8	[115E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A2, 0x0062 };
    uint32_t const ces[9] = { 0x115E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_270)
{
    // 1D1A3 0021;	
    // (ùÜ£) MUSICAL SYMBOL ORNAMENT STROKE-9	[115F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A3, 0x0021 };
    uint32_t const ces[9] = { 0x115F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_271)
{
    // 1D1A3 003F;	
    // (ùÜ£) MUSICAL SYMBOL ORNAMENT STROKE-9	[115F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A3, 0x003F };
    uint32_t const ces[9] = { 0x115F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_272)
{
    // 1D1A3 0061;	
    // (ùÜ£) MUSICAL SYMBOL ORNAMENT STROKE-9	[115F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A3, 0x0061 };
    uint32_t const ces[9] = { 0x115F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_273)
{
    // 1D1A3 0041;	
    // (ùÜ£) MUSICAL SYMBOL ORNAMENT STROKE-9	[115F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A3, 0x0041 };
    uint32_t const ces[9] = { 0x115F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_274)
{
    // 1D1A3 0062;	
    // (ùÜ£) MUSICAL SYMBOL ORNAMENT STROKE-9	[115F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A3, 0x0062 };
    uint32_t const ces[9] = { 0x115F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_275)
{
    // 1D1A4 0021;	
    // (ùÜ§) MUSICAL SYMBOL ORNAMENT STROKE-10	[1160 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A4, 0x0021 };
    uint32_t const ces[9] = { 0x1160, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_276)
{
    // 1D1A4 003F;	
    // (ùÜ§) MUSICAL SYMBOL ORNAMENT STROKE-10	[1160 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A4, 0x003F };
    uint32_t const ces[9] = { 0x1160, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_277)
{
    // 1D1A4 0061;	
    // (ùÜ§) MUSICAL SYMBOL ORNAMENT STROKE-10	[1160 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A4, 0x0061 };
    uint32_t const ces[9] = { 0x1160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_278)
{
    // 1D1A4 0041;	
    // (ùÜ§) MUSICAL SYMBOL ORNAMENT STROKE-10	[1160 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A4, 0x0041 };
    uint32_t const ces[9] = { 0x1160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_279)
{
    // 1D1A4 0062;	
    // (ùÜ§) MUSICAL SYMBOL ORNAMENT STROKE-10	[1160 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A4, 0x0062 };
    uint32_t const ces[9] = { 0x1160, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_280)
{
    // 1D1A5 0021;	
    // (ùÜ•) MUSICAL SYMBOL ORNAMENT STROKE-11	[1161 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A5, 0x0021 };
    uint32_t const ces[9] = { 0x1161, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_281)
{
    // 1D1A5 003F;	
    // (ùÜ•) MUSICAL SYMBOL ORNAMENT STROKE-11	[1161 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A5, 0x003F };
    uint32_t const ces[9] = { 0x1161, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_282)
{
    // 1D1A5 0061;	
    // (ùÜ•) MUSICAL SYMBOL ORNAMENT STROKE-11	[1161 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A5, 0x0061 };
    uint32_t const ces[9] = { 0x1161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_283)
{
    // 1D1A5 0041;	
    // (ùÜ•) MUSICAL SYMBOL ORNAMENT STROKE-11	[1161 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A5, 0x0041 };
    uint32_t const ces[9] = { 0x1161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_284)
{
    // 1D1A5 0062;	
    // (ùÜ•) MUSICAL SYMBOL ORNAMENT STROKE-11	[1161 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A5, 0x0062 };
    uint32_t const ces[9] = { 0x1161, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_285)
{
    // 1D1A6 0021;	
    // (ùÜ¶) MUSICAL SYMBOL HAUPTSTIMME	[1162 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A6, 0x0021 };
    uint32_t const ces[9] = { 0x1162, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_286)
{
    // 1D1A6 003F;	
    // (ùÜ¶) MUSICAL SYMBOL HAUPTSTIMME	[1162 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A6, 0x003F };
    uint32_t const ces[9] = { 0x1162, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_287)
{
    // 1D1A6 0061;	
    // (ùÜ¶) MUSICAL SYMBOL HAUPTSTIMME	[1162 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A6, 0x0061 };
    uint32_t const ces[9] = { 0x1162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_288)
{
    // 1D1A6 0041;	
    // (ùÜ¶) MUSICAL SYMBOL HAUPTSTIMME	[1162 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A6, 0x0041 };
    uint32_t const ces[9] = { 0x1162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_289)
{
    // 1D1A6 0062;	
    // (ùÜ¶) MUSICAL SYMBOL HAUPTSTIMME	[1162 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A6, 0x0062 };
    uint32_t const ces[9] = { 0x1162, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_290)
{
    // 1D1A7 0021;	
    // (ùÜß) MUSICAL SYMBOL NEBENSTIMME	[1163 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A7, 0x0021 };
    uint32_t const ces[9] = { 0x1163, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_291)
{
    // 1D1A7 003F;	
    // (ùÜß) MUSICAL SYMBOL NEBENSTIMME	[1163 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A7, 0x003F };
    uint32_t const ces[9] = { 0x1163, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_292)
{
    // 1D1A7 0061;	
    // (ùÜß) MUSICAL SYMBOL NEBENSTIMME	[1163 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A7, 0x0061 };
    uint32_t const ces[9] = { 0x1163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_293)
{
    // 1D1A7 0041;	
    // (ùÜß) MUSICAL SYMBOL NEBENSTIMME	[1163 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A7, 0x0041 };
    uint32_t const ces[9] = { 0x1163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_294)
{
    // 1D1A7 0062;	
    // (ùÜß) MUSICAL SYMBOL NEBENSTIMME	[1163 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A7, 0x0062 };
    uint32_t const ces[9] = { 0x1163, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_295)
{
    // 1D1A8 0021;	
    // (ùÜ®) MUSICAL SYMBOL END OF STIMME	[1164 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A8, 0x0021 };
    uint32_t const ces[9] = { 0x1164, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_296)
{
    // 1D1A8 003F;	
    // (ùÜ®) MUSICAL SYMBOL END OF STIMME	[1164 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A8, 0x003F };
    uint32_t const ces[9] = { 0x1164, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_297)
{
    // 1D1A8 0061;	
    // (ùÜ®) MUSICAL SYMBOL END OF STIMME	[1164 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A8, 0x0061 };
    uint32_t const ces[9] = { 0x1164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_298)
{
    // 1D1A8 0041;	
    // (ùÜ®) MUSICAL SYMBOL END OF STIMME	[1164 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A8, 0x0041 };
    uint32_t const ces[9] = { 0x1164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_299)
{
    // 1D1A8 0062;	
    // (ùÜ®) MUSICAL SYMBOL END OF STIMME	[1164 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A8, 0x0062 };
    uint32_t const ces[9] = { 0x1164, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_300)
{
    // 1D1A9 0021;	
    // (ùÜ©) MUSICAL SYMBOL DEGREE SLASH	[1165 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A9, 0x0021 };
    uint32_t const ces[9] = { 0x1165, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_301)
{
    // 1D1A9 003F;	
    // (ùÜ©) MUSICAL SYMBOL DEGREE SLASH	[1165 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A9, 0x003F };
    uint32_t const ces[9] = { 0x1165, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_302)
{
    // 1D1A9 0061;	
    // (ùÜ©) MUSICAL SYMBOL DEGREE SLASH	[1165 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A9, 0x0061 };
    uint32_t const ces[9] = { 0x1165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_303)
{
    // 1D1A9 0041;	
    // (ùÜ©) MUSICAL SYMBOL DEGREE SLASH	[1165 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1A9, 0x0041 };
    uint32_t const ces[9] = { 0x1165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_304)
{
    // 1D1A9 0062;	
    // (ùÜ©) MUSICAL SYMBOL DEGREE SLASH	[1165 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1A9, 0x0062 };
    uint32_t const ces[9] = { 0x1165, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_305)
{
    // 1D1AE 0021;	
    // (ùÜÆ) MUSICAL SYMBOL PEDAL MARK	[1166 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AE, 0x0021 };
    uint32_t const ces[9] = { 0x1166, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_306)
{
    // 1D1AE 003F;	
    // (ùÜÆ) MUSICAL SYMBOL PEDAL MARK	[1166 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AE, 0x003F };
    uint32_t const ces[9] = { 0x1166, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_307)
{
    // 1D1AE 0061;	
    // (ùÜÆ) MUSICAL SYMBOL PEDAL MARK	[1166 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AE, 0x0061 };
    uint32_t const ces[9] = { 0x1166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_308)
{
    // 1D1AE 0041;	
    // (ùÜÆ) MUSICAL SYMBOL PEDAL MARK	[1166 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1AE, 0x0041 };
    uint32_t const ces[9] = { 0x1166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_309)
{
    // 1D1AE 0062;	
    // (ùÜÆ) MUSICAL SYMBOL PEDAL MARK	[1166 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AE, 0x0062 };
    uint32_t const ces[9] = { 0x1166, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_310)
{
    // 1D1AF 0021;	
    // (ùÜØ) MUSICAL SYMBOL PEDAL UP MARK	[1167 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AF, 0x0021 };
    uint32_t const ces[9] = { 0x1167, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_311)
{
    // 1D1AF 003F;	
    // (ùÜØ) MUSICAL SYMBOL PEDAL UP MARK	[1167 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AF, 0x003F };
    uint32_t const ces[9] = { 0x1167, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_312)
{
    // 1D1AF 0061;	
    // (ùÜØ) MUSICAL SYMBOL PEDAL UP MARK	[1167 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AF, 0x0061 };
    uint32_t const ces[9] = { 0x1167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_313)
{
    // 1D1AF 0041;	
    // (ùÜØ) MUSICAL SYMBOL PEDAL UP MARK	[1167 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1AF, 0x0041 };
    uint32_t const ces[9] = { 0x1167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_314)
{
    // 1D1AF 0062;	
    // (ùÜØ) MUSICAL SYMBOL PEDAL UP MARK	[1167 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1AF, 0x0062 };
    uint32_t const ces[9] = { 0x1167, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_315)
{
    // 1D1B0 0021;	
    // (ùÜ∞) MUSICAL SYMBOL HALF PEDAL MARK	[1168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B0, 0x0021 };
    uint32_t const ces[9] = { 0x1168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_316)
{
    // 1D1B0 003F;	
    // (ùÜ∞) MUSICAL SYMBOL HALF PEDAL MARK	[1168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B0, 0x003F };
    uint32_t const ces[9] = { 0x1168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_317)
{
    // 1D1B0 0061;	
    // (ùÜ∞) MUSICAL SYMBOL HALF PEDAL MARK	[1168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B0, 0x0061 };
    uint32_t const ces[9] = { 0x1168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_318)
{
    // 1D1B0 0041;	
    // (ùÜ∞) MUSICAL SYMBOL HALF PEDAL MARK	[1168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B0, 0x0041 };
    uint32_t const ces[9] = { 0x1168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_319)
{
    // 1D1B0 0062;	
    // (ùÜ∞) MUSICAL SYMBOL HALF PEDAL MARK	[1168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B0, 0x0062 };
    uint32_t const ces[9] = { 0x1168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_320)
{
    // 1D1B1 0021;	
    // (ùÜ±) MUSICAL SYMBOL GLISSANDO UP	[1169 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B1, 0x0021 };
    uint32_t const ces[9] = { 0x1169, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_321)
{
    // 1D1B1 003F;	
    // (ùÜ±) MUSICAL SYMBOL GLISSANDO UP	[1169 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B1, 0x003F };
    uint32_t const ces[9] = { 0x1169, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_322)
{
    // 1D1B1 0061;	
    // (ùÜ±) MUSICAL SYMBOL GLISSANDO UP	[1169 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B1, 0x0061 };
    uint32_t const ces[9] = { 0x1169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_323)
{
    // 1D1B1 0041;	
    // (ùÜ±) MUSICAL SYMBOL GLISSANDO UP	[1169 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B1, 0x0041 };
    uint32_t const ces[9] = { 0x1169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_324)
{
    // 1D1B1 0062;	
    // (ùÜ±) MUSICAL SYMBOL GLISSANDO UP	[1169 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B1, 0x0062 };
    uint32_t const ces[9] = { 0x1169, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_325)
{
    // 1D1B2 0021;	
    // (ùÜ≤) MUSICAL SYMBOL GLISSANDO DOWN	[116A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B2, 0x0021 };
    uint32_t const ces[9] = { 0x116A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_326)
{
    // 1D1B2 003F;	
    // (ùÜ≤) MUSICAL SYMBOL GLISSANDO DOWN	[116A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B2, 0x003F };
    uint32_t const ces[9] = { 0x116A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_327)
{
    // 1D1B2 0061;	
    // (ùÜ≤) MUSICAL SYMBOL GLISSANDO DOWN	[116A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B2, 0x0061 };
    uint32_t const ces[9] = { 0x116A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_328)
{
    // 1D1B2 0041;	
    // (ùÜ≤) MUSICAL SYMBOL GLISSANDO DOWN	[116A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B2, 0x0041 };
    uint32_t const ces[9] = { 0x116A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_329)
{
    // 1D1B2 0062;	
    // (ùÜ≤) MUSICAL SYMBOL GLISSANDO DOWN	[116A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B2, 0x0062 };
    uint32_t const ces[9] = { 0x116A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_330)
{
    // 1D1B3 0021;	
    // (ùÜ≥) MUSICAL SYMBOL WITH FINGERNAILS	[116B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B3, 0x0021 };
    uint32_t const ces[9] = { 0x116B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_331)
{
    // 1D1B3 003F;	
    // (ùÜ≥) MUSICAL SYMBOL WITH FINGERNAILS	[116B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B3, 0x003F };
    uint32_t const ces[9] = { 0x116B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_332)
{
    // 1D1B3 0061;	
    // (ùÜ≥) MUSICAL SYMBOL WITH FINGERNAILS	[116B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B3, 0x0061 };
    uint32_t const ces[9] = { 0x116B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_333)
{
    // 1D1B3 0041;	
    // (ùÜ≥) MUSICAL SYMBOL WITH FINGERNAILS	[116B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B3, 0x0041 };
    uint32_t const ces[9] = { 0x116B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_334)
{
    // 1D1B3 0062;	
    // (ùÜ≥) MUSICAL SYMBOL WITH FINGERNAILS	[116B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B3, 0x0062 };
    uint32_t const ces[9] = { 0x116B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_335)
{
    // 1D1B4 0021;	
    // (ùÜ¥) MUSICAL SYMBOL DAMP	[116C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B4, 0x0021 };
    uint32_t const ces[9] = { 0x116C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_336)
{
    // 1D1B4 003F;	
    // (ùÜ¥) MUSICAL SYMBOL DAMP	[116C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B4, 0x003F };
    uint32_t const ces[9] = { 0x116C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_337)
{
    // 1D1B4 0061;	
    // (ùÜ¥) MUSICAL SYMBOL DAMP	[116C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B4, 0x0061 };
    uint32_t const ces[9] = { 0x116C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_338)
{
    // 1D1B4 0041;	
    // (ùÜ¥) MUSICAL SYMBOL DAMP	[116C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B4, 0x0041 };
    uint32_t const ces[9] = { 0x116C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_339)
{
    // 1D1B4 0062;	
    // (ùÜ¥) MUSICAL SYMBOL DAMP	[116C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B4, 0x0062 };
    uint32_t const ces[9] = { 0x116C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_340)
{
    // 1D1B5 0021;	
    // (ùÜµ) MUSICAL SYMBOL DAMP ALL	[116D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B5, 0x0021 };
    uint32_t const ces[9] = { 0x116D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_341)
{
    // 1D1B5 003F;	
    // (ùÜµ) MUSICAL SYMBOL DAMP ALL	[116D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B5, 0x003F };
    uint32_t const ces[9] = { 0x116D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_342)
{
    // 1D1B5 0061;	
    // (ùÜµ) MUSICAL SYMBOL DAMP ALL	[116D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B5, 0x0061 };
    uint32_t const ces[9] = { 0x116D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_343)
{
    // 1D1B5 0041;	
    // (ùÜµ) MUSICAL SYMBOL DAMP ALL	[116D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B5, 0x0041 };
    uint32_t const ces[9] = { 0x116D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_344)
{
    // 1D1B5 0062;	
    // (ùÜµ) MUSICAL SYMBOL DAMP ALL	[116D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B5, 0x0062 };
    uint32_t const ces[9] = { 0x116D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_345)
{
    // 1D1B6 0021;	
    // (ùÜ∂) MUSICAL SYMBOL MAXIMA	[116E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B6, 0x0021 };
    uint32_t const ces[9] = { 0x116E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_346)
{
    // 1D1B6 003F;	
    // (ùÜ∂) MUSICAL SYMBOL MAXIMA	[116E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B6, 0x003F };
    uint32_t const ces[9] = { 0x116E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_347)
{
    // 1D1B6 0061;	
    // (ùÜ∂) MUSICAL SYMBOL MAXIMA	[116E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B6, 0x0061 };
    uint32_t const ces[9] = { 0x116E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_348)
{
    // 1D1B6 0041;	
    // (ùÜ∂) MUSICAL SYMBOL MAXIMA	[116E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B6, 0x0041 };
    uint32_t const ces[9] = { 0x116E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_349)
{
    // 1D1B6 0062;	
    // (ùÜ∂) MUSICAL SYMBOL MAXIMA	[116E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B6, 0x0062 };
    uint32_t const ces[9] = { 0x116E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_350)
{
    // 1D1B7 0021;	
    // (ùÜ∑) MUSICAL SYMBOL LONGA	[116F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B7, 0x0021 };
    uint32_t const ces[9] = { 0x116F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_351)
{
    // 1D1B7 003F;	
    // (ùÜ∑) MUSICAL SYMBOL LONGA	[116F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B7, 0x003F };
    uint32_t const ces[9] = { 0x116F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_352)
{
    // 1D1B7 0061;	
    // (ùÜ∑) MUSICAL SYMBOL LONGA	[116F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B7, 0x0061 };
    uint32_t const ces[9] = { 0x116F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_353)
{
    // 1D1B7 0041;	
    // (ùÜ∑) MUSICAL SYMBOL LONGA	[116F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B7, 0x0041 };
    uint32_t const ces[9] = { 0x116F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_354)
{
    // 1D1B7 0062;	
    // (ùÜ∑) MUSICAL SYMBOL LONGA	[116F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B7, 0x0062 };
    uint32_t const ces[9] = { 0x116F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_355)
{
    // 1D1B8 0021;	
    // (ùÜ∏) MUSICAL SYMBOL BREVIS	[1170 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B8, 0x0021 };
    uint32_t const ces[9] = { 0x1170, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_356)
{
    // 1D1B8 003F;	
    // (ùÜ∏) MUSICAL SYMBOL BREVIS	[1170 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B8, 0x003F };
    uint32_t const ces[9] = { 0x1170, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_357)
{
    // 1D1B8 0061;	
    // (ùÜ∏) MUSICAL SYMBOL BREVIS	[1170 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B8, 0x0061 };
    uint32_t const ces[9] = { 0x1170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_358)
{
    // 1D1B8 0041;	
    // (ùÜ∏) MUSICAL SYMBOL BREVIS	[1170 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B8, 0x0041 };
    uint32_t const ces[9] = { 0x1170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_359)
{
    // 1D1B8 0062;	
    // (ùÜ∏) MUSICAL SYMBOL BREVIS	[1170 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B8, 0x0062 };
    uint32_t const ces[9] = { 0x1170, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_360)
{
    // 1D1B9 0334 1D165;	
    // (ùÜπÃ¥ùÖ•) MUSICAL SYMBOL SEMIBREVIS WHITE, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1B9, 0x0334, 0x1D165 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_361)
{
    // 1D1B9 1D165 0334;	
    // (ùÜπùÖ•) MUSICAL SYMBOL SEMIBREVIS WHITE, MUSICAL SYMBOL COMBINING STEM	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1B9, 0x1D165, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_362)
{
    // 1D1BB 0334;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BB, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_363)
{
    // 1D1B9 0334 1D165 1D16E;	
    // (ùÜπÃ¥ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIBREVIS WHITE, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-1	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1B9, 0x0334, 0x1D165, 0x1D16E };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_364)
{
    // 1D1B9 1D165 1D16E 0334;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIBREVIS WHITE, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-1	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1B9, 0x1D165, 0x1D16E, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_365)
{
    // 1D1BB 0334 1D16E;	
    // (ùÜπÃ¥ùÖ•ùÖÆ) MUSICAL SYMBOL MINIMA, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-1	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BB, 0x0334, 0x1D16E };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_366)
{
    // 1D1BB 1D16E 0334;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL MINIMA, MUSICAL SYMBOL COMBINING FLAG-1	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BB, 0x1D16E, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_367)
{
    // 1D1B9 0334 1D165 1D16F;	
    // (ùÜπÃ¥ùÖ•ùÖØ) MUSICAL SYMBOL SEMIBREVIS WHITE, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-2	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1B9, 0x0334, 0x1D165, 0x1D16F };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_368)
{
    // 1D1B9 1D165 0334 1D16F;	
    // (ùÜπÃ¥ùÖ•ùÖØ) MUSICAL SYMBOL SEMIBREVIS WHITE, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-2	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1B9, 0x1D165, 0x0334, 0x1D16F };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_369)
{
    // 1D1B9 1D165 1D16F 0334;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL SEMIBREVIS WHITE, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-2	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1B9, 0x1D165, 0x1D16F, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_370)
{
    // 1D1BB 1D16F 0334;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL MINIMA, MUSICAL SYMBOL COMBINING FLAG-2	[1171 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BB, 0x1D16F, 0x0334 };
    uint32_t const ces[8] = { 0x1171, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_371)
{
    // 1D1B9 0021;	
    // (ùÜπ) MUSICAL SYMBOL SEMIBREVIS WHITE	[1171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B9, 0x0021 };
    uint32_t const ces[9] = { 0x1171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_372)
{
    // 1D1BB 0021;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BB, 0x0021 };
    uint32_t const ces[9] = { 0x1171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_373)
{
    // 1D1BD 0021;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA WHITE	[1171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BD, 0x0021 };
    uint32_t const ces[9] = { 0x1171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_374)
{
    // 1D1BF 0021;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL FUSA WHITE	[1171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BF, 0x0021 };
    uint32_t const ces[9] = { 0x1171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_375)
{
    // 1D1B9 003F;	
    // (ùÜπ) MUSICAL SYMBOL SEMIBREVIS WHITE	[1171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B9, 0x003F };
    uint32_t const ces[9] = { 0x1171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_376)
{
    // 1D1BB 003F;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BB, 0x003F };
    uint32_t const ces[9] = { 0x1171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_377)
{
    // 1D1BD 003F;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA WHITE	[1171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BD, 0x003F };
    uint32_t const ces[9] = { 0x1171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_378)
{
    // 1D1BF 003F;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL FUSA WHITE	[1171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BF, 0x003F };
    uint32_t const ces[9] = { 0x1171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_379)
{
    // 1D1B9 0061;	
    // (ùÜπ) MUSICAL SYMBOL SEMIBREVIS WHITE	[1171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B9, 0x0061 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_380)
{
    // 1D1BB 0061;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BB, 0x0061 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_381)
{
    // 1D1BD 0061;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA WHITE	[1171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BD, 0x0061 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_382)
{
    // 1D1BF 0061;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL FUSA WHITE	[1171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BF, 0x0061 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_383)
{
    // 1D1B9 0041;	
    // (ùÜπ) MUSICAL SYMBOL SEMIBREVIS WHITE	[1171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1B9, 0x0041 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_384)
{
    // 1D1BB 0041;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BB, 0x0041 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_385)
{
    // 1D1BD 0041;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA WHITE	[1171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BD, 0x0041 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_386)
{
    // 1D1BF 0041;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL FUSA WHITE	[1171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BF, 0x0041 };
    uint32_t const ces[9] = { 0x1171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_387)
{
    // 1D1B9 0062;	
    // (ùÜπ) MUSICAL SYMBOL SEMIBREVIS WHITE	[1171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1B9, 0x0062 };
    uint32_t const ces[9] = { 0x1171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_388)
{
    // 1D1BB 0062;	
    // (ùÜπùÖ•) MUSICAL SYMBOL MINIMA	[1171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BB, 0x0062 };
    uint32_t const ces[9] = { 0x1171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_389)
{
    // 1D1BD 0062;	
    // (ùÜπùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA WHITE	[1171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BD, 0x0062 };
    uint32_t const ces[9] = { 0x1171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_390)
{
    // 1D1BF 0062;	
    // (ùÜπùÖ•ùÖØ) MUSICAL SYMBOL FUSA WHITE	[1171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BF, 0x0062 };
    uint32_t const ces[9] = { 0x1171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_391)
{
    // 1D1BA 0334 1D165;	
    // (ùÜ∫Ã¥ùÖ•) MUSICAL SYMBOL SEMIBREVIS BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BA, 0x0334, 0x1D165 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_392)
{
    // 1D1BA 1D165 0334;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL SEMIBREVIS BLACK, MUSICAL SYMBOL COMBINING STEM	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BA, 0x1D165, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_393)
{
    // 1D1BC 0334;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BC, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_394)
{
    // 1D1BA 1D165 0334 1D16E;	
    // (ùÜ∫Ã¥ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIBREVIS BLACK, MUSICAL SYMBOL COMBINING STEM, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-1	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1BA, 0x1D165, 0x0334, 0x1D16E };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_395)
{
    // 1D1BA 1D165 1D16E 0334;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIBREVIS BLACK, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-1	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1BA, 0x1D165, 0x1D16E, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_396)
{
    // 1D1BC 0334 1D16E;	
    // (ùÜ∫Ã¥ùÖ•ùÖÆ) MUSICAL SYMBOL MINIMA BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-1	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BC, 0x0334, 0x1D16E };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_397)
{
    // 1D1BC 1D16E 0334;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL MINIMA BLACK, MUSICAL SYMBOL COMBINING FLAG-1	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BC, 0x1D16E, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_398)
{
    // 1D1BA 0334 1D165 1D16F;	
    // (ùÜ∫Ã¥ùÖ•ùÖØ) MUSICAL SYMBOL SEMIBREVIS BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-2	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1BA, 0x0334, 0x1D165, 0x1D16F };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_399)
{
    // 1D1BA 1D165 1D16F 0334;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL SEMIBREVIS BLACK, MUSICAL SYMBOL COMBINING STEM, MUSICAL SYMBOL COMBINING FLAG-2	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x1D1BA, 0x1D165, 0x1D16F, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_400)
{
    // 1D1BC 0334 1D16F;	
    // (ùÜ∫Ã¥ùÖ•ùÖØ) MUSICAL SYMBOL MINIMA BLACK, COMBINING TILDE OVERLAY, MUSICAL SYMBOL COMBINING FLAG-2	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BC, 0x0334, 0x1D16F };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_401)
{
    // 1D1BC 1D16F 0334;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL MINIMA BLACK, MUSICAL SYMBOL COMBINING FLAG-2	[1172 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x1D1BC, 0x1D16F, 0x0334 };
    uint32_t const ces[8] = { 0x1172, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_402)
{
    // 1D1BA 0021;	
    // (ùÜ∫) MUSICAL SYMBOL SEMIBREVIS BLACK	[1172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BA, 0x0021 };
    uint32_t const ces[9] = { 0x1172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_403)
{
    // 1D1BC 0021;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BC, 0x0021 };
    uint32_t const ces[9] = { 0x1172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_404)
{
    // 1D1BE 0021;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA BLACK	[1172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BE, 0x0021 };
    uint32_t const ces[9] = { 0x1172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_405)
{
    // 1D1C0 0021;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL FUSA BLACK	[1172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C0, 0x0021 };
    uint32_t const ces[9] = { 0x1172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_406)
{
    // 1D1BA 003F;	
    // (ùÜ∫) MUSICAL SYMBOL SEMIBREVIS BLACK	[1172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BA, 0x003F };
    uint32_t const ces[9] = { 0x1172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_407)
{
    // 1D1BC 003F;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BC, 0x003F };
    uint32_t const ces[9] = { 0x1172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_408)
{
    // 1D1BE 003F;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA BLACK	[1172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BE, 0x003F };
    uint32_t const ces[9] = { 0x1172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_409)
{
    // 1D1C0 003F;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL FUSA BLACK	[1172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C0, 0x003F };
    uint32_t const ces[9] = { 0x1172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_410)
{
    // 1D1BA 0061;	
    // (ùÜ∫) MUSICAL SYMBOL SEMIBREVIS BLACK	[1172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BA, 0x0061 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_411)
{
    // 1D1BC 0061;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BC, 0x0061 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_412)
{
    // 1D1BE 0061;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA BLACK	[1172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BE, 0x0061 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_413)
{
    // 1D1C0 0061;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL FUSA BLACK	[1172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C0, 0x0061 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_414)
{
    // 1D1BA 0041;	
    // (ùÜ∫) MUSICAL SYMBOL SEMIBREVIS BLACK	[1172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BA, 0x0041 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_415)
{
    // 1D1BC 0041;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BC, 0x0041 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_416)
{
    // 1D1BE 0041;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA BLACK	[1172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1BE, 0x0041 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_417)
{
    // 1D1C0 0041;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL FUSA BLACK	[1172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C0, 0x0041 };
    uint32_t const ces[9] = { 0x1172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_418)
{
    // 1D1BA 0062;	
    // (ùÜ∫) MUSICAL SYMBOL SEMIBREVIS BLACK	[1172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BA, 0x0062 };
    uint32_t const ces[9] = { 0x1172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_419)
{
    // 1D1BC 0062;	
    // (ùÜ∫ùÖ•) MUSICAL SYMBOL MINIMA BLACK	[1172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BC, 0x0062 };
    uint32_t const ces[9] = { 0x1172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_420)
{
    // 1D1BE 0062;	
    // (ùÜ∫ùÖ•ùÖÆ) MUSICAL SYMBOL SEMIMINIMA BLACK	[1172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1BE, 0x0062 };
    uint32_t const ces[9] = { 0x1172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_421)
{
    // 1D1C0 0062;	
    // (ùÜ∫ùÖ•ùÖØ) MUSICAL SYMBOL FUSA BLACK	[1172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C0, 0x0062 };
    uint32_t const ces[9] = { 0x1172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_422)
{
    // 1D1C1 0021;	
    // (ùáÅ) MUSICAL SYMBOL LONGA PERFECTA REST	[1173 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C1, 0x0021 };
    uint32_t const ces[9] = { 0x1173, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_423)
{
    // 1D1C1 003F;	
    // (ùáÅ) MUSICAL SYMBOL LONGA PERFECTA REST	[1173 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C1, 0x003F };
    uint32_t const ces[9] = { 0x1173, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_424)
{
    // 1D1C1 0061;	
    // (ùáÅ) MUSICAL SYMBOL LONGA PERFECTA REST	[1173 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C1, 0x0061 };
    uint32_t const ces[9] = { 0x1173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_425)
{
    // 1D1C1 0041;	
    // (ùáÅ) MUSICAL SYMBOL LONGA PERFECTA REST	[1173 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C1, 0x0041 };
    uint32_t const ces[9] = { 0x1173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_426)
{
    // 1D1C1 0062;	
    // (ùáÅ) MUSICAL SYMBOL LONGA PERFECTA REST	[1173 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C1, 0x0062 };
    uint32_t const ces[9] = { 0x1173, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_427)
{
    // 1D1C2 0021;	
    // (ùáÇ) MUSICAL SYMBOL LONGA IMPERFECTA REST	[1174 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C2, 0x0021 };
    uint32_t const ces[9] = { 0x1174, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_428)
{
    // 1D1C2 003F;	
    // (ùáÇ) MUSICAL SYMBOL LONGA IMPERFECTA REST	[1174 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C2, 0x003F };
    uint32_t const ces[9] = { 0x1174, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_429)
{
    // 1D1C2 0061;	
    // (ùáÇ) MUSICAL SYMBOL LONGA IMPERFECTA REST	[1174 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C2, 0x0061 };
    uint32_t const ces[9] = { 0x1174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_430)
{
    // 1D1C2 0041;	
    // (ùáÇ) MUSICAL SYMBOL LONGA IMPERFECTA REST	[1174 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C2, 0x0041 };
    uint32_t const ces[9] = { 0x1174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_431)
{
    // 1D1C2 0062;	
    // (ùáÇ) MUSICAL SYMBOL LONGA IMPERFECTA REST	[1174 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C2, 0x0062 };
    uint32_t const ces[9] = { 0x1174, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_432)
{
    // 1D1C3 0021;	
    // (ùáÉ) MUSICAL SYMBOL BREVIS REST	[1175 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C3, 0x0021 };
    uint32_t const ces[9] = { 0x1175, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_433)
{
    // 1D1C3 003F;	
    // (ùáÉ) MUSICAL SYMBOL BREVIS REST	[1175 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C3, 0x003F };
    uint32_t const ces[9] = { 0x1175, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_434)
{
    // 1D1C3 0061;	
    // (ùáÉ) MUSICAL SYMBOL BREVIS REST	[1175 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C3, 0x0061 };
    uint32_t const ces[9] = { 0x1175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_435)
{
    // 1D1C3 0041;	
    // (ùáÉ) MUSICAL SYMBOL BREVIS REST	[1175 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C3, 0x0041 };
    uint32_t const ces[9] = { 0x1175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_436)
{
    // 1D1C3 0062;	
    // (ùáÉ) MUSICAL SYMBOL BREVIS REST	[1175 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C3, 0x0062 };
    uint32_t const ces[9] = { 0x1175, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_437)
{
    // 1D1C4 0021;	
    // (ùáÑ) MUSICAL SYMBOL SEMIBREVIS REST	[1176 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C4, 0x0021 };
    uint32_t const ces[9] = { 0x1176, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_438)
{
    // 1D1C4 003F;	
    // (ùáÑ) MUSICAL SYMBOL SEMIBREVIS REST	[1176 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C4, 0x003F };
    uint32_t const ces[9] = { 0x1176, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_439)
{
    // 1D1C4 0061;	
    // (ùáÑ) MUSICAL SYMBOL SEMIBREVIS REST	[1176 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C4, 0x0061 };
    uint32_t const ces[9] = { 0x1176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_440)
{
    // 1D1C4 0041;	
    // (ùáÑ) MUSICAL SYMBOL SEMIBREVIS REST	[1176 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C4, 0x0041 };
    uint32_t const ces[9] = { 0x1176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_441)
{
    // 1D1C4 0062;	
    // (ùáÑ) MUSICAL SYMBOL SEMIBREVIS REST	[1176 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C4, 0x0062 };
    uint32_t const ces[9] = { 0x1176, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_442)
{
    // 1D1C5 0021;	
    // (ùáÖ) MUSICAL SYMBOL MINIMA REST	[1177 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C5, 0x0021 };
    uint32_t const ces[9] = { 0x1177, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_443)
{
    // 1D1C5 003F;	
    // (ùáÖ) MUSICAL SYMBOL MINIMA REST	[1177 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C5, 0x003F };
    uint32_t const ces[9] = { 0x1177, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_444)
{
    // 1D1C5 0061;	
    // (ùáÖ) MUSICAL SYMBOL MINIMA REST	[1177 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C5, 0x0061 };
    uint32_t const ces[9] = { 0x1177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_445)
{
    // 1D1C5 0041;	
    // (ùáÖ) MUSICAL SYMBOL MINIMA REST	[1177 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C5, 0x0041 };
    uint32_t const ces[9] = { 0x1177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_446)
{
    // 1D1C5 0062;	
    // (ùáÖ) MUSICAL SYMBOL MINIMA REST	[1177 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C5, 0x0062 };
    uint32_t const ces[9] = { 0x1177, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_447)
{
    // 1D1C6 0021;	
    // (ùáÜ) MUSICAL SYMBOL SEMIMINIMA REST	[1178 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C6, 0x0021 };
    uint32_t const ces[9] = { 0x1178, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_448)
{
    // 1D1C6 003F;	
    // (ùáÜ) MUSICAL SYMBOL SEMIMINIMA REST	[1178 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C6, 0x003F };
    uint32_t const ces[9] = { 0x1178, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_449)
{
    // 1D1C6 0061;	
    // (ùáÜ) MUSICAL SYMBOL SEMIMINIMA REST	[1178 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C6, 0x0061 };
    uint32_t const ces[9] = { 0x1178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_450)
{
    // 1D1C6 0041;	
    // (ùáÜ) MUSICAL SYMBOL SEMIMINIMA REST	[1178 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C6, 0x0041 };
    uint32_t const ces[9] = { 0x1178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_451)
{
    // 1D1C6 0062;	
    // (ùáÜ) MUSICAL SYMBOL SEMIMINIMA REST	[1178 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C6, 0x0062 };
    uint32_t const ces[9] = { 0x1178, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_452)
{
    // 1D1C7 0021;	
    // (ùáá) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA	[1179 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C7, 0x0021 };
    uint32_t const ces[9] = { 0x1179, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_453)
{
    // 1D1C7 003F;	
    // (ùáá) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA	[1179 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C7, 0x003F };
    uint32_t const ces[9] = { 0x1179, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_454)
{
    // 1D1C7 0061;	
    // (ùáá) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA	[1179 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C7, 0x0061 };
    uint32_t const ces[9] = { 0x1179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_455)
{
    // 1D1C7 0041;	
    // (ùáá) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA	[1179 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C7, 0x0041 };
    uint32_t const ces[9] = { 0x1179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_456)
{
    // 1D1C7 0062;	
    // (ùáá) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA	[1179 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C7, 0x0062 };
    uint32_t const ces[9] = { 0x1179, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_457)
{
    // 1D1C8 0021;	
    // (ùáà) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA	[117A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C8, 0x0021 };
    uint32_t const ces[9] = { 0x117A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_458)
{
    // 1D1C8 003F;	
    // (ùáà) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA	[117A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C8, 0x003F };
    uint32_t const ces[9] = { 0x117A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_459)
{
    // 1D1C8 0061;	
    // (ùáà) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA	[117A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C8, 0x0061 };
    uint32_t const ces[9] = { 0x117A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_460)
{
    // 1D1C8 0041;	
    // (ùáà) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA	[117A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C8, 0x0041 };
    uint32_t const ces[9] = { 0x117A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_461)
{
    // 1D1C8 0062;	
    // (ùáà) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA	[117A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C8, 0x0062 };
    uint32_t const ces[9] = { 0x117A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_462)
{
    // 1D1C9 0021;	
    // (ùáâ) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1	[117B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C9, 0x0021 };
    uint32_t const ces[9] = { 0x117B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_463)
{
    // 1D1C9 003F;	
    // (ùáâ) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1	[117B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C9, 0x003F };
    uint32_t const ces[9] = { 0x117B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_464)
{
    // 1D1C9 0061;	
    // (ùáâ) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1	[117B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C9, 0x0061 };
    uint32_t const ces[9] = { 0x117B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_465)
{
    // 1D1C9 0041;	
    // (ùáâ) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1	[117B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C9, 0x0041 };
    uint32_t const ces[9] = { 0x117B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_466)
{
    // 1D1C9 0062;	
    // (ùáâ) MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1	[117B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C9, 0x0062 };
    uint32_t const ces[9] = { 0x117B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_467)
{
    // 1D1CA 0021;	
    // (ùáä) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA	[117C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CA, 0x0021 };
    uint32_t const ces[9] = { 0x117C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_468)
{
    // 1D1CA 003F;	
    // (ùáä) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA	[117C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CA, 0x003F };
    uint32_t const ces[9] = { 0x117C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_469)
{
    // 1D1CA 0061;	
    // (ùáä) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA	[117C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CA, 0x0061 };
    uint32_t const ces[9] = { 0x117C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_470)
{
    // 1D1CA 0041;	
    // (ùáä) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA	[117C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CA, 0x0041 };
    uint32_t const ces[9] = { 0x117C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_471)
{
    // 1D1CA 0062;	
    // (ùáä) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA	[117C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CA, 0x0062 };
    uint32_t const ces[9] = { 0x117C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_472)
{
    // 1D1CB 0021;	
    // (ùáã) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA	[117D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CB, 0x0021 };
    uint32_t const ces[9] = { 0x117D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_473)
{
    // 1D1CB 003F;	
    // (ùáã) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA	[117D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CB, 0x003F };
    uint32_t const ces[9] = { 0x117D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_474)
{
    // 1D1CB 0061;	
    // (ùáã) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA	[117D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CB, 0x0061 };
    uint32_t const ces[9] = { 0x117D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_475)
{
    // 1D1CB 0041;	
    // (ùáã) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA	[117D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CB, 0x0041 };
    uint32_t const ces[9] = { 0x117D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_476)
{
    // 1D1CB 0062;	
    // (ùáã) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA	[117D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CB, 0x0062 };
    uint32_t const ces[9] = { 0x117D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_477)
{
    // 1D1CC 0021;	
    // (ùáå) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1	[117E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CC, 0x0021 };
    uint32_t const ces[9] = { 0x117E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_478)
{
    // 1D1CC 003F;	
    // (ùáå) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1	[117E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CC, 0x003F };
    uint32_t const ces[9] = { 0x117E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_479)
{
    // 1D1CC 0061;	
    // (ùáå) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1	[117E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CC, 0x0061 };
    uint32_t const ces[9] = { 0x117E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_480)
{
    // 1D1CC 0041;	
    // (ùáå) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1	[117E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CC, 0x0041 };
    uint32_t const ces[9] = { 0x117E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_481)
{
    // 1D1CC 0062;	
    // (ùáå) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1	[117E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CC, 0x0062 };
    uint32_t const ces[9] = { 0x117E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_482)
{
    // 1D1CD 0021;	
    // (ùáç) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2	[117F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CD, 0x0021 };
    uint32_t const ces[9] = { 0x117F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_483)
{
    // 1D1CD 003F;	
    // (ùáç) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2	[117F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CD, 0x003F };
    uint32_t const ces[9] = { 0x117F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_484)
{
    // 1D1CD 0061;	
    // (ùáç) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2	[117F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CD, 0x0061 };
    uint32_t const ces[9] = { 0x117F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_485)
{
    // 1D1CD 0041;	
    // (ùáç) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2	[117F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CD, 0x0041 };
    uint32_t const ces[9] = { 0x117F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_486)
{
    // 1D1CD 0062;	
    // (ùáç) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2	[117F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CD, 0x0062 };
    uint32_t const ces[9] = { 0x117F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_487)
{
    // 1D1CE 0021;	
    // (ùáé) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3	[1180 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CE, 0x0021 };
    uint32_t const ces[9] = { 0x1180, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_488)
{
    // 1D1CE 003F;	
    // (ùáé) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3	[1180 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CE, 0x003F };
    uint32_t const ces[9] = { 0x1180, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_489)
{
    // 1D1CE 0061;	
    // (ùáé) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3	[1180 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CE, 0x0061 };
    uint32_t const ces[9] = { 0x1180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_490)
{
    // 1D1CE 0041;	
    // (ùáé) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3	[1180 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CE, 0x0041 };
    uint32_t const ces[9] = { 0x1180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_491)
{
    // 1D1CE 0062;	
    // (ùáé) MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3	[1180 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CE, 0x0062 };
    uint32_t const ces[9] = { 0x1180, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_492)
{
    // 1D1CF 0021;	
    // (ùáè) MUSICAL SYMBOL CROIX	[1181 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CF, 0x0021 };
    uint32_t const ces[9] = { 0x1181, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_493)
{
    // 1D1CF 003F;	
    // (ùáè) MUSICAL SYMBOL CROIX	[1181 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CF, 0x003F };
    uint32_t const ces[9] = { 0x1181, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_494)
{
    // 1D1CF 0061;	
    // (ùáè) MUSICAL SYMBOL CROIX	[1181 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CF, 0x0061 };
    uint32_t const ces[9] = { 0x1181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_495)
{
    // 1D1CF 0041;	
    // (ùáè) MUSICAL SYMBOL CROIX	[1181 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1CF, 0x0041 };
    uint32_t const ces[9] = { 0x1181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_496)
{
    // 1D1CF 0062;	
    // (ùáè) MUSICAL SYMBOL CROIX	[1181 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1CF, 0x0062 };
    uint32_t const ces[9] = { 0x1181, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_497)
{
    // 1D1D0 0021;	
    // (ùáê) MUSICAL SYMBOL GREGORIAN C CLEF	[1182 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D0, 0x0021 };
    uint32_t const ces[9] = { 0x1182, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_498)
{
    // 1D1D0 003F;	
    // (ùáê) MUSICAL SYMBOL GREGORIAN C CLEF	[1182 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D0, 0x003F };
    uint32_t const ces[9] = { 0x1182, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_051_499)
{
    // 1D1D0 0061;	
    // (ùáê) MUSICAL SYMBOL GREGORIAN C CLEF	[1182 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D0, 0x0061 };
    uint32_t const ces[9] = { 0x1182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

