// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_059_000)
{
    // 1F477 0041;	
    // (👷) CONSTRUCTION WORKER	[143E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F477, 0x0041 };
    uint32_t const ces[9] = { 0x143E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_001)
{
    // 1F477 0062;	
    // (👷) CONSTRUCTION WORKER	[143E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F477, 0x0062 };
    uint32_t const ces[9] = { 0x143E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_002)
{
    // 1F478 0021;	
    // (👸) PRINCESS	[143F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F478, 0x0021 };
    uint32_t const ces[9] = { 0x143F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_003)
{
    // 1F478 003F;	
    // (👸) PRINCESS	[143F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F478, 0x003F };
    uint32_t const ces[9] = { 0x143F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_004)
{
    // 1F478 0061;	
    // (👸) PRINCESS	[143F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F478, 0x0061 };
    uint32_t const ces[9] = { 0x143F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_005)
{
    // 1F478 0041;	
    // (👸) PRINCESS	[143F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F478, 0x0041 };
    uint32_t const ces[9] = { 0x143F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_006)
{
    // 1F478 0062;	
    // (👸) PRINCESS	[143F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F478, 0x0062 };
    uint32_t const ces[9] = { 0x143F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_007)
{
    // 1F479 0021;	
    // (👹) JAPANESE OGRE	[1440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F479, 0x0021 };
    uint32_t const ces[9] = { 0x1440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_008)
{
    // 1F479 003F;	
    // (👹) JAPANESE OGRE	[1440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F479, 0x003F };
    uint32_t const ces[9] = { 0x1440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_009)
{
    // 1F479 0061;	
    // (👹) JAPANESE OGRE	[1440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F479, 0x0061 };
    uint32_t const ces[9] = { 0x1440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_010)
{
    // 1F479 0041;	
    // (👹) JAPANESE OGRE	[1440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F479, 0x0041 };
    uint32_t const ces[9] = { 0x1440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_011)
{
    // 1F479 0062;	
    // (👹) JAPANESE OGRE	[1440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F479, 0x0062 };
    uint32_t const ces[9] = { 0x1440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_012)
{
    // 1F47A 0021;	
    // (👺) JAPANESE GOBLIN	[1441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47A, 0x0021 };
    uint32_t const ces[9] = { 0x1441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_013)
{
    // 1F47A 003F;	
    // (👺) JAPANESE GOBLIN	[1441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47A, 0x003F };
    uint32_t const ces[9] = { 0x1441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_014)
{
    // 1F47A 0061;	
    // (👺) JAPANESE GOBLIN	[1441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47A, 0x0061 };
    uint32_t const ces[9] = { 0x1441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_015)
{
    // 1F47A 0041;	
    // (👺) JAPANESE GOBLIN	[1441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47A, 0x0041 };
    uint32_t const ces[9] = { 0x1441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_016)
{
    // 1F47A 0062;	
    // (👺) JAPANESE GOBLIN	[1441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47A, 0x0062 };
    uint32_t const ces[9] = { 0x1441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_017)
{
    // 1F47B 0021;	
    // (👻) GHOST	[1442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47B, 0x0021 };
    uint32_t const ces[9] = { 0x1442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_018)
{
    // 1F47B 003F;	
    // (👻) GHOST	[1442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47B, 0x003F };
    uint32_t const ces[9] = { 0x1442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_019)
{
    // 1F47B 0061;	
    // (👻) GHOST	[1442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47B, 0x0061 };
    uint32_t const ces[9] = { 0x1442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_020)
{
    // 1F47B 0041;	
    // (👻) GHOST	[1442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47B, 0x0041 };
    uint32_t const ces[9] = { 0x1442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_021)
{
    // 1F47B 0062;	
    // (👻) GHOST	[1442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47B, 0x0062 };
    uint32_t const ces[9] = { 0x1442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_022)
{
    // 1F47C 0021;	
    // (👼) BABY ANGEL	[1443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47C, 0x0021 };
    uint32_t const ces[9] = { 0x1443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_023)
{
    // 1F47C 003F;	
    // (👼) BABY ANGEL	[1443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47C, 0x003F };
    uint32_t const ces[9] = { 0x1443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_024)
{
    // 1F47C 0061;	
    // (👼) BABY ANGEL	[1443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47C, 0x0061 };
    uint32_t const ces[9] = { 0x1443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_025)
{
    // 1F47C 0041;	
    // (👼) BABY ANGEL	[1443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47C, 0x0041 };
    uint32_t const ces[9] = { 0x1443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_026)
{
    // 1F47C 0062;	
    // (👼) BABY ANGEL	[1443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47C, 0x0062 };
    uint32_t const ces[9] = { 0x1443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_027)
{
    // 1F47D 0021;	
    // (👽) EXTRATERRESTRIAL ALIEN	[1444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47D, 0x0021 };
    uint32_t const ces[9] = { 0x1444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_028)
{
    // 1F47D 003F;	
    // (👽) EXTRATERRESTRIAL ALIEN	[1444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47D, 0x003F };
    uint32_t const ces[9] = { 0x1444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_029)
{
    // 1F47D 0061;	
    // (👽) EXTRATERRESTRIAL ALIEN	[1444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47D, 0x0061 };
    uint32_t const ces[9] = { 0x1444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_030)
{
    // 1F47D 0041;	
    // (👽) EXTRATERRESTRIAL ALIEN	[1444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47D, 0x0041 };
    uint32_t const ces[9] = { 0x1444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_031)
{
    // 1F47D 0062;	
    // (👽) EXTRATERRESTRIAL ALIEN	[1444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47D, 0x0062 };
    uint32_t const ces[9] = { 0x1444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_032)
{
    // 1F47E 0021;	
    // (👾) ALIEN MONSTER	[1445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47E, 0x0021 };
    uint32_t const ces[9] = { 0x1445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_033)
{
    // 1F47E 003F;	
    // (👾) ALIEN MONSTER	[1445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47E, 0x003F };
    uint32_t const ces[9] = { 0x1445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_034)
{
    // 1F47E 0061;	
    // (👾) ALIEN MONSTER	[1445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47E, 0x0061 };
    uint32_t const ces[9] = { 0x1445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_035)
{
    // 1F47E 0041;	
    // (👾) ALIEN MONSTER	[1445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47E, 0x0041 };
    uint32_t const ces[9] = { 0x1445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_036)
{
    // 1F47E 0062;	
    // (👾) ALIEN MONSTER	[1445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47E, 0x0062 };
    uint32_t const ces[9] = { 0x1445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_037)
{
    // 1F47F 0021;	
    // (👿) IMP	[1446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47F, 0x0021 };
    uint32_t const ces[9] = { 0x1446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_038)
{
    // 1F47F 003F;	
    // (👿) IMP	[1446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47F, 0x003F };
    uint32_t const ces[9] = { 0x1446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_039)
{
    // 1F47F 0061;	
    // (👿) IMP	[1446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47F, 0x0061 };
    uint32_t const ces[9] = { 0x1446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_040)
{
    // 1F47F 0041;	
    // (👿) IMP	[1446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F47F, 0x0041 };
    uint32_t const ces[9] = { 0x1446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_041)
{
    // 1F47F 0062;	
    // (👿) IMP	[1446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F47F, 0x0062 };
    uint32_t const ces[9] = { 0x1446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_042)
{
    // 1F480 0021;	
    // (💀) SKULL	[1447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F480, 0x0021 };
    uint32_t const ces[9] = { 0x1447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_043)
{
    // 1F480 003F;	
    // (💀) SKULL	[1447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F480, 0x003F };
    uint32_t const ces[9] = { 0x1447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_044)
{
    // 1F480 0061;	
    // (💀) SKULL	[1447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F480, 0x0061 };
    uint32_t const ces[9] = { 0x1447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_045)
{
    // 1F480 0041;	
    // (💀) SKULL	[1447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F480, 0x0041 };
    uint32_t const ces[9] = { 0x1447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_046)
{
    // 1F480 0062;	
    // (💀) SKULL	[1447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F480, 0x0062 };
    uint32_t const ces[9] = { 0x1447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_047)
{
    // 1F481 0021;	
    // (💁) INFORMATION DESK PERSON	[1448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F481, 0x0021 };
    uint32_t const ces[9] = { 0x1448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_048)
{
    // 1F481 003F;	
    // (💁) INFORMATION DESK PERSON	[1448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F481, 0x003F };
    uint32_t const ces[9] = { 0x1448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_049)
{
    // 1F481 0061;	
    // (💁) INFORMATION DESK PERSON	[1448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F481, 0x0061 };
    uint32_t const ces[9] = { 0x1448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_050)
{
    // 1F481 0041;	
    // (💁) INFORMATION DESK PERSON	[1448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F481, 0x0041 };
    uint32_t const ces[9] = { 0x1448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_051)
{
    // 1F481 0062;	
    // (💁) INFORMATION DESK PERSON	[1448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F481, 0x0062 };
    uint32_t const ces[9] = { 0x1448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_052)
{
    // 1F482 0021;	
    // (💂) GUARDSMAN	[1449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F482, 0x0021 };
    uint32_t const ces[9] = { 0x1449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_053)
{
    // 1F482 003F;	
    // (💂) GUARDSMAN	[1449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F482, 0x003F };
    uint32_t const ces[9] = { 0x1449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_054)
{
    // 1F482 0061;	
    // (💂) GUARDSMAN	[1449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F482, 0x0061 };
    uint32_t const ces[9] = { 0x1449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_055)
{
    // 1F482 0041;	
    // (💂) GUARDSMAN	[1449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F482, 0x0041 };
    uint32_t const ces[9] = { 0x1449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_056)
{
    // 1F482 0062;	
    // (💂) GUARDSMAN	[1449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F482, 0x0062 };
    uint32_t const ces[9] = { 0x1449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_057)
{
    // 1F483 0021;	
    // (💃) DANCER	[144A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F483, 0x0021 };
    uint32_t const ces[9] = { 0x144A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_058)
{
    // 1F483 003F;	
    // (💃) DANCER	[144A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F483, 0x003F };
    uint32_t const ces[9] = { 0x144A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_059)
{
    // 1F483 0061;	
    // (💃) DANCER	[144A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F483, 0x0061 };
    uint32_t const ces[9] = { 0x144A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_060)
{
    // 1F483 0041;	
    // (💃) DANCER	[144A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F483, 0x0041 };
    uint32_t const ces[9] = { 0x144A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_061)
{
    // 1F483 0062;	
    // (💃) DANCER	[144A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F483, 0x0062 };
    uint32_t const ces[9] = { 0x144A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_062)
{
    // 1F484 0021;	
    // (💄) LIPSTICK	[144B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F484, 0x0021 };
    uint32_t const ces[9] = { 0x144B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_063)
{
    // 1F484 003F;	
    // (💄) LIPSTICK	[144B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F484, 0x003F };
    uint32_t const ces[9] = { 0x144B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_064)
{
    // 1F484 0061;	
    // (💄) LIPSTICK	[144B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F484, 0x0061 };
    uint32_t const ces[9] = { 0x144B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_065)
{
    // 1F484 0041;	
    // (💄) LIPSTICK	[144B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F484, 0x0041 };
    uint32_t const ces[9] = { 0x144B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_066)
{
    // 1F484 0062;	
    // (💄) LIPSTICK	[144B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F484, 0x0062 };
    uint32_t const ces[9] = { 0x144B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_067)
{
    // 1F485 0021;	
    // (💅) NAIL POLISH	[144C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F485, 0x0021 };
    uint32_t const ces[9] = { 0x144C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_068)
{
    // 1F485 003F;	
    // (💅) NAIL POLISH	[144C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F485, 0x003F };
    uint32_t const ces[9] = { 0x144C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_069)
{
    // 1F485 0061;	
    // (💅) NAIL POLISH	[144C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F485, 0x0061 };
    uint32_t const ces[9] = { 0x144C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_070)
{
    // 1F485 0041;	
    // (💅) NAIL POLISH	[144C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F485, 0x0041 };
    uint32_t const ces[9] = { 0x144C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_071)
{
    // 1F485 0062;	
    // (💅) NAIL POLISH	[144C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F485, 0x0062 };
    uint32_t const ces[9] = { 0x144C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_072)
{
    // 1F486 0021;	
    // (💆) FACE MASSAGE	[144D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F486, 0x0021 };
    uint32_t const ces[9] = { 0x144D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_073)
{
    // 1F486 003F;	
    // (💆) FACE MASSAGE	[144D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F486, 0x003F };
    uint32_t const ces[9] = { 0x144D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_074)
{
    // 1F486 0061;	
    // (💆) FACE MASSAGE	[144D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F486, 0x0061 };
    uint32_t const ces[9] = { 0x144D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_075)
{
    // 1F486 0041;	
    // (💆) FACE MASSAGE	[144D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F486, 0x0041 };
    uint32_t const ces[9] = { 0x144D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_076)
{
    // 1F486 0062;	
    // (💆) FACE MASSAGE	[144D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F486, 0x0062 };
    uint32_t const ces[9] = { 0x144D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_077)
{
    // 1F487 0021;	
    // (💇) HAIRCUT	[144E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F487, 0x0021 };
    uint32_t const ces[9] = { 0x144E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_078)
{
    // 1F487 003F;	
    // (💇) HAIRCUT	[144E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F487, 0x003F };
    uint32_t const ces[9] = { 0x144E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_079)
{
    // 1F487 0061;	
    // (💇) HAIRCUT	[144E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F487, 0x0061 };
    uint32_t const ces[9] = { 0x144E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_080)
{
    // 1F487 0041;	
    // (💇) HAIRCUT	[144E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F487, 0x0041 };
    uint32_t const ces[9] = { 0x144E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_081)
{
    // 1F487 0062;	
    // (💇) HAIRCUT	[144E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F487, 0x0062 };
    uint32_t const ces[9] = { 0x144E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_082)
{
    // 1F488 0021;	
    // (💈) BARBER POLE	[144F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F488, 0x0021 };
    uint32_t const ces[9] = { 0x144F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_083)
{
    // 1F488 003F;	
    // (💈) BARBER POLE	[144F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F488, 0x003F };
    uint32_t const ces[9] = { 0x144F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_084)
{
    // 1F488 0061;	
    // (💈) BARBER POLE	[144F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F488, 0x0061 };
    uint32_t const ces[9] = { 0x144F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_085)
{
    // 1F488 0041;	
    // (💈) BARBER POLE	[144F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F488, 0x0041 };
    uint32_t const ces[9] = { 0x144F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_086)
{
    // 1F488 0062;	
    // (💈) BARBER POLE	[144F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F488, 0x0062 };
    uint32_t const ces[9] = { 0x144F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_087)
{
    // 1F489 0021;	
    // (💉) SYRINGE	[1450 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F489, 0x0021 };
    uint32_t const ces[9] = { 0x1450, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_088)
{
    // 1F489 003F;	
    // (💉) SYRINGE	[1450 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F489, 0x003F };
    uint32_t const ces[9] = { 0x1450, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_089)
{
    // 1F489 0061;	
    // (💉) SYRINGE	[1450 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F489, 0x0061 };
    uint32_t const ces[9] = { 0x1450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_090)
{
    // 1F489 0041;	
    // (💉) SYRINGE	[1450 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F489, 0x0041 };
    uint32_t const ces[9] = { 0x1450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_091)
{
    // 1F489 0062;	
    // (💉) SYRINGE	[1450 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F489, 0x0062 };
    uint32_t const ces[9] = { 0x1450, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_092)
{
    // 1F48A 0021;	
    // (💊) PILL	[1451 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48A, 0x0021 };
    uint32_t const ces[9] = { 0x1451, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_093)
{
    // 1F48A 003F;	
    // (💊) PILL	[1451 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48A, 0x003F };
    uint32_t const ces[9] = { 0x1451, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_094)
{
    // 1F48A 0061;	
    // (💊) PILL	[1451 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48A, 0x0061 };
    uint32_t const ces[9] = { 0x1451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_095)
{
    // 1F48A 0041;	
    // (💊) PILL	[1451 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48A, 0x0041 };
    uint32_t const ces[9] = { 0x1451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_096)
{
    // 1F48A 0062;	
    // (💊) PILL	[1451 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48A, 0x0062 };
    uint32_t const ces[9] = { 0x1451, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_097)
{
    // 1F48B 0021;	
    // (💋) KISS MARK	[1452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48B, 0x0021 };
    uint32_t const ces[9] = { 0x1452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_098)
{
    // 1F48B 003F;	
    // (💋) KISS MARK	[1452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48B, 0x003F };
    uint32_t const ces[9] = { 0x1452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_099)
{
    // 1F48B 0061;	
    // (💋) KISS MARK	[1452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48B, 0x0061 };
    uint32_t const ces[9] = { 0x1452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_100)
{
    // 1F48B 0041;	
    // (💋) KISS MARK	[1452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48B, 0x0041 };
    uint32_t const ces[9] = { 0x1452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_101)
{
    // 1F48B 0062;	
    // (💋) KISS MARK	[1452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48B, 0x0062 };
    uint32_t const ces[9] = { 0x1452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_102)
{
    // 1F48C 0021;	
    // (💌) LOVE LETTER	[1453 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48C, 0x0021 };
    uint32_t const ces[9] = { 0x1453, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_103)
{
    // 1F48C 003F;	
    // (💌) LOVE LETTER	[1453 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48C, 0x003F };
    uint32_t const ces[9] = { 0x1453, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_104)
{
    // 1F48C 0061;	
    // (💌) LOVE LETTER	[1453 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48C, 0x0061 };
    uint32_t const ces[9] = { 0x1453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_105)
{
    // 1F48C 0041;	
    // (💌) LOVE LETTER	[1453 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48C, 0x0041 };
    uint32_t const ces[9] = { 0x1453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_106)
{
    // 1F48C 0062;	
    // (💌) LOVE LETTER	[1453 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48C, 0x0062 };
    uint32_t const ces[9] = { 0x1453, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_107)
{
    // 1F48D 0021;	
    // (💍) RING	[1454 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48D, 0x0021 };
    uint32_t const ces[9] = { 0x1454, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_108)
{
    // 1F48D 003F;	
    // (💍) RING	[1454 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48D, 0x003F };
    uint32_t const ces[9] = { 0x1454, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_109)
{
    // 1F48D 0061;	
    // (💍) RING	[1454 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48D, 0x0061 };
    uint32_t const ces[9] = { 0x1454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_110)
{
    // 1F48D 0041;	
    // (💍) RING	[1454 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48D, 0x0041 };
    uint32_t const ces[9] = { 0x1454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_111)
{
    // 1F48D 0062;	
    // (💍) RING	[1454 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48D, 0x0062 };
    uint32_t const ces[9] = { 0x1454, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_112)
{
    // 1F48E 0021;	
    // (💎) GEM STONE	[1455 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48E, 0x0021 };
    uint32_t const ces[9] = { 0x1455, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_113)
{
    // 1F48E 003F;	
    // (💎) GEM STONE	[1455 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48E, 0x003F };
    uint32_t const ces[9] = { 0x1455, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_114)
{
    // 1F48E 0061;	
    // (💎) GEM STONE	[1455 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48E, 0x0061 };
    uint32_t const ces[9] = { 0x1455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_115)
{
    // 1F48E 0041;	
    // (💎) GEM STONE	[1455 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48E, 0x0041 };
    uint32_t const ces[9] = { 0x1455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_116)
{
    // 1F48E 0062;	
    // (💎) GEM STONE	[1455 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48E, 0x0062 };
    uint32_t const ces[9] = { 0x1455, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_117)
{
    // 1F48F 0021;	
    // (💏) KISS	[1456 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48F, 0x0021 };
    uint32_t const ces[9] = { 0x1456, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_118)
{
    // 1F48F 003F;	
    // (💏) KISS	[1456 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48F, 0x003F };
    uint32_t const ces[9] = { 0x1456, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_119)
{
    // 1F48F 0061;	
    // (💏) KISS	[1456 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48F, 0x0061 };
    uint32_t const ces[9] = { 0x1456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_120)
{
    // 1F48F 0041;	
    // (💏) KISS	[1456 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F48F, 0x0041 };
    uint32_t const ces[9] = { 0x1456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_121)
{
    // 1F48F 0062;	
    // (💏) KISS	[1456 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F48F, 0x0062 };
    uint32_t const ces[9] = { 0x1456, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_122)
{
    // 1F490 0021;	
    // (💐) BOUQUET	[1457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F490, 0x0021 };
    uint32_t const ces[9] = { 0x1457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_123)
{
    // 1F490 003F;	
    // (💐) BOUQUET	[1457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F490, 0x003F };
    uint32_t const ces[9] = { 0x1457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_124)
{
    // 1F490 0061;	
    // (💐) BOUQUET	[1457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F490, 0x0061 };
    uint32_t const ces[9] = { 0x1457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_125)
{
    // 1F490 0041;	
    // (💐) BOUQUET	[1457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F490, 0x0041 };
    uint32_t const ces[9] = { 0x1457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_126)
{
    // 1F490 0062;	
    // (💐) BOUQUET	[1457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F490, 0x0062 };
    uint32_t const ces[9] = { 0x1457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_127)
{
    // 1F491 0021;	
    // (💑) COUPLE WITH HEART	[1458 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F491, 0x0021 };
    uint32_t const ces[9] = { 0x1458, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_128)
{
    // 1F491 003F;	
    // (💑) COUPLE WITH HEART	[1458 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F491, 0x003F };
    uint32_t const ces[9] = { 0x1458, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_129)
{
    // 1F491 0061;	
    // (💑) COUPLE WITH HEART	[1458 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F491, 0x0061 };
    uint32_t const ces[9] = { 0x1458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_130)
{
    // 1F491 0041;	
    // (💑) COUPLE WITH HEART	[1458 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F491, 0x0041 };
    uint32_t const ces[9] = { 0x1458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_131)
{
    // 1F491 0062;	
    // (💑) COUPLE WITH HEART	[1458 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F491, 0x0062 };
    uint32_t const ces[9] = { 0x1458, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_132)
{
    // 1F492 0021;	
    // (💒) WEDDING	[1459 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F492, 0x0021 };
    uint32_t const ces[9] = { 0x1459, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_133)
{
    // 1F492 003F;	
    // (💒) WEDDING	[1459 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F492, 0x003F };
    uint32_t const ces[9] = { 0x1459, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_134)
{
    // 1F492 0061;	
    // (💒) WEDDING	[1459 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F492, 0x0061 };
    uint32_t const ces[9] = { 0x1459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_135)
{
    // 1F492 0041;	
    // (💒) WEDDING	[1459 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F492, 0x0041 };
    uint32_t const ces[9] = { 0x1459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_136)
{
    // 1F492 0062;	
    // (💒) WEDDING	[1459 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F492, 0x0062 };
    uint32_t const ces[9] = { 0x1459, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_137)
{
    // 1F493 0021;	
    // (💓) BEATING HEART	[145A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F493, 0x0021 };
    uint32_t const ces[9] = { 0x145A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_138)
{
    // 1F493 003F;	
    // (💓) BEATING HEART	[145A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F493, 0x003F };
    uint32_t const ces[9] = { 0x145A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_139)
{
    // 1F493 0061;	
    // (💓) BEATING HEART	[145A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F493, 0x0061 };
    uint32_t const ces[9] = { 0x145A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_140)
{
    // 1F493 0041;	
    // (💓) BEATING HEART	[145A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F493, 0x0041 };
    uint32_t const ces[9] = { 0x145A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_141)
{
    // 1F493 0062;	
    // (💓) BEATING HEART	[145A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F493, 0x0062 };
    uint32_t const ces[9] = { 0x145A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_142)
{
    // 1F494 0021;	
    // (💔) BROKEN HEART	[145B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F494, 0x0021 };
    uint32_t const ces[9] = { 0x145B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_143)
{
    // 1F494 003F;	
    // (💔) BROKEN HEART	[145B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F494, 0x003F };
    uint32_t const ces[9] = { 0x145B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_144)
{
    // 1F494 0061;	
    // (💔) BROKEN HEART	[145B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F494, 0x0061 };
    uint32_t const ces[9] = { 0x145B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_145)
{
    // 1F494 0041;	
    // (💔) BROKEN HEART	[145B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F494, 0x0041 };
    uint32_t const ces[9] = { 0x145B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_146)
{
    // 1F494 0062;	
    // (💔) BROKEN HEART	[145B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F494, 0x0062 };
    uint32_t const ces[9] = { 0x145B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_147)
{
    // 1F495 0021;	
    // (💕) TWO HEARTS	[145C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F495, 0x0021 };
    uint32_t const ces[9] = { 0x145C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_148)
{
    // 1F495 003F;	
    // (💕) TWO HEARTS	[145C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F495, 0x003F };
    uint32_t const ces[9] = { 0x145C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_149)
{
    // 1F495 0061;	
    // (💕) TWO HEARTS	[145C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F495, 0x0061 };
    uint32_t const ces[9] = { 0x145C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_150)
{
    // 1F495 0041;	
    // (💕) TWO HEARTS	[145C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F495, 0x0041 };
    uint32_t const ces[9] = { 0x145C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_151)
{
    // 1F495 0062;	
    // (💕) TWO HEARTS	[145C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F495, 0x0062 };
    uint32_t const ces[9] = { 0x145C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_152)
{
    // 1F496 0021;	
    // (💖) SPARKLING HEART	[145D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F496, 0x0021 };
    uint32_t const ces[9] = { 0x145D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_153)
{
    // 1F496 003F;	
    // (💖) SPARKLING HEART	[145D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F496, 0x003F };
    uint32_t const ces[9] = { 0x145D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_154)
{
    // 1F496 0061;	
    // (💖) SPARKLING HEART	[145D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F496, 0x0061 };
    uint32_t const ces[9] = { 0x145D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_155)
{
    // 1F496 0041;	
    // (💖) SPARKLING HEART	[145D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F496, 0x0041 };
    uint32_t const ces[9] = { 0x145D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_156)
{
    // 1F496 0062;	
    // (💖) SPARKLING HEART	[145D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F496, 0x0062 };
    uint32_t const ces[9] = { 0x145D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_157)
{
    // 1F497 0021;	
    // (💗) GROWING HEART	[145E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F497, 0x0021 };
    uint32_t const ces[9] = { 0x145E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_158)
{
    // 1F497 003F;	
    // (💗) GROWING HEART	[145E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F497, 0x003F };
    uint32_t const ces[9] = { 0x145E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_159)
{
    // 1F497 0061;	
    // (💗) GROWING HEART	[145E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F497, 0x0061 };
    uint32_t const ces[9] = { 0x145E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_160)
{
    // 1F497 0041;	
    // (💗) GROWING HEART	[145E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F497, 0x0041 };
    uint32_t const ces[9] = { 0x145E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_161)
{
    // 1F497 0062;	
    // (💗) GROWING HEART	[145E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F497, 0x0062 };
    uint32_t const ces[9] = { 0x145E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_162)
{
    // 1F498 0021;	
    // (💘) HEART WITH ARROW	[145F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F498, 0x0021 };
    uint32_t const ces[9] = { 0x145F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_163)
{
    // 1F498 003F;	
    // (💘) HEART WITH ARROW	[145F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F498, 0x003F };
    uint32_t const ces[9] = { 0x145F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_164)
{
    // 1F498 0061;	
    // (💘) HEART WITH ARROW	[145F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F498, 0x0061 };
    uint32_t const ces[9] = { 0x145F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_165)
{
    // 1F498 0041;	
    // (💘) HEART WITH ARROW	[145F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F498, 0x0041 };
    uint32_t const ces[9] = { 0x145F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_166)
{
    // 1F498 0062;	
    // (💘) HEART WITH ARROW	[145F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F498, 0x0062 };
    uint32_t const ces[9] = { 0x145F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_167)
{
    // 1F499 0021;	
    // (💙) BLUE HEART	[1460 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F499, 0x0021 };
    uint32_t const ces[9] = { 0x1460, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_168)
{
    // 1F499 003F;	
    // (💙) BLUE HEART	[1460 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F499, 0x003F };
    uint32_t const ces[9] = { 0x1460, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_169)
{
    // 1F499 0061;	
    // (💙) BLUE HEART	[1460 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F499, 0x0061 };
    uint32_t const ces[9] = { 0x1460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_170)
{
    // 1F499 0041;	
    // (💙) BLUE HEART	[1460 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F499, 0x0041 };
    uint32_t const ces[9] = { 0x1460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_171)
{
    // 1F499 0062;	
    // (💙) BLUE HEART	[1460 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F499, 0x0062 };
    uint32_t const ces[9] = { 0x1460, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_172)
{
    // 1F49A 0021;	
    // (💚) GREEN HEART	[1461 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49A, 0x0021 };
    uint32_t const ces[9] = { 0x1461, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_173)
{
    // 1F49A 003F;	
    // (💚) GREEN HEART	[1461 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49A, 0x003F };
    uint32_t const ces[9] = { 0x1461, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_174)
{
    // 1F49A 0061;	
    // (💚) GREEN HEART	[1461 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49A, 0x0061 };
    uint32_t const ces[9] = { 0x1461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_175)
{
    // 1F49A 0041;	
    // (💚) GREEN HEART	[1461 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49A, 0x0041 };
    uint32_t const ces[9] = { 0x1461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_176)
{
    // 1F49A 0062;	
    // (💚) GREEN HEART	[1461 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49A, 0x0062 };
    uint32_t const ces[9] = { 0x1461, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_177)
{
    // 1F49B 0021;	
    // (💛) YELLOW HEART	[1462 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49B, 0x0021 };
    uint32_t const ces[9] = { 0x1462, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_178)
{
    // 1F49B 003F;	
    // (💛) YELLOW HEART	[1462 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49B, 0x003F };
    uint32_t const ces[9] = { 0x1462, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_179)
{
    // 1F49B 0061;	
    // (💛) YELLOW HEART	[1462 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49B, 0x0061 };
    uint32_t const ces[9] = { 0x1462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_180)
{
    // 1F49B 0041;	
    // (💛) YELLOW HEART	[1462 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49B, 0x0041 };
    uint32_t const ces[9] = { 0x1462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_181)
{
    // 1F49B 0062;	
    // (💛) YELLOW HEART	[1462 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49B, 0x0062 };
    uint32_t const ces[9] = { 0x1462, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_182)
{
    // 1F49C 0021;	
    // (💜) PURPLE HEART	[1463 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49C, 0x0021 };
    uint32_t const ces[9] = { 0x1463, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_183)
{
    // 1F49C 003F;	
    // (💜) PURPLE HEART	[1463 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49C, 0x003F };
    uint32_t const ces[9] = { 0x1463, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_184)
{
    // 1F49C 0061;	
    // (💜) PURPLE HEART	[1463 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49C, 0x0061 };
    uint32_t const ces[9] = { 0x1463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_185)
{
    // 1F49C 0041;	
    // (💜) PURPLE HEART	[1463 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49C, 0x0041 };
    uint32_t const ces[9] = { 0x1463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_186)
{
    // 1F49C 0062;	
    // (💜) PURPLE HEART	[1463 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49C, 0x0062 };
    uint32_t const ces[9] = { 0x1463, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_187)
{
    // 1F49D 0021;	
    // (💝) HEART WITH RIBBON	[1464 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49D, 0x0021 };
    uint32_t const ces[9] = { 0x1464, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_188)
{
    // 1F49D 003F;	
    // (💝) HEART WITH RIBBON	[1464 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49D, 0x003F };
    uint32_t const ces[9] = { 0x1464, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_189)
{
    // 1F49D 0061;	
    // (💝) HEART WITH RIBBON	[1464 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49D, 0x0061 };
    uint32_t const ces[9] = { 0x1464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_190)
{
    // 1F49D 0041;	
    // (💝) HEART WITH RIBBON	[1464 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49D, 0x0041 };
    uint32_t const ces[9] = { 0x1464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_191)
{
    // 1F49D 0062;	
    // (💝) HEART WITH RIBBON	[1464 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49D, 0x0062 };
    uint32_t const ces[9] = { 0x1464, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_192)
{
    // 1F49E 0021;	
    // (💞) REVOLVING HEARTS	[1465 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49E, 0x0021 };
    uint32_t const ces[9] = { 0x1465, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_193)
{
    // 1F49E 003F;	
    // (💞) REVOLVING HEARTS	[1465 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49E, 0x003F };
    uint32_t const ces[9] = { 0x1465, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_194)
{
    // 1F49E 0061;	
    // (💞) REVOLVING HEARTS	[1465 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49E, 0x0061 };
    uint32_t const ces[9] = { 0x1465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_195)
{
    // 1F49E 0041;	
    // (💞) REVOLVING HEARTS	[1465 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49E, 0x0041 };
    uint32_t const ces[9] = { 0x1465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_196)
{
    // 1F49E 0062;	
    // (💞) REVOLVING HEARTS	[1465 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49E, 0x0062 };
    uint32_t const ces[9] = { 0x1465, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_197)
{
    // 1F49F 0021;	
    // (💟) HEART DECORATION	[1466 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49F, 0x0021 };
    uint32_t const ces[9] = { 0x1466, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_198)
{
    // 1F49F 003F;	
    // (💟) HEART DECORATION	[1466 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49F, 0x003F };
    uint32_t const ces[9] = { 0x1466, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_199)
{
    // 1F49F 0061;	
    // (💟) HEART DECORATION	[1466 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49F, 0x0061 };
    uint32_t const ces[9] = { 0x1466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_200)
{
    // 1F49F 0041;	
    // (💟) HEART DECORATION	[1466 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F49F, 0x0041 };
    uint32_t const ces[9] = { 0x1466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_201)
{
    // 1F49F 0062;	
    // (💟) HEART DECORATION	[1466 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F49F, 0x0062 };
    uint32_t const ces[9] = { 0x1466, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_202)
{
    // 1F4A0 0021;	
    // (💠) DIAMOND SHAPE WITH A DOT INSIDE	[1467 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A0, 0x0021 };
    uint32_t const ces[9] = { 0x1467, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_203)
{
    // 1F4A0 003F;	
    // (💠) DIAMOND SHAPE WITH A DOT INSIDE	[1467 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A0, 0x003F };
    uint32_t const ces[9] = { 0x1467, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_204)
{
    // 1F4A0 0061;	
    // (💠) DIAMOND SHAPE WITH A DOT INSIDE	[1467 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A0, 0x0061 };
    uint32_t const ces[9] = { 0x1467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_205)
{
    // 1F4A0 0041;	
    // (💠) DIAMOND SHAPE WITH A DOT INSIDE	[1467 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A0, 0x0041 };
    uint32_t const ces[9] = { 0x1467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_206)
{
    // 1F4A0 0062;	
    // (💠) DIAMOND SHAPE WITH A DOT INSIDE	[1467 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A0, 0x0062 };
    uint32_t const ces[9] = { 0x1467, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_207)
{
    // 1F4A1 0021;	
    // (💡) ELECTRIC LIGHT BULB	[1468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A1, 0x0021 };
    uint32_t const ces[9] = { 0x1468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_208)
{
    // 1F4A1 003F;	
    // (💡) ELECTRIC LIGHT BULB	[1468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A1, 0x003F };
    uint32_t const ces[9] = { 0x1468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_209)
{
    // 1F4A1 0061;	
    // (💡) ELECTRIC LIGHT BULB	[1468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A1, 0x0061 };
    uint32_t const ces[9] = { 0x1468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_210)
{
    // 1F4A1 0041;	
    // (💡) ELECTRIC LIGHT BULB	[1468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A1, 0x0041 };
    uint32_t const ces[9] = { 0x1468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_211)
{
    // 1F4A1 0062;	
    // (💡) ELECTRIC LIGHT BULB	[1468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A1, 0x0062 };
    uint32_t const ces[9] = { 0x1468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_212)
{
    // 1F4A2 0021;	
    // (💢) ANGER SYMBOL	[1469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A2, 0x0021 };
    uint32_t const ces[9] = { 0x1469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_213)
{
    // 1F4A2 003F;	
    // (💢) ANGER SYMBOL	[1469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A2, 0x003F };
    uint32_t const ces[9] = { 0x1469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_214)
{
    // 1F4A2 0061;	
    // (💢) ANGER SYMBOL	[1469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A2, 0x0061 };
    uint32_t const ces[9] = { 0x1469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_215)
{
    // 1F4A2 0041;	
    // (💢) ANGER SYMBOL	[1469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A2, 0x0041 };
    uint32_t const ces[9] = { 0x1469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_216)
{
    // 1F4A2 0062;	
    // (💢) ANGER SYMBOL	[1469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A2, 0x0062 };
    uint32_t const ces[9] = { 0x1469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_217)
{
    // 1F4A3 0021;	
    // (💣) BOMB	[146A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A3, 0x0021 };
    uint32_t const ces[9] = { 0x146A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_218)
{
    // 1F4A3 003F;	
    // (💣) BOMB	[146A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A3, 0x003F };
    uint32_t const ces[9] = { 0x146A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_219)
{
    // 1F4A3 0061;	
    // (💣) BOMB	[146A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A3, 0x0061 };
    uint32_t const ces[9] = { 0x146A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_220)
{
    // 1F4A3 0041;	
    // (💣) BOMB	[146A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A3, 0x0041 };
    uint32_t const ces[9] = { 0x146A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_221)
{
    // 1F4A3 0062;	
    // (💣) BOMB	[146A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A3, 0x0062 };
    uint32_t const ces[9] = { 0x146A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_222)
{
    // 1F4A4 0021;	
    // (💤) SLEEPING SYMBOL	[146B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A4, 0x0021 };
    uint32_t const ces[9] = { 0x146B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_223)
{
    // 1F4A4 003F;	
    // (💤) SLEEPING SYMBOL	[146B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A4, 0x003F };
    uint32_t const ces[9] = { 0x146B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_224)
{
    // 1F4A4 0061;	
    // (💤) SLEEPING SYMBOL	[146B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A4, 0x0061 };
    uint32_t const ces[9] = { 0x146B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_225)
{
    // 1F4A4 0041;	
    // (💤) SLEEPING SYMBOL	[146B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A4, 0x0041 };
    uint32_t const ces[9] = { 0x146B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_226)
{
    // 1F4A4 0062;	
    // (💤) SLEEPING SYMBOL	[146B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A4, 0x0062 };
    uint32_t const ces[9] = { 0x146B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_227)
{
    // 1F4A5 0021;	
    // (💥) COLLISION SYMBOL	[146C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A5, 0x0021 };
    uint32_t const ces[9] = { 0x146C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_228)
{
    // 1F4A5 003F;	
    // (💥) COLLISION SYMBOL	[146C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A5, 0x003F };
    uint32_t const ces[9] = { 0x146C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_229)
{
    // 1F4A5 0061;	
    // (💥) COLLISION SYMBOL	[146C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A5, 0x0061 };
    uint32_t const ces[9] = { 0x146C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_230)
{
    // 1F4A5 0041;	
    // (💥) COLLISION SYMBOL	[146C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A5, 0x0041 };
    uint32_t const ces[9] = { 0x146C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_231)
{
    // 1F4A5 0062;	
    // (💥) COLLISION SYMBOL	[146C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A5, 0x0062 };
    uint32_t const ces[9] = { 0x146C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_232)
{
    // 1F4A6 0021;	
    // (💦) SPLASHING SWEAT SYMBOL	[146D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A6, 0x0021 };
    uint32_t const ces[9] = { 0x146D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_233)
{
    // 1F4A6 003F;	
    // (💦) SPLASHING SWEAT SYMBOL	[146D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A6, 0x003F };
    uint32_t const ces[9] = { 0x146D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_234)
{
    // 1F4A6 0061;	
    // (💦) SPLASHING SWEAT SYMBOL	[146D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A6, 0x0061 };
    uint32_t const ces[9] = { 0x146D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_235)
{
    // 1F4A6 0041;	
    // (💦) SPLASHING SWEAT SYMBOL	[146D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A6, 0x0041 };
    uint32_t const ces[9] = { 0x146D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_236)
{
    // 1F4A6 0062;	
    // (💦) SPLASHING SWEAT SYMBOL	[146D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A6, 0x0062 };
    uint32_t const ces[9] = { 0x146D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_237)
{
    // 1F4A7 0021;	
    // (💧) DROPLET	[146E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A7, 0x0021 };
    uint32_t const ces[9] = { 0x146E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_238)
{
    // 1F4A7 003F;	
    // (💧) DROPLET	[146E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A7, 0x003F };
    uint32_t const ces[9] = { 0x146E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_239)
{
    // 1F4A7 0061;	
    // (💧) DROPLET	[146E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A7, 0x0061 };
    uint32_t const ces[9] = { 0x146E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_240)
{
    // 1F4A7 0041;	
    // (💧) DROPLET	[146E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A7, 0x0041 };
    uint32_t const ces[9] = { 0x146E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_241)
{
    // 1F4A7 0062;	
    // (💧) DROPLET	[146E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A7, 0x0062 };
    uint32_t const ces[9] = { 0x146E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_242)
{
    // 1F4A8 0021;	
    // (💨) DASH SYMBOL	[146F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A8, 0x0021 };
    uint32_t const ces[9] = { 0x146F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_243)
{
    // 1F4A8 003F;	
    // (💨) DASH SYMBOL	[146F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A8, 0x003F };
    uint32_t const ces[9] = { 0x146F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_244)
{
    // 1F4A8 0061;	
    // (💨) DASH SYMBOL	[146F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A8, 0x0061 };
    uint32_t const ces[9] = { 0x146F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_245)
{
    // 1F4A8 0041;	
    // (💨) DASH SYMBOL	[146F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A8, 0x0041 };
    uint32_t const ces[9] = { 0x146F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_246)
{
    // 1F4A8 0062;	
    // (💨) DASH SYMBOL	[146F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A8, 0x0062 };
    uint32_t const ces[9] = { 0x146F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_247)
{
    // 1F4A9 0021;	
    // (💩) PILE OF POO	[1470 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A9, 0x0021 };
    uint32_t const ces[9] = { 0x1470, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_248)
{
    // 1F4A9 003F;	
    // (💩) PILE OF POO	[1470 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A9, 0x003F };
    uint32_t const ces[9] = { 0x1470, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_249)
{
    // 1F4A9 0061;	
    // (💩) PILE OF POO	[1470 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A9, 0x0061 };
    uint32_t const ces[9] = { 0x1470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_250)
{
    // 1F4A9 0041;	
    // (💩) PILE OF POO	[1470 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A9, 0x0041 };
    uint32_t const ces[9] = { 0x1470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_251)
{
    // 1F4A9 0062;	
    // (💩) PILE OF POO	[1470 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A9, 0x0062 };
    uint32_t const ces[9] = { 0x1470, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_252)
{
    // 1F4AA 0021;	
    // (💪) FLEXED BICEPS	[1471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AA, 0x0021 };
    uint32_t const ces[9] = { 0x1471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_253)
{
    // 1F4AA 003F;	
    // (💪) FLEXED BICEPS	[1471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AA, 0x003F };
    uint32_t const ces[9] = { 0x1471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_254)
{
    // 1F4AA 0061;	
    // (💪) FLEXED BICEPS	[1471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AA, 0x0061 };
    uint32_t const ces[9] = { 0x1471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_255)
{
    // 1F4AA 0041;	
    // (💪) FLEXED BICEPS	[1471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AA, 0x0041 };
    uint32_t const ces[9] = { 0x1471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_256)
{
    // 1F4AA 0062;	
    // (💪) FLEXED BICEPS	[1471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AA, 0x0062 };
    uint32_t const ces[9] = { 0x1471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_257)
{
    // 1F4AB 0021;	
    // (💫) DIZZY SYMBOL	[1472 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AB, 0x0021 };
    uint32_t const ces[9] = { 0x1472, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_258)
{
    // 1F4AB 003F;	
    // (💫) DIZZY SYMBOL	[1472 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AB, 0x003F };
    uint32_t const ces[9] = { 0x1472, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_259)
{
    // 1F4AB 0061;	
    // (💫) DIZZY SYMBOL	[1472 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AB, 0x0061 };
    uint32_t const ces[9] = { 0x1472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_260)
{
    // 1F4AB 0041;	
    // (💫) DIZZY SYMBOL	[1472 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AB, 0x0041 };
    uint32_t const ces[9] = { 0x1472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_261)
{
    // 1F4AB 0062;	
    // (💫) DIZZY SYMBOL	[1472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AB, 0x0062 };
    uint32_t const ces[9] = { 0x1472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_262)
{
    // 1F4AC 0021;	
    // (💬) SPEECH BALLOON	[1473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AC, 0x0021 };
    uint32_t const ces[9] = { 0x1473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_263)
{
    // 1F4AC 003F;	
    // (💬) SPEECH BALLOON	[1473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AC, 0x003F };
    uint32_t const ces[9] = { 0x1473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_264)
{
    // 1F4AC 0061;	
    // (💬) SPEECH BALLOON	[1473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AC, 0x0061 };
    uint32_t const ces[9] = { 0x1473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_265)
{
    // 1F4AC 0041;	
    // (💬) SPEECH BALLOON	[1473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AC, 0x0041 };
    uint32_t const ces[9] = { 0x1473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_266)
{
    // 1F4AC 0062;	
    // (💬) SPEECH BALLOON	[1473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AC, 0x0062 };
    uint32_t const ces[9] = { 0x1473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_267)
{
    // 1F4AD 0021;	
    // (💭) THOUGHT BALLOON	[1474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AD, 0x0021 };
    uint32_t const ces[9] = { 0x1474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_268)
{
    // 1F4AD 003F;	
    // (💭) THOUGHT BALLOON	[1474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AD, 0x003F };
    uint32_t const ces[9] = { 0x1474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_269)
{
    // 1F4AD 0061;	
    // (💭) THOUGHT BALLOON	[1474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AD, 0x0061 };
    uint32_t const ces[9] = { 0x1474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_270)
{
    // 1F4AD 0041;	
    // (💭) THOUGHT BALLOON	[1474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AD, 0x0041 };
    uint32_t const ces[9] = { 0x1474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_271)
{
    // 1F4AD 0062;	
    // (💭) THOUGHT BALLOON	[1474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AD, 0x0062 };
    uint32_t const ces[9] = { 0x1474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_272)
{
    // 1F4AE 0021;	
    // (💮) WHITE FLOWER	[1475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AE, 0x0021 };
    uint32_t const ces[9] = { 0x1475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_273)
{
    // 1F4AE 003F;	
    // (💮) WHITE FLOWER	[1475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AE, 0x003F };
    uint32_t const ces[9] = { 0x1475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_274)
{
    // 1F4AE 0061;	
    // (💮) WHITE FLOWER	[1475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AE, 0x0061 };
    uint32_t const ces[9] = { 0x1475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_275)
{
    // 1F4AE 0041;	
    // (💮) WHITE FLOWER	[1475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AE, 0x0041 };
    uint32_t const ces[9] = { 0x1475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_276)
{
    // 1F4AE 0062;	
    // (💮) WHITE FLOWER	[1475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AE, 0x0062 };
    uint32_t const ces[9] = { 0x1475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_277)
{
    // 1F4AF 0021;	
    // (💯) HUNDRED POINTS SYMBOL	[1476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AF, 0x0021 };
    uint32_t const ces[9] = { 0x1476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_278)
{
    // 1F4AF 003F;	
    // (💯) HUNDRED POINTS SYMBOL	[1476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AF, 0x003F };
    uint32_t const ces[9] = { 0x1476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_279)
{
    // 1F4AF 0061;	
    // (💯) HUNDRED POINTS SYMBOL	[1476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AF, 0x0061 };
    uint32_t const ces[9] = { 0x1476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_280)
{
    // 1F4AF 0041;	
    // (💯) HUNDRED POINTS SYMBOL	[1476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4AF, 0x0041 };
    uint32_t const ces[9] = { 0x1476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_281)
{
    // 1F4AF 0062;	
    // (💯) HUNDRED POINTS SYMBOL	[1476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4AF, 0x0062 };
    uint32_t const ces[9] = { 0x1476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_282)
{
    // 1F4B0 0021;	
    // (💰) MONEY BAG	[1477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B0, 0x0021 };
    uint32_t const ces[9] = { 0x1477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_283)
{
    // 1F4B0 003F;	
    // (💰) MONEY BAG	[1477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B0, 0x003F };
    uint32_t const ces[9] = { 0x1477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_284)
{
    // 1F4B0 0061;	
    // (💰) MONEY BAG	[1477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B0, 0x0061 };
    uint32_t const ces[9] = { 0x1477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_285)
{
    // 1F4B0 0041;	
    // (💰) MONEY BAG	[1477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B0, 0x0041 };
    uint32_t const ces[9] = { 0x1477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_286)
{
    // 1F4B0 0062;	
    // (💰) MONEY BAG	[1477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B0, 0x0062 };
    uint32_t const ces[9] = { 0x1477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_287)
{
    // 1F4B1 0021;	
    // (💱) CURRENCY EXCHANGE	[1478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B1, 0x0021 };
    uint32_t const ces[9] = { 0x1478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_288)
{
    // 1F4B1 003F;	
    // (💱) CURRENCY EXCHANGE	[1478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B1, 0x003F };
    uint32_t const ces[9] = { 0x1478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_289)
{
    // 1F4B1 0061;	
    // (💱) CURRENCY EXCHANGE	[1478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B1, 0x0061 };
    uint32_t const ces[9] = { 0x1478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_290)
{
    // 1F4B1 0041;	
    // (💱) CURRENCY EXCHANGE	[1478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B1, 0x0041 };
    uint32_t const ces[9] = { 0x1478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_291)
{
    // 1F4B1 0062;	
    // (💱) CURRENCY EXCHANGE	[1478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B1, 0x0062 };
    uint32_t const ces[9] = { 0x1478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_292)
{
    // 1F4B2 0021;	
    // (💲) HEAVY DOLLAR SIGN	[1479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B2, 0x0021 };
    uint32_t const ces[9] = { 0x1479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_293)
{
    // 1F4B2 003F;	
    // (💲) HEAVY DOLLAR SIGN	[1479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B2, 0x003F };
    uint32_t const ces[9] = { 0x1479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_294)
{
    // 1F4B2 0061;	
    // (💲) HEAVY DOLLAR SIGN	[1479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B2, 0x0061 };
    uint32_t const ces[9] = { 0x1479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_295)
{
    // 1F4B2 0041;	
    // (💲) HEAVY DOLLAR SIGN	[1479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B2, 0x0041 };
    uint32_t const ces[9] = { 0x1479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_296)
{
    // 1F4B2 0062;	
    // (💲) HEAVY DOLLAR SIGN	[1479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B2, 0x0062 };
    uint32_t const ces[9] = { 0x1479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_297)
{
    // 1F4B3 0021;	
    // (💳) CREDIT CARD	[147A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B3, 0x0021 };
    uint32_t const ces[9] = { 0x147A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_298)
{
    // 1F4B3 003F;	
    // (💳) CREDIT CARD	[147A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B3, 0x003F };
    uint32_t const ces[9] = { 0x147A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_299)
{
    // 1F4B3 0061;	
    // (💳) CREDIT CARD	[147A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B3, 0x0061 };
    uint32_t const ces[9] = { 0x147A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_300)
{
    // 1F4B3 0041;	
    // (💳) CREDIT CARD	[147A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B3, 0x0041 };
    uint32_t const ces[9] = { 0x147A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_301)
{
    // 1F4B3 0062;	
    // (💳) CREDIT CARD	[147A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B3, 0x0062 };
    uint32_t const ces[9] = { 0x147A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_302)
{
    // 1F4B4 0021;	
    // (💴) BANKNOTE WITH YEN SIGN	[147B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B4, 0x0021 };
    uint32_t const ces[9] = { 0x147B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_303)
{
    // 1F4B4 003F;	
    // (💴) BANKNOTE WITH YEN SIGN	[147B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B4, 0x003F };
    uint32_t const ces[9] = { 0x147B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_304)
{
    // 1F4B4 0061;	
    // (💴) BANKNOTE WITH YEN SIGN	[147B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B4, 0x0061 };
    uint32_t const ces[9] = { 0x147B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_305)
{
    // 1F4B4 0041;	
    // (💴) BANKNOTE WITH YEN SIGN	[147B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B4, 0x0041 };
    uint32_t const ces[9] = { 0x147B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_306)
{
    // 1F4B4 0062;	
    // (💴) BANKNOTE WITH YEN SIGN	[147B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B4, 0x0062 };
    uint32_t const ces[9] = { 0x147B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_307)
{
    // 1F4B5 0021;	
    // (💵) BANKNOTE WITH DOLLAR SIGN	[147C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B5, 0x0021 };
    uint32_t const ces[9] = { 0x147C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_308)
{
    // 1F4B5 003F;	
    // (💵) BANKNOTE WITH DOLLAR SIGN	[147C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B5, 0x003F };
    uint32_t const ces[9] = { 0x147C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_309)
{
    // 1F4B5 0061;	
    // (💵) BANKNOTE WITH DOLLAR SIGN	[147C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B5, 0x0061 };
    uint32_t const ces[9] = { 0x147C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_310)
{
    // 1F4B5 0041;	
    // (💵) BANKNOTE WITH DOLLAR SIGN	[147C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B5, 0x0041 };
    uint32_t const ces[9] = { 0x147C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_311)
{
    // 1F4B5 0062;	
    // (💵) BANKNOTE WITH DOLLAR SIGN	[147C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B5, 0x0062 };
    uint32_t const ces[9] = { 0x147C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_312)
{
    // 1F4B6 0021;	
    // (💶) BANKNOTE WITH EURO SIGN	[147D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B6, 0x0021 };
    uint32_t const ces[9] = { 0x147D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_313)
{
    // 1F4B6 003F;	
    // (💶) BANKNOTE WITH EURO SIGN	[147D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B6, 0x003F };
    uint32_t const ces[9] = { 0x147D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_314)
{
    // 1F4B6 0061;	
    // (💶) BANKNOTE WITH EURO SIGN	[147D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B6, 0x0061 };
    uint32_t const ces[9] = { 0x147D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_315)
{
    // 1F4B6 0041;	
    // (💶) BANKNOTE WITH EURO SIGN	[147D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B6, 0x0041 };
    uint32_t const ces[9] = { 0x147D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_316)
{
    // 1F4B6 0062;	
    // (💶) BANKNOTE WITH EURO SIGN	[147D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B6, 0x0062 };
    uint32_t const ces[9] = { 0x147D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_317)
{
    // 1F4B7 0021;	
    // (💷) BANKNOTE WITH POUND SIGN	[147E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B7, 0x0021 };
    uint32_t const ces[9] = { 0x147E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_318)
{
    // 1F4B7 003F;	
    // (💷) BANKNOTE WITH POUND SIGN	[147E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B7, 0x003F };
    uint32_t const ces[9] = { 0x147E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_319)
{
    // 1F4B7 0061;	
    // (💷) BANKNOTE WITH POUND SIGN	[147E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B7, 0x0061 };
    uint32_t const ces[9] = { 0x147E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_320)
{
    // 1F4B7 0041;	
    // (💷) BANKNOTE WITH POUND SIGN	[147E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B7, 0x0041 };
    uint32_t const ces[9] = { 0x147E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_321)
{
    // 1F4B7 0062;	
    // (💷) BANKNOTE WITH POUND SIGN	[147E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B7, 0x0062 };
    uint32_t const ces[9] = { 0x147E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_322)
{
    // 1F4B8 0021;	
    // (💸) MONEY WITH WINGS	[147F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B8, 0x0021 };
    uint32_t const ces[9] = { 0x147F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_323)
{
    // 1F4B8 003F;	
    // (💸) MONEY WITH WINGS	[147F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B8, 0x003F };
    uint32_t const ces[9] = { 0x147F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_324)
{
    // 1F4B8 0061;	
    // (💸) MONEY WITH WINGS	[147F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B8, 0x0061 };
    uint32_t const ces[9] = { 0x147F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_325)
{
    // 1F4B8 0041;	
    // (💸) MONEY WITH WINGS	[147F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B8, 0x0041 };
    uint32_t const ces[9] = { 0x147F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_326)
{
    // 1F4B8 0062;	
    // (💸) MONEY WITH WINGS	[147F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B8, 0x0062 };
    uint32_t const ces[9] = { 0x147F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_327)
{
    // 1F4B9 0021;	
    // (💹) CHART WITH UPWARDS TREND AND YEN SIGN	[1480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B9, 0x0021 };
    uint32_t const ces[9] = { 0x1480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_328)
{
    // 1F4B9 003F;	
    // (💹) CHART WITH UPWARDS TREND AND YEN SIGN	[1480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B9, 0x003F };
    uint32_t const ces[9] = { 0x1480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_329)
{
    // 1F4B9 0061;	
    // (💹) CHART WITH UPWARDS TREND AND YEN SIGN	[1480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B9, 0x0061 };
    uint32_t const ces[9] = { 0x1480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_330)
{
    // 1F4B9 0041;	
    // (💹) CHART WITH UPWARDS TREND AND YEN SIGN	[1480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B9, 0x0041 };
    uint32_t const ces[9] = { 0x1480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_331)
{
    // 1F4B9 0062;	
    // (💹) CHART WITH UPWARDS TREND AND YEN SIGN	[1480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B9, 0x0062 };
    uint32_t const ces[9] = { 0x1480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_332)
{
    // 1F4BA 0021;	
    // (💺) SEAT	[1481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BA, 0x0021 };
    uint32_t const ces[9] = { 0x1481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_333)
{
    // 1F4BA 003F;	
    // (💺) SEAT	[1481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BA, 0x003F };
    uint32_t const ces[9] = { 0x1481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_334)
{
    // 1F4BA 0061;	
    // (💺) SEAT	[1481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BA, 0x0061 };
    uint32_t const ces[9] = { 0x1481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_335)
{
    // 1F4BA 0041;	
    // (💺) SEAT	[1481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BA, 0x0041 };
    uint32_t const ces[9] = { 0x1481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_336)
{
    // 1F4BA 0062;	
    // (💺) SEAT	[1481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BA, 0x0062 };
    uint32_t const ces[9] = { 0x1481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_337)
{
    // 1F4BB 0021;	
    // (💻) PERSONAL COMPUTER	[1482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BB, 0x0021 };
    uint32_t const ces[9] = { 0x1482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_338)
{
    // 1F4BB 003F;	
    // (💻) PERSONAL COMPUTER	[1482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BB, 0x003F };
    uint32_t const ces[9] = { 0x1482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_339)
{
    // 1F4BB 0061;	
    // (💻) PERSONAL COMPUTER	[1482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BB, 0x0061 };
    uint32_t const ces[9] = { 0x1482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_340)
{
    // 1F4BB 0041;	
    // (💻) PERSONAL COMPUTER	[1482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BB, 0x0041 };
    uint32_t const ces[9] = { 0x1482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_341)
{
    // 1F4BB 0062;	
    // (💻) PERSONAL COMPUTER	[1482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BB, 0x0062 };
    uint32_t const ces[9] = { 0x1482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_342)
{
    // 1F4BC 0021;	
    // (💼) BRIEFCASE	[1483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BC, 0x0021 };
    uint32_t const ces[9] = { 0x1483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_343)
{
    // 1F4BC 003F;	
    // (💼) BRIEFCASE	[1483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BC, 0x003F };
    uint32_t const ces[9] = { 0x1483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_344)
{
    // 1F4BC 0061;	
    // (💼) BRIEFCASE	[1483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BC, 0x0061 };
    uint32_t const ces[9] = { 0x1483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_345)
{
    // 1F4BC 0041;	
    // (💼) BRIEFCASE	[1483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BC, 0x0041 };
    uint32_t const ces[9] = { 0x1483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_346)
{
    // 1F4BC 0062;	
    // (💼) BRIEFCASE	[1483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BC, 0x0062 };
    uint32_t const ces[9] = { 0x1483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_347)
{
    // 1F4BD 0021;	
    // (💽) MINIDISC	[1484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BD, 0x0021 };
    uint32_t const ces[9] = { 0x1484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_348)
{
    // 1F4BD 003F;	
    // (💽) MINIDISC	[1484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BD, 0x003F };
    uint32_t const ces[9] = { 0x1484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_349)
{
    // 1F4BD 0061;	
    // (💽) MINIDISC	[1484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BD, 0x0061 };
    uint32_t const ces[9] = { 0x1484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_350)
{
    // 1F4BD 0041;	
    // (💽) MINIDISC	[1484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BD, 0x0041 };
    uint32_t const ces[9] = { 0x1484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_351)
{
    // 1F4BD 0062;	
    // (💽) MINIDISC	[1484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BD, 0x0062 };
    uint32_t const ces[9] = { 0x1484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_352)
{
    // 1F4BE 0021;	
    // (💾) FLOPPY DISK	[1485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BE, 0x0021 };
    uint32_t const ces[9] = { 0x1485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_353)
{
    // 1F4BE 003F;	
    // (💾) FLOPPY DISK	[1485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BE, 0x003F };
    uint32_t const ces[9] = { 0x1485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_354)
{
    // 1F4BE 0061;	
    // (💾) FLOPPY DISK	[1485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BE, 0x0061 };
    uint32_t const ces[9] = { 0x1485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_355)
{
    // 1F4BE 0041;	
    // (💾) FLOPPY DISK	[1485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BE, 0x0041 };
    uint32_t const ces[9] = { 0x1485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_356)
{
    // 1F4BE 0062;	
    // (💾) FLOPPY DISK	[1485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BE, 0x0062 };
    uint32_t const ces[9] = { 0x1485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_357)
{
    // 1F4BF 0021;	
    // (💿) OPTICAL DISC	[1486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BF, 0x0021 };
    uint32_t const ces[9] = { 0x1486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_358)
{
    // 1F4BF 003F;	
    // (💿) OPTICAL DISC	[1486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BF, 0x003F };
    uint32_t const ces[9] = { 0x1486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_359)
{
    // 1F4BF 0061;	
    // (💿) OPTICAL DISC	[1486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BF, 0x0061 };
    uint32_t const ces[9] = { 0x1486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_360)
{
    // 1F4BF 0041;	
    // (💿) OPTICAL DISC	[1486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4BF, 0x0041 };
    uint32_t const ces[9] = { 0x1486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_361)
{
    // 1F4BF 0062;	
    // (💿) OPTICAL DISC	[1486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4BF, 0x0062 };
    uint32_t const ces[9] = { 0x1486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_362)
{
    // 1F4C0 0021;	
    // (📀) DVD	[1487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C0, 0x0021 };
    uint32_t const ces[9] = { 0x1487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_363)
{
    // 1F4C0 003F;	
    // (📀) DVD	[1487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C0, 0x003F };
    uint32_t const ces[9] = { 0x1487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_364)
{
    // 1F4C0 0061;	
    // (📀) DVD	[1487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C0, 0x0061 };
    uint32_t const ces[9] = { 0x1487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_365)
{
    // 1F4C0 0041;	
    // (📀) DVD	[1487 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C0, 0x0041 };
    uint32_t const ces[9] = { 0x1487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_366)
{
    // 1F4C0 0062;	
    // (📀) DVD	[1487 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C0, 0x0062 };
    uint32_t const ces[9] = { 0x1487, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_367)
{
    // 1F4C1 0021;	
    // (📁) FILE FOLDER	[1488 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C1, 0x0021 };
    uint32_t const ces[9] = { 0x1488, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_368)
{
    // 1F4C1 003F;	
    // (📁) FILE FOLDER	[1488 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C1, 0x003F };
    uint32_t const ces[9] = { 0x1488, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_369)
{
    // 1F4C1 0061;	
    // (📁) FILE FOLDER	[1488 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C1, 0x0061 };
    uint32_t const ces[9] = { 0x1488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_370)
{
    // 1F4C1 0041;	
    // (📁) FILE FOLDER	[1488 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C1, 0x0041 };
    uint32_t const ces[9] = { 0x1488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_371)
{
    // 1F4C1 0062;	
    // (📁) FILE FOLDER	[1488 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C1, 0x0062 };
    uint32_t const ces[9] = { 0x1488, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_372)
{
    // 1F4C2 0021;	
    // (📂) OPEN FILE FOLDER	[1489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C2, 0x0021 };
    uint32_t const ces[9] = { 0x1489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_373)
{
    // 1F4C2 003F;	
    // (📂) OPEN FILE FOLDER	[1489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C2, 0x003F };
    uint32_t const ces[9] = { 0x1489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_374)
{
    // 1F4C2 0061;	
    // (📂) OPEN FILE FOLDER	[1489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C2, 0x0061 };
    uint32_t const ces[9] = { 0x1489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_375)
{
    // 1F4C2 0041;	
    // (📂) OPEN FILE FOLDER	[1489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C2, 0x0041 };
    uint32_t const ces[9] = { 0x1489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_376)
{
    // 1F4C2 0062;	
    // (📂) OPEN FILE FOLDER	[1489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C2, 0x0062 };
    uint32_t const ces[9] = { 0x1489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_377)
{
    // 1F4C3 0021;	
    // (📃) PAGE WITH CURL	[148A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C3, 0x0021 };
    uint32_t const ces[9] = { 0x148A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_378)
{
    // 1F4C3 003F;	
    // (📃) PAGE WITH CURL	[148A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C3, 0x003F };
    uint32_t const ces[9] = { 0x148A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_379)
{
    // 1F4C3 0061;	
    // (📃) PAGE WITH CURL	[148A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C3, 0x0061 };
    uint32_t const ces[9] = { 0x148A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_380)
{
    // 1F4C3 0041;	
    // (📃) PAGE WITH CURL	[148A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C3, 0x0041 };
    uint32_t const ces[9] = { 0x148A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_381)
{
    // 1F4C3 0062;	
    // (📃) PAGE WITH CURL	[148A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C3, 0x0062 };
    uint32_t const ces[9] = { 0x148A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_382)
{
    // 1F4C4 0021;	
    // (📄) PAGE FACING UP	[148B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C4, 0x0021 };
    uint32_t const ces[9] = { 0x148B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_383)
{
    // 1F4C4 003F;	
    // (📄) PAGE FACING UP	[148B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C4, 0x003F };
    uint32_t const ces[9] = { 0x148B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_384)
{
    // 1F4C4 0061;	
    // (📄) PAGE FACING UP	[148B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C4, 0x0061 };
    uint32_t const ces[9] = { 0x148B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_385)
{
    // 1F4C4 0041;	
    // (📄) PAGE FACING UP	[148B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C4, 0x0041 };
    uint32_t const ces[9] = { 0x148B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_386)
{
    // 1F4C4 0062;	
    // (📄) PAGE FACING UP	[148B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C4, 0x0062 };
    uint32_t const ces[9] = { 0x148B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_387)
{
    // 1F4C5 0021;	
    // (📅) CALENDAR	[148C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C5, 0x0021 };
    uint32_t const ces[9] = { 0x148C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_388)
{
    // 1F4C5 003F;	
    // (📅) CALENDAR	[148C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C5, 0x003F };
    uint32_t const ces[9] = { 0x148C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_389)
{
    // 1F4C5 0061;	
    // (📅) CALENDAR	[148C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C5, 0x0061 };
    uint32_t const ces[9] = { 0x148C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_390)
{
    // 1F4C5 0041;	
    // (📅) CALENDAR	[148C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C5, 0x0041 };
    uint32_t const ces[9] = { 0x148C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_391)
{
    // 1F4C5 0062;	
    // (📅) CALENDAR	[148C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C5, 0x0062 };
    uint32_t const ces[9] = { 0x148C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_392)
{
    // 1F4C6 0021;	
    // (📆) TEAR-OFF CALENDAR	[148D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C6, 0x0021 };
    uint32_t const ces[9] = { 0x148D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_393)
{
    // 1F4C6 003F;	
    // (📆) TEAR-OFF CALENDAR	[148D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C6, 0x003F };
    uint32_t const ces[9] = { 0x148D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_394)
{
    // 1F4C6 0061;	
    // (📆) TEAR-OFF CALENDAR	[148D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C6, 0x0061 };
    uint32_t const ces[9] = { 0x148D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_395)
{
    // 1F4C6 0041;	
    // (📆) TEAR-OFF CALENDAR	[148D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C6, 0x0041 };
    uint32_t const ces[9] = { 0x148D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_396)
{
    // 1F4C6 0062;	
    // (📆) TEAR-OFF CALENDAR	[148D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C6, 0x0062 };
    uint32_t const ces[9] = { 0x148D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_397)
{
    // 1F4C7 0021;	
    // (📇) CARD INDEX	[148E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C7, 0x0021 };
    uint32_t const ces[9] = { 0x148E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_398)
{
    // 1F4C7 003F;	
    // (📇) CARD INDEX	[148E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C7, 0x003F };
    uint32_t const ces[9] = { 0x148E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_399)
{
    // 1F4C7 0061;	
    // (📇) CARD INDEX	[148E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C7, 0x0061 };
    uint32_t const ces[9] = { 0x148E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_400)
{
    // 1F4C7 0041;	
    // (📇) CARD INDEX	[148E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C7, 0x0041 };
    uint32_t const ces[9] = { 0x148E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_401)
{
    // 1F4C7 0062;	
    // (📇) CARD INDEX	[148E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C7, 0x0062 };
    uint32_t const ces[9] = { 0x148E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_402)
{
    // 1F4C8 0021;	
    // (📈) CHART WITH UPWARDS TREND	[148F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C8, 0x0021 };
    uint32_t const ces[9] = { 0x148F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_403)
{
    // 1F4C8 003F;	
    // (📈) CHART WITH UPWARDS TREND	[148F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C8, 0x003F };
    uint32_t const ces[9] = { 0x148F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_404)
{
    // 1F4C8 0061;	
    // (📈) CHART WITH UPWARDS TREND	[148F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C8, 0x0061 };
    uint32_t const ces[9] = { 0x148F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_405)
{
    // 1F4C8 0041;	
    // (📈) CHART WITH UPWARDS TREND	[148F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C8, 0x0041 };
    uint32_t const ces[9] = { 0x148F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_406)
{
    // 1F4C8 0062;	
    // (📈) CHART WITH UPWARDS TREND	[148F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C8, 0x0062 };
    uint32_t const ces[9] = { 0x148F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_407)
{
    // 1F4C9 0021;	
    // (📉) CHART WITH DOWNWARDS TREND	[1490 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C9, 0x0021 };
    uint32_t const ces[9] = { 0x1490, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_408)
{
    // 1F4C9 003F;	
    // (📉) CHART WITH DOWNWARDS TREND	[1490 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C9, 0x003F };
    uint32_t const ces[9] = { 0x1490, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_409)
{
    // 1F4C9 0061;	
    // (📉) CHART WITH DOWNWARDS TREND	[1490 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C9, 0x0061 };
    uint32_t const ces[9] = { 0x1490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_410)
{
    // 1F4C9 0041;	
    // (📉) CHART WITH DOWNWARDS TREND	[1490 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C9, 0x0041 };
    uint32_t const ces[9] = { 0x1490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_411)
{
    // 1F4C9 0062;	
    // (📉) CHART WITH DOWNWARDS TREND	[1490 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C9, 0x0062 };
    uint32_t const ces[9] = { 0x1490, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_412)
{
    // 1F4CA 0021;	
    // (📊) BAR CHART	[1491 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CA, 0x0021 };
    uint32_t const ces[9] = { 0x1491, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_413)
{
    // 1F4CA 003F;	
    // (📊) BAR CHART	[1491 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CA, 0x003F };
    uint32_t const ces[9] = { 0x1491, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_414)
{
    // 1F4CA 0061;	
    // (📊) BAR CHART	[1491 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CA, 0x0061 };
    uint32_t const ces[9] = { 0x1491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_415)
{
    // 1F4CA 0041;	
    // (📊) BAR CHART	[1491 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CA, 0x0041 };
    uint32_t const ces[9] = { 0x1491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_416)
{
    // 1F4CA 0062;	
    // (📊) BAR CHART	[1491 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CA, 0x0062 };
    uint32_t const ces[9] = { 0x1491, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_417)
{
    // 1F4CB 0021;	
    // (📋) CLIPBOARD	[1492 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CB, 0x0021 };
    uint32_t const ces[9] = { 0x1492, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_418)
{
    // 1F4CB 003F;	
    // (📋) CLIPBOARD	[1492 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CB, 0x003F };
    uint32_t const ces[9] = { 0x1492, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_419)
{
    // 1F4CB 0061;	
    // (📋) CLIPBOARD	[1492 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CB, 0x0061 };
    uint32_t const ces[9] = { 0x1492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_420)
{
    // 1F4CB 0041;	
    // (📋) CLIPBOARD	[1492 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CB, 0x0041 };
    uint32_t const ces[9] = { 0x1492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_421)
{
    // 1F4CB 0062;	
    // (📋) CLIPBOARD	[1492 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CB, 0x0062 };
    uint32_t const ces[9] = { 0x1492, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_422)
{
    // 1F4CC 0021;	
    // (📌) PUSHPIN	[1493 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CC, 0x0021 };
    uint32_t const ces[9] = { 0x1493, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_423)
{
    // 1F4CC 003F;	
    // (📌) PUSHPIN	[1493 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CC, 0x003F };
    uint32_t const ces[9] = { 0x1493, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_424)
{
    // 1F4CC 0061;	
    // (📌) PUSHPIN	[1493 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CC, 0x0061 };
    uint32_t const ces[9] = { 0x1493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_425)
{
    // 1F4CC 0041;	
    // (📌) PUSHPIN	[1493 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CC, 0x0041 };
    uint32_t const ces[9] = { 0x1493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_426)
{
    // 1F4CC 0062;	
    // (📌) PUSHPIN	[1493 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CC, 0x0062 };
    uint32_t const ces[9] = { 0x1493, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_427)
{
    // 1F4CD 0021;	
    // (📍) ROUND PUSHPIN	[1494 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CD, 0x0021 };
    uint32_t const ces[9] = { 0x1494, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_428)
{
    // 1F4CD 003F;	
    // (📍) ROUND PUSHPIN	[1494 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CD, 0x003F };
    uint32_t const ces[9] = { 0x1494, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_429)
{
    // 1F4CD 0061;	
    // (📍) ROUND PUSHPIN	[1494 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CD, 0x0061 };
    uint32_t const ces[9] = { 0x1494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_430)
{
    // 1F4CD 0041;	
    // (📍) ROUND PUSHPIN	[1494 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CD, 0x0041 };
    uint32_t const ces[9] = { 0x1494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_431)
{
    // 1F4CD 0062;	
    // (📍) ROUND PUSHPIN	[1494 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CD, 0x0062 };
    uint32_t const ces[9] = { 0x1494, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_432)
{
    // 1F4CE 0021;	
    // (📎) PAPERCLIP	[1495 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CE, 0x0021 };
    uint32_t const ces[9] = { 0x1495, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_433)
{
    // 1F4CE 003F;	
    // (📎) PAPERCLIP	[1495 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CE, 0x003F };
    uint32_t const ces[9] = { 0x1495, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_434)
{
    // 1F4CE 0061;	
    // (📎) PAPERCLIP	[1495 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CE, 0x0061 };
    uint32_t const ces[9] = { 0x1495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_435)
{
    // 1F4CE 0041;	
    // (📎) PAPERCLIP	[1495 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CE, 0x0041 };
    uint32_t const ces[9] = { 0x1495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_436)
{
    // 1F4CE 0062;	
    // (📎) PAPERCLIP	[1495 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CE, 0x0062 };
    uint32_t const ces[9] = { 0x1495, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_437)
{
    // 1F4CF 0021;	
    // (📏) STRAIGHT RULER	[1496 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CF, 0x0021 };
    uint32_t const ces[9] = { 0x1496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_438)
{
    // 1F4CF 003F;	
    // (📏) STRAIGHT RULER	[1496 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CF, 0x003F };
    uint32_t const ces[9] = { 0x1496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_439)
{
    // 1F4CF 0061;	
    // (📏) STRAIGHT RULER	[1496 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CF, 0x0061 };
    uint32_t const ces[9] = { 0x1496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_440)
{
    // 1F4CF 0041;	
    // (📏) STRAIGHT RULER	[1496 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4CF, 0x0041 };
    uint32_t const ces[9] = { 0x1496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_441)
{
    // 1F4CF 0062;	
    // (📏) STRAIGHT RULER	[1496 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4CF, 0x0062 };
    uint32_t const ces[9] = { 0x1496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_442)
{
    // 1F4D0 0021;	
    // (📐) TRIANGULAR RULER	[1497 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D0, 0x0021 };
    uint32_t const ces[9] = { 0x1497, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_443)
{
    // 1F4D0 003F;	
    // (📐) TRIANGULAR RULER	[1497 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D0, 0x003F };
    uint32_t const ces[9] = { 0x1497, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_444)
{
    // 1F4D0 0061;	
    // (📐) TRIANGULAR RULER	[1497 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D0, 0x0061 };
    uint32_t const ces[9] = { 0x1497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_445)
{
    // 1F4D0 0041;	
    // (📐) TRIANGULAR RULER	[1497 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D0, 0x0041 };
    uint32_t const ces[9] = { 0x1497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_446)
{
    // 1F4D0 0062;	
    // (📐) TRIANGULAR RULER	[1497 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D0, 0x0062 };
    uint32_t const ces[9] = { 0x1497, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_447)
{
    // 1F4D1 0021;	
    // (📑) BOOKMARK TABS	[1498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D1, 0x0021 };
    uint32_t const ces[9] = { 0x1498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_448)
{
    // 1F4D1 003F;	
    // (📑) BOOKMARK TABS	[1498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D1, 0x003F };
    uint32_t const ces[9] = { 0x1498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_449)
{
    // 1F4D1 0061;	
    // (📑) BOOKMARK TABS	[1498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D1, 0x0061 };
    uint32_t const ces[9] = { 0x1498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_450)
{
    // 1F4D1 0041;	
    // (📑) BOOKMARK TABS	[1498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D1, 0x0041 };
    uint32_t const ces[9] = { 0x1498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_451)
{
    // 1F4D1 0062;	
    // (📑) BOOKMARK TABS	[1498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D1, 0x0062 };
    uint32_t const ces[9] = { 0x1498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_452)
{
    // 1F4D2 0021;	
    // (📒) LEDGER	[1499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D2, 0x0021 };
    uint32_t const ces[9] = { 0x1499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_453)
{
    // 1F4D2 003F;	
    // (📒) LEDGER	[1499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D2, 0x003F };
    uint32_t const ces[9] = { 0x1499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_454)
{
    // 1F4D2 0061;	
    // (📒) LEDGER	[1499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D2, 0x0061 };
    uint32_t const ces[9] = { 0x1499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_455)
{
    // 1F4D2 0041;	
    // (📒) LEDGER	[1499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D2, 0x0041 };
    uint32_t const ces[9] = { 0x1499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_456)
{
    // 1F4D2 0062;	
    // (📒) LEDGER	[1499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D2, 0x0062 };
    uint32_t const ces[9] = { 0x1499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_457)
{
    // 1F4D3 0021;	
    // (📓) NOTEBOOK	[149A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D3, 0x0021 };
    uint32_t const ces[9] = { 0x149A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_458)
{
    // 1F4D3 003F;	
    // (📓) NOTEBOOK	[149A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D3, 0x003F };
    uint32_t const ces[9] = { 0x149A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_459)
{
    // 1F4D3 0061;	
    // (📓) NOTEBOOK	[149A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D3, 0x0061 };
    uint32_t const ces[9] = { 0x149A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_460)
{
    // 1F4D3 0041;	
    // (📓) NOTEBOOK	[149A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D3, 0x0041 };
    uint32_t const ces[9] = { 0x149A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_461)
{
    // 1F4D3 0062;	
    // (📓) NOTEBOOK	[149A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D3, 0x0062 };
    uint32_t const ces[9] = { 0x149A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_462)
{
    // 1F4D4 0021;	
    // (📔) NOTEBOOK WITH DECORATIVE COVER	[149B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D4, 0x0021 };
    uint32_t const ces[9] = { 0x149B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_463)
{
    // 1F4D4 003F;	
    // (📔) NOTEBOOK WITH DECORATIVE COVER	[149B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D4, 0x003F };
    uint32_t const ces[9] = { 0x149B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_464)
{
    // 1F4D4 0061;	
    // (📔) NOTEBOOK WITH DECORATIVE COVER	[149B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D4, 0x0061 };
    uint32_t const ces[9] = { 0x149B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_465)
{
    // 1F4D4 0041;	
    // (📔) NOTEBOOK WITH DECORATIVE COVER	[149B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D4, 0x0041 };
    uint32_t const ces[9] = { 0x149B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_466)
{
    // 1F4D4 0062;	
    // (📔) NOTEBOOK WITH DECORATIVE COVER	[149B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D4, 0x0062 };
    uint32_t const ces[9] = { 0x149B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_467)
{
    // 1F4D5 0021;	
    // (📕) CLOSED BOOK	[149C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D5, 0x0021 };
    uint32_t const ces[9] = { 0x149C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_468)
{
    // 1F4D5 003F;	
    // (📕) CLOSED BOOK	[149C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D5, 0x003F };
    uint32_t const ces[9] = { 0x149C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_469)
{
    // 1F4D5 0061;	
    // (📕) CLOSED BOOK	[149C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D5, 0x0061 };
    uint32_t const ces[9] = { 0x149C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_470)
{
    // 1F4D5 0041;	
    // (📕) CLOSED BOOK	[149C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D5, 0x0041 };
    uint32_t const ces[9] = { 0x149C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_471)
{
    // 1F4D5 0062;	
    // (📕) CLOSED BOOK	[149C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D5, 0x0062 };
    uint32_t const ces[9] = { 0x149C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_472)
{
    // 1F4D6 0021;	
    // (📖) OPEN BOOK	[149D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D6, 0x0021 };
    uint32_t const ces[9] = { 0x149D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_473)
{
    // 1F4D6 003F;	
    // (📖) OPEN BOOK	[149D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D6, 0x003F };
    uint32_t const ces[9] = { 0x149D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_474)
{
    // 1F4D6 0061;	
    // (📖) OPEN BOOK	[149D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D6, 0x0061 };
    uint32_t const ces[9] = { 0x149D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_475)
{
    // 1F4D6 0041;	
    // (📖) OPEN BOOK	[149D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D6, 0x0041 };
    uint32_t const ces[9] = { 0x149D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_476)
{
    // 1F4D6 0062;	
    // (📖) OPEN BOOK	[149D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D6, 0x0062 };
    uint32_t const ces[9] = { 0x149D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_477)
{
    // 1F4D7 0021;	
    // (📗) GREEN BOOK	[149E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D7, 0x0021 };
    uint32_t const ces[9] = { 0x149E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_478)
{
    // 1F4D7 003F;	
    // (📗) GREEN BOOK	[149E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D7, 0x003F };
    uint32_t const ces[9] = { 0x149E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_479)
{
    // 1F4D7 0061;	
    // (📗) GREEN BOOK	[149E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D7, 0x0061 };
    uint32_t const ces[9] = { 0x149E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_480)
{
    // 1F4D7 0041;	
    // (📗) GREEN BOOK	[149E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D7, 0x0041 };
    uint32_t const ces[9] = { 0x149E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_481)
{
    // 1F4D7 0062;	
    // (📗) GREEN BOOK	[149E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D7, 0x0062 };
    uint32_t const ces[9] = { 0x149E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_482)
{
    // 1F4D8 0021;	
    // (📘) BLUE BOOK	[149F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D8, 0x0021 };
    uint32_t const ces[9] = { 0x149F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_483)
{
    // 1F4D8 003F;	
    // (📘) BLUE BOOK	[149F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D8, 0x003F };
    uint32_t const ces[9] = { 0x149F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_484)
{
    // 1F4D8 0061;	
    // (📘) BLUE BOOK	[149F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D8, 0x0061 };
    uint32_t const ces[9] = { 0x149F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_485)
{
    // 1F4D8 0041;	
    // (📘) BLUE BOOK	[149F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D8, 0x0041 };
    uint32_t const ces[9] = { 0x149F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_486)
{
    // 1F4D8 0062;	
    // (📘) BLUE BOOK	[149F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D8, 0x0062 };
    uint32_t const ces[9] = { 0x149F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_487)
{
    // 1F4D9 0021;	
    // (📙) ORANGE BOOK	[14A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D9, 0x0021 };
    uint32_t const ces[9] = { 0x14A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_488)
{
    // 1F4D9 003F;	
    // (📙) ORANGE BOOK	[14A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D9, 0x003F };
    uint32_t const ces[9] = { 0x14A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_489)
{
    // 1F4D9 0061;	
    // (📙) ORANGE BOOK	[14A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D9, 0x0061 };
    uint32_t const ces[9] = { 0x14A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_490)
{
    // 1F4D9 0041;	
    // (📙) ORANGE BOOK	[14A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D9, 0x0041 };
    uint32_t const ces[9] = { 0x14A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_491)
{
    // 1F4D9 0062;	
    // (📙) ORANGE BOOK	[14A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D9, 0x0062 };
    uint32_t const ces[9] = { 0x14A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_492)
{
    // 1F4DA 0021;	
    // (📚) BOOKS	[14A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DA, 0x0021 };
    uint32_t const ces[9] = { 0x14A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_493)
{
    // 1F4DA 003F;	
    // (📚) BOOKS	[14A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DA, 0x003F };
    uint32_t const ces[9] = { 0x14A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_494)
{
    // 1F4DA 0061;	
    // (📚) BOOKS	[14A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DA, 0x0061 };
    uint32_t const ces[9] = { 0x14A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_495)
{
    // 1F4DA 0041;	
    // (📚) BOOKS	[14A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DA, 0x0041 };
    uint32_t const ces[9] = { 0x14A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_496)
{
    // 1F4DA 0062;	
    // (📚) BOOKS	[14A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DA, 0x0062 };
    uint32_t const ces[9] = { 0x14A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_497)
{
    // 1F4DB 0021;	
    // (📛) NAME BADGE	[14A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DB, 0x0021 };
    uint32_t const ces[9] = { 0x14A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_498)
{
    // 1F4DB 003F;	
    // (📛) NAME BADGE	[14A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DB, 0x003F };
    uint32_t const ces[9] = { 0x14A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_059_499)
{
    // 1F4DB 0061;	
    // (📛) NAME BADGE	[14A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DB, 0x0061 };
    uint32_t const ces[9] = { 0x14A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

