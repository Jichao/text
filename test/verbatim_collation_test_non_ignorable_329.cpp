// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_329_000)
{
    // 34DF 0041;	
    // (㓟) CJK UNIFIED IDEOGRAPH-34DF	[FB80 B4DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_001)
{
    // 2F81F 0041;	
    // (㓟) CJK COMPATIBILITY IDEOGRAPH-2F81F	[FB80 B4DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F81F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_002)
{
    // 34DF 0062;	
    // (㓟) CJK UNIFIED IDEOGRAPH-34DF	[FB80 B4DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_003)
{
    // 2F81F 0062;	
    // (㓟) CJK COMPATIBILITY IDEOGRAPH-2F81F	[FB80 B4DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_004)
{
    // 34E0 0021;	
    // (㓠) CJK UNIFIED IDEOGRAPH-34E0	[FB80 B4E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_005)
{
    // 34E0 003F;	
    // (㓠) CJK UNIFIED IDEOGRAPH-34E0	[FB80 B4E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_006)
{
    // 34E0 0061;	
    // (㓠) CJK UNIFIED IDEOGRAPH-34E0	[FB80 B4E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_007)
{
    // 34E0 0041;	
    // (㓠) CJK UNIFIED IDEOGRAPH-34E0	[FB80 B4E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_008)
{
    // 34E0 0062;	
    // (㓠) CJK UNIFIED IDEOGRAPH-34E0	[FB80 B4E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_009)
{
    // 34E1 0021;	
    // (㓡) CJK UNIFIED IDEOGRAPH-34E1	[FB80 B4E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_010)
{
    // 34E1 003F;	
    // (㓡) CJK UNIFIED IDEOGRAPH-34E1	[FB80 B4E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_011)
{
    // 34E1 0061;	
    // (㓡) CJK UNIFIED IDEOGRAPH-34E1	[FB80 B4E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_012)
{
    // 34E1 0041;	
    // (㓡) CJK UNIFIED IDEOGRAPH-34E1	[FB80 B4E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_013)
{
    // 34E1 0062;	
    // (㓡) CJK UNIFIED IDEOGRAPH-34E1	[FB80 B4E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_014)
{
    // 34E2 0021;	
    // (㓢) CJK UNIFIED IDEOGRAPH-34E2	[FB80 B4E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_015)
{
    // 34E2 003F;	
    // (㓢) CJK UNIFIED IDEOGRAPH-34E2	[FB80 B4E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_016)
{
    // 34E2 0061;	
    // (㓢) CJK UNIFIED IDEOGRAPH-34E2	[FB80 B4E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_017)
{
    // 34E2 0041;	
    // (㓢) CJK UNIFIED IDEOGRAPH-34E2	[FB80 B4E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_018)
{
    // 34E2 0062;	
    // (㓢) CJK UNIFIED IDEOGRAPH-34E2	[FB80 B4E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_019)
{
    // 34E3 0021;	
    // (㓣) CJK UNIFIED IDEOGRAPH-34E3	[FB80 B4E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_020)
{
    // 34E3 003F;	
    // (㓣) CJK UNIFIED IDEOGRAPH-34E3	[FB80 B4E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_021)
{
    // 34E3 0061;	
    // (㓣) CJK UNIFIED IDEOGRAPH-34E3	[FB80 B4E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_022)
{
    // 34E3 0041;	
    // (㓣) CJK UNIFIED IDEOGRAPH-34E3	[FB80 B4E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_023)
{
    // 34E3 0062;	
    // (㓣) CJK UNIFIED IDEOGRAPH-34E3	[FB80 B4E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_024)
{
    // 34E4 0021;	
    // (㓤) CJK UNIFIED IDEOGRAPH-34E4	[FB80 B4E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_025)
{
    // 34E4 003F;	
    // (㓤) CJK UNIFIED IDEOGRAPH-34E4	[FB80 B4E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_026)
{
    // 34E4 0061;	
    // (㓤) CJK UNIFIED IDEOGRAPH-34E4	[FB80 B4E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_027)
{
    // 34E4 0041;	
    // (㓤) CJK UNIFIED IDEOGRAPH-34E4	[FB80 B4E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_028)
{
    // 34E4 0062;	
    // (㓤) CJK UNIFIED IDEOGRAPH-34E4	[FB80 B4E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_029)
{
    // 34E5 0021;	
    // (㓥) CJK UNIFIED IDEOGRAPH-34E5	[FB80 B4E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_030)
{
    // 34E5 003F;	
    // (㓥) CJK UNIFIED IDEOGRAPH-34E5	[FB80 B4E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_031)
{
    // 34E5 0061;	
    // (㓥) CJK UNIFIED IDEOGRAPH-34E5	[FB80 B4E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_032)
{
    // 34E5 0041;	
    // (㓥) CJK UNIFIED IDEOGRAPH-34E5	[FB80 B4E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_033)
{
    // 34E5 0062;	
    // (㓥) CJK UNIFIED IDEOGRAPH-34E5	[FB80 B4E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_034)
{
    // 34E6 0021;	
    // (㓦) CJK UNIFIED IDEOGRAPH-34E6	[FB80 B4E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_035)
{
    // 34E6 003F;	
    // (㓦) CJK UNIFIED IDEOGRAPH-34E6	[FB80 B4E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_036)
{
    // 34E6 0061;	
    // (㓦) CJK UNIFIED IDEOGRAPH-34E6	[FB80 B4E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_037)
{
    // 34E6 0041;	
    // (㓦) CJK UNIFIED IDEOGRAPH-34E6	[FB80 B4E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_038)
{
    // 34E6 0062;	
    // (㓦) CJK UNIFIED IDEOGRAPH-34E6	[FB80 B4E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_039)
{
    // 34E7 0021;	
    // (㓧) CJK UNIFIED IDEOGRAPH-34E7	[FB80 B4E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_040)
{
    // 34E7 003F;	
    // (㓧) CJK UNIFIED IDEOGRAPH-34E7	[FB80 B4E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_041)
{
    // 34E7 0061;	
    // (㓧) CJK UNIFIED IDEOGRAPH-34E7	[FB80 B4E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_042)
{
    // 34E7 0041;	
    // (㓧) CJK UNIFIED IDEOGRAPH-34E7	[FB80 B4E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_043)
{
    // 34E7 0062;	
    // (㓧) CJK UNIFIED IDEOGRAPH-34E7	[FB80 B4E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_044)
{
    // 34E8 0021;	
    // (㓨) CJK UNIFIED IDEOGRAPH-34E8	[FB80 B4E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_045)
{
    // 34E8 003F;	
    // (㓨) CJK UNIFIED IDEOGRAPH-34E8	[FB80 B4E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_046)
{
    // 34E8 0061;	
    // (㓨) CJK UNIFIED IDEOGRAPH-34E8	[FB80 B4E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_047)
{
    // 34E8 0041;	
    // (㓨) CJK UNIFIED IDEOGRAPH-34E8	[FB80 B4E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_048)
{
    // 34E8 0062;	
    // (㓨) CJK UNIFIED IDEOGRAPH-34E8	[FB80 B4E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_049)
{
    // 34E9 0021;	
    // (㓩) CJK UNIFIED IDEOGRAPH-34E9	[FB80 B4E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_050)
{
    // 34E9 003F;	
    // (㓩) CJK UNIFIED IDEOGRAPH-34E9	[FB80 B4E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_051)
{
    // 34E9 0061;	
    // (㓩) CJK UNIFIED IDEOGRAPH-34E9	[FB80 B4E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_052)
{
    // 34E9 0041;	
    // (㓩) CJK UNIFIED IDEOGRAPH-34E9	[FB80 B4E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_053)
{
    // 34E9 0062;	
    // (㓩) CJK UNIFIED IDEOGRAPH-34E9	[FB80 B4E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_054)
{
    // 34EA 0021;	
    // (㓪) CJK UNIFIED IDEOGRAPH-34EA	[FB80 B4EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_055)
{
    // 34EA 003F;	
    // (㓪) CJK UNIFIED IDEOGRAPH-34EA	[FB80 B4EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_056)
{
    // 34EA 0061;	
    // (㓪) CJK UNIFIED IDEOGRAPH-34EA	[FB80 B4EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_057)
{
    // 34EA 0041;	
    // (㓪) CJK UNIFIED IDEOGRAPH-34EA	[FB80 B4EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_058)
{
    // 34EA 0062;	
    // (㓪) CJK UNIFIED IDEOGRAPH-34EA	[FB80 B4EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_059)
{
    // 34EB 0021;	
    // (㓫) CJK UNIFIED IDEOGRAPH-34EB	[FB80 B4EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_060)
{
    // 34EB 003F;	
    // (㓫) CJK UNIFIED IDEOGRAPH-34EB	[FB80 B4EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_061)
{
    // 34EB 0061;	
    // (㓫) CJK UNIFIED IDEOGRAPH-34EB	[FB80 B4EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_062)
{
    // 34EB 0041;	
    // (㓫) CJK UNIFIED IDEOGRAPH-34EB	[FB80 B4EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_063)
{
    // 34EB 0062;	
    // (㓫) CJK UNIFIED IDEOGRAPH-34EB	[FB80 B4EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_064)
{
    // 34EC 0021;	
    // (㓬) CJK UNIFIED IDEOGRAPH-34EC	[FB80 B4EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_065)
{
    // 34EC 003F;	
    // (㓬) CJK UNIFIED IDEOGRAPH-34EC	[FB80 B4EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_066)
{
    // 34EC 0061;	
    // (㓬) CJK UNIFIED IDEOGRAPH-34EC	[FB80 B4EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_067)
{
    // 34EC 0041;	
    // (㓬) CJK UNIFIED IDEOGRAPH-34EC	[FB80 B4EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_068)
{
    // 34EC 0062;	
    // (㓬) CJK UNIFIED IDEOGRAPH-34EC	[FB80 B4EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_069)
{
    // 34ED 0021;	
    // (㓭) CJK UNIFIED IDEOGRAPH-34ED	[FB80 B4ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_070)
{
    // 34ED 003F;	
    // (㓭) CJK UNIFIED IDEOGRAPH-34ED	[FB80 B4ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_071)
{
    // 34ED 0061;	
    // (㓭) CJK UNIFIED IDEOGRAPH-34ED	[FB80 B4ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_072)
{
    // 34ED 0041;	
    // (㓭) CJK UNIFIED IDEOGRAPH-34ED	[FB80 B4ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_073)
{
    // 34ED 0062;	
    // (㓭) CJK UNIFIED IDEOGRAPH-34ED	[FB80 B4ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_074)
{
    // 34EE 0021;	
    // (㓮) CJK UNIFIED IDEOGRAPH-34EE	[FB80 B4EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_075)
{
    // 34EE 003F;	
    // (㓮) CJK UNIFIED IDEOGRAPH-34EE	[FB80 B4EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_076)
{
    // 34EE 0061;	
    // (㓮) CJK UNIFIED IDEOGRAPH-34EE	[FB80 B4EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_077)
{
    // 34EE 0041;	
    // (㓮) CJK UNIFIED IDEOGRAPH-34EE	[FB80 B4EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_078)
{
    // 34EE 0062;	
    // (㓮) CJK UNIFIED IDEOGRAPH-34EE	[FB80 B4EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_079)
{
    // 34EF 0021;	
    // (㓯) CJK UNIFIED IDEOGRAPH-34EF	[FB80 B4EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_080)
{
    // 34EF 003F;	
    // (㓯) CJK UNIFIED IDEOGRAPH-34EF	[FB80 B4EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_081)
{
    // 34EF 0061;	
    // (㓯) CJK UNIFIED IDEOGRAPH-34EF	[FB80 B4EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_082)
{
    // 34EF 0041;	
    // (㓯) CJK UNIFIED IDEOGRAPH-34EF	[FB80 B4EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_083)
{
    // 34EF 0062;	
    // (㓯) CJK UNIFIED IDEOGRAPH-34EF	[FB80 B4EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_084)
{
    // 34F0 0021;	
    // (㓰) CJK UNIFIED IDEOGRAPH-34F0	[FB80 B4F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_085)
{
    // 34F0 003F;	
    // (㓰) CJK UNIFIED IDEOGRAPH-34F0	[FB80 B4F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_086)
{
    // 34F0 0061;	
    // (㓰) CJK UNIFIED IDEOGRAPH-34F0	[FB80 B4F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_087)
{
    // 34F0 0041;	
    // (㓰) CJK UNIFIED IDEOGRAPH-34F0	[FB80 B4F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_088)
{
    // 34F0 0062;	
    // (㓰) CJK UNIFIED IDEOGRAPH-34F0	[FB80 B4F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_089)
{
    // 34F1 0021;	
    // (㓱) CJK UNIFIED IDEOGRAPH-34F1	[FB80 B4F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_090)
{
    // 34F1 003F;	
    // (㓱) CJK UNIFIED IDEOGRAPH-34F1	[FB80 B4F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_091)
{
    // 34F1 0061;	
    // (㓱) CJK UNIFIED IDEOGRAPH-34F1	[FB80 B4F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_092)
{
    // 34F1 0041;	
    // (㓱) CJK UNIFIED IDEOGRAPH-34F1	[FB80 B4F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_093)
{
    // 34F1 0062;	
    // (㓱) CJK UNIFIED IDEOGRAPH-34F1	[FB80 B4F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_094)
{
    // 34F2 0021;	
    // (㓲) CJK UNIFIED IDEOGRAPH-34F2	[FB80 B4F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_095)
{
    // 34F2 003F;	
    // (㓲) CJK UNIFIED IDEOGRAPH-34F2	[FB80 B4F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_096)
{
    // 34F2 0061;	
    // (㓲) CJK UNIFIED IDEOGRAPH-34F2	[FB80 B4F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_097)
{
    // 34F2 0041;	
    // (㓲) CJK UNIFIED IDEOGRAPH-34F2	[FB80 B4F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_098)
{
    // 34F2 0062;	
    // (㓲) CJK UNIFIED IDEOGRAPH-34F2	[FB80 B4F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_099)
{
    // 34F3 0021;	
    // (㓳) CJK UNIFIED IDEOGRAPH-34F3	[FB80 B4F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_100)
{
    // 34F3 003F;	
    // (㓳) CJK UNIFIED IDEOGRAPH-34F3	[FB80 B4F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_101)
{
    // 34F3 0061;	
    // (㓳) CJK UNIFIED IDEOGRAPH-34F3	[FB80 B4F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_102)
{
    // 34F3 0041;	
    // (㓳) CJK UNIFIED IDEOGRAPH-34F3	[FB80 B4F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_103)
{
    // 34F3 0062;	
    // (㓳) CJK UNIFIED IDEOGRAPH-34F3	[FB80 B4F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_104)
{
    // 34F4 0021;	
    // (㓴) CJK UNIFIED IDEOGRAPH-34F4	[FB80 B4F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_105)
{
    // 34F4 003F;	
    // (㓴) CJK UNIFIED IDEOGRAPH-34F4	[FB80 B4F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_106)
{
    // 34F4 0061;	
    // (㓴) CJK UNIFIED IDEOGRAPH-34F4	[FB80 B4F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_107)
{
    // 34F4 0041;	
    // (㓴) CJK UNIFIED IDEOGRAPH-34F4	[FB80 B4F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_108)
{
    // 34F4 0062;	
    // (㓴) CJK UNIFIED IDEOGRAPH-34F4	[FB80 B4F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_109)
{
    // 34F5 0021;	
    // (㓵) CJK UNIFIED IDEOGRAPH-34F5	[FB80 B4F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_110)
{
    // 34F5 003F;	
    // (㓵) CJK UNIFIED IDEOGRAPH-34F5	[FB80 B4F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_111)
{
    // 34F5 0061;	
    // (㓵) CJK UNIFIED IDEOGRAPH-34F5	[FB80 B4F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_112)
{
    // 34F5 0041;	
    // (㓵) CJK UNIFIED IDEOGRAPH-34F5	[FB80 B4F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_113)
{
    // 34F5 0062;	
    // (㓵) CJK UNIFIED IDEOGRAPH-34F5	[FB80 B4F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_114)
{
    // 34F6 0021;	
    // (㓶) CJK UNIFIED IDEOGRAPH-34F6	[FB80 B4F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_115)
{
    // 34F6 003F;	
    // (㓶) CJK UNIFIED IDEOGRAPH-34F6	[FB80 B4F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_116)
{
    // 34F6 0061;	
    // (㓶) CJK UNIFIED IDEOGRAPH-34F6	[FB80 B4F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_117)
{
    // 34F6 0041;	
    // (㓶) CJK UNIFIED IDEOGRAPH-34F6	[FB80 B4F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_118)
{
    // 34F6 0062;	
    // (㓶) CJK UNIFIED IDEOGRAPH-34F6	[FB80 B4F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_119)
{
    // 34F7 0021;	
    // (㓷) CJK UNIFIED IDEOGRAPH-34F7	[FB80 B4F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_120)
{
    // 34F7 003F;	
    // (㓷) CJK UNIFIED IDEOGRAPH-34F7	[FB80 B4F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_121)
{
    // 34F7 0061;	
    // (㓷) CJK UNIFIED IDEOGRAPH-34F7	[FB80 B4F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_122)
{
    // 34F7 0041;	
    // (㓷) CJK UNIFIED IDEOGRAPH-34F7	[FB80 B4F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_123)
{
    // 34F7 0062;	
    // (㓷) CJK UNIFIED IDEOGRAPH-34F7	[FB80 B4F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_124)
{
    // 34F8 0021;	
    // (㓸) CJK UNIFIED IDEOGRAPH-34F8	[FB80 B4F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_125)
{
    // 34F8 003F;	
    // (㓸) CJK UNIFIED IDEOGRAPH-34F8	[FB80 B4F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_126)
{
    // 34F8 0061;	
    // (㓸) CJK UNIFIED IDEOGRAPH-34F8	[FB80 B4F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_127)
{
    // 34F8 0041;	
    // (㓸) CJK UNIFIED IDEOGRAPH-34F8	[FB80 B4F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_128)
{
    // 34F8 0062;	
    // (㓸) CJK UNIFIED IDEOGRAPH-34F8	[FB80 B4F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_129)
{
    // 34F9 0021;	
    // (㓹) CJK UNIFIED IDEOGRAPH-34F9	[FB80 B4F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_130)
{
    // 34F9 003F;	
    // (㓹) CJK UNIFIED IDEOGRAPH-34F9	[FB80 B4F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_131)
{
    // 34F9 0061;	
    // (㓹) CJK UNIFIED IDEOGRAPH-34F9	[FB80 B4F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_132)
{
    // 34F9 0041;	
    // (㓹) CJK UNIFIED IDEOGRAPH-34F9	[FB80 B4F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_133)
{
    // 34F9 0062;	
    // (㓹) CJK UNIFIED IDEOGRAPH-34F9	[FB80 B4F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_134)
{
    // 34FA 0021;	
    // (㓺) CJK UNIFIED IDEOGRAPH-34FA	[FB80 B4FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_135)
{
    // 34FA 003F;	
    // (㓺) CJK UNIFIED IDEOGRAPH-34FA	[FB80 B4FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_136)
{
    // 34FA 0061;	
    // (㓺) CJK UNIFIED IDEOGRAPH-34FA	[FB80 B4FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_137)
{
    // 34FA 0041;	
    // (㓺) CJK UNIFIED IDEOGRAPH-34FA	[FB80 B4FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_138)
{
    // 34FA 0062;	
    // (㓺) CJK UNIFIED IDEOGRAPH-34FA	[FB80 B4FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_139)
{
    // 34FB 0021;	
    // (㓻) CJK UNIFIED IDEOGRAPH-34FB	[FB80 B4FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_140)
{
    // 34FB 003F;	
    // (㓻) CJK UNIFIED IDEOGRAPH-34FB	[FB80 B4FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_141)
{
    // 34FB 0061;	
    // (㓻) CJK UNIFIED IDEOGRAPH-34FB	[FB80 B4FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_142)
{
    // 34FB 0041;	
    // (㓻) CJK UNIFIED IDEOGRAPH-34FB	[FB80 B4FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_143)
{
    // 34FB 0062;	
    // (㓻) CJK UNIFIED IDEOGRAPH-34FB	[FB80 B4FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_144)
{
    // 34FC 0021;	
    // (㓼) CJK UNIFIED IDEOGRAPH-34FC	[FB80 B4FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_145)
{
    // 34FC 003F;	
    // (㓼) CJK UNIFIED IDEOGRAPH-34FC	[FB80 B4FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_146)
{
    // 34FC 0061;	
    // (㓼) CJK UNIFIED IDEOGRAPH-34FC	[FB80 B4FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_147)
{
    // 34FC 0041;	
    // (㓼) CJK UNIFIED IDEOGRAPH-34FC	[FB80 B4FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_148)
{
    // 34FC 0062;	
    // (㓼) CJK UNIFIED IDEOGRAPH-34FC	[FB80 B4FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_149)
{
    // 34FD 0021;	
    // (㓽) CJK UNIFIED IDEOGRAPH-34FD	[FB80 B4FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_150)
{
    // 34FD 003F;	
    // (㓽) CJK UNIFIED IDEOGRAPH-34FD	[FB80 B4FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_151)
{
    // 34FD 0061;	
    // (㓽) CJK UNIFIED IDEOGRAPH-34FD	[FB80 B4FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_152)
{
    // 34FD 0041;	
    // (㓽) CJK UNIFIED IDEOGRAPH-34FD	[FB80 B4FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_153)
{
    // 34FD 0062;	
    // (㓽) CJK UNIFIED IDEOGRAPH-34FD	[FB80 B4FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_154)
{
    // 34FE 0021;	
    // (㓾) CJK UNIFIED IDEOGRAPH-34FE	[FB80 B4FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_155)
{
    // 34FE 003F;	
    // (㓾) CJK UNIFIED IDEOGRAPH-34FE	[FB80 B4FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_156)
{
    // 34FE 0061;	
    // (㓾) CJK UNIFIED IDEOGRAPH-34FE	[FB80 B4FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_157)
{
    // 34FE 0041;	
    // (㓾) CJK UNIFIED IDEOGRAPH-34FE	[FB80 B4FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_158)
{
    // 34FE 0062;	
    // (㓾) CJK UNIFIED IDEOGRAPH-34FE	[FB80 B4FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_159)
{
    // 34FF 0021;	
    // (㓿) CJK UNIFIED IDEOGRAPH-34FF	[FB80 B4FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_160)
{
    // 34FF 003F;	
    // (㓿) CJK UNIFIED IDEOGRAPH-34FF	[FB80 B4FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_161)
{
    // 34FF 0061;	
    // (㓿) CJK UNIFIED IDEOGRAPH-34FF	[FB80 B4FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_162)
{
    // 34FF 0041;	
    // (㓿) CJK UNIFIED IDEOGRAPH-34FF	[FB80 B4FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_163)
{
    // 34FF 0062;	
    // (㓿) CJK UNIFIED IDEOGRAPH-34FF	[FB80 B4FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_164)
{
    // 3500 0021;	
    // (㔀) CJK UNIFIED IDEOGRAPH-3500	[FB80 B500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3500, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_165)
{
    // 3500 003F;	
    // (㔀) CJK UNIFIED IDEOGRAPH-3500	[FB80 B500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3500, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_166)
{
    // 3500 0061;	
    // (㔀) CJK UNIFIED IDEOGRAPH-3500	[FB80 B500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3500, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_167)
{
    // 3500 0041;	
    // (㔀) CJK UNIFIED IDEOGRAPH-3500	[FB80 B500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3500, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_168)
{
    // 3500 0062;	
    // (㔀) CJK UNIFIED IDEOGRAPH-3500	[FB80 B500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3500, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_169)
{
    // 3501 0021;	
    // (㔁) CJK UNIFIED IDEOGRAPH-3501	[FB80 B501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3501, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_170)
{
    // 3501 003F;	
    // (㔁) CJK UNIFIED IDEOGRAPH-3501	[FB80 B501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3501, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_171)
{
    // 3501 0061;	
    // (㔁) CJK UNIFIED IDEOGRAPH-3501	[FB80 B501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3501, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_172)
{
    // 3501 0041;	
    // (㔁) CJK UNIFIED IDEOGRAPH-3501	[FB80 B501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3501, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_173)
{
    // 3501 0062;	
    // (㔁) CJK UNIFIED IDEOGRAPH-3501	[FB80 B501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3501, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_174)
{
    // 3502 0021;	
    // (㔂) CJK UNIFIED IDEOGRAPH-3502	[FB80 B502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3502, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_175)
{
    // 3502 003F;	
    // (㔂) CJK UNIFIED IDEOGRAPH-3502	[FB80 B502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3502, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_176)
{
    // 3502 0061;	
    // (㔂) CJK UNIFIED IDEOGRAPH-3502	[FB80 B502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3502, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_177)
{
    // 3502 0041;	
    // (㔂) CJK UNIFIED IDEOGRAPH-3502	[FB80 B502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3502, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_178)
{
    // 3502 0062;	
    // (㔂) CJK UNIFIED IDEOGRAPH-3502	[FB80 B502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3502, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_179)
{
    // 3503 0021;	
    // (㔃) CJK UNIFIED IDEOGRAPH-3503	[FB80 B503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3503, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_180)
{
    // 3503 003F;	
    // (㔃) CJK UNIFIED IDEOGRAPH-3503	[FB80 B503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3503, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_181)
{
    // 3503 0061;	
    // (㔃) CJK UNIFIED IDEOGRAPH-3503	[FB80 B503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3503, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_182)
{
    // 3503 0041;	
    // (㔃) CJK UNIFIED IDEOGRAPH-3503	[FB80 B503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3503, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_183)
{
    // 3503 0062;	
    // (㔃) CJK UNIFIED IDEOGRAPH-3503	[FB80 B503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3503, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_184)
{
    // 3504 0021;	
    // (㔄) CJK UNIFIED IDEOGRAPH-3504	[FB80 B504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3504, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_185)
{
    // 3504 003F;	
    // (㔄) CJK UNIFIED IDEOGRAPH-3504	[FB80 B504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3504, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_186)
{
    // 3504 0061;	
    // (㔄) CJK UNIFIED IDEOGRAPH-3504	[FB80 B504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3504, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_187)
{
    // 3504 0041;	
    // (㔄) CJK UNIFIED IDEOGRAPH-3504	[FB80 B504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3504, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_188)
{
    // 3504 0062;	
    // (㔄) CJK UNIFIED IDEOGRAPH-3504	[FB80 B504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3504, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_189)
{
    // 3505 0021;	
    // (㔅) CJK UNIFIED IDEOGRAPH-3505	[FB80 B505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3505, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_190)
{
    // 3505 003F;	
    // (㔅) CJK UNIFIED IDEOGRAPH-3505	[FB80 B505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3505, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_191)
{
    // 3505 0061;	
    // (㔅) CJK UNIFIED IDEOGRAPH-3505	[FB80 B505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3505, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_192)
{
    // 3505 0041;	
    // (㔅) CJK UNIFIED IDEOGRAPH-3505	[FB80 B505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3505, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_193)
{
    // 3505 0062;	
    // (㔅) CJK UNIFIED IDEOGRAPH-3505	[FB80 B505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3505, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_194)
{
    // 3506 0021;	
    // (㔆) CJK UNIFIED IDEOGRAPH-3506	[FB80 B506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3506, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_195)
{
    // 3506 003F;	
    // (㔆) CJK UNIFIED IDEOGRAPH-3506	[FB80 B506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3506, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_196)
{
    // 3506 0061;	
    // (㔆) CJK UNIFIED IDEOGRAPH-3506	[FB80 B506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3506, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_197)
{
    // 3506 0041;	
    // (㔆) CJK UNIFIED IDEOGRAPH-3506	[FB80 B506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3506, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_198)
{
    // 3506 0062;	
    // (㔆) CJK UNIFIED IDEOGRAPH-3506	[FB80 B506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3506, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_199)
{
    // 3507 0021;	
    // (㔇) CJK UNIFIED IDEOGRAPH-3507	[FB80 B507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3507, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_200)
{
    // 3507 003F;	
    // (㔇) CJK UNIFIED IDEOGRAPH-3507	[FB80 B507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3507, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_201)
{
    // 3507 0061;	
    // (㔇) CJK UNIFIED IDEOGRAPH-3507	[FB80 B507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3507, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_202)
{
    // 3507 0041;	
    // (㔇) CJK UNIFIED IDEOGRAPH-3507	[FB80 B507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3507, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_203)
{
    // 3507 0062;	
    // (㔇) CJK UNIFIED IDEOGRAPH-3507	[FB80 B507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3507, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_204)
{
    // 3508 0021;	
    // (㔈) CJK UNIFIED IDEOGRAPH-3508	[FB80 B508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3508, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_205)
{
    // 3508 003F;	
    // (㔈) CJK UNIFIED IDEOGRAPH-3508	[FB80 B508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3508, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_206)
{
    // 3508 0061;	
    // (㔈) CJK UNIFIED IDEOGRAPH-3508	[FB80 B508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3508, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_207)
{
    // 3508 0041;	
    // (㔈) CJK UNIFIED IDEOGRAPH-3508	[FB80 B508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3508, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_208)
{
    // 3508 0062;	
    // (㔈) CJK UNIFIED IDEOGRAPH-3508	[FB80 B508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3508, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_209)
{
    // 3509 0021;	
    // (㔉) CJK UNIFIED IDEOGRAPH-3509	[FB80 B509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3509, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_210)
{
    // 3509 003F;	
    // (㔉) CJK UNIFIED IDEOGRAPH-3509	[FB80 B509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3509, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_211)
{
    // 3509 0061;	
    // (㔉) CJK UNIFIED IDEOGRAPH-3509	[FB80 B509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3509, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_212)
{
    // 3509 0041;	
    // (㔉) CJK UNIFIED IDEOGRAPH-3509	[FB80 B509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3509, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_213)
{
    // 3509 0062;	
    // (㔉) CJK UNIFIED IDEOGRAPH-3509	[FB80 B509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3509, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_214)
{
    // 350A 0021;	
    // (㔊) CJK UNIFIED IDEOGRAPH-350A	[FB80 B50A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_215)
{
    // 350A 003F;	
    // (㔊) CJK UNIFIED IDEOGRAPH-350A	[FB80 B50A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_216)
{
    // 350A 0061;	
    // (㔊) CJK UNIFIED IDEOGRAPH-350A	[FB80 B50A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_217)
{
    // 350A 0041;	
    // (㔊) CJK UNIFIED IDEOGRAPH-350A	[FB80 B50A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_218)
{
    // 350A 0062;	
    // (㔊) CJK UNIFIED IDEOGRAPH-350A	[FB80 B50A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_219)
{
    // 350B 0021;	
    // (㔋) CJK UNIFIED IDEOGRAPH-350B	[FB80 B50B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_220)
{
    // 350B 003F;	
    // (㔋) CJK UNIFIED IDEOGRAPH-350B	[FB80 B50B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_221)
{
    // 350B 0061;	
    // (㔋) CJK UNIFIED IDEOGRAPH-350B	[FB80 B50B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_222)
{
    // 350B 0041;	
    // (㔋) CJK UNIFIED IDEOGRAPH-350B	[FB80 B50B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_223)
{
    // 350B 0062;	
    // (㔋) CJK UNIFIED IDEOGRAPH-350B	[FB80 B50B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_224)
{
    // 350C 0021;	
    // (㔌) CJK UNIFIED IDEOGRAPH-350C	[FB80 B50C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_225)
{
    // 350C 003F;	
    // (㔌) CJK UNIFIED IDEOGRAPH-350C	[FB80 B50C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_226)
{
    // 350C 0061;	
    // (㔌) CJK UNIFIED IDEOGRAPH-350C	[FB80 B50C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_227)
{
    // 350C 0041;	
    // (㔌) CJK UNIFIED IDEOGRAPH-350C	[FB80 B50C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_228)
{
    // 350C 0062;	
    // (㔌) CJK UNIFIED IDEOGRAPH-350C	[FB80 B50C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_229)
{
    // 350D 0021;	
    // (㔍) CJK UNIFIED IDEOGRAPH-350D	[FB80 B50D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_230)
{
    // 350D 003F;	
    // (㔍) CJK UNIFIED IDEOGRAPH-350D	[FB80 B50D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_231)
{
    // 350D 0061;	
    // (㔍) CJK UNIFIED IDEOGRAPH-350D	[FB80 B50D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_232)
{
    // 350D 0041;	
    // (㔍) CJK UNIFIED IDEOGRAPH-350D	[FB80 B50D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_233)
{
    // 350D 0062;	
    // (㔍) CJK UNIFIED IDEOGRAPH-350D	[FB80 B50D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_234)
{
    // 350E 0021;	
    // (㔎) CJK UNIFIED IDEOGRAPH-350E	[FB80 B50E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_235)
{
    // 350E 003F;	
    // (㔎) CJK UNIFIED IDEOGRAPH-350E	[FB80 B50E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_236)
{
    // 350E 0061;	
    // (㔎) CJK UNIFIED IDEOGRAPH-350E	[FB80 B50E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_237)
{
    // 350E 0041;	
    // (㔎) CJK UNIFIED IDEOGRAPH-350E	[FB80 B50E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_238)
{
    // 350E 0062;	
    // (㔎) CJK UNIFIED IDEOGRAPH-350E	[FB80 B50E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_239)
{
    // 350F 0021;	
    // (㔏) CJK UNIFIED IDEOGRAPH-350F	[FB80 B50F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB50F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_240)
{
    // 350F 003F;	
    // (㔏) CJK UNIFIED IDEOGRAPH-350F	[FB80 B50F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB50F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_241)
{
    // 350F 0061;	
    // (㔏) CJK UNIFIED IDEOGRAPH-350F	[FB80 B50F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB50F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_242)
{
    // 350F 0041;	
    // (㔏) CJK UNIFIED IDEOGRAPH-350F	[FB80 B50F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x350F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB50F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_243)
{
    // 350F 0062;	
    // (㔏) CJK UNIFIED IDEOGRAPH-350F	[FB80 B50F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x350F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB50F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_244)
{
    // 3510 0021;	
    // (㔐) CJK UNIFIED IDEOGRAPH-3510	[FB80 B510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3510, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_245)
{
    // 3510 003F;	
    // (㔐) CJK UNIFIED IDEOGRAPH-3510	[FB80 B510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3510, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_246)
{
    // 3510 0061;	
    // (㔐) CJK UNIFIED IDEOGRAPH-3510	[FB80 B510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3510, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_247)
{
    // 3510 0041;	
    // (㔐) CJK UNIFIED IDEOGRAPH-3510	[FB80 B510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3510, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_248)
{
    // 3510 0062;	
    // (㔐) CJK UNIFIED IDEOGRAPH-3510	[FB80 B510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3510, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_249)
{
    // 3511 0021;	
    // (㔑) CJK UNIFIED IDEOGRAPH-3511	[FB80 B511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3511, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_250)
{
    // 3511 003F;	
    // (㔑) CJK UNIFIED IDEOGRAPH-3511	[FB80 B511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3511, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_251)
{
    // 3511 0061;	
    // (㔑) CJK UNIFIED IDEOGRAPH-3511	[FB80 B511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3511, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_252)
{
    // 3511 0041;	
    // (㔑) CJK UNIFIED IDEOGRAPH-3511	[FB80 B511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3511, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_253)
{
    // 3511 0062;	
    // (㔑) CJK UNIFIED IDEOGRAPH-3511	[FB80 B511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3511, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_254)
{
    // 3512 0021;	
    // (㔒) CJK UNIFIED IDEOGRAPH-3512	[FB80 B512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3512, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_255)
{
    // 3512 003F;	
    // (㔒) CJK UNIFIED IDEOGRAPH-3512	[FB80 B512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3512, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_256)
{
    // 3512 0061;	
    // (㔒) CJK UNIFIED IDEOGRAPH-3512	[FB80 B512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3512, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_257)
{
    // 3512 0041;	
    // (㔒) CJK UNIFIED IDEOGRAPH-3512	[FB80 B512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3512, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_258)
{
    // 3512 0062;	
    // (㔒) CJK UNIFIED IDEOGRAPH-3512	[FB80 B512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3512, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_259)
{
    // 3513 0021;	
    // (㔓) CJK UNIFIED IDEOGRAPH-3513	[FB80 B513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3513, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_260)
{
    // 3513 003F;	
    // (㔓) CJK UNIFIED IDEOGRAPH-3513	[FB80 B513 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3513, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB513, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_261)
{
    // 3513 0061;	
    // (㔓) CJK UNIFIED IDEOGRAPH-3513	[FB80 B513 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3513, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_262)
{
    // 3513 0041;	
    // (㔓) CJK UNIFIED IDEOGRAPH-3513	[FB80 B513 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3513, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_263)
{
    // 3513 0062;	
    // (㔓) CJK UNIFIED IDEOGRAPH-3513	[FB80 B513 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3513, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB513, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_264)
{
    // 3514 0021;	
    // (㔔) CJK UNIFIED IDEOGRAPH-3514	[FB80 B514 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3514, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB514, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_265)
{
    // 3514 003F;	
    // (㔔) CJK UNIFIED IDEOGRAPH-3514	[FB80 B514 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3514, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB514, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_266)
{
    // 3514 0061;	
    // (㔔) CJK UNIFIED IDEOGRAPH-3514	[FB80 B514 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3514, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_267)
{
    // 3514 0041;	
    // (㔔) CJK UNIFIED IDEOGRAPH-3514	[FB80 B514 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3514, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_268)
{
    // 3514 0062;	
    // (㔔) CJK UNIFIED IDEOGRAPH-3514	[FB80 B514 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3514, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB514, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_269)
{
    // 3515 0021;	
    // (㔕) CJK UNIFIED IDEOGRAPH-3515	[FB80 B515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3515, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_270)
{
    // 2F824 0021;	
    // (㔕) CJK COMPATIBILITY IDEOGRAPH-2F824	[FB80 B515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F824, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_271)
{
    // 3515 003F;	
    // (㔕) CJK UNIFIED IDEOGRAPH-3515	[FB80 B515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3515, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_272)
{
    // 2F824 003F;	
    // (㔕) CJK COMPATIBILITY IDEOGRAPH-2F824	[FB80 B515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F824, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_273)
{
    // 3515 0061;	
    // (㔕) CJK UNIFIED IDEOGRAPH-3515	[FB80 B515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3515, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_274)
{
    // 2F824 0061;	
    // (㔕) CJK COMPATIBILITY IDEOGRAPH-2F824	[FB80 B515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F824, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_275)
{
    // 3515 0041;	
    // (㔕) CJK UNIFIED IDEOGRAPH-3515	[FB80 B515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3515, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_276)
{
    // 2F824 0041;	
    // (㔕) CJK COMPATIBILITY IDEOGRAPH-2F824	[FB80 B515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F824, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_277)
{
    // 3515 0062;	
    // (㔕) CJK UNIFIED IDEOGRAPH-3515	[FB80 B515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3515, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_278)
{
    // 2F824 0062;	
    // (㔕) CJK COMPATIBILITY IDEOGRAPH-2F824	[FB80 B515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F824, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_279)
{
    // 3516 0021;	
    // (㔖) CJK UNIFIED IDEOGRAPH-3516	[FB80 B516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3516, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_280)
{
    // 3516 003F;	
    // (㔖) CJK UNIFIED IDEOGRAPH-3516	[FB80 B516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3516, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_281)
{
    // 3516 0061;	
    // (㔖) CJK UNIFIED IDEOGRAPH-3516	[FB80 B516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3516, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_282)
{
    // 3516 0041;	
    // (㔖) CJK UNIFIED IDEOGRAPH-3516	[FB80 B516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3516, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_283)
{
    // 3516 0062;	
    // (㔖) CJK UNIFIED IDEOGRAPH-3516	[FB80 B516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3516, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_284)
{
    // 3517 0021;	
    // (㔗) CJK UNIFIED IDEOGRAPH-3517	[FB80 B517 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3517, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB517, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_285)
{
    // 3517 003F;	
    // (㔗) CJK UNIFIED IDEOGRAPH-3517	[FB80 B517 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3517, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB517, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_286)
{
    // 3517 0061;	
    // (㔗) CJK UNIFIED IDEOGRAPH-3517	[FB80 B517 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3517, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_287)
{
    // 3517 0041;	
    // (㔗) CJK UNIFIED IDEOGRAPH-3517	[FB80 B517 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3517, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_288)
{
    // 3517 0062;	
    // (㔗) CJK UNIFIED IDEOGRAPH-3517	[FB80 B517 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3517, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB517, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_289)
{
    // 3518 0021;	
    // (㔘) CJK UNIFIED IDEOGRAPH-3518	[FB80 B518 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3518, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_290)
{
    // 3518 003F;	
    // (㔘) CJK UNIFIED IDEOGRAPH-3518	[FB80 B518 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3518, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_291)
{
    // 3518 0061;	
    // (㔘) CJK UNIFIED IDEOGRAPH-3518	[FB80 B518 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3518, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_292)
{
    // 3518 0041;	
    // (㔘) CJK UNIFIED IDEOGRAPH-3518	[FB80 B518 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3518, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_293)
{
    // 3518 0062;	
    // (㔘) CJK UNIFIED IDEOGRAPH-3518	[FB80 B518 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3518, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_294)
{
    // 3519 0021;	
    // (㔙) CJK UNIFIED IDEOGRAPH-3519	[FB80 B519 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3519, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB519, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_295)
{
    // 3519 003F;	
    // (㔙) CJK UNIFIED IDEOGRAPH-3519	[FB80 B519 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3519, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB519, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_296)
{
    // 3519 0061;	
    // (㔙) CJK UNIFIED IDEOGRAPH-3519	[FB80 B519 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3519, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_297)
{
    // 3519 0041;	
    // (㔙) CJK UNIFIED IDEOGRAPH-3519	[FB80 B519 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3519, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_298)
{
    // 3519 0062;	
    // (㔙) CJK UNIFIED IDEOGRAPH-3519	[FB80 B519 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3519, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB519, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_299)
{
    // 351A 0021;	
    // (㔚) CJK UNIFIED IDEOGRAPH-351A	[FB80 B51A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_300)
{
    // 351A 003F;	
    // (㔚) CJK UNIFIED IDEOGRAPH-351A	[FB80 B51A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_301)
{
    // 351A 0061;	
    // (㔚) CJK UNIFIED IDEOGRAPH-351A	[FB80 B51A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_302)
{
    // 351A 0041;	
    // (㔚) CJK UNIFIED IDEOGRAPH-351A	[FB80 B51A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_303)
{
    // 351A 0062;	
    // (㔚) CJK UNIFIED IDEOGRAPH-351A	[FB80 B51A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_304)
{
    // 351B 0021;	
    // (㔛) CJK UNIFIED IDEOGRAPH-351B	[FB80 B51B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_305)
{
    // 351B 003F;	
    // (㔛) CJK UNIFIED IDEOGRAPH-351B	[FB80 B51B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_306)
{
    // 351B 0061;	
    // (㔛) CJK UNIFIED IDEOGRAPH-351B	[FB80 B51B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_307)
{
    // 351B 0041;	
    // (㔛) CJK UNIFIED IDEOGRAPH-351B	[FB80 B51B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_308)
{
    // 351B 0062;	
    // (㔛) CJK UNIFIED IDEOGRAPH-351B	[FB80 B51B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_309)
{
    // 351C 0021;	
    // (㔜) CJK UNIFIED IDEOGRAPH-351C	[FB80 B51C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_310)
{
    // 351C 003F;	
    // (㔜) CJK UNIFIED IDEOGRAPH-351C	[FB80 B51C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_311)
{
    // 351C 0061;	
    // (㔜) CJK UNIFIED IDEOGRAPH-351C	[FB80 B51C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_312)
{
    // 351C 0041;	
    // (㔜) CJK UNIFIED IDEOGRAPH-351C	[FB80 B51C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_313)
{
    // 351C 0062;	
    // (㔜) CJK UNIFIED IDEOGRAPH-351C	[FB80 B51C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_314)
{
    // 351D 0021;	
    // (㔝) CJK UNIFIED IDEOGRAPH-351D	[FB80 B51D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_315)
{
    // 351D 003F;	
    // (㔝) CJK UNIFIED IDEOGRAPH-351D	[FB80 B51D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_316)
{
    // 351D 0061;	
    // (㔝) CJK UNIFIED IDEOGRAPH-351D	[FB80 B51D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_317)
{
    // 351D 0041;	
    // (㔝) CJK UNIFIED IDEOGRAPH-351D	[FB80 B51D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_318)
{
    // 351D 0062;	
    // (㔝) CJK UNIFIED IDEOGRAPH-351D	[FB80 B51D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_319)
{
    // 351E 0021;	
    // (㔞) CJK UNIFIED IDEOGRAPH-351E	[FB80 B51E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_320)
{
    // 351E 003F;	
    // (㔞) CJK UNIFIED IDEOGRAPH-351E	[FB80 B51E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_321)
{
    // 351E 0061;	
    // (㔞) CJK UNIFIED IDEOGRAPH-351E	[FB80 B51E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_322)
{
    // 351E 0041;	
    // (㔞) CJK UNIFIED IDEOGRAPH-351E	[FB80 B51E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_323)
{
    // 351E 0062;	
    // (㔞) CJK UNIFIED IDEOGRAPH-351E	[FB80 B51E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_324)
{
    // 351F 0021;	
    // (㔟) CJK UNIFIED IDEOGRAPH-351F	[FB80 B51F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB51F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_325)
{
    // 351F 003F;	
    // (㔟) CJK UNIFIED IDEOGRAPH-351F	[FB80 B51F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB51F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_326)
{
    // 351F 0061;	
    // (㔟) CJK UNIFIED IDEOGRAPH-351F	[FB80 B51F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_327)
{
    // 351F 0041;	
    // (㔟) CJK UNIFIED IDEOGRAPH-351F	[FB80 B51F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x351F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_328)
{
    // 351F 0062;	
    // (㔟) CJK UNIFIED IDEOGRAPH-351F	[FB80 B51F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x351F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB51F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_329)
{
    // 3520 0021;	
    // (㔠) CJK UNIFIED IDEOGRAPH-3520	[FB80 B520 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3520, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB520, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_330)
{
    // 3520 003F;	
    // (㔠) CJK UNIFIED IDEOGRAPH-3520	[FB80 B520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3520, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_331)
{
    // 3520 0061;	
    // (㔠) CJK UNIFIED IDEOGRAPH-3520	[FB80 B520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3520, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_332)
{
    // 3520 0041;	
    // (㔠) CJK UNIFIED IDEOGRAPH-3520	[FB80 B520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3520, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_333)
{
    // 3520 0062;	
    // (㔠) CJK UNIFIED IDEOGRAPH-3520	[FB80 B520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3520, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_334)
{
    // 3521 0021;	
    // (㔡) CJK UNIFIED IDEOGRAPH-3521	[FB80 B521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3521, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_335)
{
    // 3521 003F;	
    // (㔡) CJK UNIFIED IDEOGRAPH-3521	[FB80 B521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3521, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_336)
{
    // 3521 0061;	
    // (㔡) CJK UNIFIED IDEOGRAPH-3521	[FB80 B521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3521, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_337)
{
    // 3521 0041;	
    // (㔡) CJK UNIFIED IDEOGRAPH-3521	[FB80 B521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3521, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_338)
{
    // 3521 0062;	
    // (㔡) CJK UNIFIED IDEOGRAPH-3521	[FB80 B521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3521, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_339)
{
    // 3522 0021;	
    // (㔢) CJK UNIFIED IDEOGRAPH-3522	[FB80 B522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3522, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_340)
{
    // 3522 003F;	
    // (㔢) CJK UNIFIED IDEOGRAPH-3522	[FB80 B522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3522, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_341)
{
    // 3522 0061;	
    // (㔢) CJK UNIFIED IDEOGRAPH-3522	[FB80 B522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3522, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_342)
{
    // 3522 0041;	
    // (㔢) CJK UNIFIED IDEOGRAPH-3522	[FB80 B522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3522, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_343)
{
    // 3522 0062;	
    // (㔢) CJK UNIFIED IDEOGRAPH-3522	[FB80 B522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3522, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_344)
{
    // 3523 0021;	
    // (㔣) CJK UNIFIED IDEOGRAPH-3523	[FB80 B523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3523, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_345)
{
    // 3523 003F;	
    // (㔣) CJK UNIFIED IDEOGRAPH-3523	[FB80 B523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3523, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_346)
{
    // 3523 0061;	
    // (㔣) CJK UNIFIED IDEOGRAPH-3523	[FB80 B523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3523, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_347)
{
    // 3523 0041;	
    // (㔣) CJK UNIFIED IDEOGRAPH-3523	[FB80 B523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3523, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_348)
{
    // 3523 0062;	
    // (㔣) CJK UNIFIED IDEOGRAPH-3523	[FB80 B523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3523, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_349)
{
    // 3524 0021;	
    // (㔤) CJK UNIFIED IDEOGRAPH-3524	[FB80 B524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3524, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_350)
{
    // 3524 003F;	
    // (㔤) CJK UNIFIED IDEOGRAPH-3524	[FB80 B524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3524, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_351)
{
    // 3524 0061;	
    // (㔤) CJK UNIFIED IDEOGRAPH-3524	[FB80 B524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3524, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_352)
{
    // 3524 0041;	
    // (㔤) CJK UNIFIED IDEOGRAPH-3524	[FB80 B524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3524, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_353)
{
    // 3524 0062;	
    // (㔤) CJK UNIFIED IDEOGRAPH-3524	[FB80 B524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3524, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_354)
{
    // 3525 0021;	
    // (㔥) CJK UNIFIED IDEOGRAPH-3525	[FB80 B525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3525, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_355)
{
    // 3525 003F;	
    // (㔥) CJK UNIFIED IDEOGRAPH-3525	[FB80 B525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3525, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_356)
{
    // 3525 0061;	
    // (㔥) CJK UNIFIED IDEOGRAPH-3525	[FB80 B525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3525, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_357)
{
    // 3525 0041;	
    // (㔥) CJK UNIFIED IDEOGRAPH-3525	[FB80 B525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3525, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_358)
{
    // 3525 0062;	
    // (㔥) CJK UNIFIED IDEOGRAPH-3525	[FB80 B525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3525, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_359)
{
    // 3526 0021;	
    // (㔦) CJK UNIFIED IDEOGRAPH-3526	[FB80 B526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3526, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_360)
{
    // 3526 003F;	
    // (㔦) CJK UNIFIED IDEOGRAPH-3526	[FB80 B526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3526, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_361)
{
    // 3526 0061;	
    // (㔦) CJK UNIFIED IDEOGRAPH-3526	[FB80 B526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3526, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_362)
{
    // 3526 0041;	
    // (㔦) CJK UNIFIED IDEOGRAPH-3526	[FB80 B526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3526, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_363)
{
    // 3526 0062;	
    // (㔦) CJK UNIFIED IDEOGRAPH-3526	[FB80 B526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3526, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_364)
{
    // 3527 0021;	
    // (㔧) CJK UNIFIED IDEOGRAPH-3527	[FB80 B527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3527, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_365)
{
    // 3527 003F;	
    // (㔧) CJK UNIFIED IDEOGRAPH-3527	[FB80 B527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3527, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_366)
{
    // 3527 0061;	
    // (㔧) CJK UNIFIED IDEOGRAPH-3527	[FB80 B527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3527, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_367)
{
    // 3527 0041;	
    // (㔧) CJK UNIFIED IDEOGRAPH-3527	[FB80 B527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3527, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_368)
{
    // 3527 0062;	
    // (㔧) CJK UNIFIED IDEOGRAPH-3527	[FB80 B527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3527, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_369)
{
    // 3528 0021;	
    // (㔨) CJK UNIFIED IDEOGRAPH-3528	[FB80 B528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3528, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_370)
{
    // 3528 003F;	
    // (㔨) CJK UNIFIED IDEOGRAPH-3528	[FB80 B528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3528, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_371)
{
    // 3528 0061;	
    // (㔨) CJK UNIFIED IDEOGRAPH-3528	[FB80 B528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3528, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_372)
{
    // 3528 0041;	
    // (㔨) CJK UNIFIED IDEOGRAPH-3528	[FB80 B528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3528, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_373)
{
    // 3528 0062;	
    // (㔨) CJK UNIFIED IDEOGRAPH-3528	[FB80 B528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3528, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_374)
{
    // 3529 0021;	
    // (㔩) CJK UNIFIED IDEOGRAPH-3529	[FB80 B529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3529, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_375)
{
    // 3529 003F;	
    // (㔩) CJK UNIFIED IDEOGRAPH-3529	[FB80 B529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3529, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_376)
{
    // 3529 0061;	
    // (㔩) CJK UNIFIED IDEOGRAPH-3529	[FB80 B529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3529, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_377)
{
    // 3529 0041;	
    // (㔩) CJK UNIFIED IDEOGRAPH-3529	[FB80 B529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3529, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_378)
{
    // 3529 0062;	
    // (㔩) CJK UNIFIED IDEOGRAPH-3529	[FB80 B529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3529, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_379)
{
    // 352A 0021;	
    // (㔪) CJK UNIFIED IDEOGRAPH-352A	[FB80 B52A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_380)
{
    // 352A 003F;	
    // (㔪) CJK UNIFIED IDEOGRAPH-352A	[FB80 B52A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_381)
{
    // 352A 0061;	
    // (㔪) CJK UNIFIED IDEOGRAPH-352A	[FB80 B52A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_382)
{
    // 352A 0041;	
    // (㔪) CJK UNIFIED IDEOGRAPH-352A	[FB80 B52A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_383)
{
    // 352A 0062;	
    // (㔪) CJK UNIFIED IDEOGRAPH-352A	[FB80 B52A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_384)
{
    // 352B 0021;	
    // (㔫) CJK UNIFIED IDEOGRAPH-352B	[FB80 B52B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_385)
{
    // 352B 003F;	
    // (㔫) CJK UNIFIED IDEOGRAPH-352B	[FB80 B52B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_386)
{
    // 352B 0061;	
    // (㔫) CJK UNIFIED IDEOGRAPH-352B	[FB80 B52B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_387)
{
    // 352B 0041;	
    // (㔫) CJK UNIFIED IDEOGRAPH-352B	[FB80 B52B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_388)
{
    // 352B 0062;	
    // (㔫) CJK UNIFIED IDEOGRAPH-352B	[FB80 B52B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_389)
{
    // 352C 0021;	
    // (㔬) CJK UNIFIED IDEOGRAPH-352C	[FB80 B52C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_390)
{
    // 352C 003F;	
    // (㔬) CJK UNIFIED IDEOGRAPH-352C	[FB80 B52C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_391)
{
    // 352C 0061;	
    // (㔬) CJK UNIFIED IDEOGRAPH-352C	[FB80 B52C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_392)
{
    // 352C 0041;	
    // (㔬) CJK UNIFIED IDEOGRAPH-352C	[FB80 B52C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_393)
{
    // 352C 0062;	
    // (㔬) CJK UNIFIED IDEOGRAPH-352C	[FB80 B52C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_394)
{
    // 352D 0021;	
    // (㔭) CJK UNIFIED IDEOGRAPH-352D	[FB80 B52D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_395)
{
    // 352D 003F;	
    // (㔭) CJK UNIFIED IDEOGRAPH-352D	[FB80 B52D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_396)
{
    // 352D 0061;	
    // (㔭) CJK UNIFIED IDEOGRAPH-352D	[FB80 B52D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_397)
{
    // 352D 0041;	
    // (㔭) CJK UNIFIED IDEOGRAPH-352D	[FB80 B52D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_398)
{
    // 352D 0062;	
    // (㔭) CJK UNIFIED IDEOGRAPH-352D	[FB80 B52D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_399)
{
    // 352E 0021;	
    // (㔮) CJK UNIFIED IDEOGRAPH-352E	[FB80 B52E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_400)
{
    // 352E 003F;	
    // (㔮) CJK UNIFIED IDEOGRAPH-352E	[FB80 B52E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_401)
{
    // 352E 0061;	
    // (㔮) CJK UNIFIED IDEOGRAPH-352E	[FB80 B52E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_402)
{
    // 352E 0041;	
    // (㔮) CJK UNIFIED IDEOGRAPH-352E	[FB80 B52E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_403)
{
    // 352E 0062;	
    // (㔮) CJK UNIFIED IDEOGRAPH-352E	[FB80 B52E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_404)
{
    // 352F 0021;	
    // (㔯) CJK UNIFIED IDEOGRAPH-352F	[FB80 B52F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB52F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_405)
{
    // 352F 003F;	
    // (㔯) CJK UNIFIED IDEOGRAPH-352F	[FB80 B52F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB52F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_406)
{
    // 352F 0061;	
    // (㔯) CJK UNIFIED IDEOGRAPH-352F	[FB80 B52F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_407)
{
    // 352F 0041;	
    // (㔯) CJK UNIFIED IDEOGRAPH-352F	[FB80 B52F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x352F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_408)
{
    // 352F 0062;	
    // (㔯) CJK UNIFIED IDEOGRAPH-352F	[FB80 B52F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x352F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB52F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_409)
{
    // 3530 0021;	
    // (㔰) CJK UNIFIED IDEOGRAPH-3530	[FB80 B530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3530, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_410)
{
    // 3530 003F;	
    // (㔰) CJK UNIFIED IDEOGRAPH-3530	[FB80 B530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3530, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_411)
{
    // 3530 0061;	
    // (㔰) CJK UNIFIED IDEOGRAPH-3530	[FB80 B530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3530, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_412)
{
    // 3530 0041;	
    // (㔰) CJK UNIFIED IDEOGRAPH-3530	[FB80 B530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3530, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_413)
{
    // 3530 0062;	
    // (㔰) CJK UNIFIED IDEOGRAPH-3530	[FB80 B530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3530, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_414)
{
    // 3531 0021;	
    // (㔱) CJK UNIFIED IDEOGRAPH-3531	[FB80 B531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3531, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_415)
{
    // 3531 003F;	
    // (㔱) CJK UNIFIED IDEOGRAPH-3531	[FB80 B531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3531, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_416)
{
    // 3531 0061;	
    // (㔱) CJK UNIFIED IDEOGRAPH-3531	[FB80 B531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3531, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_417)
{
    // 3531 0041;	
    // (㔱) CJK UNIFIED IDEOGRAPH-3531	[FB80 B531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3531, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_418)
{
    // 3531 0062;	
    // (㔱) CJK UNIFIED IDEOGRAPH-3531	[FB80 B531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3531, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_419)
{
    // 3532 0021;	
    // (㔲) CJK UNIFIED IDEOGRAPH-3532	[FB80 B532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3532, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_420)
{
    // 3532 003F;	
    // (㔲) CJK UNIFIED IDEOGRAPH-3532	[FB80 B532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3532, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_421)
{
    // 3532 0061;	
    // (㔲) CJK UNIFIED IDEOGRAPH-3532	[FB80 B532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3532, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_422)
{
    // 3532 0041;	
    // (㔲) CJK UNIFIED IDEOGRAPH-3532	[FB80 B532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3532, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_423)
{
    // 3532 0062;	
    // (㔲) CJK UNIFIED IDEOGRAPH-3532	[FB80 B532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3532, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_424)
{
    // 3533 0021;	
    // (㔳) CJK UNIFIED IDEOGRAPH-3533	[FB80 B533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3533, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_425)
{
    // 3533 003F;	
    // (㔳) CJK UNIFIED IDEOGRAPH-3533	[FB80 B533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3533, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_426)
{
    // 3533 0061;	
    // (㔳) CJK UNIFIED IDEOGRAPH-3533	[FB80 B533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3533, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_427)
{
    // 3533 0041;	
    // (㔳) CJK UNIFIED IDEOGRAPH-3533	[FB80 B533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3533, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_428)
{
    // 3533 0062;	
    // (㔳) CJK UNIFIED IDEOGRAPH-3533	[FB80 B533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3533, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_429)
{
    // 3534 0021;	
    // (㔴) CJK UNIFIED IDEOGRAPH-3534	[FB80 B534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3534, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_430)
{
    // 3534 003F;	
    // (㔴) CJK UNIFIED IDEOGRAPH-3534	[FB80 B534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3534, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_431)
{
    // 3534 0061;	
    // (㔴) CJK UNIFIED IDEOGRAPH-3534	[FB80 B534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3534, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_432)
{
    // 3534 0041;	
    // (㔴) CJK UNIFIED IDEOGRAPH-3534	[FB80 B534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3534, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_433)
{
    // 3534 0062;	
    // (㔴) CJK UNIFIED IDEOGRAPH-3534	[FB80 B534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3534, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_434)
{
    // 3535 0021;	
    // (㔵) CJK UNIFIED IDEOGRAPH-3535	[FB80 B535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3535, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_435)
{
    // 3535 003F;	
    // (㔵) CJK UNIFIED IDEOGRAPH-3535	[FB80 B535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3535, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_436)
{
    // 3535 0061;	
    // (㔵) CJK UNIFIED IDEOGRAPH-3535	[FB80 B535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3535, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_437)
{
    // 3535 0041;	
    // (㔵) CJK UNIFIED IDEOGRAPH-3535	[FB80 B535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3535, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_438)
{
    // 3535 0062;	
    // (㔵) CJK UNIFIED IDEOGRAPH-3535	[FB80 B535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3535, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_439)
{
    // 3536 0021;	
    // (㔶) CJK UNIFIED IDEOGRAPH-3536	[FB80 B536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3536, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_440)
{
    // 3536 003F;	
    // (㔶) CJK UNIFIED IDEOGRAPH-3536	[FB80 B536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3536, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_441)
{
    // 3536 0061;	
    // (㔶) CJK UNIFIED IDEOGRAPH-3536	[FB80 B536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3536, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_442)
{
    // 3536 0041;	
    // (㔶) CJK UNIFIED IDEOGRAPH-3536	[FB80 B536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3536, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_443)
{
    // 3536 0062;	
    // (㔶) CJK UNIFIED IDEOGRAPH-3536	[FB80 B536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3536, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_444)
{
    // 3537 0021;	
    // (㔷) CJK UNIFIED IDEOGRAPH-3537	[FB80 B537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3537, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_445)
{
    // 3537 003F;	
    // (㔷) CJK UNIFIED IDEOGRAPH-3537	[FB80 B537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3537, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_446)
{
    // 3537 0061;	
    // (㔷) CJK UNIFIED IDEOGRAPH-3537	[FB80 B537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3537, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_447)
{
    // 3537 0041;	
    // (㔷) CJK UNIFIED IDEOGRAPH-3537	[FB80 B537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3537, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_448)
{
    // 3537 0062;	
    // (㔷) CJK UNIFIED IDEOGRAPH-3537	[FB80 B537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3537, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_449)
{
    // 3538 0021;	
    // (㔸) CJK UNIFIED IDEOGRAPH-3538	[FB80 B538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3538, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_450)
{
    // 3538 003F;	
    // (㔸) CJK UNIFIED IDEOGRAPH-3538	[FB80 B538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3538, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_451)
{
    // 3538 0061;	
    // (㔸) CJK UNIFIED IDEOGRAPH-3538	[FB80 B538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3538, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_452)
{
    // 3538 0041;	
    // (㔸) CJK UNIFIED IDEOGRAPH-3538	[FB80 B538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3538, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_453)
{
    // 3538 0062;	
    // (㔸) CJK UNIFIED IDEOGRAPH-3538	[FB80 B538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3538, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_454)
{
    // 3539 0021;	
    // (㔹) CJK UNIFIED IDEOGRAPH-3539	[FB80 B539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3539, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_455)
{
    // 3539 003F;	
    // (㔹) CJK UNIFIED IDEOGRAPH-3539	[FB80 B539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3539, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_456)
{
    // 3539 0061;	
    // (㔹) CJK UNIFIED IDEOGRAPH-3539	[FB80 B539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3539, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_457)
{
    // 3539 0041;	
    // (㔹) CJK UNIFIED IDEOGRAPH-3539	[FB80 B539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3539, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_458)
{
    // 3539 0062;	
    // (㔹) CJK UNIFIED IDEOGRAPH-3539	[FB80 B539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3539, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_459)
{
    // 353A 0021;	
    // (㔺) CJK UNIFIED IDEOGRAPH-353A	[FB80 B53A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_460)
{
    // 353A 003F;	
    // (㔺) CJK UNIFIED IDEOGRAPH-353A	[FB80 B53A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_461)
{
    // 353A 0061;	
    // (㔺) CJK UNIFIED IDEOGRAPH-353A	[FB80 B53A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_462)
{
    // 353A 0041;	
    // (㔺) CJK UNIFIED IDEOGRAPH-353A	[FB80 B53A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_463)
{
    // 353A 0062;	
    // (㔺) CJK UNIFIED IDEOGRAPH-353A	[FB80 B53A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_464)
{
    // 353B 0021;	
    // (㔻) CJK UNIFIED IDEOGRAPH-353B	[FB80 B53B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_465)
{
    // 353B 003F;	
    // (㔻) CJK UNIFIED IDEOGRAPH-353B	[FB80 B53B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_466)
{
    // 353B 0061;	
    // (㔻) CJK UNIFIED IDEOGRAPH-353B	[FB80 B53B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_467)
{
    // 353B 0041;	
    // (㔻) CJK UNIFIED IDEOGRAPH-353B	[FB80 B53B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_468)
{
    // 353B 0062;	
    // (㔻) CJK UNIFIED IDEOGRAPH-353B	[FB80 B53B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_469)
{
    // 353C 0021;	
    // (㔼) CJK UNIFIED IDEOGRAPH-353C	[FB80 B53C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_470)
{
    // 353C 003F;	
    // (㔼) CJK UNIFIED IDEOGRAPH-353C	[FB80 B53C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_471)
{
    // 353C 0061;	
    // (㔼) CJK UNIFIED IDEOGRAPH-353C	[FB80 B53C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_472)
{
    // 353C 0041;	
    // (㔼) CJK UNIFIED IDEOGRAPH-353C	[FB80 B53C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_473)
{
    // 353C 0062;	
    // (㔼) CJK UNIFIED IDEOGRAPH-353C	[FB80 B53C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_474)
{
    // 353D 0021;	
    // (㔽) CJK UNIFIED IDEOGRAPH-353D	[FB80 B53D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_475)
{
    // 353D 003F;	
    // (㔽) CJK UNIFIED IDEOGRAPH-353D	[FB80 B53D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_476)
{
    // 353D 0061;	
    // (㔽) CJK UNIFIED IDEOGRAPH-353D	[FB80 B53D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_477)
{
    // 353D 0041;	
    // (㔽) CJK UNIFIED IDEOGRAPH-353D	[FB80 B53D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_478)
{
    // 353D 0062;	
    // (㔽) CJK UNIFIED IDEOGRAPH-353D	[FB80 B53D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_479)
{
    // 353E 0021;	
    // (㔾) CJK UNIFIED IDEOGRAPH-353E	[FB80 B53E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_480)
{
    // 353E 003F;	
    // (㔾) CJK UNIFIED IDEOGRAPH-353E	[FB80 B53E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_481)
{
    // 353E 0061;	
    // (㔾) CJK UNIFIED IDEOGRAPH-353E	[FB80 B53E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_482)
{
    // 353E 0041;	
    // (㔾) CJK UNIFIED IDEOGRAPH-353E	[FB80 B53E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_483)
{
    // 353E 0062;	
    // (㔾) CJK UNIFIED IDEOGRAPH-353E	[FB80 B53E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_484)
{
    // 353F 0021;	
    // (㔿) CJK UNIFIED IDEOGRAPH-353F	[FB80 B53F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB53F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_485)
{
    // 353F 003F;	
    // (㔿) CJK UNIFIED IDEOGRAPH-353F	[FB80 B53F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB53F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_486)
{
    // 353F 0061;	
    // (㔿) CJK UNIFIED IDEOGRAPH-353F	[FB80 B53F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB53F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_487)
{
    // 353F 0041;	
    // (㔿) CJK UNIFIED IDEOGRAPH-353F	[FB80 B53F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x353F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB53F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_488)
{
    // 353F 0062;	
    // (㔿) CJK UNIFIED IDEOGRAPH-353F	[FB80 B53F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x353F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB53F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_489)
{
    // 3540 0021;	
    // (㕀) CJK UNIFIED IDEOGRAPH-3540	[FB80 B540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3540, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_490)
{
    // 3540 003F;	
    // (㕀) CJK UNIFIED IDEOGRAPH-3540	[FB80 B540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3540, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_491)
{
    // 3540 0061;	
    // (㕀) CJK UNIFIED IDEOGRAPH-3540	[FB80 B540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3540, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_492)
{
    // 3540 0041;	
    // (㕀) CJK UNIFIED IDEOGRAPH-3540	[FB80 B540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3540, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_493)
{
    // 3540 0062;	
    // (㕀) CJK UNIFIED IDEOGRAPH-3540	[FB80 B540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3540, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_494)
{
    // 3541 0021;	
    // (㕁) CJK UNIFIED IDEOGRAPH-3541	[FB80 B541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3541, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_495)
{
    // 3541 003F;	
    // (㕁) CJK UNIFIED IDEOGRAPH-3541	[FB80 B541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3541, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_496)
{
    // 3541 0061;	
    // (㕁) CJK UNIFIED IDEOGRAPH-3541	[FB80 B541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3541, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_497)
{
    // 3541 0041;	
    // (㕁) CJK UNIFIED IDEOGRAPH-3541	[FB80 B541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3541, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_498)
{
    // 3541 0062;	
    // (㕁) CJK UNIFIED IDEOGRAPH-3541	[FB80 B541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3541, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_329_499)
{
    // 3542 0021;	
    // (㕂) CJK UNIFIED IDEOGRAPH-3542	[FB80 B542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3542, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

