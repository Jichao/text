// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_354_000)
{
    // 3E8C 003F;	
    // (㺌) CJK UNIFIED IDEOGRAPH-3E8C	[FB80 BE8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_001)
{
    // 3E8C 0061;	
    // (㺌) CJK UNIFIED IDEOGRAPH-3E8C	[FB80 BE8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_002)
{
    // 3E8C 0041;	
    // (㺌) CJK UNIFIED IDEOGRAPH-3E8C	[FB80 BE8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_003)
{
    // 3E8C 0062;	
    // (㺌) CJK UNIFIED IDEOGRAPH-3E8C	[FB80 BE8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_004)
{
    // 3E8D 0021;	
    // (㺍) CJK UNIFIED IDEOGRAPH-3E8D	[FB80 BE8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_005)
{
    // 3E8D 003F;	
    // (㺍) CJK UNIFIED IDEOGRAPH-3E8D	[FB80 BE8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_006)
{
    // 3E8D 0061;	
    // (㺍) CJK UNIFIED IDEOGRAPH-3E8D	[FB80 BE8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_007)
{
    // 3E8D 0041;	
    // (㺍) CJK UNIFIED IDEOGRAPH-3E8D	[FB80 BE8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_008)
{
    // 3E8D 0062;	
    // (㺍) CJK UNIFIED IDEOGRAPH-3E8D	[FB80 BE8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_009)
{
    // 3E8E 0021;	
    // (㺎) CJK UNIFIED IDEOGRAPH-3E8E	[FB80 BE8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_010)
{
    // 3E8E 003F;	
    // (㺎) CJK UNIFIED IDEOGRAPH-3E8E	[FB80 BE8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_011)
{
    // 3E8E 0061;	
    // (㺎) CJK UNIFIED IDEOGRAPH-3E8E	[FB80 BE8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_012)
{
    // 3E8E 0041;	
    // (㺎) CJK UNIFIED IDEOGRAPH-3E8E	[FB80 BE8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_013)
{
    // 3E8E 0062;	
    // (㺎) CJK UNIFIED IDEOGRAPH-3E8E	[FB80 BE8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_014)
{
    // 3E8F 0021;	
    // (㺏) CJK UNIFIED IDEOGRAPH-3E8F	[FB80 BE8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_015)
{
    // 3E8F 003F;	
    // (㺏) CJK UNIFIED IDEOGRAPH-3E8F	[FB80 BE8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_016)
{
    // 3E8F 0061;	
    // (㺏) CJK UNIFIED IDEOGRAPH-3E8F	[FB80 BE8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_017)
{
    // 3E8F 0041;	
    // (㺏) CJK UNIFIED IDEOGRAPH-3E8F	[FB80 BE8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_018)
{
    // 3E8F 0062;	
    // (㺏) CJK UNIFIED IDEOGRAPH-3E8F	[FB80 BE8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_019)
{
    // 3E90 0021;	
    // (㺐) CJK UNIFIED IDEOGRAPH-3E90	[FB80 BE90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_020)
{
    // 3E90 003F;	
    // (㺐) CJK UNIFIED IDEOGRAPH-3E90	[FB80 BE90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_021)
{
    // 3E90 0061;	
    // (㺐) CJK UNIFIED IDEOGRAPH-3E90	[FB80 BE90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_022)
{
    // 3E90 0041;	
    // (㺐) CJK UNIFIED IDEOGRAPH-3E90	[FB80 BE90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_023)
{
    // 3E90 0062;	
    // (㺐) CJK UNIFIED IDEOGRAPH-3E90	[FB80 BE90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_024)
{
    // 3E91 0021;	
    // (㺑) CJK UNIFIED IDEOGRAPH-3E91	[FB80 BE91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_025)
{
    // 3E91 003F;	
    // (㺑) CJK UNIFIED IDEOGRAPH-3E91	[FB80 BE91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_026)
{
    // 3E91 0061;	
    // (㺑) CJK UNIFIED IDEOGRAPH-3E91	[FB80 BE91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_027)
{
    // 3E91 0041;	
    // (㺑) CJK UNIFIED IDEOGRAPH-3E91	[FB80 BE91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_028)
{
    // 3E91 0062;	
    // (㺑) CJK UNIFIED IDEOGRAPH-3E91	[FB80 BE91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_029)
{
    // 3E92 0021;	
    // (㺒) CJK UNIFIED IDEOGRAPH-3E92	[FB80 BE92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_030)
{
    // 3E92 003F;	
    // (㺒) CJK UNIFIED IDEOGRAPH-3E92	[FB80 BE92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_031)
{
    // 3E92 0061;	
    // (㺒) CJK UNIFIED IDEOGRAPH-3E92	[FB80 BE92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_032)
{
    // 3E92 0041;	
    // (㺒) CJK UNIFIED IDEOGRAPH-3E92	[FB80 BE92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_033)
{
    // 3E92 0062;	
    // (㺒) CJK UNIFIED IDEOGRAPH-3E92	[FB80 BE92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_034)
{
    // 3E93 0021;	
    // (㺓) CJK UNIFIED IDEOGRAPH-3E93	[FB80 BE93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_035)
{
    // 3E93 003F;	
    // (㺓) CJK UNIFIED IDEOGRAPH-3E93	[FB80 BE93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_036)
{
    // 3E93 0061;	
    // (㺓) CJK UNIFIED IDEOGRAPH-3E93	[FB80 BE93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_037)
{
    // 3E93 0041;	
    // (㺓) CJK UNIFIED IDEOGRAPH-3E93	[FB80 BE93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_038)
{
    // 3E93 0062;	
    // (㺓) CJK UNIFIED IDEOGRAPH-3E93	[FB80 BE93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_039)
{
    // 3E94 0021;	
    // (㺔) CJK UNIFIED IDEOGRAPH-3E94	[FB80 BE94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_040)
{
    // 3E94 003F;	
    // (㺔) CJK UNIFIED IDEOGRAPH-3E94	[FB80 BE94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_041)
{
    // 3E94 0061;	
    // (㺔) CJK UNIFIED IDEOGRAPH-3E94	[FB80 BE94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_042)
{
    // 3E94 0041;	
    // (㺔) CJK UNIFIED IDEOGRAPH-3E94	[FB80 BE94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_043)
{
    // 3E94 0062;	
    // (㺔) CJK UNIFIED IDEOGRAPH-3E94	[FB80 BE94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_044)
{
    // 3E95 0021;	
    // (㺕) CJK UNIFIED IDEOGRAPH-3E95	[FB80 BE95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_045)
{
    // 3E95 003F;	
    // (㺕) CJK UNIFIED IDEOGRAPH-3E95	[FB80 BE95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_046)
{
    // 3E95 0061;	
    // (㺕) CJK UNIFIED IDEOGRAPH-3E95	[FB80 BE95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_047)
{
    // 3E95 0041;	
    // (㺕) CJK UNIFIED IDEOGRAPH-3E95	[FB80 BE95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_048)
{
    // 3E95 0062;	
    // (㺕) CJK UNIFIED IDEOGRAPH-3E95	[FB80 BE95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_049)
{
    // 3E96 0021;	
    // (㺖) CJK UNIFIED IDEOGRAPH-3E96	[FB80 BE96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_050)
{
    // 3E96 003F;	
    // (㺖) CJK UNIFIED IDEOGRAPH-3E96	[FB80 BE96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_051)
{
    // 3E96 0061;	
    // (㺖) CJK UNIFIED IDEOGRAPH-3E96	[FB80 BE96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_052)
{
    // 3E96 0041;	
    // (㺖) CJK UNIFIED IDEOGRAPH-3E96	[FB80 BE96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_053)
{
    // 3E96 0062;	
    // (㺖) CJK UNIFIED IDEOGRAPH-3E96	[FB80 BE96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_054)
{
    // 3E97 0021;	
    // (㺗) CJK UNIFIED IDEOGRAPH-3E97	[FB80 BE97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_055)
{
    // 3E97 003F;	
    // (㺗) CJK UNIFIED IDEOGRAPH-3E97	[FB80 BE97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_056)
{
    // 3E97 0061;	
    // (㺗) CJK UNIFIED IDEOGRAPH-3E97	[FB80 BE97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_057)
{
    // 3E97 0041;	
    // (㺗) CJK UNIFIED IDEOGRAPH-3E97	[FB80 BE97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_058)
{
    // 3E97 0062;	
    // (㺗) CJK UNIFIED IDEOGRAPH-3E97	[FB80 BE97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_059)
{
    // 3E98 0021;	
    // (㺘) CJK UNIFIED IDEOGRAPH-3E98	[FB80 BE98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_060)
{
    // 3E98 003F;	
    // (㺘) CJK UNIFIED IDEOGRAPH-3E98	[FB80 BE98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_061)
{
    // 3E98 0061;	
    // (㺘) CJK UNIFIED IDEOGRAPH-3E98	[FB80 BE98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_062)
{
    // 3E98 0041;	
    // (㺘) CJK UNIFIED IDEOGRAPH-3E98	[FB80 BE98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_063)
{
    // 3E98 0062;	
    // (㺘) CJK UNIFIED IDEOGRAPH-3E98	[FB80 BE98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_064)
{
    // 3E99 0021;	
    // (㺙) CJK UNIFIED IDEOGRAPH-3E99	[FB80 BE99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_065)
{
    // 3E99 003F;	
    // (㺙) CJK UNIFIED IDEOGRAPH-3E99	[FB80 BE99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_066)
{
    // 3E99 0061;	
    // (㺙) CJK UNIFIED IDEOGRAPH-3E99	[FB80 BE99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_067)
{
    // 3E99 0041;	
    // (㺙) CJK UNIFIED IDEOGRAPH-3E99	[FB80 BE99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_068)
{
    // 3E99 0062;	
    // (㺙) CJK UNIFIED IDEOGRAPH-3E99	[FB80 BE99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_069)
{
    // 3E9A 0021;	
    // (㺚) CJK UNIFIED IDEOGRAPH-3E9A	[FB80 BE9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_070)
{
    // 3E9A 003F;	
    // (㺚) CJK UNIFIED IDEOGRAPH-3E9A	[FB80 BE9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_071)
{
    // 3E9A 0061;	
    // (㺚) CJK UNIFIED IDEOGRAPH-3E9A	[FB80 BE9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_072)
{
    // 3E9A 0041;	
    // (㺚) CJK UNIFIED IDEOGRAPH-3E9A	[FB80 BE9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_073)
{
    // 3E9A 0062;	
    // (㺚) CJK UNIFIED IDEOGRAPH-3E9A	[FB80 BE9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_074)
{
    // 3E9B 0021;	
    // (㺛) CJK UNIFIED IDEOGRAPH-3E9B	[FB80 BE9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_075)
{
    // 3E9B 003F;	
    // (㺛) CJK UNIFIED IDEOGRAPH-3E9B	[FB80 BE9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_076)
{
    // 3E9B 0061;	
    // (㺛) CJK UNIFIED IDEOGRAPH-3E9B	[FB80 BE9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_077)
{
    // 3E9B 0041;	
    // (㺛) CJK UNIFIED IDEOGRAPH-3E9B	[FB80 BE9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_078)
{
    // 3E9B 0062;	
    // (㺛) CJK UNIFIED IDEOGRAPH-3E9B	[FB80 BE9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_079)
{
    // 3E9C 0021;	
    // (㺜) CJK UNIFIED IDEOGRAPH-3E9C	[FB80 BE9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_080)
{
    // 3E9C 003F;	
    // (㺜) CJK UNIFIED IDEOGRAPH-3E9C	[FB80 BE9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_081)
{
    // 3E9C 0061;	
    // (㺜) CJK UNIFIED IDEOGRAPH-3E9C	[FB80 BE9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_082)
{
    // 3E9C 0041;	
    // (㺜) CJK UNIFIED IDEOGRAPH-3E9C	[FB80 BE9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_083)
{
    // 3E9C 0062;	
    // (㺜) CJK UNIFIED IDEOGRAPH-3E9C	[FB80 BE9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_084)
{
    // 3E9D 0021;	
    // (㺝) CJK UNIFIED IDEOGRAPH-3E9D	[FB80 BE9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_085)
{
    // 3E9D 003F;	
    // (㺝) CJK UNIFIED IDEOGRAPH-3E9D	[FB80 BE9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_086)
{
    // 3E9D 0061;	
    // (㺝) CJK UNIFIED IDEOGRAPH-3E9D	[FB80 BE9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_087)
{
    // 3E9D 0041;	
    // (㺝) CJK UNIFIED IDEOGRAPH-3E9D	[FB80 BE9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_088)
{
    // 3E9D 0062;	
    // (㺝) CJK UNIFIED IDEOGRAPH-3E9D	[FB80 BE9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_089)
{
    // 3E9E 0021;	
    // (㺞) CJK UNIFIED IDEOGRAPH-3E9E	[FB80 BE9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_090)
{
    // 3E9E 003F;	
    // (㺞) CJK UNIFIED IDEOGRAPH-3E9E	[FB80 BE9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_091)
{
    // 3E9E 0061;	
    // (㺞) CJK UNIFIED IDEOGRAPH-3E9E	[FB80 BE9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_092)
{
    // 3E9E 0041;	
    // (㺞) CJK UNIFIED IDEOGRAPH-3E9E	[FB80 BE9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_093)
{
    // 3E9E 0062;	
    // (㺞) CJK UNIFIED IDEOGRAPH-3E9E	[FB80 BE9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_094)
{
    // 3E9F 0021;	
    // (㺟) CJK UNIFIED IDEOGRAPH-3E9F	[FB80 BE9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_095)
{
    // 3E9F 003F;	
    // (㺟) CJK UNIFIED IDEOGRAPH-3E9F	[FB80 BE9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_096)
{
    // 3E9F 0061;	
    // (㺟) CJK UNIFIED IDEOGRAPH-3E9F	[FB80 BE9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_097)
{
    // 3E9F 0041;	
    // (㺟) CJK UNIFIED IDEOGRAPH-3E9F	[FB80 BE9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_098)
{
    // 3E9F 0062;	
    // (㺟) CJK UNIFIED IDEOGRAPH-3E9F	[FB80 BE9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_099)
{
    // 3EA0 0021;	
    // (㺠) CJK UNIFIED IDEOGRAPH-3EA0	[FB80 BEA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_100)
{
    // 3EA0 003F;	
    // (㺠) CJK UNIFIED IDEOGRAPH-3EA0	[FB80 BEA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_101)
{
    // 3EA0 0061;	
    // (㺠) CJK UNIFIED IDEOGRAPH-3EA0	[FB80 BEA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_102)
{
    // 3EA0 0041;	
    // (㺠) CJK UNIFIED IDEOGRAPH-3EA0	[FB80 BEA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_103)
{
    // 3EA0 0062;	
    // (㺠) CJK UNIFIED IDEOGRAPH-3EA0	[FB80 BEA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_104)
{
    // 3EA1 0021;	
    // (㺡) CJK UNIFIED IDEOGRAPH-3EA1	[FB80 BEA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_105)
{
    // 3EA1 003F;	
    // (㺡) CJK UNIFIED IDEOGRAPH-3EA1	[FB80 BEA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_106)
{
    // 3EA1 0061;	
    // (㺡) CJK UNIFIED IDEOGRAPH-3EA1	[FB80 BEA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_107)
{
    // 3EA1 0041;	
    // (㺡) CJK UNIFIED IDEOGRAPH-3EA1	[FB80 BEA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_108)
{
    // 3EA1 0062;	
    // (㺡) CJK UNIFIED IDEOGRAPH-3EA1	[FB80 BEA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_109)
{
    // 3EA2 0021;	
    // (㺢) CJK UNIFIED IDEOGRAPH-3EA2	[FB80 BEA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_110)
{
    // 3EA2 003F;	
    // (㺢) CJK UNIFIED IDEOGRAPH-3EA2	[FB80 BEA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_111)
{
    // 3EA2 0061;	
    // (㺢) CJK UNIFIED IDEOGRAPH-3EA2	[FB80 BEA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_112)
{
    // 3EA2 0041;	
    // (㺢) CJK UNIFIED IDEOGRAPH-3EA2	[FB80 BEA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_113)
{
    // 3EA2 0062;	
    // (㺢) CJK UNIFIED IDEOGRAPH-3EA2	[FB80 BEA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_114)
{
    // 3EA3 0021;	
    // (㺣) CJK UNIFIED IDEOGRAPH-3EA3	[FB80 BEA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_115)
{
    // 3EA3 003F;	
    // (㺣) CJK UNIFIED IDEOGRAPH-3EA3	[FB80 BEA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_116)
{
    // 3EA3 0061;	
    // (㺣) CJK UNIFIED IDEOGRAPH-3EA3	[FB80 BEA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_117)
{
    // 3EA3 0041;	
    // (㺣) CJK UNIFIED IDEOGRAPH-3EA3	[FB80 BEA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_118)
{
    // 3EA3 0062;	
    // (㺣) CJK UNIFIED IDEOGRAPH-3EA3	[FB80 BEA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_119)
{
    // 3EA4 0021;	
    // (㺤) CJK UNIFIED IDEOGRAPH-3EA4	[FB80 BEA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_120)
{
    // 3EA4 003F;	
    // (㺤) CJK UNIFIED IDEOGRAPH-3EA4	[FB80 BEA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_121)
{
    // 3EA4 0061;	
    // (㺤) CJK UNIFIED IDEOGRAPH-3EA4	[FB80 BEA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_122)
{
    // 3EA4 0041;	
    // (㺤) CJK UNIFIED IDEOGRAPH-3EA4	[FB80 BEA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_123)
{
    // 3EA4 0062;	
    // (㺤) CJK UNIFIED IDEOGRAPH-3EA4	[FB80 BEA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_124)
{
    // 3EA5 0021;	
    // (㺥) CJK UNIFIED IDEOGRAPH-3EA5	[FB80 BEA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_125)
{
    // 3EA5 003F;	
    // (㺥) CJK UNIFIED IDEOGRAPH-3EA5	[FB80 BEA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_126)
{
    // 3EA5 0061;	
    // (㺥) CJK UNIFIED IDEOGRAPH-3EA5	[FB80 BEA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_127)
{
    // 3EA5 0041;	
    // (㺥) CJK UNIFIED IDEOGRAPH-3EA5	[FB80 BEA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_128)
{
    // 3EA5 0062;	
    // (㺥) CJK UNIFIED IDEOGRAPH-3EA5	[FB80 BEA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_129)
{
    // 3EA6 0021;	
    // (㺦) CJK UNIFIED IDEOGRAPH-3EA6	[FB80 BEA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_130)
{
    // 3EA6 003F;	
    // (㺦) CJK UNIFIED IDEOGRAPH-3EA6	[FB80 BEA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_131)
{
    // 3EA6 0061;	
    // (㺦) CJK UNIFIED IDEOGRAPH-3EA6	[FB80 BEA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_132)
{
    // 3EA6 0041;	
    // (㺦) CJK UNIFIED IDEOGRAPH-3EA6	[FB80 BEA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_133)
{
    // 3EA6 0062;	
    // (㺦) CJK UNIFIED IDEOGRAPH-3EA6	[FB80 BEA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_134)
{
    // 3EA7 0021;	
    // (㺧) CJK UNIFIED IDEOGRAPH-3EA7	[FB80 BEA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_135)
{
    // 3EA7 003F;	
    // (㺧) CJK UNIFIED IDEOGRAPH-3EA7	[FB80 BEA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_136)
{
    // 3EA7 0061;	
    // (㺧) CJK UNIFIED IDEOGRAPH-3EA7	[FB80 BEA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_137)
{
    // 3EA7 0041;	
    // (㺧) CJK UNIFIED IDEOGRAPH-3EA7	[FB80 BEA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_138)
{
    // 3EA7 0062;	
    // (㺧) CJK UNIFIED IDEOGRAPH-3EA7	[FB80 BEA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_139)
{
    // 3EA8 0021;	
    // (㺨) CJK UNIFIED IDEOGRAPH-3EA8	[FB80 BEA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_140)
{
    // 3EA8 003F;	
    // (㺨) CJK UNIFIED IDEOGRAPH-3EA8	[FB80 BEA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_141)
{
    // 3EA8 0061;	
    // (㺨) CJK UNIFIED IDEOGRAPH-3EA8	[FB80 BEA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_142)
{
    // 3EA8 0041;	
    // (㺨) CJK UNIFIED IDEOGRAPH-3EA8	[FB80 BEA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_143)
{
    // 3EA8 0062;	
    // (㺨) CJK UNIFIED IDEOGRAPH-3EA8	[FB80 BEA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_144)
{
    // 3EA9 0021;	
    // (㺩) CJK UNIFIED IDEOGRAPH-3EA9	[FB80 BEA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_145)
{
    // 3EA9 003F;	
    // (㺩) CJK UNIFIED IDEOGRAPH-3EA9	[FB80 BEA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_146)
{
    // 3EA9 0061;	
    // (㺩) CJK UNIFIED IDEOGRAPH-3EA9	[FB80 BEA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_147)
{
    // 3EA9 0041;	
    // (㺩) CJK UNIFIED IDEOGRAPH-3EA9	[FB80 BEA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_148)
{
    // 3EA9 0062;	
    // (㺩) CJK UNIFIED IDEOGRAPH-3EA9	[FB80 BEA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_149)
{
    // 3EAA 0021;	
    // (㺪) CJK UNIFIED IDEOGRAPH-3EAA	[FB80 BEAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_150)
{
    // 3EAA 003F;	
    // (㺪) CJK UNIFIED IDEOGRAPH-3EAA	[FB80 BEAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_151)
{
    // 3EAA 0061;	
    // (㺪) CJK UNIFIED IDEOGRAPH-3EAA	[FB80 BEAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_152)
{
    // 3EAA 0041;	
    // (㺪) CJK UNIFIED IDEOGRAPH-3EAA	[FB80 BEAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_153)
{
    // 3EAA 0062;	
    // (㺪) CJK UNIFIED IDEOGRAPH-3EAA	[FB80 BEAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_154)
{
    // 3EAB 0021;	
    // (㺫) CJK UNIFIED IDEOGRAPH-3EAB	[FB80 BEAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_155)
{
    // 3EAB 003F;	
    // (㺫) CJK UNIFIED IDEOGRAPH-3EAB	[FB80 BEAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_156)
{
    // 3EAB 0061;	
    // (㺫) CJK UNIFIED IDEOGRAPH-3EAB	[FB80 BEAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_157)
{
    // 3EAB 0041;	
    // (㺫) CJK UNIFIED IDEOGRAPH-3EAB	[FB80 BEAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_158)
{
    // 3EAB 0062;	
    // (㺫) CJK UNIFIED IDEOGRAPH-3EAB	[FB80 BEAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_159)
{
    // 3EAC 0021;	
    // (㺬) CJK UNIFIED IDEOGRAPH-3EAC	[FB80 BEAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_160)
{
    // 2F92A 0021;	
    // (㺬) CJK COMPATIBILITY IDEOGRAPH-2F92A	[FB80 BEAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_161)
{
    // 3EAC 003F;	
    // (㺬) CJK UNIFIED IDEOGRAPH-3EAC	[FB80 BEAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_162)
{
    // 2F92A 003F;	
    // (㺬) CJK COMPATIBILITY IDEOGRAPH-2F92A	[FB80 BEAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_163)
{
    // 3EAC 0061;	
    // (㺬) CJK UNIFIED IDEOGRAPH-3EAC	[FB80 BEAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_164)
{
    // 2F92A 0061;	
    // (㺬) CJK COMPATIBILITY IDEOGRAPH-2F92A	[FB80 BEAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_165)
{
    // 3EAC 0041;	
    // (㺬) CJK UNIFIED IDEOGRAPH-3EAC	[FB80 BEAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_166)
{
    // 2F92A 0041;	
    // (㺬) CJK COMPATIBILITY IDEOGRAPH-2F92A	[FB80 BEAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_167)
{
    // 3EAC 0062;	
    // (㺬) CJK UNIFIED IDEOGRAPH-3EAC	[FB80 BEAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_168)
{
    // 2F92A 0062;	
    // (㺬) CJK COMPATIBILITY IDEOGRAPH-2F92A	[FB80 BEAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_169)
{
    // 3EAD 0021;	
    // (㺭) CJK UNIFIED IDEOGRAPH-3EAD	[FB80 BEAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_170)
{
    // 3EAD 003F;	
    // (㺭) CJK UNIFIED IDEOGRAPH-3EAD	[FB80 BEAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_171)
{
    // 3EAD 0061;	
    // (㺭) CJK UNIFIED IDEOGRAPH-3EAD	[FB80 BEAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_172)
{
    // 3EAD 0041;	
    // (㺭) CJK UNIFIED IDEOGRAPH-3EAD	[FB80 BEAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_173)
{
    // 3EAD 0062;	
    // (㺭) CJK UNIFIED IDEOGRAPH-3EAD	[FB80 BEAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_174)
{
    // 3EAE 0021;	
    // (㺮) CJK UNIFIED IDEOGRAPH-3EAE	[FB80 BEAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_175)
{
    // 3EAE 003F;	
    // (㺮) CJK UNIFIED IDEOGRAPH-3EAE	[FB80 BEAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_176)
{
    // 3EAE 0061;	
    // (㺮) CJK UNIFIED IDEOGRAPH-3EAE	[FB80 BEAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_177)
{
    // 3EAE 0041;	
    // (㺮) CJK UNIFIED IDEOGRAPH-3EAE	[FB80 BEAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_178)
{
    // 3EAE 0062;	
    // (㺮) CJK UNIFIED IDEOGRAPH-3EAE	[FB80 BEAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_179)
{
    // 3EAF 0021;	
    // (㺯) CJK UNIFIED IDEOGRAPH-3EAF	[FB80 BEAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_180)
{
    // 3EAF 003F;	
    // (㺯) CJK UNIFIED IDEOGRAPH-3EAF	[FB80 BEAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_181)
{
    // 3EAF 0061;	
    // (㺯) CJK UNIFIED IDEOGRAPH-3EAF	[FB80 BEAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_182)
{
    // 3EAF 0041;	
    // (㺯) CJK UNIFIED IDEOGRAPH-3EAF	[FB80 BEAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_183)
{
    // 3EAF 0062;	
    // (㺯) CJK UNIFIED IDEOGRAPH-3EAF	[FB80 BEAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_184)
{
    // 3EB0 0021;	
    // (㺰) CJK UNIFIED IDEOGRAPH-3EB0	[FB80 BEB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_185)
{
    // 3EB0 003F;	
    // (㺰) CJK UNIFIED IDEOGRAPH-3EB0	[FB80 BEB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_186)
{
    // 3EB0 0061;	
    // (㺰) CJK UNIFIED IDEOGRAPH-3EB0	[FB80 BEB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_187)
{
    // 3EB0 0041;	
    // (㺰) CJK UNIFIED IDEOGRAPH-3EB0	[FB80 BEB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_188)
{
    // 3EB0 0062;	
    // (㺰) CJK UNIFIED IDEOGRAPH-3EB0	[FB80 BEB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_189)
{
    // 3EB1 0021;	
    // (㺱) CJK UNIFIED IDEOGRAPH-3EB1	[FB80 BEB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_190)
{
    // 3EB1 003F;	
    // (㺱) CJK UNIFIED IDEOGRAPH-3EB1	[FB80 BEB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_191)
{
    // 3EB1 0061;	
    // (㺱) CJK UNIFIED IDEOGRAPH-3EB1	[FB80 BEB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_192)
{
    // 3EB1 0041;	
    // (㺱) CJK UNIFIED IDEOGRAPH-3EB1	[FB80 BEB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_193)
{
    // 3EB1 0062;	
    // (㺱) CJK UNIFIED IDEOGRAPH-3EB1	[FB80 BEB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_194)
{
    // 3EB2 0021;	
    // (㺲) CJK UNIFIED IDEOGRAPH-3EB2	[FB80 BEB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_195)
{
    // 3EB2 003F;	
    // (㺲) CJK UNIFIED IDEOGRAPH-3EB2	[FB80 BEB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_196)
{
    // 3EB2 0061;	
    // (㺲) CJK UNIFIED IDEOGRAPH-3EB2	[FB80 BEB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_197)
{
    // 3EB2 0041;	
    // (㺲) CJK UNIFIED IDEOGRAPH-3EB2	[FB80 BEB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_198)
{
    // 3EB2 0062;	
    // (㺲) CJK UNIFIED IDEOGRAPH-3EB2	[FB80 BEB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_199)
{
    // 3EB3 0021;	
    // (㺳) CJK UNIFIED IDEOGRAPH-3EB3	[FB80 BEB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_200)
{
    // 3EB3 003F;	
    // (㺳) CJK UNIFIED IDEOGRAPH-3EB3	[FB80 BEB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_201)
{
    // 3EB3 0061;	
    // (㺳) CJK UNIFIED IDEOGRAPH-3EB3	[FB80 BEB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_202)
{
    // 3EB3 0041;	
    // (㺳) CJK UNIFIED IDEOGRAPH-3EB3	[FB80 BEB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_203)
{
    // 3EB3 0062;	
    // (㺳) CJK UNIFIED IDEOGRAPH-3EB3	[FB80 BEB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_204)
{
    // 3EB4 0021;	
    // (㺴) CJK UNIFIED IDEOGRAPH-3EB4	[FB80 BEB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_205)
{
    // 3EB4 003F;	
    // (㺴) CJK UNIFIED IDEOGRAPH-3EB4	[FB80 BEB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_206)
{
    // 3EB4 0061;	
    // (㺴) CJK UNIFIED IDEOGRAPH-3EB4	[FB80 BEB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_207)
{
    // 3EB4 0041;	
    // (㺴) CJK UNIFIED IDEOGRAPH-3EB4	[FB80 BEB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_208)
{
    // 3EB4 0062;	
    // (㺴) CJK UNIFIED IDEOGRAPH-3EB4	[FB80 BEB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_209)
{
    // 3EB5 0021;	
    // (㺵) CJK UNIFIED IDEOGRAPH-3EB5	[FB80 BEB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_210)
{
    // 3EB5 003F;	
    // (㺵) CJK UNIFIED IDEOGRAPH-3EB5	[FB80 BEB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_211)
{
    // 3EB5 0061;	
    // (㺵) CJK UNIFIED IDEOGRAPH-3EB5	[FB80 BEB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_212)
{
    // 3EB5 0041;	
    // (㺵) CJK UNIFIED IDEOGRAPH-3EB5	[FB80 BEB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_213)
{
    // 3EB5 0062;	
    // (㺵) CJK UNIFIED IDEOGRAPH-3EB5	[FB80 BEB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_214)
{
    // 3EB6 0021;	
    // (㺶) CJK UNIFIED IDEOGRAPH-3EB6	[FB80 BEB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_215)
{
    // 3EB6 003F;	
    // (㺶) CJK UNIFIED IDEOGRAPH-3EB6	[FB80 BEB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_216)
{
    // 3EB6 0061;	
    // (㺶) CJK UNIFIED IDEOGRAPH-3EB6	[FB80 BEB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_217)
{
    // 3EB6 0041;	
    // (㺶) CJK UNIFIED IDEOGRAPH-3EB6	[FB80 BEB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_218)
{
    // 3EB6 0062;	
    // (㺶) CJK UNIFIED IDEOGRAPH-3EB6	[FB80 BEB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_219)
{
    // 3EB7 0021;	
    // (㺷) CJK UNIFIED IDEOGRAPH-3EB7	[FB80 BEB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_220)
{
    // 3EB7 003F;	
    // (㺷) CJK UNIFIED IDEOGRAPH-3EB7	[FB80 BEB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_221)
{
    // 3EB7 0061;	
    // (㺷) CJK UNIFIED IDEOGRAPH-3EB7	[FB80 BEB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_222)
{
    // 3EB7 0041;	
    // (㺷) CJK UNIFIED IDEOGRAPH-3EB7	[FB80 BEB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_223)
{
    // 3EB7 0062;	
    // (㺷) CJK UNIFIED IDEOGRAPH-3EB7	[FB80 BEB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_224)
{
    // 3EB8 0021;	
    // (㺸) CJK UNIFIED IDEOGRAPH-3EB8	[FB80 BEB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_225)
{
    // 2F92C 0021;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92C	[FB80 BEB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_226)
{
    // 2F92D 0021;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92D	[FB80 BEB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_227)
{
    // 3EB8 003F;	
    // (㺸) CJK UNIFIED IDEOGRAPH-3EB8	[FB80 BEB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_228)
{
    // 2F92C 003F;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92C	[FB80 BEB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_229)
{
    // 2F92D 003F;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92D	[FB80 BEB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_230)
{
    // 3EB8 0061;	
    // (㺸) CJK UNIFIED IDEOGRAPH-3EB8	[FB80 BEB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_231)
{
    // 2F92C 0061;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92C	[FB80 BEB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_232)
{
    // 2F92D 0061;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92D	[FB80 BEB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_233)
{
    // 3EB8 0041;	
    // (㺸) CJK UNIFIED IDEOGRAPH-3EB8	[FB80 BEB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_234)
{
    // 2F92C 0041;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92C	[FB80 BEB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_235)
{
    // 2F92D 0041;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92D	[FB80 BEB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_236)
{
    // 3EB8 0062;	
    // (㺸) CJK UNIFIED IDEOGRAPH-3EB8	[FB80 BEB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_237)
{
    // 2F92C 0062;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92C	[FB80 BEB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_238)
{
    // 2F92D 0062;	
    // (㺸) CJK COMPATIBILITY IDEOGRAPH-2F92D	[FB80 BEB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_239)
{
    // 3EB9 0021;	
    // (㺹) CJK UNIFIED IDEOGRAPH-3EB9	[FB80 BEB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_240)
{
    // 3EB9 003F;	
    // (㺹) CJK UNIFIED IDEOGRAPH-3EB9	[FB80 BEB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_241)
{
    // 3EB9 0061;	
    // (㺹) CJK UNIFIED IDEOGRAPH-3EB9	[FB80 BEB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_242)
{
    // 3EB9 0041;	
    // (㺹) CJK UNIFIED IDEOGRAPH-3EB9	[FB80 BEB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_243)
{
    // 3EB9 0062;	
    // (㺹) CJK UNIFIED IDEOGRAPH-3EB9	[FB80 BEB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_244)
{
    // 3EBA 0021;	
    // (㺺) CJK UNIFIED IDEOGRAPH-3EBA	[FB80 BEBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_245)
{
    // 3EBA 003F;	
    // (㺺) CJK UNIFIED IDEOGRAPH-3EBA	[FB80 BEBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_246)
{
    // 3EBA 0061;	
    // (㺺) CJK UNIFIED IDEOGRAPH-3EBA	[FB80 BEBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_247)
{
    // 3EBA 0041;	
    // (㺺) CJK UNIFIED IDEOGRAPH-3EBA	[FB80 BEBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_248)
{
    // 3EBA 0062;	
    // (㺺) CJK UNIFIED IDEOGRAPH-3EBA	[FB80 BEBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_249)
{
    // 3EBB 0021;	
    // (㺻) CJK UNIFIED IDEOGRAPH-3EBB	[FB80 BEBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_250)
{
    // 3EBB 003F;	
    // (㺻) CJK UNIFIED IDEOGRAPH-3EBB	[FB80 BEBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_251)
{
    // 3EBB 0061;	
    // (㺻) CJK UNIFIED IDEOGRAPH-3EBB	[FB80 BEBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_252)
{
    // 3EBB 0041;	
    // (㺻) CJK UNIFIED IDEOGRAPH-3EBB	[FB80 BEBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_253)
{
    // 3EBB 0062;	
    // (㺻) CJK UNIFIED IDEOGRAPH-3EBB	[FB80 BEBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_254)
{
    // 3EBC 0021;	
    // (㺼) CJK UNIFIED IDEOGRAPH-3EBC	[FB80 BEBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_255)
{
    // 3EBC 003F;	
    // (㺼) CJK UNIFIED IDEOGRAPH-3EBC	[FB80 BEBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_256)
{
    // 3EBC 0061;	
    // (㺼) CJK UNIFIED IDEOGRAPH-3EBC	[FB80 BEBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_257)
{
    // 3EBC 0041;	
    // (㺼) CJK UNIFIED IDEOGRAPH-3EBC	[FB80 BEBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_258)
{
    // 3EBC 0062;	
    // (㺼) CJK UNIFIED IDEOGRAPH-3EBC	[FB80 BEBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_259)
{
    // 3EBD 0021;	
    // (㺽) CJK UNIFIED IDEOGRAPH-3EBD	[FB80 BEBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_260)
{
    // 3EBD 003F;	
    // (㺽) CJK UNIFIED IDEOGRAPH-3EBD	[FB80 BEBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_261)
{
    // 3EBD 0061;	
    // (㺽) CJK UNIFIED IDEOGRAPH-3EBD	[FB80 BEBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_262)
{
    // 3EBD 0041;	
    // (㺽) CJK UNIFIED IDEOGRAPH-3EBD	[FB80 BEBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_263)
{
    // 3EBD 0062;	
    // (㺽) CJK UNIFIED IDEOGRAPH-3EBD	[FB80 BEBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_264)
{
    // 3EBE 0021;	
    // (㺾) CJK UNIFIED IDEOGRAPH-3EBE	[FB80 BEBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_265)
{
    // 3EBE 003F;	
    // (㺾) CJK UNIFIED IDEOGRAPH-3EBE	[FB80 BEBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_266)
{
    // 3EBE 0061;	
    // (㺾) CJK UNIFIED IDEOGRAPH-3EBE	[FB80 BEBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_267)
{
    // 3EBE 0041;	
    // (㺾) CJK UNIFIED IDEOGRAPH-3EBE	[FB80 BEBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_268)
{
    // 3EBE 0062;	
    // (㺾) CJK UNIFIED IDEOGRAPH-3EBE	[FB80 BEBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_269)
{
    // 3EBF 0021;	
    // (㺿) CJK UNIFIED IDEOGRAPH-3EBF	[FB80 BEBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_270)
{
    // 3EBF 003F;	
    // (㺿) CJK UNIFIED IDEOGRAPH-3EBF	[FB80 BEBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_271)
{
    // 3EBF 0061;	
    // (㺿) CJK UNIFIED IDEOGRAPH-3EBF	[FB80 BEBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_272)
{
    // 3EBF 0041;	
    // (㺿) CJK UNIFIED IDEOGRAPH-3EBF	[FB80 BEBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_273)
{
    // 3EBF 0062;	
    // (㺿) CJK UNIFIED IDEOGRAPH-3EBF	[FB80 BEBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_274)
{
    // 3EC0 0021;	
    // (㻀) CJK UNIFIED IDEOGRAPH-3EC0	[FB80 BEC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_275)
{
    // 3EC0 003F;	
    // (㻀) CJK UNIFIED IDEOGRAPH-3EC0	[FB80 BEC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_276)
{
    // 3EC0 0061;	
    // (㻀) CJK UNIFIED IDEOGRAPH-3EC0	[FB80 BEC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_277)
{
    // 3EC0 0041;	
    // (㻀) CJK UNIFIED IDEOGRAPH-3EC0	[FB80 BEC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_278)
{
    // 3EC0 0062;	
    // (㻀) CJK UNIFIED IDEOGRAPH-3EC0	[FB80 BEC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_279)
{
    // 3EC1 0021;	
    // (㻁) CJK UNIFIED IDEOGRAPH-3EC1	[FB80 BEC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_280)
{
    // 3EC1 003F;	
    // (㻁) CJK UNIFIED IDEOGRAPH-3EC1	[FB80 BEC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_281)
{
    // 3EC1 0061;	
    // (㻁) CJK UNIFIED IDEOGRAPH-3EC1	[FB80 BEC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_282)
{
    // 3EC1 0041;	
    // (㻁) CJK UNIFIED IDEOGRAPH-3EC1	[FB80 BEC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_283)
{
    // 3EC1 0062;	
    // (㻁) CJK UNIFIED IDEOGRAPH-3EC1	[FB80 BEC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_284)
{
    // 3EC2 0021;	
    // (㻂) CJK UNIFIED IDEOGRAPH-3EC2	[FB80 BEC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_285)
{
    // 3EC2 003F;	
    // (㻂) CJK UNIFIED IDEOGRAPH-3EC2	[FB80 BEC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_286)
{
    // 3EC2 0061;	
    // (㻂) CJK UNIFIED IDEOGRAPH-3EC2	[FB80 BEC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_287)
{
    // 3EC2 0041;	
    // (㻂) CJK UNIFIED IDEOGRAPH-3EC2	[FB80 BEC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_288)
{
    // 3EC2 0062;	
    // (㻂) CJK UNIFIED IDEOGRAPH-3EC2	[FB80 BEC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_289)
{
    // 3EC3 0021;	
    // (㻃) CJK UNIFIED IDEOGRAPH-3EC3	[FB80 BEC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_290)
{
    // 3EC3 003F;	
    // (㻃) CJK UNIFIED IDEOGRAPH-3EC3	[FB80 BEC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_291)
{
    // 3EC3 0061;	
    // (㻃) CJK UNIFIED IDEOGRAPH-3EC3	[FB80 BEC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_292)
{
    // 3EC3 0041;	
    // (㻃) CJK UNIFIED IDEOGRAPH-3EC3	[FB80 BEC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_293)
{
    // 3EC3 0062;	
    // (㻃) CJK UNIFIED IDEOGRAPH-3EC3	[FB80 BEC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_294)
{
    // 3EC4 0021;	
    // (㻄) CJK UNIFIED IDEOGRAPH-3EC4	[FB80 BEC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_295)
{
    // 3EC4 003F;	
    // (㻄) CJK UNIFIED IDEOGRAPH-3EC4	[FB80 BEC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_296)
{
    // 3EC4 0061;	
    // (㻄) CJK UNIFIED IDEOGRAPH-3EC4	[FB80 BEC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_297)
{
    // 3EC4 0041;	
    // (㻄) CJK UNIFIED IDEOGRAPH-3EC4	[FB80 BEC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_298)
{
    // 3EC4 0062;	
    // (㻄) CJK UNIFIED IDEOGRAPH-3EC4	[FB80 BEC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_299)
{
    // 3EC5 0021;	
    // (㻅) CJK UNIFIED IDEOGRAPH-3EC5	[FB80 BEC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_300)
{
    // 3EC5 003F;	
    // (㻅) CJK UNIFIED IDEOGRAPH-3EC5	[FB80 BEC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_301)
{
    // 3EC5 0061;	
    // (㻅) CJK UNIFIED IDEOGRAPH-3EC5	[FB80 BEC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_302)
{
    // 3EC5 0041;	
    // (㻅) CJK UNIFIED IDEOGRAPH-3EC5	[FB80 BEC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_303)
{
    // 3EC5 0062;	
    // (㻅) CJK UNIFIED IDEOGRAPH-3EC5	[FB80 BEC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_304)
{
    // 3EC6 0021;	
    // (㻆) CJK UNIFIED IDEOGRAPH-3EC6	[FB80 BEC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_305)
{
    // 3EC6 003F;	
    // (㻆) CJK UNIFIED IDEOGRAPH-3EC6	[FB80 BEC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_306)
{
    // 3EC6 0061;	
    // (㻆) CJK UNIFIED IDEOGRAPH-3EC6	[FB80 BEC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_307)
{
    // 3EC6 0041;	
    // (㻆) CJK UNIFIED IDEOGRAPH-3EC6	[FB80 BEC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_308)
{
    // 3EC6 0062;	
    // (㻆) CJK UNIFIED IDEOGRAPH-3EC6	[FB80 BEC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_309)
{
    // 3EC7 0021;	
    // (㻇) CJK UNIFIED IDEOGRAPH-3EC7	[FB80 BEC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_310)
{
    // 3EC7 003F;	
    // (㻇) CJK UNIFIED IDEOGRAPH-3EC7	[FB80 BEC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_311)
{
    // 3EC7 0061;	
    // (㻇) CJK UNIFIED IDEOGRAPH-3EC7	[FB80 BEC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_312)
{
    // 3EC7 0041;	
    // (㻇) CJK UNIFIED IDEOGRAPH-3EC7	[FB80 BEC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_313)
{
    // 3EC7 0062;	
    // (㻇) CJK UNIFIED IDEOGRAPH-3EC7	[FB80 BEC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_314)
{
    // 3EC8 0021;	
    // (㻈) CJK UNIFIED IDEOGRAPH-3EC8	[FB80 BEC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_315)
{
    // 3EC8 003F;	
    // (㻈) CJK UNIFIED IDEOGRAPH-3EC8	[FB80 BEC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_316)
{
    // 3EC8 0061;	
    // (㻈) CJK UNIFIED IDEOGRAPH-3EC8	[FB80 BEC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_317)
{
    // 3EC8 0041;	
    // (㻈) CJK UNIFIED IDEOGRAPH-3EC8	[FB80 BEC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_318)
{
    // 3EC8 0062;	
    // (㻈) CJK UNIFIED IDEOGRAPH-3EC8	[FB80 BEC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_319)
{
    // 3EC9 0021;	
    // (㻉) CJK UNIFIED IDEOGRAPH-3EC9	[FB80 BEC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_320)
{
    // 3EC9 003F;	
    // (㻉) CJK UNIFIED IDEOGRAPH-3EC9	[FB80 BEC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_321)
{
    // 3EC9 0061;	
    // (㻉) CJK UNIFIED IDEOGRAPH-3EC9	[FB80 BEC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_322)
{
    // 3EC9 0041;	
    // (㻉) CJK UNIFIED IDEOGRAPH-3EC9	[FB80 BEC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_323)
{
    // 3EC9 0062;	
    // (㻉) CJK UNIFIED IDEOGRAPH-3EC9	[FB80 BEC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_324)
{
    // 3ECA 0021;	
    // (㻊) CJK UNIFIED IDEOGRAPH-3ECA	[FB80 BECA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_325)
{
    // 3ECA 003F;	
    // (㻊) CJK UNIFIED IDEOGRAPH-3ECA	[FB80 BECA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_326)
{
    // 3ECA 0061;	
    // (㻊) CJK UNIFIED IDEOGRAPH-3ECA	[FB80 BECA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_327)
{
    // 3ECA 0041;	
    // (㻊) CJK UNIFIED IDEOGRAPH-3ECA	[FB80 BECA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_328)
{
    // 3ECA 0062;	
    // (㻊) CJK UNIFIED IDEOGRAPH-3ECA	[FB80 BECA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_329)
{
    // 3ECB 0021;	
    // (㻋) CJK UNIFIED IDEOGRAPH-3ECB	[FB80 BECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_330)
{
    // 3ECB 003F;	
    // (㻋) CJK UNIFIED IDEOGRAPH-3ECB	[FB80 BECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_331)
{
    // 3ECB 0061;	
    // (㻋) CJK UNIFIED IDEOGRAPH-3ECB	[FB80 BECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_332)
{
    // 3ECB 0041;	
    // (㻋) CJK UNIFIED IDEOGRAPH-3ECB	[FB80 BECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_333)
{
    // 3ECB 0062;	
    // (㻋) CJK UNIFIED IDEOGRAPH-3ECB	[FB80 BECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_334)
{
    // 3ECC 0021;	
    // (㻌) CJK UNIFIED IDEOGRAPH-3ECC	[FB80 BECC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_335)
{
    // 3ECC 003F;	
    // (㻌) CJK UNIFIED IDEOGRAPH-3ECC	[FB80 BECC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_336)
{
    // 3ECC 0061;	
    // (㻌) CJK UNIFIED IDEOGRAPH-3ECC	[FB80 BECC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_337)
{
    // 3ECC 0041;	
    // (㻌) CJK UNIFIED IDEOGRAPH-3ECC	[FB80 BECC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_338)
{
    // 3ECC 0062;	
    // (㻌) CJK UNIFIED IDEOGRAPH-3ECC	[FB80 BECC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_339)
{
    // 3ECD 0021;	
    // (㻍) CJK UNIFIED IDEOGRAPH-3ECD	[FB80 BECD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_340)
{
    // 3ECD 003F;	
    // (㻍) CJK UNIFIED IDEOGRAPH-3ECD	[FB80 BECD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_341)
{
    // 3ECD 0061;	
    // (㻍) CJK UNIFIED IDEOGRAPH-3ECD	[FB80 BECD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_342)
{
    // 3ECD 0041;	
    // (㻍) CJK UNIFIED IDEOGRAPH-3ECD	[FB80 BECD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_343)
{
    // 3ECD 0062;	
    // (㻍) CJK UNIFIED IDEOGRAPH-3ECD	[FB80 BECD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_344)
{
    // 3ECE 0021;	
    // (㻎) CJK UNIFIED IDEOGRAPH-3ECE	[FB80 BECE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_345)
{
    // 3ECE 003F;	
    // (㻎) CJK UNIFIED IDEOGRAPH-3ECE	[FB80 BECE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_346)
{
    // 3ECE 0061;	
    // (㻎) CJK UNIFIED IDEOGRAPH-3ECE	[FB80 BECE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_347)
{
    // 3ECE 0041;	
    // (㻎) CJK UNIFIED IDEOGRAPH-3ECE	[FB80 BECE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_348)
{
    // 3ECE 0062;	
    // (㻎) CJK UNIFIED IDEOGRAPH-3ECE	[FB80 BECE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_349)
{
    // 3ECF 0021;	
    // (㻏) CJK UNIFIED IDEOGRAPH-3ECF	[FB80 BECF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBECF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_350)
{
    // 3ECF 003F;	
    // (㻏) CJK UNIFIED IDEOGRAPH-3ECF	[FB80 BECF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBECF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_351)
{
    // 3ECF 0061;	
    // (㻏) CJK UNIFIED IDEOGRAPH-3ECF	[FB80 BECF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_352)
{
    // 3ECF 0041;	
    // (㻏) CJK UNIFIED IDEOGRAPH-3ECF	[FB80 BECF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ECF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_353)
{
    // 3ECF 0062;	
    // (㻏) CJK UNIFIED IDEOGRAPH-3ECF	[FB80 BECF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ECF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_354)
{
    // 3ED0 0021;	
    // (㻐) CJK UNIFIED IDEOGRAPH-3ED0	[FB80 BED0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_355)
{
    // 3ED0 003F;	
    // (㻐) CJK UNIFIED IDEOGRAPH-3ED0	[FB80 BED0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_356)
{
    // 3ED0 0061;	
    // (㻐) CJK UNIFIED IDEOGRAPH-3ED0	[FB80 BED0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_357)
{
    // 3ED0 0041;	
    // (㻐) CJK UNIFIED IDEOGRAPH-3ED0	[FB80 BED0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_358)
{
    // 3ED0 0062;	
    // (㻐) CJK UNIFIED IDEOGRAPH-3ED0	[FB80 BED0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_359)
{
    // 3ED1 0021;	
    // (㻑) CJK UNIFIED IDEOGRAPH-3ED1	[FB80 BED1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_360)
{
    // 3ED1 003F;	
    // (㻑) CJK UNIFIED IDEOGRAPH-3ED1	[FB80 BED1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_361)
{
    // 3ED1 0061;	
    // (㻑) CJK UNIFIED IDEOGRAPH-3ED1	[FB80 BED1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_362)
{
    // 3ED1 0041;	
    // (㻑) CJK UNIFIED IDEOGRAPH-3ED1	[FB80 BED1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_363)
{
    // 3ED1 0062;	
    // (㻑) CJK UNIFIED IDEOGRAPH-3ED1	[FB80 BED1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_364)
{
    // 3ED2 0021;	
    // (㻒) CJK UNIFIED IDEOGRAPH-3ED2	[FB80 BED2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_365)
{
    // 3ED2 003F;	
    // (㻒) CJK UNIFIED IDEOGRAPH-3ED2	[FB80 BED2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_366)
{
    // 3ED2 0061;	
    // (㻒) CJK UNIFIED IDEOGRAPH-3ED2	[FB80 BED2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_367)
{
    // 3ED2 0041;	
    // (㻒) CJK UNIFIED IDEOGRAPH-3ED2	[FB80 BED2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_368)
{
    // 3ED2 0062;	
    // (㻒) CJK UNIFIED IDEOGRAPH-3ED2	[FB80 BED2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_369)
{
    // 3ED3 0021;	
    // (㻓) CJK UNIFIED IDEOGRAPH-3ED3	[FB80 BED3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_370)
{
    // 3ED3 003F;	
    // (㻓) CJK UNIFIED IDEOGRAPH-3ED3	[FB80 BED3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_371)
{
    // 3ED3 0061;	
    // (㻓) CJK UNIFIED IDEOGRAPH-3ED3	[FB80 BED3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_372)
{
    // 3ED3 0041;	
    // (㻓) CJK UNIFIED IDEOGRAPH-3ED3	[FB80 BED3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_373)
{
    // 3ED3 0062;	
    // (㻓) CJK UNIFIED IDEOGRAPH-3ED3	[FB80 BED3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_374)
{
    // 3ED4 0021;	
    // (㻔) CJK UNIFIED IDEOGRAPH-3ED4	[FB80 BED4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_375)
{
    // 3ED4 003F;	
    // (㻔) CJK UNIFIED IDEOGRAPH-3ED4	[FB80 BED4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_376)
{
    // 3ED4 0061;	
    // (㻔) CJK UNIFIED IDEOGRAPH-3ED4	[FB80 BED4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_377)
{
    // 3ED4 0041;	
    // (㻔) CJK UNIFIED IDEOGRAPH-3ED4	[FB80 BED4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_378)
{
    // 3ED4 0062;	
    // (㻔) CJK UNIFIED IDEOGRAPH-3ED4	[FB80 BED4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_379)
{
    // 3ED5 0021;	
    // (㻕) CJK UNIFIED IDEOGRAPH-3ED5	[FB80 BED5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_380)
{
    // 3ED5 003F;	
    // (㻕) CJK UNIFIED IDEOGRAPH-3ED5	[FB80 BED5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_381)
{
    // 3ED5 0061;	
    // (㻕) CJK UNIFIED IDEOGRAPH-3ED5	[FB80 BED5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_382)
{
    // 3ED5 0041;	
    // (㻕) CJK UNIFIED IDEOGRAPH-3ED5	[FB80 BED5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_383)
{
    // 3ED5 0062;	
    // (㻕) CJK UNIFIED IDEOGRAPH-3ED5	[FB80 BED5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_384)
{
    // 3ED6 0021;	
    // (㻖) CJK UNIFIED IDEOGRAPH-3ED6	[FB80 BED6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_385)
{
    // 3ED6 003F;	
    // (㻖) CJK UNIFIED IDEOGRAPH-3ED6	[FB80 BED6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_386)
{
    // 3ED6 0061;	
    // (㻖) CJK UNIFIED IDEOGRAPH-3ED6	[FB80 BED6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_387)
{
    // 3ED6 0041;	
    // (㻖) CJK UNIFIED IDEOGRAPH-3ED6	[FB80 BED6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_388)
{
    // 3ED6 0062;	
    // (㻖) CJK UNIFIED IDEOGRAPH-3ED6	[FB80 BED6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_389)
{
    // 3ED7 0021;	
    // (㻗) CJK UNIFIED IDEOGRAPH-3ED7	[FB80 BED7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_390)
{
    // 3ED7 003F;	
    // (㻗) CJK UNIFIED IDEOGRAPH-3ED7	[FB80 BED7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_391)
{
    // 3ED7 0061;	
    // (㻗) CJK UNIFIED IDEOGRAPH-3ED7	[FB80 BED7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_392)
{
    // 3ED7 0041;	
    // (㻗) CJK UNIFIED IDEOGRAPH-3ED7	[FB80 BED7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_393)
{
    // 3ED7 0062;	
    // (㻗) CJK UNIFIED IDEOGRAPH-3ED7	[FB80 BED7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_394)
{
    // 3ED8 0021;	
    // (㻘) CJK UNIFIED IDEOGRAPH-3ED8	[FB80 BED8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_395)
{
    // 3ED8 003F;	
    // (㻘) CJK UNIFIED IDEOGRAPH-3ED8	[FB80 BED8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_396)
{
    // 3ED8 0061;	
    // (㻘) CJK UNIFIED IDEOGRAPH-3ED8	[FB80 BED8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_397)
{
    // 3ED8 0041;	
    // (㻘) CJK UNIFIED IDEOGRAPH-3ED8	[FB80 BED8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_398)
{
    // 3ED8 0062;	
    // (㻘) CJK UNIFIED IDEOGRAPH-3ED8	[FB80 BED8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_399)
{
    // 3ED9 0021;	
    // (㻙) CJK UNIFIED IDEOGRAPH-3ED9	[FB80 BED9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBED9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_400)
{
    // 3ED9 003F;	
    // (㻙) CJK UNIFIED IDEOGRAPH-3ED9	[FB80 BED9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBED9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_401)
{
    // 3ED9 0061;	
    // (㻙) CJK UNIFIED IDEOGRAPH-3ED9	[FB80 BED9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_402)
{
    // 3ED9 0041;	
    // (㻙) CJK UNIFIED IDEOGRAPH-3ED9	[FB80 BED9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ED9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_403)
{
    // 3ED9 0062;	
    // (㻙) CJK UNIFIED IDEOGRAPH-3ED9	[FB80 BED9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ED9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBED9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_404)
{
    // 3EDA 0021;	
    // (㻚) CJK UNIFIED IDEOGRAPH-3EDA	[FB80 BEDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_405)
{
    // 3EDA 003F;	
    // (㻚) CJK UNIFIED IDEOGRAPH-3EDA	[FB80 BEDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_406)
{
    // 3EDA 0061;	
    // (㻚) CJK UNIFIED IDEOGRAPH-3EDA	[FB80 BEDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_407)
{
    // 3EDA 0041;	
    // (㻚) CJK UNIFIED IDEOGRAPH-3EDA	[FB80 BEDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_408)
{
    // 3EDA 0062;	
    // (㻚) CJK UNIFIED IDEOGRAPH-3EDA	[FB80 BEDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_409)
{
    // 3EDB 0021;	
    // (㻛) CJK UNIFIED IDEOGRAPH-3EDB	[FB80 BEDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_410)
{
    // 3EDB 003F;	
    // (㻛) CJK UNIFIED IDEOGRAPH-3EDB	[FB80 BEDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_411)
{
    // 3EDB 0061;	
    // (㻛) CJK UNIFIED IDEOGRAPH-3EDB	[FB80 BEDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_412)
{
    // 3EDB 0041;	
    // (㻛) CJK UNIFIED IDEOGRAPH-3EDB	[FB80 BEDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_413)
{
    // 3EDB 0062;	
    // (㻛) CJK UNIFIED IDEOGRAPH-3EDB	[FB80 BEDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_414)
{
    // 3EDC 0021;	
    // (㻜) CJK UNIFIED IDEOGRAPH-3EDC	[FB80 BEDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_415)
{
    // 3EDC 003F;	
    // (㻜) CJK UNIFIED IDEOGRAPH-3EDC	[FB80 BEDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_416)
{
    // 3EDC 0061;	
    // (㻜) CJK UNIFIED IDEOGRAPH-3EDC	[FB80 BEDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_417)
{
    // 3EDC 0041;	
    // (㻜) CJK UNIFIED IDEOGRAPH-3EDC	[FB80 BEDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_418)
{
    // 3EDC 0062;	
    // (㻜) CJK UNIFIED IDEOGRAPH-3EDC	[FB80 BEDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_419)
{
    // 3EDD 0021;	
    // (㻝) CJK UNIFIED IDEOGRAPH-3EDD	[FB80 BEDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_420)
{
    // 3EDD 003F;	
    // (㻝) CJK UNIFIED IDEOGRAPH-3EDD	[FB80 BEDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_421)
{
    // 3EDD 0061;	
    // (㻝) CJK UNIFIED IDEOGRAPH-3EDD	[FB80 BEDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_422)
{
    // 3EDD 0041;	
    // (㻝) CJK UNIFIED IDEOGRAPH-3EDD	[FB80 BEDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_423)
{
    // 3EDD 0062;	
    // (㻝) CJK UNIFIED IDEOGRAPH-3EDD	[FB80 BEDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_424)
{
    // 3EDE 0021;	
    // (㻞) CJK UNIFIED IDEOGRAPH-3EDE	[FB80 BEDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_425)
{
    // 3EDE 003F;	
    // (㻞) CJK UNIFIED IDEOGRAPH-3EDE	[FB80 BEDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_426)
{
    // 3EDE 0061;	
    // (㻞) CJK UNIFIED IDEOGRAPH-3EDE	[FB80 BEDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_427)
{
    // 3EDE 0041;	
    // (㻞) CJK UNIFIED IDEOGRAPH-3EDE	[FB80 BEDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_428)
{
    // 3EDE 0062;	
    // (㻞) CJK UNIFIED IDEOGRAPH-3EDE	[FB80 BEDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_429)
{
    // 3EDF 0021;	
    // (㻟) CJK UNIFIED IDEOGRAPH-3EDF	[FB80 BEDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_430)
{
    // 3EDF 003F;	
    // (㻟) CJK UNIFIED IDEOGRAPH-3EDF	[FB80 BEDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_431)
{
    // 3EDF 0061;	
    // (㻟) CJK UNIFIED IDEOGRAPH-3EDF	[FB80 BEDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_432)
{
    // 3EDF 0041;	
    // (㻟) CJK UNIFIED IDEOGRAPH-3EDF	[FB80 BEDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_433)
{
    // 3EDF 0062;	
    // (㻟) CJK UNIFIED IDEOGRAPH-3EDF	[FB80 BEDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_434)
{
    // 3EE0 0021;	
    // (㻠) CJK UNIFIED IDEOGRAPH-3EE0	[FB80 BEE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_435)
{
    // 3EE0 003F;	
    // (㻠) CJK UNIFIED IDEOGRAPH-3EE0	[FB80 BEE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_436)
{
    // 3EE0 0061;	
    // (㻠) CJK UNIFIED IDEOGRAPH-3EE0	[FB80 BEE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_437)
{
    // 3EE0 0041;	
    // (㻠) CJK UNIFIED IDEOGRAPH-3EE0	[FB80 BEE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_438)
{
    // 3EE0 0062;	
    // (㻠) CJK UNIFIED IDEOGRAPH-3EE0	[FB80 BEE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_439)
{
    // 3EE1 0021;	
    // (㻡) CJK UNIFIED IDEOGRAPH-3EE1	[FB80 BEE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_440)
{
    // 3EE1 003F;	
    // (㻡) CJK UNIFIED IDEOGRAPH-3EE1	[FB80 BEE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_441)
{
    // 3EE1 0061;	
    // (㻡) CJK UNIFIED IDEOGRAPH-3EE1	[FB80 BEE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_442)
{
    // 3EE1 0041;	
    // (㻡) CJK UNIFIED IDEOGRAPH-3EE1	[FB80 BEE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_443)
{
    // 3EE1 0062;	
    // (㻡) CJK UNIFIED IDEOGRAPH-3EE1	[FB80 BEE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_444)
{
    // 3EE2 0021;	
    // (㻢) CJK UNIFIED IDEOGRAPH-3EE2	[FB80 BEE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_445)
{
    // 3EE2 003F;	
    // (㻢) CJK UNIFIED IDEOGRAPH-3EE2	[FB80 BEE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_446)
{
    // 3EE2 0061;	
    // (㻢) CJK UNIFIED IDEOGRAPH-3EE2	[FB80 BEE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_447)
{
    // 3EE2 0041;	
    // (㻢) CJK UNIFIED IDEOGRAPH-3EE2	[FB80 BEE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_448)
{
    // 3EE2 0062;	
    // (㻢) CJK UNIFIED IDEOGRAPH-3EE2	[FB80 BEE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_449)
{
    // 3EE3 0021;	
    // (㻣) CJK UNIFIED IDEOGRAPH-3EE3	[FB80 BEE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_450)
{
    // 3EE3 003F;	
    // (㻣) CJK UNIFIED IDEOGRAPH-3EE3	[FB80 BEE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_451)
{
    // 3EE3 0061;	
    // (㻣) CJK UNIFIED IDEOGRAPH-3EE3	[FB80 BEE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_452)
{
    // 3EE3 0041;	
    // (㻣) CJK UNIFIED IDEOGRAPH-3EE3	[FB80 BEE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_453)
{
    // 3EE3 0062;	
    // (㻣) CJK UNIFIED IDEOGRAPH-3EE3	[FB80 BEE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_454)
{
    // 3EE4 0021;	
    // (㻤) CJK UNIFIED IDEOGRAPH-3EE4	[FB80 BEE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_455)
{
    // 3EE4 003F;	
    // (㻤) CJK UNIFIED IDEOGRAPH-3EE4	[FB80 BEE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_456)
{
    // 3EE4 0061;	
    // (㻤) CJK UNIFIED IDEOGRAPH-3EE4	[FB80 BEE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_457)
{
    // 3EE4 0041;	
    // (㻤) CJK UNIFIED IDEOGRAPH-3EE4	[FB80 BEE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_458)
{
    // 3EE4 0062;	
    // (㻤) CJK UNIFIED IDEOGRAPH-3EE4	[FB80 BEE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_459)
{
    // 3EE5 0021;	
    // (㻥) CJK UNIFIED IDEOGRAPH-3EE5	[FB80 BEE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_460)
{
    // 3EE5 003F;	
    // (㻥) CJK UNIFIED IDEOGRAPH-3EE5	[FB80 BEE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_461)
{
    // 3EE5 0061;	
    // (㻥) CJK UNIFIED IDEOGRAPH-3EE5	[FB80 BEE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_462)
{
    // 3EE5 0041;	
    // (㻥) CJK UNIFIED IDEOGRAPH-3EE5	[FB80 BEE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_463)
{
    // 3EE5 0062;	
    // (㻥) CJK UNIFIED IDEOGRAPH-3EE5	[FB80 BEE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_464)
{
    // 3EE6 0021;	
    // (㻦) CJK UNIFIED IDEOGRAPH-3EE6	[FB80 BEE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_465)
{
    // 3EE6 003F;	
    // (㻦) CJK UNIFIED IDEOGRAPH-3EE6	[FB80 BEE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_466)
{
    // 3EE6 0061;	
    // (㻦) CJK UNIFIED IDEOGRAPH-3EE6	[FB80 BEE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_467)
{
    // 3EE6 0041;	
    // (㻦) CJK UNIFIED IDEOGRAPH-3EE6	[FB80 BEE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_468)
{
    // 3EE6 0062;	
    // (㻦) CJK UNIFIED IDEOGRAPH-3EE6	[FB80 BEE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_469)
{
    // 3EE7 0021;	
    // (㻧) CJK UNIFIED IDEOGRAPH-3EE7	[FB80 BEE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_470)
{
    // 3EE7 003F;	
    // (㻧) CJK UNIFIED IDEOGRAPH-3EE7	[FB80 BEE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_471)
{
    // 3EE7 0061;	
    // (㻧) CJK UNIFIED IDEOGRAPH-3EE7	[FB80 BEE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_472)
{
    // 3EE7 0041;	
    // (㻧) CJK UNIFIED IDEOGRAPH-3EE7	[FB80 BEE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_473)
{
    // 3EE7 0062;	
    // (㻧) CJK UNIFIED IDEOGRAPH-3EE7	[FB80 BEE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_474)
{
    // 3EE8 0021;	
    // (㻨) CJK UNIFIED IDEOGRAPH-3EE8	[FB80 BEE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_475)
{
    // 3EE8 003F;	
    // (㻨) CJK UNIFIED IDEOGRAPH-3EE8	[FB80 BEE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_476)
{
    // 3EE8 0061;	
    // (㻨) CJK UNIFIED IDEOGRAPH-3EE8	[FB80 BEE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_477)
{
    // 3EE8 0041;	
    // (㻨) CJK UNIFIED IDEOGRAPH-3EE8	[FB80 BEE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_478)
{
    // 3EE8 0062;	
    // (㻨) CJK UNIFIED IDEOGRAPH-3EE8	[FB80 BEE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_479)
{
    // 3EE9 0021;	
    // (㻩) CJK UNIFIED IDEOGRAPH-3EE9	[FB80 BEE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_480)
{
    // 3EE9 003F;	
    // (㻩) CJK UNIFIED IDEOGRAPH-3EE9	[FB80 BEE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_481)
{
    // 3EE9 0061;	
    // (㻩) CJK UNIFIED IDEOGRAPH-3EE9	[FB80 BEE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_482)
{
    // 3EE9 0041;	
    // (㻩) CJK UNIFIED IDEOGRAPH-3EE9	[FB80 BEE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_483)
{
    // 3EE9 0062;	
    // (㻩) CJK UNIFIED IDEOGRAPH-3EE9	[FB80 BEE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_484)
{
    // 3EEA 0021;	
    // (㻪) CJK UNIFIED IDEOGRAPH-3EEA	[FB80 BEEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_485)
{
    // 3EEA 003F;	
    // (㻪) CJK UNIFIED IDEOGRAPH-3EEA	[FB80 BEEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_486)
{
    // 3EEA 0061;	
    // (㻪) CJK UNIFIED IDEOGRAPH-3EEA	[FB80 BEEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_487)
{
    // 3EEA 0041;	
    // (㻪) CJK UNIFIED IDEOGRAPH-3EEA	[FB80 BEEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_488)
{
    // 3EEA 0062;	
    // (㻪) CJK UNIFIED IDEOGRAPH-3EEA	[FB80 BEEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_489)
{
    // 3EEB 0021;	
    // (㻫) CJK UNIFIED IDEOGRAPH-3EEB	[FB80 BEEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_490)
{
    // 3EEB 003F;	
    // (㻫) CJK UNIFIED IDEOGRAPH-3EEB	[FB80 BEEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_491)
{
    // 3EEB 0061;	
    // (㻫) CJK UNIFIED IDEOGRAPH-3EEB	[FB80 BEEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_492)
{
    // 3EEB 0041;	
    // (㻫) CJK UNIFIED IDEOGRAPH-3EEB	[FB80 BEEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_493)
{
    // 3EEB 0062;	
    // (㻫) CJK UNIFIED IDEOGRAPH-3EEB	[FB80 BEEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_494)
{
    // 3EEC 0021;	
    // (㻬) CJK UNIFIED IDEOGRAPH-3EEC	[FB80 BEEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_495)
{
    // 3EEC 003F;	
    // (㻬) CJK UNIFIED IDEOGRAPH-3EEC	[FB80 BEEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBEEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_496)
{
    // 3EEC 0061;	
    // (㻬) CJK UNIFIED IDEOGRAPH-3EEC	[FB80 BEEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_497)
{
    // 3EEC 0041;	
    // (㻬) CJK UNIFIED IDEOGRAPH-3EEC	[FB80 BEEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3EEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_498)
{
    // 3EEC 0062;	
    // (㻬) CJK UNIFIED IDEOGRAPH-3EEC	[FB80 BEEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBEEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_354_499)
{
    // 3EED 0021;	
    // (㻭) CJK UNIFIED IDEOGRAPH-3EED	[FB80 BEED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3EED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBEED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

