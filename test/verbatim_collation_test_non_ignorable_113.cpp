// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_113_000)
{
    // 1D62E 0021;	
    // (ùòÆ) MATHEMATICAL SANS-SERIF ITALIC SMALL M	[1E10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62E, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_001)
{
    // 1D662 0021;	
    // (ùô¢) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M	[1E10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D662, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_002)
{
    // 1D696 0021;	
    // (ùöñ) MATHEMATICAL MONOSPACE SMALL M	[1E10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D696, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_003)
{
    // 24DC 0021;	
    // (‚ìú) CIRCLED LATIN SMALL LETTER M	[1E10 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DC, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_004)
{
    // 004D 0021;	
    // (M) LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004D, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_005)
{
    // FF2D 0021;	
    // (Ôº≠) FULLWIDTH LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2D, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_006)
{
    // 216F 0021;	
    // (‚ÖØ) ROMAN NUMERAL ONE THOUSAND	[1E10 0261 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x216F, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_007)
{
    // 2133 0021;	
    // (‚Ñ≥) SCRIPT CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2133, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_008)
{
    // 1D40C 0021;	
    // (ùêå) MATHEMATICAL BOLD CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40C, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_009)
{
    // 1D440 0021;	
    // (ùëÄ) MATHEMATICAL ITALIC CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D440, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_010)
{
    // 1D474 0021;	
    // (ùë¥) MATHEMATICAL BOLD ITALIC CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D474, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_011)
{
    // 1D4DC 0021;	
    // (ùìú) MATHEMATICAL BOLD SCRIPT CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DC, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_012)
{
    // 1D510 0021;	
    // (ùîê) MATHEMATICAL FRAKTUR CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D510, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_013)
{
    // 1D544 0021;	
    // (ùïÑ) MATHEMATICAL DOUBLE-STRUCK CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D544, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_014)
{
    // 1D578 0021;	
    // (ùï∏) MATHEMATICAL BOLD FRAKTUR CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D578, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_015)
{
    // 1D5AC 0021;	
    // (ùñ¨) MATHEMATICAL SANS-SERIF CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AC, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_016)
{
    // 1D5E0 0021;	
    // (ùó†) MATHEMATICAL SANS-SERIF BOLD CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E0, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_017)
{
    // 1D614 0021;	
    // (ùòî) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D614, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_018)
{
    // 1D648 0021;	
    // (ùôà) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D648, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_019)
{
    // 1D67C 0021;	
    // (ùôº) MATHEMATICAL MONOSPACE CAPITAL M	[1E10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67C, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_020)
{
    // 24C2 0021;	
    // (‚ìÇ) CIRCLED LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C2, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_021)
{
    // 1F15C 0021;	
    // (üÖú) NEGATIVE CIRCLED LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15C, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_022)
{
    // 1D50 0021;	
    // (·µê) MODIFIER LETTER SMALL M	[1E10 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D50, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_023)
{
    // 2098 0021;	
    // (‚Çò) LATIN SUBSCRIPT SMALL LETTER M	[1E10 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2098, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_024)
{
    // 1D39 0021;	
    // (·¥π) MODIFIER LETTER CAPITAL M	[1E10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D39, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_025)
{
    // 1F13C 0021;	
    // (üÑº) SQUARED LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13C, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_026)
{
    // 1F17C 0021;	
    // (üÖº) NEGATIVE SQUARED LATIN CAPITAL LETTER M	[1E10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17C, 0x0021 };
    uint32_t const ces[9] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_027)
{
    // 1E3F 0021;	
    // (·∏ø) LATIN SMALL LETTER M WITH ACUTE	[1E10 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E3F, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_028)
{
    // 1E3E 0021;	
    // (·∏æ) LATIN CAPITAL LETTER M WITH ACUTE	[1E10 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E3E, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_029)
{
    // 1E41 0021;	
    // (·πÅ) LATIN SMALL LETTER M WITH DOT ABOVE	[1E10 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E41, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_030)
{
    // 1E40 0021;	
    // (·πÄ) LATIN CAPITAL LETTER M WITH DOT ABOVE	[1E10 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E40, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_031)
{
    // 1E43 0021;	
    // (·πÉ) LATIN SMALL LETTER M WITH DOT BELOW	[1E10 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E43, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_032)
{
    // 1E42 0021;	
    // (·πÇ) LATIN CAPITAL LETTER M WITH DOT BELOW	[1E10 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E42, 0x0021 };
    uint32_t const ces[11] = { 0x1E10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_033)
{
    // 006D 003F;	
    // (m) LATIN SMALL LETTER M	[1E10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006D, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_034)
{
    // FF4D 003F;	
    // (ÔΩç) FULLWIDTH LATIN SMALL LETTER M	[1E10 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4D, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_035)
{
    // 036B 003F;	
    // (Õ´) COMBINING LATIN SMALL LETTER M	[1E10 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x036B, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_036)
{
    // 217F 003F;	
    // (‚Öø) SMALL ROMAN NUMERAL ONE THOUSAND	[1E10 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x217F, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_037)
{
    // 1D426 003F;	
    // (ùê¶) MATHEMATICAL BOLD SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D426, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_038)
{
    // 1D45A 003F;	
    // (ùëö) MATHEMATICAL ITALIC SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45A, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_039)
{
    // 1D48E 003F;	
    // (ùíé) MATHEMATICAL BOLD ITALIC SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48E, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_040)
{
    // 1D4C2 003F;	
    // (ùìÇ) MATHEMATICAL SCRIPT SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C2, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_041)
{
    // 1D4F6 003F;	
    // (ùì∂) MATHEMATICAL BOLD SCRIPT SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F6, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_042)
{
    // 1D52A 003F;	
    // (ùî™) MATHEMATICAL FRAKTUR SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52A, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_043)
{
    // 1D55E 003F;	
    // (ùïû) MATHEMATICAL DOUBLE-STRUCK SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55E, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_044)
{
    // 1D592 003F;	
    // (ùñí) MATHEMATICAL BOLD FRAKTUR SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D592, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_045)
{
    // 1D5C6 003F;	
    // (ùóÜ) MATHEMATICAL SANS-SERIF SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C6, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_046)
{
    // 1D5FA 003F;	
    // (ùó∫) MATHEMATICAL SANS-SERIF BOLD SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FA, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_047)
{
    // 1D62E 003F;	
    // (ùòÆ) MATHEMATICAL SANS-SERIF ITALIC SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62E, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_048)
{
    // 1D662 003F;	
    // (ùô¢) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D662, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_049)
{
    // 1D696 003F;	
    // (ùöñ) MATHEMATICAL MONOSPACE SMALL M	[1E10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D696, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_050)
{
    // 24DC 003F;	
    // (‚ìú) CIRCLED LATIN SMALL LETTER M	[1E10 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DC, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_051)
{
    // 004D 003F;	
    // (M) LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004D, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_052)
{
    // FF2D 003F;	
    // (Ôº≠) FULLWIDTH LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2D, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_053)
{
    // 216F 003F;	
    // (‚ÖØ) ROMAN NUMERAL ONE THOUSAND	[1E10 0267 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x216F, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_054)
{
    // 2133 003F;	
    // (‚Ñ≥) SCRIPT CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2133, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_055)
{
    // 1D40C 003F;	
    // (ùêå) MATHEMATICAL BOLD CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40C, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_056)
{
    // 1D440 003F;	
    // (ùëÄ) MATHEMATICAL ITALIC CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D440, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_057)
{
    // 1D474 003F;	
    // (ùë¥) MATHEMATICAL BOLD ITALIC CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D474, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_058)
{
    // 1D4DC 003F;	
    // (ùìú) MATHEMATICAL BOLD SCRIPT CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DC, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_059)
{
    // 1D510 003F;	
    // (ùîê) MATHEMATICAL FRAKTUR CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D510, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_060)
{
    // 1D544 003F;	
    // (ùïÑ) MATHEMATICAL DOUBLE-STRUCK CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D544, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_061)
{
    // 1D578 003F;	
    // (ùï∏) MATHEMATICAL BOLD FRAKTUR CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D578, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_062)
{
    // 1D5AC 003F;	
    // (ùñ¨) MATHEMATICAL SANS-SERIF CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AC, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_063)
{
    // 1D5E0 003F;	
    // (ùó†) MATHEMATICAL SANS-SERIF BOLD CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E0, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_064)
{
    // 1D614 003F;	
    // (ùòî) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D614, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_065)
{
    // 1D648 003F;	
    // (ùôà) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D648, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_066)
{
    // 1D67C 003F;	
    // (ùôº) MATHEMATICAL MONOSPACE CAPITAL M	[1E10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67C, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_067)
{
    // 24C2 003F;	
    // (‚ìÇ) CIRCLED LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C2, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_068)
{
    // 1F15C 003F;	
    // (üÖú) NEGATIVE CIRCLED LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15C, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_069)
{
    // 1D50 003F;	
    // (·µê) MODIFIER LETTER SMALL M	[1E10 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D50, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_070)
{
    // 2098 003F;	
    // (‚Çò) LATIN SUBSCRIPT SMALL LETTER M	[1E10 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2098, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_071)
{
    // 1D39 003F;	
    // (·¥π) MODIFIER LETTER CAPITAL M	[1E10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D39, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_072)
{
    // 1F13C 003F;	
    // (üÑº) SQUARED LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13C, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_073)
{
    // 1F17C 003F;	
    // (üÖº) NEGATIVE SQUARED LATIN CAPITAL LETTER M	[1E10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17C, 0x003F };
    uint32_t const ces[9] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_074)
{
    // 1E3F 003F;	
    // (·∏ø) LATIN SMALL LETTER M WITH ACUTE	[1E10 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E3F, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_075)
{
    // 1E3E 003F;	
    // (·∏æ) LATIN CAPITAL LETTER M WITH ACUTE	[1E10 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E3E, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_076)
{
    // 1E41 003F;	
    // (·πÅ) LATIN SMALL LETTER M WITH DOT ABOVE	[1E10 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E41, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_077)
{
    // 1E40 003F;	
    // (·πÄ) LATIN CAPITAL LETTER M WITH DOT ABOVE	[1E10 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E40, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_078)
{
    // 1E43 003F;	
    // (·πÉ) LATIN SMALL LETTER M WITH DOT BELOW	[1E10 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E43, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_079)
{
    // 1E42 003F;	
    // (·πÇ) LATIN CAPITAL LETTER M WITH DOT BELOW	[1E10 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E42, 0x003F };
    uint32_t const ces[11] = { 0x1E10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_080)
{
    // 33A7 0021;	
    // („éß) SQUARE M OVER S	[1E10 063B 1ED7 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A7, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x063B, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_081)
{
    // 33A7 003F;	
    // („éß) SQUARE M OVER S	[1E10 063B 1ED7 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A7, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x063B, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_082)
{
    // 33A8 0021;	
    // („é®) SQUARE M OVER S SQUARED	[1E10 063B 1ED7 1CA5 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A8, 0x0021 };
    uint32_t const ces[18] = { 0x1E10, 0x063B, 0x1ED7, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_083)
{
    // 33A8 003F;	
    // („é®) SQUARE M OVER S SQUARED	[1E10 063B 1ED7 1CA5 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A8, 0x003F };
    uint32_t const ces[18] = { 0x1E10, 0x063B, 0x1ED7, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_084)
{
    // 33A8 0061;	
    // („é®) SQUARE M OVER S SQUARED	[1E10 063B 1ED7 1CA5 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A8, 0x0061 };
    uint32_t const ces[18] = { 0x1E10, 0x063B, 0x1ED7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_085)
{
    // 33A8 0041;	
    // („é®) SQUARE M OVER S SQUARED	[1E10 063B 1ED7 1CA5 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33A8, 0x0041 };
    uint32_t const ces[18] = { 0x1E10, 0x063B, 0x1ED7, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_086)
{
    // 33A8 0062;	
    // („é®) SQUARE M OVER S SQUARED	[1E10 063B 1ED7 1CA5 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A8, 0x0062 };
    uint32_t const ces[18] = { 0x1E10, 0x063B, 0x1ED7, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_087)
{
    // 33A7 0061;	
    // („éß) SQUARE M OVER S	[1E10 063B 1ED7 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A7, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x063B, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_088)
{
    // 33A7 0041;	
    // („éß) SQUARE M OVER S	[1E10 063B 1ED7 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33A7, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x063B, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_089)
{
    // 33A7 0062;	
    // („éß) SQUARE M OVER S	[1E10 063B 1ED7 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A7, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x063B, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_090)
{
    // 33A1 0021;	
    // („é°) SQUARE M SQUARED	[1E10 1CA5 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A1, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_091)
{
    // 33A1 003F;	
    // („é°) SQUARE M SQUARED	[1E10 1CA5 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A1, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_092)
{
    // 33A1 0061;	
    // („é°) SQUARE M SQUARED	[1E10 1CA5 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A1, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_093)
{
    // 33A1 0041;	
    // („é°) SQUARE M SQUARED	[1E10 1CA5 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33A1, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_094)
{
    // 33A1 0062;	
    // („é°) SQUARE M SQUARED	[1E10 1CA5 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A1, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_095)
{
    // 33A5 0021;	
    // („é•) SQUARE M CUBED	[1E10 1CA6 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A5, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_096)
{
    // 33A5 003F;	
    // („é•) SQUARE M CUBED	[1E10 1CA6 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A5, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_097)
{
    // 33A5 0061;	
    // („é•) SQUARE M CUBED	[1E10 1CA6 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A5, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_098)
{
    // 33A5 0041;	
    // („é•) SQUARE M CUBED	[1E10 1CA6 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33A5, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_099)
{
    // 33A5 0062;	
    // („é•) SQUARE M CUBED	[1E10 1CA6 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A5, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_100)
{
    // 006D 0061;	
    // (m) LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006D, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_101)
{
    // 006D 0041;	
    // (m) LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x006D, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_102)
{
    // FF4D 0061;	
    // (ÔΩç) FULLWIDTH LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4D, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_103)
{
    // FF4D 0041;	
    // (ÔΩç) FULLWIDTH LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF4D, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_104)
{
    // 036B 0061;	
    // (Õ´) COMBINING LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x036B, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_105)
{
    // 217F 0061;	
    // (‚Öø) SMALL ROMAN NUMERAL ONE THOUSAND	[1E10 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x217F, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_106)
{
    // 036B 0041;	
    // (Õ´) COMBINING LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x036B, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_107)
{
    // 217F 0041;	
    // (‚Öø) SMALL ROMAN NUMERAL ONE THOUSAND	[1E10 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x217F, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_108)
{
    // 1D426 0061;	
    // (ùê¶) MATHEMATICAL BOLD SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D426, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_109)
{
    // 1D45A 0061;	
    // (ùëö) MATHEMATICAL ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45A, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_110)
{
    // 1D48E 0061;	
    // (ùíé) MATHEMATICAL BOLD ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48E, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_111)
{
    // 1D4C2 0061;	
    // (ùìÇ) MATHEMATICAL SCRIPT SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C2, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_112)
{
    // 1D4F6 0061;	
    // (ùì∂) MATHEMATICAL BOLD SCRIPT SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F6, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_113)
{
    // 1D52A 0061;	
    // (ùî™) MATHEMATICAL FRAKTUR SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52A, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_114)
{
    // 1D55E 0061;	
    // (ùïû) MATHEMATICAL DOUBLE-STRUCK SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55E, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_115)
{
    // 1D592 0061;	
    // (ùñí) MATHEMATICAL BOLD FRAKTUR SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D592, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_116)
{
    // 1D5C6 0061;	
    // (ùóÜ) MATHEMATICAL SANS-SERIF SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C6, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_117)
{
    // 1D5FA 0061;	
    // (ùó∫) MATHEMATICAL SANS-SERIF BOLD SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FA, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_118)
{
    // 1D62E 0061;	
    // (ùòÆ) MATHEMATICAL SANS-SERIF ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62E, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_119)
{
    // 1D662 0061;	
    // (ùô¢) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D662, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_120)
{
    // 1D696 0061;	
    // (ùöñ) MATHEMATICAL MONOSPACE SMALL M	[1E10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D696, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_121)
{
    // 1D426 0041;	
    // (ùê¶) MATHEMATICAL BOLD SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D426, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_122)
{
    // 1D45A 0041;	
    // (ùëö) MATHEMATICAL ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D45A, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_123)
{
    // 1D48E 0041;	
    // (ùíé) MATHEMATICAL BOLD ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D48E, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_124)
{
    // 1D4C2 0041;	
    // (ùìÇ) MATHEMATICAL SCRIPT SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4C2, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_125)
{
    // 1D4F6 0041;	
    // (ùì∂) MATHEMATICAL BOLD SCRIPT SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4F6, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_126)
{
    // 1D52A 0041;	
    // (ùî™) MATHEMATICAL FRAKTUR SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D52A, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_127)
{
    // 1D55E 0041;	
    // (ùïû) MATHEMATICAL DOUBLE-STRUCK SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D55E, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_128)
{
    // 1D592 0041;	
    // (ùñí) MATHEMATICAL BOLD FRAKTUR SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D592, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_129)
{
    // 1D5C6 0041;	
    // (ùóÜ) MATHEMATICAL SANS-SERIF SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5C6, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_130)
{
    // 1D5FA 0041;	
    // (ùó∫) MATHEMATICAL SANS-SERIF BOLD SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5FA, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_131)
{
    // 1D62E 0041;	
    // (ùòÆ) MATHEMATICAL SANS-SERIF ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D62E, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_132)
{
    // 1D662 0041;	
    // (ùô¢) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D662, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_133)
{
    // 1D696 0041;	
    // (ùöñ) MATHEMATICAL MONOSPACE SMALL M	[1E10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D696, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_134)
{
    // 24DC 0061;	
    // (‚ìú) CIRCLED LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DC, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_135)
{
    // 24DC 0041;	
    // (‚ìú) CIRCLED LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24DC, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_136)
{
    // 004D 0061;	
    // (M) LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004D, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_137)
{
    // 004D 0041;	
    // (M) LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x004D, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_138)
{
    // FF2D 0061;	
    // (Ôº≠) FULLWIDTH LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2D, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_139)
{
    // FF2D 0041;	
    // (Ôº≠) FULLWIDTH LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF2D, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_140)
{
    // 216F 0061;	
    // (‚ÖØ) ROMAN NUMERAL ONE THOUSAND	[1E10 1CAD | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x216F, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_141)
{
    // 216F 0041;	
    // (‚ÖØ) ROMAN NUMERAL ONE THOUSAND	[1E10 1CAD | 0020 0020 | 000A 0008 |]

    uint32_t cps[2] = { 0x216F, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_142)
{
    // 2133 0061;	
    // (‚Ñ≥) SCRIPT CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2133, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_143)
{
    // 1D40C 0061;	
    // (ùêå) MATHEMATICAL BOLD CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40C, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_144)
{
    // 1D440 0061;	
    // (ùëÄ) MATHEMATICAL ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D440, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_145)
{
    // 1D474 0061;	
    // (ùë¥) MATHEMATICAL BOLD ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D474, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_146)
{
    // 1D4DC 0061;	
    // (ùìú) MATHEMATICAL BOLD SCRIPT CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DC, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_147)
{
    // 1D510 0061;	
    // (ùîê) MATHEMATICAL FRAKTUR CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D510, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_148)
{
    // 1D544 0061;	
    // (ùïÑ) MATHEMATICAL DOUBLE-STRUCK CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D544, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_149)
{
    // 1D578 0061;	
    // (ùï∏) MATHEMATICAL BOLD FRAKTUR CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D578, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_150)
{
    // 1D5AC 0061;	
    // (ùñ¨) MATHEMATICAL SANS-SERIF CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AC, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_151)
{
    // 1D5E0 0061;	
    // (ùó†) MATHEMATICAL SANS-SERIF BOLD CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E0, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_152)
{
    // 1D614 0061;	
    // (ùòî) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D614, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_153)
{
    // 1D648 0061;	
    // (ùôà) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D648, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_154)
{
    // 1D67C 0061;	
    // (ùôº) MATHEMATICAL MONOSPACE CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67C, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_155)
{
    // 2133 0041;	
    // (‚Ñ≥) SCRIPT CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2133, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_156)
{
    // 1D40C 0041;	
    // (ùêå) MATHEMATICAL BOLD CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D40C, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_157)
{
    // 1D440 0041;	
    // (ùëÄ) MATHEMATICAL ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D440, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_158)
{
    // 1D474 0041;	
    // (ùë¥) MATHEMATICAL BOLD ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D474, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_159)
{
    // 1D4DC 0041;	
    // (ùìú) MATHEMATICAL BOLD SCRIPT CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4DC, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_160)
{
    // 1D510 0041;	
    // (ùîê) MATHEMATICAL FRAKTUR CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D510, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_161)
{
    // 1D544 0041;	
    // (ùïÑ) MATHEMATICAL DOUBLE-STRUCK CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D544, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_162)
{
    // 1D578 0041;	
    // (ùï∏) MATHEMATICAL BOLD FRAKTUR CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D578, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_163)
{
    // 1D5AC 0041;	
    // (ùñ¨) MATHEMATICAL SANS-SERIF CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5AC, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_164)
{
    // 1D5E0 0041;	
    // (ùó†) MATHEMATICAL SANS-SERIF BOLD CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5E0, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_165)
{
    // 1D614 0041;	
    // (ùòî) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D614, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_166)
{
    // 1D648 0041;	
    // (ùôà) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D648, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_167)
{
    // 1D67C 0041;	
    // (ùôº) MATHEMATICAL MONOSPACE CAPITAL M	[1E10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D67C, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_168)
{
    // 24C2 0061;	
    // (‚ìÇ) CIRCLED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C2, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_169)
{
    // 1F15C 0061;	
    // (üÖú) NEGATIVE CIRCLED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15C, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_170)
{
    // 24C2 0041;	
    // (‚ìÇ) CIRCLED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24C2, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_171)
{
    // 1F15C 0041;	
    // (üÖú) NEGATIVE CIRCLED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F15C, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_172)
{
    // 1D50 0061;	
    // (·µê) MODIFIER LETTER SMALL M	[1E10 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D50, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_173)
{
    // 1D50 0041;	
    // (·µê) MODIFIER LETTER SMALL M	[1E10 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D50, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_174)
{
    // 2098 0061;	
    // (‚Çò) LATIN SUBSCRIPT SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2098, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_175)
{
    // 2098 0041;	
    // (‚Çò) LATIN SUBSCRIPT SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2098, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_176)
{
    // 1D39 0061;	
    // (·¥π) MODIFIER LETTER CAPITAL M	[1E10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D39, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_177)
{
    // 1F13C 0061;	
    // (üÑº) SQUARED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13C, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_178)
{
    // 1F17C 0061;	
    // (üÖº) NEGATIVE SQUARED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17C, 0x0061 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_179)
{
    // 1D39 0041;	
    // (·¥π) MODIFIER LETTER CAPITAL M	[1E10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D39, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_180)
{
    // 1F13C 0041;	
    // (üÑº) SQUARED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F13C, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_181)
{
    // 1F17C 0041;	
    // (üÖº) NEGATIVE SQUARED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F17C, 0x0041 };
    uint32_t const ces[9] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_182)
{
    // 1E3F 0061;	
    // (·∏ø) LATIN SMALL LETTER M WITH ACUTE	[1E10 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E3F, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_183)
{
    // 1E3F 0041;	
    // (·∏ø) LATIN SMALL LETTER M WITH ACUTE	[1E10 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E3F, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_184)
{
    // 1E3E 0061;	
    // (·∏æ) LATIN CAPITAL LETTER M WITH ACUTE	[1E10 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E3E, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_185)
{
    // 1E3E 0041;	
    // (·∏æ) LATIN CAPITAL LETTER M WITH ACUTE	[1E10 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E3E, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_186)
{
    // 1E41 0061;	
    // (·πÅ) LATIN SMALL LETTER M WITH DOT ABOVE	[1E10 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E41, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_187)
{
    // 1E41 0041;	
    // (·πÅ) LATIN SMALL LETTER M WITH DOT ABOVE	[1E10 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E41, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_188)
{
    // 1E40 0061;	
    // (·πÄ) LATIN CAPITAL LETTER M WITH DOT ABOVE	[1E10 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E40, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_189)
{
    // 1E40 0041;	
    // (·πÄ) LATIN CAPITAL LETTER M WITH DOT ABOVE	[1E10 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E40, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_190)
{
    // 1E43 0061;	
    // (·πÉ) LATIN SMALL LETTER M WITH DOT BELOW	[1E10 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E43, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_191)
{
    // 1E43 0041;	
    // (·πÉ) LATIN SMALL LETTER M WITH DOT BELOW	[1E10 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E43, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_192)
{
    // 1E42 0061;	
    // (·πÇ) LATIN CAPITAL LETTER M WITH DOT BELOW	[1E10 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E42, 0x0061 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_193)
{
    // 1E42 0041;	
    // (·πÇ) LATIN CAPITAL LETTER M WITH DOT BELOW	[1E10 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E42, 0x0041 };
    uint32_t const ces[11] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_194)
{
    // 3383 0021;	
    // („éÉ) SQUARE MA	[1E10 1CAD 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3383, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_195)
{
    // 3383 003F;	
    // („éÉ) SQUARE MA	[1E10 1CAD 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3383, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_196)
{
    // 3383 0061;	
    // („éÉ) SQUARE MA	[1E10 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3383, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_197)
{
    // 3383 0041;	
    // („éÉ) SQUARE MA	[1E10 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x3383, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_198)
{
    // 3383 0062;	
    // („éÉ) SQUARE MA	[1E10 1CAD 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3383, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_199)
{
    // 006D 0062;	
    // (m) LATIN SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006D, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_200)
{
    // FF4D 0062;	
    // (ÔΩç) FULLWIDTH LATIN SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4D, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_201)
{
    // 036B 0062;	
    // (Õ´) COMBINING LATIN SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x036B, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_202)
{
    // 217F 0062;	
    // (‚Öø) SMALL ROMAN NUMERAL ONE THOUSAND	[1E10 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x217F, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_203)
{
    // 1D426 0062;	
    // (ùê¶) MATHEMATICAL BOLD SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D426, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_204)
{
    // 1D45A 0062;	
    // (ùëö) MATHEMATICAL ITALIC SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45A, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_205)
{
    // 1D48E 0062;	
    // (ùíé) MATHEMATICAL BOLD ITALIC SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48E, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_206)
{
    // 1D4C2 0062;	
    // (ùìÇ) MATHEMATICAL SCRIPT SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C2, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_207)
{
    // 1D4F6 0062;	
    // (ùì∂) MATHEMATICAL BOLD SCRIPT SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F6, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_208)
{
    // 1D52A 0062;	
    // (ùî™) MATHEMATICAL FRAKTUR SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52A, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_209)
{
    // 1D55E 0062;	
    // (ùïû) MATHEMATICAL DOUBLE-STRUCK SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55E, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_210)
{
    // 1D592 0062;	
    // (ùñí) MATHEMATICAL BOLD FRAKTUR SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D592, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_211)
{
    // 1D5C6 0062;	
    // (ùóÜ) MATHEMATICAL SANS-SERIF SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C6, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_212)
{
    // 1D5FA 0062;	
    // (ùó∫) MATHEMATICAL SANS-SERIF BOLD SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FA, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_213)
{
    // 1D62E 0062;	
    // (ùòÆ) MATHEMATICAL SANS-SERIF ITALIC SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62E, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_214)
{
    // 1D662 0062;	
    // (ùô¢) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D662, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_215)
{
    // 1D696 0062;	
    // (ùöñ) MATHEMATICAL MONOSPACE SMALL M	[1E10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D696, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_216)
{
    // 24DC 0062;	
    // (‚ìú) CIRCLED LATIN SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DC, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_217)
{
    // 004D 0062;	
    // (M) LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004D, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_218)
{
    // FF2D 0062;	
    // (Ôº≠) FULLWIDTH LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2D, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_219)
{
    // 216F 0062;	
    // (‚ÖØ) ROMAN NUMERAL ONE THOUSAND	[1E10 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x216F, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_220)
{
    // 2133 0062;	
    // (‚Ñ≥) SCRIPT CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2133, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_221)
{
    // 1D40C 0062;	
    // (ùêå) MATHEMATICAL BOLD CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40C, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_222)
{
    // 1D440 0062;	
    // (ùëÄ) MATHEMATICAL ITALIC CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D440, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_223)
{
    // 1D474 0062;	
    // (ùë¥) MATHEMATICAL BOLD ITALIC CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D474, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_224)
{
    // 1D4DC 0062;	
    // (ùìú) MATHEMATICAL BOLD SCRIPT CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DC, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_225)
{
    // 1D510 0062;	
    // (ùîê) MATHEMATICAL FRAKTUR CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D510, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_226)
{
    // 1D544 0062;	
    // (ùïÑ) MATHEMATICAL DOUBLE-STRUCK CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D544, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_227)
{
    // 1D578 0062;	
    // (ùï∏) MATHEMATICAL BOLD FRAKTUR CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D578, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_228)
{
    // 1D5AC 0062;	
    // (ùñ¨) MATHEMATICAL SANS-SERIF CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AC, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_229)
{
    // 1D5E0 0062;	
    // (ùó†) MATHEMATICAL SANS-SERIF BOLD CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E0, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_230)
{
    // 1D614 0062;	
    // (ùòî) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D614, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_231)
{
    // 1D648 0062;	
    // (ùôà) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D648, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_232)
{
    // 1D67C 0062;	
    // (ùôº) MATHEMATICAL MONOSPACE CAPITAL M	[1E10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67C, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_233)
{
    // 24C2 0062;	
    // (‚ìÇ) CIRCLED LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C2, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_234)
{
    // 1F15C 0062;	
    // (üÖú) NEGATIVE CIRCLED LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15C, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_235)
{
    // 1D50 0062;	
    // (·µê) MODIFIER LETTER SMALL M	[1E10 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D50, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_236)
{
    // 2098 0062;	
    // (‚Çò) LATIN SUBSCRIPT SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2098, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_237)
{
    // 1D39 0062;	
    // (·¥π) MODIFIER LETTER CAPITAL M	[1E10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D39, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_238)
{
    // 1F13C 0062;	
    // (üÑº) SQUARED LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13C, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_239)
{
    // 1F17C 0062;	
    // (üÖº) NEGATIVE SQUARED LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17C, 0x0062 };
    uint32_t const ces[9] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_240)
{
    // 1E3F 0062;	
    // (·∏ø) LATIN SMALL LETTER M WITH ACUTE	[1E10 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E3F, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_241)
{
    // 1E3E 0062;	
    // (·∏æ) LATIN CAPITAL LETTER M WITH ACUTE	[1E10 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E3E, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_242)
{
    // 1E41 0062;	
    // (·πÅ) LATIN SMALL LETTER M WITH DOT ABOVE	[1E10 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E41, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_243)
{
    // 1E40 0062;	
    // (·πÄ) LATIN CAPITAL LETTER M WITH DOT ABOVE	[1E10 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E40, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_244)
{
    // 1E43 0062;	
    // (·πÉ) LATIN SMALL LETTER M WITH DOT BELOW	[1E10 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E43, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_245)
{
    // 1E42 0062;	
    // (·πÇ) LATIN CAPITAL LETTER M WITH DOT BELOW	[1E10 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E42, 0x0062 };
    uint32_t const ces[11] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_246)
{
    // 33D4 0021;	
    // („èî) SQUARE MB SMALL	[1E10 1CC6 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D4, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_247)
{
    // 3386 0021;	
    // („éÜ) SQUARE MB	[1E10 1CC6 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3386, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_248)
{
    // 33D4 003F;	
    // („èî) SQUARE MB SMALL	[1E10 1CC6 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D4, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_249)
{
    // 3386 003F;	
    // („éÜ) SQUARE MB	[1E10 1CC6 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3386, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_250)
{
    // 33D4 0061;	
    // („èî) SQUARE MB SMALL	[1E10 1CC6 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D4, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_251)
{
    // 33D4 0041;	
    // („èî) SQUARE MB SMALL	[1E10 1CC6 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33D4, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_252)
{
    // 3386 0061;	
    // („éÜ) SQUARE MB	[1E10 1CC6 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3386, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_253)
{
    // 3386 0041;	
    // („éÜ) SQUARE MB	[1E10 1CC6 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x3386, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_254)
{
    // 33D4 0062;	
    // („èî) SQUARE MB SMALL	[1E10 1CC6 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D4, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_255)
{
    // 3386 0062;	
    // („éÜ) SQUARE MB	[1E10 1CC6 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3386, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_256)
{
    // 1F16A 0021;	
    // (üÖ™) RAISED MC SIGN	[1E10 1CE0 0261 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16A, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_257)
{
    // 1F16A 003F;	
    // (üÖ™) RAISED MC SIGN	[1E10 1CE0 0267 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16A, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_258)
{
    // 1F16A 0061;	
    // (üÖ™) RAISED MC SIGN	[1E10 1CE0 1CAD | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16A, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_259)
{
    // 1F16A 0041;	
    // (üÖ™) RAISED MC SIGN	[1E10 1CE0 1CAD | 0020 0020 0020 | 0014 0014 0008 |]

    uint32_t cps[2] = { 0x1F16A, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_260)
{
    // 1F16A 0062;	
    // (üÖ™) RAISED MC SIGN	[1E10 1CE0 1CC6 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16A, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_261)
{
    // 1F16B 0021;	
    // (üÖ´) RAISED MD SIGN	[1E10 1CF5 0261 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16B, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_262)
{
    // 1F16B 003F;	
    // (üÖ´) RAISED MD SIGN	[1E10 1CF5 0267 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16B, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_263)
{
    // 1F16B 0061;	
    // (üÖ´) RAISED MD SIGN	[1E10 1CF5 1CAD | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16B, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_264)
{
    // 1F16B 0041;	
    // (üÖ´) RAISED MD SIGN	[1E10 1CF5 1CAD | 0020 0020 0020 | 0014 0014 0008 |]

    uint32_t cps[2] = { 0x1F16B, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_265)
{
    // 1F16B 0062;	
    // (üÖ´) RAISED MD SIGN	[1E10 1CF5 1CC6 | 0020 0020 0020 | 0014 0014 0002 |]

    uint32_t cps[2] = { 0x1F16B, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_266)
{
    // 338E 0021;	
    // („éé) SQUARE MG	[1E10 1D5A 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338E, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_267)
{
    // 338E 003F;	
    // („éé) SQUARE MG	[1E10 1D5A 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338E, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_268)
{
    // 338E 0061;	
    // („éé) SQUARE MG	[1E10 1D5A 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338E, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_269)
{
    // 338E 0041;	
    // („éé) SQUARE MG	[1E10 1D5A 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x338E, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_270)
{
    // 338E 0062;	
    // („éé) SQUARE MG	[1E10 1D5A 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338E, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_271)
{
    // 3392 0021;	
    // („éí) SQUARE MHZ	[1E10 1D7E 1F87 0261 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3392, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1D7E, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_272)
{
    // 3392 003F;	
    // („éí) SQUARE MHZ	[1E10 1D7E 1F87 0267 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3392, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1D7E, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_273)
{
    // 3392 0061;	
    // („éí) SQUARE MHZ	[1E10 1D7E 1F87 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3392, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1D7E, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_274)
{
    // 3392 0041;	
    // („éí) SQUARE MHZ	[1E10 1D7E 1F87 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0008 |]

    uint32_t cps[2] = { 0x3392, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1D7E, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_275)
{
    // 3392 0062;	
    // („éí) SQUARE MHZ	[1E10 1D7E 1F87 1CC6 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3392, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1D7E, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_276)
{
    // 33D5 0021;	
    // („èï) SQUARE MIL	[1E10 1D98 1DDD 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D5, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1D98, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_277)
{
    // 33D5 003F;	
    // („èï) SQUARE MIL	[1E10 1D98 1DDD 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D5, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1D98, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_278)
{
    // 33D5 0061;	
    // („èï) SQUARE MIL	[1E10 1D98 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D5, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1D98, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_279)
{
    // 33D5 0041;	
    // („èï) SQUARE MIL	[1E10 1D98 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33D5, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1D98, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_280)
{
    // 33D5 0062;	
    // („èï) SQUARE MIL	[1E10 1D98 1DDD 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D5, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1D98, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_281)
{
    // 3396 0021;	
    // („éñ) SQUARE ML	[1E10 1DDD 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3396, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_282)
{
    // 3396 003F;	
    // („éñ) SQUARE ML	[1E10 1DDD 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3396, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_283)
{
    // 3396 0061;	
    // („éñ) SQUARE ML	[1E10 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3396, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_284)
{
    // 3396 0041;	
    // („éñ) SQUARE ML	[1E10 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3396, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_285)
{
    // 3396 0062;	
    // („éñ) SQUARE ML	[1E10 1DDD 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3396, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_286)
{
    // 339C 0021;	
    // („éú) SQUARE MM	[1E10 1E10 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339C, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_287)
{
    // 339C 003F;	
    // („éú) SQUARE MM	[1E10 1E10 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339C, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_288)
{
    // 339F 0021;	
    // („éü) SQUARE MM SQUARED	[1E10 1E10 1CA5 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339F, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_289)
{
    // 339F 003F;	
    // („éü) SQUARE MM SQUARED	[1E10 1E10 1CA5 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339F, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_290)
{
    // 339F 0061;	
    // („éü) SQUARE MM SQUARED	[1E10 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339F, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_291)
{
    // 339F 0041;	
    // („éü) SQUARE MM SQUARED	[1E10 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x339F, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_292)
{
    // 339F 0062;	
    // („éü) SQUARE MM SQUARED	[1E10 1E10 1CA5 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339F, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_293)
{
    // 33A3 0021;	
    // („é£) SQUARE MM CUBED	[1E10 1E10 1CA6 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A3, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_294)
{
    // 33A3 003F;	
    // („é£) SQUARE MM CUBED	[1E10 1E10 1CA6 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A3, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_295)
{
    // 33A3 0061;	
    // („é£) SQUARE MM CUBED	[1E10 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A3, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_296)
{
    // 33A3 0041;	
    // („é£) SQUARE MM CUBED	[1E10 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33A3, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_297)
{
    // 33A3 0062;	
    // („é£) SQUARE MM CUBED	[1E10 1E10 1CA6 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33A3, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1E10, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_298)
{
    // 339C 0061;	
    // („éú) SQUARE MM	[1E10 1E10 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339C, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_299)
{
    // 339C 0041;	
    // („éú) SQUARE MM	[1E10 1E10 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x339C, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_300)
{
    // 339C 0062;	
    // („éú) SQUARE MM	[1E10 1E10 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339C, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_301)
{
    // 33D6 0021;	
    // („èñ) SQUARE MOL	[1E10 1E43 1DDD 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D6, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1E43, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_302)
{
    // 33D6 003F;	
    // („èñ) SQUARE MOL	[1E10 1E43 1DDD 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D6, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1E43, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_303)
{
    // 33D6 0061;	
    // („èñ) SQUARE MOL	[1E10 1E43 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D6, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1E43, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_304)
{
    // 33D6 0041;	
    // („èñ) SQUARE MOL	[1E10 1E43 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33D6, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1E43, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_305)
{
    // 33D6 0062;	
    // („èñ) SQUARE MOL	[1E10 1E43 1DDD 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D6, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1E43, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_306)
{
    // 33AB 0021;	
    // („é´) SQUARE MPA	[1E10 1E72 1CAD 0261 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AB, 0x0021 };
    uint32_t const ces[15] = { 0x1E10, 0x1E72, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_307)
{
    // 33AB 003F;	
    // („é´) SQUARE MPA	[1E10 1E72 1CAD 0267 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AB, 0x003F };
    uint32_t const ces[15] = { 0x1E10, 0x1E72, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_308)
{
    // 33AB 0061;	
    // („é´) SQUARE MPA	[1E10 1E72 1CAD 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AB, 0x0061 };
    uint32_t const ces[15] = { 0x1E10, 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_309)
{
    // 33AB 0041;	
    // („é´) SQUARE MPA	[1E10 1E72 1CAD 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0008 |]

    uint32_t cps[2] = { 0x33AB, 0x0041 };
    uint32_t const ces[15] = { 0x1E10, 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_310)
{
    // 33AB 0062;	
    // („é´) SQUARE MPA	[1E10 1E72 1CAD 1CC6 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AB, 0x0062 };
    uint32_t const ces[15] = { 0x1E10, 0x1E72, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_311)
{
    // 33B3 0021;	
    // („é≥) SQUARE MS	[1E10 1ED7 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B3, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_312)
{
    // 33B3 003F;	
    // („é≥) SQUARE MS	[1E10 1ED7 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B3, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_313)
{
    // 33B3 0061;	
    // („é≥) SQUARE MS	[1E10 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B3, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_314)
{
    // 33B3 0041;	
    // („é≥) SQUARE MS	[1E10 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33B3, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_315)
{
    // 33B3 0062;	
    // („é≥) SQUARE MS	[1E10 1ED7 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B3, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_316)
{
    // 33B7 0021;	
    // („é∑) SQUARE MV	[1E10 1F49 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B7, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_317)
{
    // 33B9 0021;	
    // („éπ) SQUARE MV MEGA	[1E10 1F49 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33B9, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_318)
{
    // 1F14B 0021;	
    // (üÖã) SQUARED MV	[1E10 1F49 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14B, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_319)
{
    // 33B7 003F;	
    // („é∑) SQUARE MV	[1E10 1F49 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B7, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_320)
{
    // 33B9 003F;	
    // („éπ) SQUARE MV MEGA	[1E10 1F49 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33B9, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_321)
{
    // 1F14B 003F;	
    // (üÖã) SQUARED MV	[1E10 1F49 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14B, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_322)
{
    // 33B7 0061;	
    // („é∑) SQUARE MV	[1E10 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B7, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_323)
{
    // 33B7 0041;	
    // („é∑) SQUARE MV	[1E10 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33B7, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_324)
{
    // 33B9 0061;	
    // („éπ) SQUARE MV MEGA	[1E10 1F49 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33B9, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_325)
{
    // 1F14B 0061;	
    // (üÖã) SQUARED MV	[1E10 1F49 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14B, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_326)
{
    // 33B9 0041;	
    // („éπ) SQUARE MV MEGA	[1E10 1F49 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33B9, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_327)
{
    // 1F14B 0041;	
    // (üÖã) SQUARED MV	[1E10 1F49 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F14B, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_328)
{
    // 33B7 0062;	
    // („é∑) SQUARE MV	[1E10 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B7, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_329)
{
    // 33B9 0062;	
    // („éπ) SQUARE MV MEGA	[1E10 1F49 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33B9, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_330)
{
    // 1F14B 0062;	
    // (üÖã) SQUARED MV	[1E10 1F49 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14B, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_331)
{
    // 33BD 0021;	
    // („éΩ) SQUARE MW	[1E10 1F5B 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BD, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_332)
{
    // 33BF 0021;	
    // („éø) SQUARE MW MEGA	[1E10 1F5B 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33BF, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_333)
{
    // 33BD 003F;	
    // („éΩ) SQUARE MW	[1E10 1F5B 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BD, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_334)
{
    // 33BF 003F;	
    // („éø) SQUARE MW MEGA	[1E10 1F5B 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33BF, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_335)
{
    // 33BD 0061;	
    // („éΩ) SQUARE MW	[1E10 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BD, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_336)
{
    // 33BD 0041;	
    // („éΩ) SQUARE MW	[1E10 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33BD, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_337)
{
    // 33BF 0061;	
    // („éø) SQUARE MW MEGA	[1E10 1F5B 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33BF, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_338)
{
    // 33BF 0041;	
    // („éø) SQUARE MW MEGA	[1E10 1F5B 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33BF, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_339)
{
    // 33BD 0062;	
    // („éΩ) SQUARE MW	[1E10 1F5B 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BD, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_340)
{
    // 33BF 0062;	
    // („éø) SQUARE MW MEGA	[1E10 1F5B 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33BF, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_341)
{
    // 33C1 0021;	
    // („èÅ) SQUARE M OHM	[1E10 2047 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33C1, 0x0021 };
    uint32_t const ces[12] = { 0x1E10, 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_342)
{
    // 33C1 003F;	
    // („èÅ) SQUARE M OHM	[1E10 2047 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33C1, 0x003F };
    uint32_t const ces[12] = { 0x1E10, 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_343)
{
    // 33C1 0061;	
    // („èÅ) SQUARE M OHM	[1E10 2047 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33C1, 0x0061 };
    uint32_t const ces[12] = { 0x1E10, 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_344)
{
    // 33C1 0041;	
    // („èÅ) SQUARE M OHM	[1E10 2047 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33C1, 0x0041 };
    uint32_t const ces[12] = { 0x1E10, 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_345)
{
    // 33C1 0062;	
    // („èÅ) SQUARE M OHM	[1E10 2047 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33C1, 0x0062 };
    uint32_t const ces[12] = { 0x1E10, 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_346)
{
    // 0334 1DDF;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DDF };
    uint32_t const ces[8] = { 0x1E14, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_347)
{
    // 1DDF 0334;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DDF, 0x0334 };
    uint32_t const ces[8] = { 0x1E14, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_348)
{
    // 1D0D 0021;	
    // (·¥ç) LATIN LETTER SMALL CAPITAL M	[1E14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D, 0x0021 };
    uint32_t const ces[9] = { 0x1E14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_349)
{
    // 1DDF 0021;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDF, 0x0021 };
    uint32_t const ces[9] = { 0x1E14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_350)
{
    // 1D0D 003F;	
    // (·¥ç) LATIN LETTER SMALL CAPITAL M	[1E14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D, 0x003F };
    uint32_t const ces[9] = { 0x1E14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_351)
{
    // 1DDF 003F;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDF, 0x003F };
    uint32_t const ces[9] = { 0x1E14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_352)
{
    // 1D0D 0061;	
    // (·¥ç) LATIN LETTER SMALL CAPITAL M	[1E14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D, 0x0061 };
    uint32_t const ces[9] = { 0x1E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_353)
{
    // 1D0D 0041;	
    // (·¥ç) LATIN LETTER SMALL CAPITAL M	[1E14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D, 0x0041 };
    uint32_t const ces[9] = { 0x1E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_354)
{
    // 1DDF 0061;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDF, 0x0061 };
    uint32_t const ces[9] = { 0x1E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_355)
{
    // 1DDF 0041;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DDF, 0x0041 };
    uint32_t const ces[9] = { 0x1E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_356)
{
    // 1D0D 0062;	
    // (·¥ç) LATIN LETTER SMALL CAPITAL M	[1E14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D, 0x0062 };
    uint32_t const ces[9] = { 0x1E14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_357)
{
    // 1DDF 0062;	
    // (·∑ü) COMBINING LATIN LETTER SMALL CAPITAL M	[1E14 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDF, 0x0062 };
    uint32_t const ces[9] = { 0x1E14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_358)
{
    // 1D6F 0021;	
    // (·µØ) LATIN SMALL LETTER M WITH MIDDLE TILDE	[1E15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6F, 0x0021 };
    uint32_t const ces[9] = { 0x1E15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_359)
{
    // 1D6F 003F;	
    // (·µØ) LATIN SMALL LETTER M WITH MIDDLE TILDE	[1E15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6F, 0x003F };
    uint32_t const ces[9] = { 0x1E15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_360)
{
    // 1D6F 0061;	
    // (·µØ) LATIN SMALL LETTER M WITH MIDDLE TILDE	[1E15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6F, 0x0061 };
    uint32_t const ces[9] = { 0x1E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_361)
{
    // 1D6F 0041;	
    // (·µØ) LATIN SMALL LETTER M WITH MIDDLE TILDE	[1E15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D6F, 0x0041 };
    uint32_t const ces[9] = { 0x1E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_362)
{
    // 1D6F 0062;	
    // (·µØ) LATIN SMALL LETTER M WITH MIDDLE TILDE	[1E15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6F, 0x0062 };
    uint32_t const ces[9] = { 0x1E15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_363)
{
    // 1D86 0021;	
    // (·∂Ü) LATIN SMALL LETTER M WITH PALATAL HOOK	[1E16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86, 0x0021 };
    uint32_t const ces[9] = { 0x1E16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_364)
{
    // 1D86 003F;	
    // (·∂Ü) LATIN SMALL LETTER M WITH PALATAL HOOK	[1E16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86, 0x003F };
    uint32_t const ces[9] = { 0x1E16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_365)
{
    // 1D86 0061;	
    // (·∂Ü) LATIN SMALL LETTER M WITH PALATAL HOOK	[1E16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86, 0x0061 };
    uint32_t const ces[9] = { 0x1E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_366)
{
    // 1D86 0041;	
    // (·∂Ü) LATIN SMALL LETTER M WITH PALATAL HOOK	[1E16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86, 0x0041 };
    uint32_t const ces[9] = { 0x1E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_367)
{
    // 1D86 0062;	
    // (·∂Ü) LATIN SMALL LETTER M WITH PALATAL HOOK	[1E16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86, 0x0062 };
    uint32_t const ces[9] = { 0x1E16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_368)
{
    // 0271 0021;	
    // (…±) LATIN SMALL LETTER M WITH HOOK	[1E17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0271, 0x0021 };
    uint32_t const ces[9] = { 0x1E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_369)
{
    // 2C6E 0021;	
    // (‚±Æ) LATIN CAPITAL LETTER M WITH HOOK	[1E17 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6E, 0x0021 };
    uint32_t const ces[9] = { 0x1E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_370)
{
    // 1DAC 0021;	
    // (·∂¨) MODIFIER LETTER SMALL M WITH HOOK	[1E17 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DAC, 0x0021 };
    uint32_t const ces[9] = { 0x1E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_371)
{
    // 0271 003F;	
    // (…±) LATIN SMALL LETTER M WITH HOOK	[1E17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0271, 0x003F };
    uint32_t const ces[9] = { 0x1E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_372)
{
    // 2C6E 003F;	
    // (‚±Æ) LATIN CAPITAL LETTER M WITH HOOK	[1E17 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6E, 0x003F };
    uint32_t const ces[9] = { 0x1E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_373)
{
    // 1DAC 003F;	
    // (·∂¨) MODIFIER LETTER SMALL M WITH HOOK	[1E17 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DAC, 0x003F };
    uint32_t const ces[9] = { 0x1E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_374)
{
    // 0271 0061;	
    // (…±) LATIN SMALL LETTER M WITH HOOK	[1E17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0271, 0x0061 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_375)
{
    // 0271 0041;	
    // (…±) LATIN SMALL LETTER M WITH HOOK	[1E17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0271, 0x0041 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_376)
{
    // 2C6E 0061;	
    // (‚±Æ) LATIN CAPITAL LETTER M WITH HOOK	[1E17 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6E, 0x0061 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_377)
{
    // 2C6E 0041;	
    // (‚±Æ) LATIN CAPITAL LETTER M WITH HOOK	[1E17 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C6E, 0x0041 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_378)
{
    // 1DAC 0061;	
    // (·∂¨) MODIFIER LETTER SMALL M WITH HOOK	[1E17 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DAC, 0x0061 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_379)
{
    // 1DAC 0041;	
    // (·∂¨) MODIFIER LETTER SMALL M WITH HOOK	[1E17 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DAC, 0x0041 };
    uint32_t const ces[9] = { 0x1E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_380)
{
    // 0271 0062;	
    // (…±) LATIN SMALL LETTER M WITH HOOK	[1E17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0271, 0x0062 };
    uint32_t const ces[9] = { 0x1E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_381)
{
    // 2C6E 0062;	
    // (‚±Æ) LATIN CAPITAL LETTER M WITH HOOK	[1E17 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6E, 0x0062 };
    uint32_t const ces[9] = { 0x1E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_382)
{
    // 1DAC 0062;	
    // (·∂¨) MODIFIER LETTER SMALL M WITH HOOK	[1E17 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DAC, 0x0062 };
    uint32_t const ces[9] = { 0x1E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_383)
{
    // AB3A 0021;	
    // (Í¨∫) LATIN SMALL LETTER M WITH CROSSED-TAIL	[1E1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB3A, 0x0021 };
    uint32_t const ces[9] = { 0x1E1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_384)
{
    // AB3A 003F;	
    // (Í¨∫) LATIN SMALL LETTER M WITH CROSSED-TAIL	[1E1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB3A, 0x003F };
    uint32_t const ces[9] = { 0x1E1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_385)
{
    // AB3A 0061;	
    // (Í¨∫) LATIN SMALL LETTER M WITH CROSSED-TAIL	[1E1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB3A, 0x0061 };
    uint32_t const ces[9] = { 0x1E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_386)
{
    // AB3A 0041;	
    // (Í¨∫) LATIN SMALL LETTER M WITH CROSSED-TAIL	[1E1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB3A, 0x0041 };
    uint32_t const ces[9] = { 0x1E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_387)
{
    // AB3A 0062;	
    // (Í¨∫) LATIN SMALL LETTER M WITH CROSSED-TAIL	[1E1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB3A, 0x0062 };
    uint32_t const ces[9] = { 0x1E1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_388)
{
    // A7FD 0021;	
    // (ÍüΩ) LATIN EPIGRAPHIC LETTER INVERTED M	[1E1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FD, 0x0021 };
    uint32_t const ces[9] = { 0x1E1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_389)
{
    // A7FD 003F;	
    // (ÍüΩ) LATIN EPIGRAPHIC LETTER INVERTED M	[1E1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FD, 0x003F };
    uint32_t const ces[9] = { 0x1E1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_390)
{
    // A7FD 0061;	
    // (ÍüΩ) LATIN EPIGRAPHIC LETTER INVERTED M	[1E1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FD, 0x0061 };
    uint32_t const ces[9] = { 0x1E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_391)
{
    // A7FD 0041;	
    // (ÍüΩ) LATIN EPIGRAPHIC LETTER INVERTED M	[1E1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA7FD, 0x0041 };
    uint32_t const ces[9] = { 0x1E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_392)
{
    // A7FD 0062;	
    // (ÍüΩ) LATIN EPIGRAPHIC LETTER INVERTED M	[1E1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FD, 0x0062 };
    uint32_t const ces[9] = { 0x1E1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_393)
{
    // A7FF 0021;	
    // (Íüø) LATIN EPIGRAPHIC LETTER ARCHAIC M	[1E1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FF, 0x0021 };
    uint32_t const ces[9] = { 0x1E1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_394)
{
    // A7FF 003F;	
    // (Íüø) LATIN EPIGRAPHIC LETTER ARCHAIC M	[1E1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FF, 0x003F };
    uint32_t const ces[9] = { 0x1E1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_395)
{
    // A7FF 0061;	
    // (Íüø) LATIN EPIGRAPHIC LETTER ARCHAIC M	[1E1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FF, 0x0061 };
    uint32_t const ces[9] = { 0x1E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_396)
{
    // A7FF 0041;	
    // (Íüø) LATIN EPIGRAPHIC LETTER ARCHAIC M	[1E1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA7FF, 0x0041 };
    uint32_t const ces[9] = { 0x1E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_397)
{
    // A7FF 0062;	
    // (Íüø) LATIN EPIGRAPHIC LETTER ARCHAIC M	[1E1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FF, 0x0062 };
    uint32_t const ces[9] = { 0x1E1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_398)
{
    // A773 0021;	
    // (Íù≥) LATIN SMALL LETTER MUM	[1E1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA773, 0x0021 };
    uint32_t const ces[9] = { 0x1E1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_399)
{
    // A773 003F;	
    // (Íù≥) LATIN SMALL LETTER MUM	[1E1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA773, 0x003F };
    uint32_t const ces[9] = { 0x1E1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_400)
{
    // A773 0061;	
    // (Íù≥) LATIN SMALL LETTER MUM	[1E1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA773, 0x0061 };
    uint32_t const ces[9] = { 0x1E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_401)
{
    // A773 0041;	
    // (Íù≥) LATIN SMALL LETTER MUM	[1E1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA773, 0x0041 };
    uint32_t const ces[9] = { 0x1E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_402)
{
    // A773 0062;	
    // (Íù≥) LATIN SMALL LETTER MUM	[1E1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA773, 0x0062 };
    uint32_t const ces[9] = { 0x1E1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_403)
{
    // 006E 0301 0334;	
    // (≈Ñ) LATIN SMALL LETTER N, COMBINING ACUTE ACCENT	[1E1F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_404)
{
    // 006E 0334 0301;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_405)
{
    // 006E 0341 0334;	
    // (≈Ñ) LATIN SMALL LETTER N, COMBINING ACUTE TONE MARK	[1E1F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_406)
{
    // 0144 0334;	
    // (≈Ñ) LATIN SMALL LETTER N WITH ACUTE	[1E1F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0144, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_407)
{
    // 004E 0301 0334;	
    // (≈É) LATIN CAPITAL LETTER N, COMBINING ACUTE ACCENT	[1E1F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_408)
{
    // 004E 0334 0301;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_409)
{
    // 004E 0341 0334;	
    // (≈É) LATIN CAPITAL LETTER N, COMBINING ACUTE TONE MARK	[1E1F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_410)
{
    // 0143 0334;	
    // (≈É) LATIN CAPITAL LETTER N WITH ACUTE	[1E1F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0143, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_411)
{
    // 006E 0300 0334;	
    // («π) LATIN SMALL LETTER N, COMBINING GRAVE ACCENT	[1E1F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_412)
{
    // 006E 0334 0300;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_413)
{
    // 006E 0334 0340;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_414)
{
    // 006E 0340 0334;	
    // («π) LATIN SMALL LETTER N, COMBINING GRAVE TONE MARK	[1E1F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_415)
{
    // 004E 0300 0334;	
    // («∏) LATIN CAPITAL LETTER N, COMBINING GRAVE ACCENT	[1E1F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_416)
{
    // 004E 0334 0300;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_417)
{
    // 004E 0334 0340;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_418)
{
    // 004E 0340 0334;	
    // («∏) LATIN CAPITAL LETTER N, COMBINING GRAVE TONE MARK	[1E1F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_419)
{
    // 006E 030C 0334;	
    // (≈à) LATIN SMALL LETTER N, COMBINING CARON	[1E1F | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_420)
{
    // 006E 0334 030C;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_421)
{
    // 0148 0334;	
    // (≈à) LATIN SMALL LETTER N WITH CARON	[1E1F | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0148, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_422)
{
    // 004E 030C 0334;	
    // (≈á) LATIN CAPITAL LETTER N, COMBINING CARON	[1E1F | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_423)
{
    // 004E 0334 030C;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_424)
{
    // 0147 0334;	
    // (≈á) LATIN CAPITAL LETTER N WITH CARON	[1E1F | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0147, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_425)
{
    // 006E 0303 0334;	
    // (√±) LATIN SMALL LETTER N, COMBINING TILDE	[1E1F | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_426)
{
    // 006E 0334 0303;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_427)
{
    // 00F1 0334;	
    // (√±) LATIN SMALL LETTER N WITH TILDE	[1E1F | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F1, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_428)
{
    // 004E 0303 0334;	
    // (√ë) LATIN CAPITAL LETTER N, COMBINING TILDE	[1E1F | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_429)
{
    // 004E 0334 0303;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_430)
{
    // 00D1 0334;	
    // (√ë) LATIN CAPITAL LETTER N WITH TILDE	[1E1F | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D1, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_431)
{
    // 006E 0307 0334;	
    // (·πÖ) LATIN SMALL LETTER N, COMBINING DOT ABOVE	[1E1F | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_432)
{
    // 006E 0334 0307;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_433)
{
    // 1E45 0334;	
    // (·πÖ) LATIN SMALL LETTER N WITH DOT ABOVE	[1E1F | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E45, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_434)
{
    // 004E 0307 0334;	
    // (·πÑ) LATIN CAPITAL LETTER N, COMBINING DOT ABOVE	[1E1F | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_435)
{
    // 004E 0334 0307;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_436)
{
    // 1E44 0334;	
    // (·πÑ) LATIN CAPITAL LETTER N WITH DOT ABOVE	[1E1F | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E44, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_437)
{
    // 006E 0327 0334;	
    // (≈Ü) LATIN SMALL LETTER N, COMBINING CEDILLA	[1E1F | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_438)
{
    // 006E 0334 0327;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_439)
{
    // 0146 0334;	
    // (≈Ü) LATIN SMALL LETTER N WITH CEDILLA	[1E1F | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0146, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_440)
{
    // 004E 0327 0334;	
    // (≈Ö) LATIN CAPITAL LETTER N, COMBINING CEDILLA	[1E1F | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_441)
{
    // 004E 0334 0327;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_442)
{
    // 0145 0334;	
    // (≈Ö) LATIN CAPITAL LETTER N WITH CEDILLA	[1E1F | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0145, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_443)
{
    // 006E 0323 0334;	
    // (·πá) LATIN SMALL LETTER N, COMBINING DOT BELOW	[1E1F | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_444)
{
    // 006E 0334 0323;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_445)
{
    // 1E47 0334;	
    // (·πá) LATIN SMALL LETTER N WITH DOT BELOW	[1E1F | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E47, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_446)
{
    // 004E 0323 0334;	
    // (·πÜ) LATIN CAPITAL LETTER N, COMBINING DOT BELOW	[1E1F | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_447)
{
    // 004E 0334 0323;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_448)
{
    // 1E46 0334;	
    // (·πÜ) LATIN CAPITAL LETTER N WITH DOT BELOW	[1E1F | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E46, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_449)
{
    // 006E 032D 0334;	
    // (·πã) LATIN SMALL LETTER N, COMBINING CIRCUMFLEX ACCENT BELOW	[1E1F | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x032D, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_450)
{
    // 006E 0334 032D;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x032D };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_451)
{
    // 1E4B 0334;	
    // (·πã) LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW	[1E1F | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E4B, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_452)
{
    // 004E 032D 0334;	
    // (·πä) LATIN CAPITAL LETTER N, COMBINING CIRCUMFLEX ACCENT BELOW	[1E1F | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x032D, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_453)
{
    // 004E 0334 032D;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x032D };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_454)
{
    // 1E4A 0334;	
    // (·πä) LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW	[1E1F | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E4A, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_455)
{
    // 006E 0331 0334;	
    // (·πâ) LATIN SMALL LETTER N, COMBINING MACRON BELOW	[1E1F | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_456)
{
    // 006E 0334 0331;	
    // (nÃ¥) LATIN SMALL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x006E, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_457)
{
    // 1E49 0334;	
    // (·πâ) LATIN SMALL LETTER N WITH LINE BELOW	[1E1F | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E49, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_458)
{
    // 004E 0331 0334;	
    // (·πà) LATIN CAPITAL LETTER N, COMBINING MACRON BELOW	[1E1F | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_459)
{
    // 004E 0334 0331;	
    // (NÃ¥) LATIN CAPITAL LETTER N, COMBINING TILDE OVERLAY	[1E1F | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x004E, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_460)
{
    // 1E48 0334;	
    // (·πà) LATIN CAPITAL LETTER N WITH LINE BELOW	[1E1F | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E48, 0x0334 };
    uint32_t const ces[10] = { 0x1E1F, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_461)
{
    // 0334 1DE0;	
    // (·∑†) COMBINING LATIN SMALL LETTER N	[1E1F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE0 };
    uint32_t const ces[8] = { 0x1E1F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_462)
{
    // 1DE0 0334;	
    // (·∑†) COMBINING LATIN SMALL LETTER N	[1E1F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE0, 0x0334 };
    uint32_t const ces[8] = { 0x1E1F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_463)
{
    // 006E 0021;	
    // (n) LATIN SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x006E, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_464)
{
    // FF4E 0021;	
    // (ÔΩé) FULLWIDTH LATIN SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF4E, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_465)
{
    // 1DE0 0021;	
    // (·∑†) COMBINING LATIN SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE0, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_466)
{
    // 1D427 0021;	
    // (ùêß) MATHEMATICAL BOLD SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D427, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_467)
{
    // 1D45B 0021;	
    // (ùëõ) MATHEMATICAL ITALIC SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45B, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_468)
{
    // 1D48F 0021;	
    // (ùíè) MATHEMATICAL BOLD ITALIC SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48F, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_469)
{
    // 1D4C3 0021;	
    // (ùìÉ) MATHEMATICAL SCRIPT SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C3, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_470)
{
    // 1D4F7 0021;	
    // (ùì∑) MATHEMATICAL BOLD SCRIPT SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F7, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_471)
{
    // 1D52B 0021;	
    // (ùî´) MATHEMATICAL FRAKTUR SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52B, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_472)
{
    // 1D55F 0021;	
    // (ùïü) MATHEMATICAL DOUBLE-STRUCK SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55F, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_473)
{
    // 1D593 0021;	
    // (ùñì) MATHEMATICAL BOLD FRAKTUR SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D593, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_474)
{
    // 1D5C7 0021;	
    // (ùóá) MATHEMATICAL SANS-SERIF SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C7, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_475)
{
    // 1D5FB 0021;	
    // (ùóª) MATHEMATICAL SANS-SERIF BOLD SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FB, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_476)
{
    // 1D62F 0021;	
    // (ùòØ) MATHEMATICAL SANS-SERIF ITALIC SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62F, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_477)
{
    // 1D663 0021;	
    // (ùô£) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D663, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_478)
{
    // 1D697 0021;	
    // (ùöó) MATHEMATICAL MONOSPACE SMALL N	[1E1F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D697, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_479)
{
    // 24DD 0021;	
    // (‚ìù) CIRCLED LATIN SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DD, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_480)
{
    // 004E 0021;	
    // (N) LATIN CAPITAL LETTER N	[1E1F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x004E, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_481)
{
    // FF2E 0021;	
    // (ÔºÆ) FULLWIDTH LATIN CAPITAL LETTER N	[1E1F 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF2E, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_482)
{
    // 2115 0021;	
    // (‚Ñï) DOUBLE-STRUCK CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2115, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_483)
{
    // 1D40D 0021;	
    // (ùêç) MATHEMATICAL BOLD CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40D, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_484)
{
    // 1D441 0021;	
    // (ùëÅ) MATHEMATICAL ITALIC CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D441, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_485)
{
    // 1D475 0021;	
    // (ùëµ) MATHEMATICAL BOLD ITALIC CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D475, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_486)
{
    // 1D4A9 0021;	
    // (ùí©) MATHEMATICAL SCRIPT CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4A9, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_487)
{
    // 1D4DD 0021;	
    // (ùìù) MATHEMATICAL BOLD SCRIPT CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DD, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_488)
{
    // 1D511 0021;	
    // (ùîë) MATHEMATICAL FRAKTUR CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D511, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_489)
{
    // 1D579 0021;	
    // (ùïπ) MATHEMATICAL BOLD FRAKTUR CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D579, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_490)
{
    // 1D5AD 0021;	
    // (ùñ≠) MATHEMATICAL SANS-SERIF CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AD, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_491)
{
    // 1D5E1 0021;	
    // (ùó°) MATHEMATICAL SANS-SERIF BOLD CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E1, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_492)
{
    // 1D615 0021;	
    // (ùòï) MATHEMATICAL SANS-SERIF ITALIC CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D615, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_493)
{
    // 1D649 0021;	
    // (ùôâ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D649, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_494)
{
    // 1D67D 0021;	
    // (ùôΩ) MATHEMATICAL MONOSPACE CAPITAL N	[1E1F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67D, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_495)
{
    // 24C3 0021;	
    // (‚ìÉ) CIRCLED LATIN CAPITAL LETTER N	[1E1F 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C3, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_496)
{
    // 1F15D 0021;	
    // (üÖù) NEGATIVE CIRCLED LATIN CAPITAL LETTER N	[1E1F 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15D, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_497)
{
    // 207F 0021;	
    // (‚Åø) SUPERSCRIPT LATIN SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207F, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_498)
{
    // 2099 0021;	
    // (‚Çô) LATIN SUBSCRIPT SMALL LETTER N	[1E1F 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2099, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_113_499)
{
    // 1D3A 0021;	
    // (·¥∫) MODIFIER LETTER CAPITAL N	[1E1F 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3A, 0x0021 };
    uint32_t const ces[9] = { 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

