// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_132_000)
{
    // 1D6ED 0062;	
    // (ùõ≠) MATHEMATICAL ITALIC CAPITAL MU	[2031 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6ED, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_001)
{
    // 1D727 0062;	
    // (ùúß) MATHEMATICAL BOLD ITALIC CAPITAL MU	[2031 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D727, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_002)
{
    // 1D761 0062;	
    // (ùù°) MATHEMATICAL SANS-SERIF BOLD CAPITAL MU	[2031 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D761, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_003)
{
    // 1D79B 0062;	
    // (ùûõ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU	[2031 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79B, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_004)
{
    // 338C 0021;	
    // („éå) SQUARE MU F	[2031 1D4B 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338C, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_005)
{
    // 338C 003F;	
    // („éå) SQUARE MU F	[2031 1D4B 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338C, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_006)
{
    // 338C 0061;	
    // („éå) SQUARE MU F	[2031 1D4B 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338C, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_007)
{
    // 338C 0041;	
    // („éå) SQUARE MU F	[2031 1D4B 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x338C, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_008)
{
    // 338C 0062;	
    // („éå) SQUARE MU F	[2031 1D4B 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338C, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_009)
{
    // 338D 0021;	
    // („éç) SQUARE MU G	[2031 1D5A 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338D, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_010)
{
    // 338D 003F;	
    // („éç) SQUARE MU G	[2031 1D5A 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338D, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_011)
{
    // 338D 0061;	
    // („éç) SQUARE MU G	[2031 1D5A 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338D, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_012)
{
    // 338D 0041;	
    // („éç) SQUARE MU G	[2031 1D5A 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x338D, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_013)
{
    // 338D 0062;	
    // („éç) SQUARE MU G	[2031 1D5A 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x338D, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_014)
{
    // 3395 0021;	
    // („éï) SQUARE MU L	[2031 1DDD 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3395, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_015)
{
    // 3395 003F;	
    // („éï) SQUARE MU L	[2031 1DDD 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3395, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_016)
{
    // 3395 0061;	
    // („éï) SQUARE MU L	[2031 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3395, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_017)
{
    // 3395 0041;	
    // („éï) SQUARE MU L	[2031 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3395, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_018)
{
    // 3395 0062;	
    // („éï) SQUARE MU L	[2031 1DDD 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3395, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_019)
{
    // 339B 0021;	
    // („éõ) SQUARE MU M	[2031 1E10 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339B, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_020)
{
    // 339B 003F;	
    // („éõ) SQUARE MU M	[2031 1E10 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339B, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_021)
{
    // 339B 0061;	
    // („éõ) SQUARE MU M	[2031 1E10 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339B, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_022)
{
    // 339B 0041;	
    // („éõ) SQUARE MU M	[2031 1E10 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x339B, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_023)
{
    // 339B 0062;	
    // („éõ) SQUARE MU M	[2031 1E10 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x339B, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_024)
{
    // 33B2 0021;	
    // („é≤) SQUARE MU S	[2031 1ED7 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B2, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_025)
{
    // 33B2 003F;	
    // („é≤) SQUARE MU S	[2031 1ED7 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B2, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_026)
{
    // 33B2 0061;	
    // („é≤) SQUARE MU S	[2031 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B2, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_027)
{
    // 33B2 0041;	
    // („é≤) SQUARE MU S	[2031 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33B2, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_028)
{
    // 33B2 0062;	
    // („é≤) SQUARE MU S	[2031 1ED7 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B2, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_029)
{
    // 33B6 0021;	
    // („é∂) SQUARE MU V	[2031 1F49 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B6, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_030)
{
    // 33B6 003F;	
    // („é∂) SQUARE MU V	[2031 1F49 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B6, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_031)
{
    // 33B6 0061;	
    // („é∂) SQUARE MU V	[2031 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B6, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_032)
{
    // 33B6 0041;	
    // („é∂) SQUARE MU V	[2031 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33B6, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_033)
{
    // 33B6 0062;	
    // („é∂) SQUARE MU V	[2031 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B6, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_034)
{
    // 33BC 0021;	
    // („éº) SQUARE MU W	[2031 1F5B 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BC, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_035)
{
    // 33BC 003F;	
    // („éº) SQUARE MU W	[2031 1F5B 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BC, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_036)
{
    // 33BC 0061;	
    // („éº) SQUARE MU W	[2031 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BC, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_037)
{
    // 33BC 0041;	
    // („éº) SQUARE MU W	[2031 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33BC, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_038)
{
    // 33BC 0062;	
    // („éº) SQUARE MU W	[2031 1F5B 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BC, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_039)
{
    // 03BD 0021;	
    // (ŒΩ) GREEK SMALL LETTER NU	[2032 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BD, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_040)
{
    // 1D6CE 0021;	
    // (ùõé) MATHEMATICAL BOLD SMALL NU	[2032 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CE, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_041)
{
    // 1D708 0021;	
    // (ùúà) MATHEMATICAL ITALIC SMALL NU	[2032 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D708, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_042)
{
    // 1D742 0021;	
    // (ùùÇ) MATHEMATICAL BOLD ITALIC SMALL NU	[2032 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D742, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_043)
{
    // 1D77C 0021;	
    // (ùùº) MATHEMATICAL SANS-SERIF BOLD SMALL NU	[2032 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77C, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_044)
{
    // 1D7B6 0021;	
    // (ùû∂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU	[2032 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B6, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_045)
{
    // 039D 0021;	
    // (Œù) GREEK CAPITAL LETTER NU	[2032 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039D, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_046)
{
    // 1D6B4 0021;	
    // (ùö¥) MATHEMATICAL BOLD CAPITAL NU	[2032 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B4, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_047)
{
    // 1D6EE 0021;	
    // (ùõÆ) MATHEMATICAL ITALIC CAPITAL NU	[2032 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EE, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_048)
{
    // 1D728 0021;	
    // (ùú®) MATHEMATICAL BOLD ITALIC CAPITAL NU	[2032 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D728, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_049)
{
    // 1D762 0021;	
    // (ùù¢) MATHEMATICAL SANS-SERIF BOLD CAPITAL NU	[2032 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D762, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_050)
{
    // 1D79C 0021;	
    // (ùûú) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU	[2032 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79C, 0x0021 };
    uint32_t const ces[9] = { 0x2032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_051)
{
    // 03BD 003F;	
    // (ŒΩ) GREEK SMALL LETTER NU	[2032 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BD, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_052)
{
    // 1D6CE 003F;	
    // (ùõé) MATHEMATICAL BOLD SMALL NU	[2032 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CE, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_053)
{
    // 1D708 003F;	
    // (ùúà) MATHEMATICAL ITALIC SMALL NU	[2032 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D708, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_054)
{
    // 1D742 003F;	
    // (ùùÇ) MATHEMATICAL BOLD ITALIC SMALL NU	[2032 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D742, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_055)
{
    // 1D77C 003F;	
    // (ùùº) MATHEMATICAL SANS-SERIF BOLD SMALL NU	[2032 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77C, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_056)
{
    // 1D7B6 003F;	
    // (ùû∂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU	[2032 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B6, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_057)
{
    // 039D 003F;	
    // (Œù) GREEK CAPITAL LETTER NU	[2032 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039D, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_058)
{
    // 1D6B4 003F;	
    // (ùö¥) MATHEMATICAL BOLD CAPITAL NU	[2032 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B4, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_059)
{
    // 1D6EE 003F;	
    // (ùõÆ) MATHEMATICAL ITALIC CAPITAL NU	[2032 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EE, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_060)
{
    // 1D728 003F;	
    // (ùú®) MATHEMATICAL BOLD ITALIC CAPITAL NU	[2032 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D728, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_061)
{
    // 1D762 003F;	
    // (ùù¢) MATHEMATICAL SANS-SERIF BOLD CAPITAL NU	[2032 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D762, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_062)
{
    // 1D79C 003F;	
    // (ùûú) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU	[2032 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79C, 0x003F };
    uint32_t const ces[9] = { 0x2032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_063)
{
    // 03BD 0061;	
    // (ŒΩ) GREEK SMALL LETTER NU	[2032 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BD, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_064)
{
    // 03BD 0041;	
    // (ŒΩ) GREEK SMALL LETTER NU	[2032 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BD, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_065)
{
    // 1D6CE 0061;	
    // (ùõé) MATHEMATICAL BOLD SMALL NU	[2032 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CE, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_066)
{
    // 1D708 0061;	
    // (ùúà) MATHEMATICAL ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D708, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_067)
{
    // 1D742 0061;	
    // (ùùÇ) MATHEMATICAL BOLD ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D742, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_068)
{
    // 1D77C 0061;	
    // (ùùº) MATHEMATICAL SANS-SERIF BOLD SMALL NU	[2032 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77C, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_069)
{
    // 1D7B6 0061;	
    // (ùû∂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B6, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_070)
{
    // 1D6CE 0041;	
    // (ùõé) MATHEMATICAL BOLD SMALL NU	[2032 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CE, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_071)
{
    // 1D708 0041;	
    // (ùúà) MATHEMATICAL ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D708, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_072)
{
    // 1D742 0041;	
    // (ùùÇ) MATHEMATICAL BOLD ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D742, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_073)
{
    // 1D77C 0041;	
    // (ùùº) MATHEMATICAL SANS-SERIF BOLD SMALL NU	[2032 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77C, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_074)
{
    // 1D7B6 0041;	
    // (ùû∂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU	[2032 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B6, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_075)
{
    // 039D 0061;	
    // (Œù) GREEK CAPITAL LETTER NU	[2032 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039D, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_076)
{
    // 039D 0041;	
    // (Œù) GREEK CAPITAL LETTER NU	[2032 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039D, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_077)
{
    // 1D6B4 0061;	
    // (ùö¥) MATHEMATICAL BOLD CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B4, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_078)
{
    // 1D6EE 0061;	
    // (ùõÆ) MATHEMATICAL ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EE, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_079)
{
    // 1D728 0061;	
    // (ùú®) MATHEMATICAL BOLD ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D728, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_080)
{
    // 1D762 0061;	
    // (ùù¢) MATHEMATICAL SANS-SERIF BOLD CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D762, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_081)
{
    // 1D79C 0061;	
    // (ùûú) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79C, 0x0061 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_082)
{
    // 1D6B4 0041;	
    // (ùö¥) MATHEMATICAL BOLD CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B4, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_083)
{
    // 1D6EE 0041;	
    // (ùõÆ) MATHEMATICAL ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6EE, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_084)
{
    // 1D728 0041;	
    // (ùú®) MATHEMATICAL BOLD ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D728, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_085)
{
    // 1D762 0041;	
    // (ùù¢) MATHEMATICAL SANS-SERIF BOLD CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D762, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_086)
{
    // 1D79C 0041;	
    // (ùûú) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU	[2032 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79C, 0x0041 };
    uint32_t const ces[9] = { 0x2032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_087)
{
    // 03BD 0062;	
    // (ŒΩ) GREEK SMALL LETTER NU	[2032 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BD, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_088)
{
    // 1D6CE 0062;	
    // (ùõé) MATHEMATICAL BOLD SMALL NU	[2032 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CE, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_089)
{
    // 1D708 0062;	
    // (ùúà) MATHEMATICAL ITALIC SMALL NU	[2032 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D708, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_090)
{
    // 1D742 0062;	
    // (ùùÇ) MATHEMATICAL BOLD ITALIC SMALL NU	[2032 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D742, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_091)
{
    // 1D77C 0062;	
    // (ùùº) MATHEMATICAL SANS-SERIF BOLD SMALL NU	[2032 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77C, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_092)
{
    // 1D7B6 0062;	
    // (ùû∂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU	[2032 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B6, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_093)
{
    // 039D 0062;	
    // (Œù) GREEK CAPITAL LETTER NU	[2032 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039D, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_094)
{
    // 1D6B4 0062;	
    // (ùö¥) MATHEMATICAL BOLD CAPITAL NU	[2032 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B4, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_095)
{
    // 1D6EE 0062;	
    // (ùõÆ) MATHEMATICAL ITALIC CAPITAL NU	[2032 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EE, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_096)
{
    // 1D728 0062;	
    // (ùú®) MATHEMATICAL BOLD ITALIC CAPITAL NU	[2032 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D728, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_097)
{
    // 1D762 0062;	
    // (ùù¢) MATHEMATICAL SANS-SERIF BOLD CAPITAL NU	[2032 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D762, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_098)
{
    // 1D79C 0062;	
    // (ùûú) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU	[2032 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79C, 0x0062 };
    uint32_t const ces[9] = { 0x2032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_099)
{
    // 03BE 0021;	
    // (Œæ) GREEK SMALL LETTER XI	[2033 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BE, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_100)
{
    // 1D6CF 0021;	
    // (ùõè) MATHEMATICAL BOLD SMALL XI	[2033 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CF, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_101)
{
    // 1D709 0021;	
    // (ùúâ) MATHEMATICAL ITALIC SMALL XI	[2033 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D709, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_102)
{
    // 1D743 0021;	
    // (ùùÉ) MATHEMATICAL BOLD ITALIC SMALL XI	[2033 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D743, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_103)
{
    // 1D77D 0021;	
    // (ùùΩ) MATHEMATICAL SANS-SERIF BOLD SMALL XI	[2033 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77D, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_104)
{
    // 1D7B7 0021;	
    // (ùû∑) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI	[2033 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B7, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_105)
{
    // 039E 0021;	
    // (Œû) GREEK CAPITAL LETTER XI	[2033 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039E, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_106)
{
    // 1D6B5 0021;	
    // (ùöµ) MATHEMATICAL BOLD CAPITAL XI	[2033 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B5, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_107)
{
    // 1D6EF 0021;	
    // (ùõØ) MATHEMATICAL ITALIC CAPITAL XI	[2033 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EF, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_108)
{
    // 1D729 0021;	
    // (ùú©) MATHEMATICAL BOLD ITALIC CAPITAL XI	[2033 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D729, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_109)
{
    // 1D763 0021;	
    // (ùù£) MATHEMATICAL SANS-SERIF BOLD CAPITAL XI	[2033 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D763, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_110)
{
    // 1D79D 0021;	
    // (ùûù) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI	[2033 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79D, 0x0021 };
    uint32_t const ces[9] = { 0x2033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_111)
{
    // 03BE 003F;	
    // (Œæ) GREEK SMALL LETTER XI	[2033 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BE, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_112)
{
    // 1D6CF 003F;	
    // (ùõè) MATHEMATICAL BOLD SMALL XI	[2033 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CF, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_113)
{
    // 1D709 003F;	
    // (ùúâ) MATHEMATICAL ITALIC SMALL XI	[2033 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D709, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_114)
{
    // 1D743 003F;	
    // (ùùÉ) MATHEMATICAL BOLD ITALIC SMALL XI	[2033 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D743, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_115)
{
    // 1D77D 003F;	
    // (ùùΩ) MATHEMATICAL SANS-SERIF BOLD SMALL XI	[2033 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77D, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_116)
{
    // 1D7B7 003F;	
    // (ùû∑) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI	[2033 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B7, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_117)
{
    // 039E 003F;	
    // (Œû) GREEK CAPITAL LETTER XI	[2033 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039E, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_118)
{
    // 1D6B5 003F;	
    // (ùöµ) MATHEMATICAL BOLD CAPITAL XI	[2033 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B5, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_119)
{
    // 1D6EF 003F;	
    // (ùõØ) MATHEMATICAL ITALIC CAPITAL XI	[2033 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EF, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_120)
{
    // 1D729 003F;	
    // (ùú©) MATHEMATICAL BOLD ITALIC CAPITAL XI	[2033 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D729, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_121)
{
    // 1D763 003F;	
    // (ùù£) MATHEMATICAL SANS-SERIF BOLD CAPITAL XI	[2033 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D763, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_122)
{
    // 1D79D 003F;	
    // (ùûù) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI	[2033 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79D, 0x003F };
    uint32_t const ces[9] = { 0x2033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_123)
{
    // 03BE 0061;	
    // (Œæ) GREEK SMALL LETTER XI	[2033 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BE, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_124)
{
    // 03BE 0041;	
    // (Œæ) GREEK SMALL LETTER XI	[2033 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BE, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_125)
{
    // 1D6CF 0061;	
    // (ùõè) MATHEMATICAL BOLD SMALL XI	[2033 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CF, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_126)
{
    // 1D709 0061;	
    // (ùúâ) MATHEMATICAL ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D709, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_127)
{
    // 1D743 0061;	
    // (ùùÉ) MATHEMATICAL BOLD ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D743, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_128)
{
    // 1D77D 0061;	
    // (ùùΩ) MATHEMATICAL SANS-SERIF BOLD SMALL XI	[2033 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77D, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_129)
{
    // 1D7B7 0061;	
    // (ùû∑) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B7, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_130)
{
    // 1D6CF 0041;	
    // (ùõè) MATHEMATICAL BOLD SMALL XI	[2033 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CF, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_131)
{
    // 1D709 0041;	
    // (ùúâ) MATHEMATICAL ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D709, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_132)
{
    // 1D743 0041;	
    // (ùùÉ) MATHEMATICAL BOLD ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D743, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_133)
{
    // 1D77D 0041;	
    // (ùùΩ) MATHEMATICAL SANS-SERIF BOLD SMALL XI	[2033 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77D, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_134)
{
    // 1D7B7 0041;	
    // (ùû∑) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI	[2033 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B7, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_135)
{
    // 039E 0061;	
    // (Œû) GREEK CAPITAL LETTER XI	[2033 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039E, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_136)
{
    // 039E 0041;	
    // (Œû) GREEK CAPITAL LETTER XI	[2033 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039E, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_137)
{
    // 1D6B5 0061;	
    // (ùöµ) MATHEMATICAL BOLD CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B5, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_138)
{
    // 1D6EF 0061;	
    // (ùõØ) MATHEMATICAL ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EF, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_139)
{
    // 1D729 0061;	
    // (ùú©) MATHEMATICAL BOLD ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D729, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_140)
{
    // 1D763 0061;	
    // (ùù£) MATHEMATICAL SANS-SERIF BOLD CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D763, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_141)
{
    // 1D79D 0061;	
    // (ùûù) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79D, 0x0061 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_142)
{
    // 1D6B5 0041;	
    // (ùöµ) MATHEMATICAL BOLD CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B5, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_143)
{
    // 1D6EF 0041;	
    // (ùõØ) MATHEMATICAL ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6EF, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_144)
{
    // 1D729 0041;	
    // (ùú©) MATHEMATICAL BOLD ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D729, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_145)
{
    // 1D763 0041;	
    // (ùù£) MATHEMATICAL SANS-SERIF BOLD CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D763, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_146)
{
    // 1D79D 0041;	
    // (ùûù) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI	[2033 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79D, 0x0041 };
    uint32_t const ces[9] = { 0x2033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_147)
{
    // 03BE 0062;	
    // (Œæ) GREEK SMALL LETTER XI	[2033 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BE, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_148)
{
    // 1D6CF 0062;	
    // (ùõè) MATHEMATICAL BOLD SMALL XI	[2033 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CF, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_149)
{
    // 1D709 0062;	
    // (ùúâ) MATHEMATICAL ITALIC SMALL XI	[2033 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D709, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_150)
{
    // 1D743 0062;	
    // (ùùÉ) MATHEMATICAL BOLD ITALIC SMALL XI	[2033 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D743, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_151)
{
    // 1D77D 0062;	
    // (ùùΩ) MATHEMATICAL SANS-SERIF BOLD SMALL XI	[2033 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77D, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_152)
{
    // 1D7B7 0062;	
    // (ùû∑) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI	[2033 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B7, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_153)
{
    // 039E 0062;	
    // (Œû) GREEK CAPITAL LETTER XI	[2033 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039E, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_154)
{
    // 1D6B5 0062;	
    // (ùöµ) MATHEMATICAL BOLD CAPITAL XI	[2033 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B5, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_155)
{
    // 1D6EF 0062;	
    // (ùõØ) MATHEMATICAL ITALIC CAPITAL XI	[2033 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EF, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_156)
{
    // 1D729 0062;	
    // (ùú©) MATHEMATICAL BOLD ITALIC CAPITAL XI	[2033 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D729, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_157)
{
    // 1D763 0062;	
    // (ùù£) MATHEMATICAL SANS-SERIF BOLD CAPITAL XI	[2033 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D763, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_158)
{
    // 1D79D 0062;	
    // (ùûù) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI	[2033 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79D, 0x0062 };
    uint32_t const ces[9] = { 0x2033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_159)
{
    // 03BF 0313 0334;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_160)
{
    // 03BF 0334 0313;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_161)
{
    // 03BF 0334 0343;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0343 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_162)
{
    // 1F40 0334;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F40, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_163)
{
    // 039F 0313 0334;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_164)
{
    // 039F 0334 0313;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_165)
{
    // 039F 0334 0343;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0343 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_166)
{
    // 039F 0343 0334;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON, COMBINING GREEK KORONIS	[2034 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_167)
{
    // 03BF 0334 0313 0301;	
    // (·ΩÄÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0313, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_168)
{
    // 03BF 0334 0313 0341;	
    // (·ΩÄÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0313, 0x0341 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_169)
{
    // 1F40 0301 0334;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI, COMBINING ACUTE ACCENT	[2034 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F40, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_170)
{
    // 1F40 0341 0334;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI, COMBINING ACUTE TONE MARK	[2034 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F40, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_171)
{
    // 039F 0334 0343 0301;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[2034 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0334, 0x0343, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_172)
{
    // 039F 0334 0343 0341;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[2034 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0334, 0x0343, 0x0341 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_173)
{
    // 1F48 0334 0301;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON WITH PSILI, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F48, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_174)
{
    // 1F48 0334 0341;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON WITH PSILI, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F48, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_175)
{
    // 03BF 0334 0313 0300;	
    // (·ΩÄÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0313, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_176)
{
    // 03BF 0334 0313 0340;	
    // (·ΩÄÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2034 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0313, 0x0340 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_177)
{
    // 1F40 0300 0334;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI, COMBINING GRAVE ACCENT	[2034 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F40, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_178)
{
    // 1F40 0340 0334;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI, COMBINING GRAVE TONE MARK	[2034 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F40, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_179)
{
    // 039F 0343 0334 0300;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0343, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_180)
{
    // 039F 0343 0334 0340;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0343, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_181)
{
    // 1F48 0334 0300;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON WITH PSILI, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F48, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_182)
{
    // 1F48 0334 0340;	
    // (·ΩàÃ¥) GREEK CAPITAL LETTER OMICRON WITH PSILI, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F48, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_183)
{
    // 03BF 0314 0334;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_184)
{
    // 03BF 0334 0314;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_185)
{
    // 1F41 0334;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F41, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_186)
{
    // 039F 0314 0334;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_187)
{
    // 039F 0334 0314;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_188)
{
    // 1F49 0334;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F49, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_189)
{
    // 03BF 0334 0314 0301;	
    // (·ΩÅÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0314, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_190)
{
    // 03BF 0334 0314 0341;	
    // (·ΩÅÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0314, 0x0341 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_191)
{
    // 1F41 0301 0334;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA, COMBINING ACUTE ACCENT	[2034 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F41, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_192)
{
    // 1F41 0341 0334;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA, COMBINING ACUTE TONE MARK	[2034 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F41, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_193)
{
    // 039F 0314 0334 0301;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0314, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_194)
{
    // 039F 0334 0314 0301;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0334, 0x0314, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_195)
{
    // 1F49 0334 0301;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON WITH DASIA, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F49, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_196)
{
    // 1F49 0334 0341;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON WITH DASIA, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F49, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_197)
{
    // 03BF 0334 0314 0300;	
    // (·ΩÅÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0314, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_198)
{
    // 03BF 0334 0314 0340;	
    // (·ΩÅÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03BF, 0x0334, 0x0314, 0x0340 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_199)
{
    // 1F41 0300 0334;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA, COMBINING GRAVE ACCENT	[2034 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F41, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_200)
{
    // 1F41 0340 0334;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA, COMBINING GRAVE TONE MARK	[2034 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F41, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_201)
{
    // 039F 0314 0334 0300;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0314, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_202)
{
    // 039F 0334 0314 0300;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2034 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x039F, 0x0334, 0x0314, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_203)
{
    // 1F49 0334 0300;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON WITH DASIA, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F49, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_204)
{
    // 1F49 0334 0340;	
    // (·ΩâÃ¥) GREEK CAPITAL LETTER OMICRON WITH DASIA, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F49, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_205)
{
    // 03BF 0334 0301;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_206)
{
    // 03BF 0334 0341;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_207)
{
    // 03CC 0334;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CC, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_208)
{
    // 1F79 0334;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F79, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_209)
{
    // 038C 0334;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038C, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_210)
{
    // 039F 0334 0301;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_211)
{
    // 039F 0334 0341;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_212)
{
    // 1FF9 0334;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF9, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_213)
{
    // 03BF 0300 0334;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON, COMBINING GRAVE ACCENT	[2034 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_214)
{
    // 03BF 0334 0300;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_215)
{
    // 03BF 0334 0340;	
    // (ŒøÃ¥) GREEK SMALL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_216)
{
    // 03BF 0340 0334;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON, COMBINING GRAVE TONE MARK	[2034 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03BF, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_217)
{
    // 039F 0300 0334;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON, COMBINING GRAVE ACCENT	[2034 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_218)
{
    // 039F 0334 0300;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_219)
{
    // 039F 0334 0340;	
    // (ŒüÃ¥) GREEK CAPITAL LETTER OMICRON, COMBINING TILDE OVERLAY	[2034 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_220)
{
    // 039F 0340 0334;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON, COMBINING GRAVE TONE MARK	[2034 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x039F, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2034, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_221)
{
    // 03BF 0021;	
    // (Œø) GREEK SMALL LETTER OMICRON	[2034 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BF, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_222)
{
    // 1D6D0 0021;	
    // (ùõê) MATHEMATICAL BOLD SMALL OMICRON	[2034 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D0, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_223)
{
    // 1D70A 0021;	
    // (ùúä) MATHEMATICAL ITALIC SMALL OMICRON	[2034 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70A, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_224)
{
    // 1D744 0021;	
    // (ùùÑ) MATHEMATICAL BOLD ITALIC SMALL OMICRON	[2034 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D744, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_225)
{
    // 1D77E 0021;	
    // (ùùæ) MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON	[2034 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77E, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_226)
{
    // 1D7B8 0021;	
    // (ùû∏) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON	[2034 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B8, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_227)
{
    // 039F 0021;	
    // (Œü) GREEK CAPITAL LETTER OMICRON	[2034 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039F, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_228)
{
    // 1D6B6 0021;	
    // (ùö∂) MATHEMATICAL BOLD CAPITAL OMICRON	[2034 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B6, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_229)
{
    // 1D6F0 0021;	
    // (ùõ∞) MATHEMATICAL ITALIC CAPITAL OMICRON	[2034 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F0, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_230)
{
    // 1D72A 0021;	
    // (ùú™) MATHEMATICAL BOLD ITALIC CAPITAL OMICRON	[2034 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72A, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_231)
{
    // 1D764 0021;	
    // (ùù§) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON	[2034 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D764, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_232)
{
    // 1D79E 0021;	
    // (ùûû) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON	[2034 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79E, 0x0021 };
    uint32_t const ces[9] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_233)
{
    // 1F40 0021;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F40, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_234)
{
    // 1F48 0021;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON WITH PSILI	[2034 0261 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F48, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_235)
{
    // 1F44 0021;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA	[2034 0261 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F44, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_236)
{
    // 1F4C 0021;	
    // (·Ωå) GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA	[2034 0261 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_237)
{
    // 1F42 0021;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA	[2034 0261 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F42, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_238)
{
    // 1F4A 0021;	
    // (·Ωä) GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA	[2034 0261 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_239)
{
    // 1F41 0021;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F41, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_240)
{
    // 1F49 0021;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F49, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_241)
{
    // 1F45 0021;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA	[2034 0261 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F45, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_242)
{
    // 1F4D 0021;	
    // (·Ωç) GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA	[2034 0261 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_243)
{
    // 1F43 0021;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA	[2034 0261 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F43, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_244)
{
    // 1F4B 0021;	
    // (·Ωã) GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA	[2034 0261 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B, 0x0021 };
    uint32_t const ces[13] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_245)
{
    // 03CC 0021;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CC, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_246)
{
    // 1F79 0021;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F79, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_247)
{
    // 038C 0021;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038C, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_248)
{
    // 1FF9 0021;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF9, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_249)
{
    // 1F78 0021;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON WITH VARIA	[2034 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F78, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_250)
{
    // 1FF8 0021;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON WITH VARIA	[2034 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF8, 0x0021 };
    uint32_t const ces[11] = { 0x2034, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_251)
{
    // 03BF 003F;	
    // (Œø) GREEK SMALL LETTER OMICRON	[2034 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BF, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_252)
{
    // 1D6D0 003F;	
    // (ùõê) MATHEMATICAL BOLD SMALL OMICRON	[2034 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D0, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_253)
{
    // 1D70A 003F;	
    // (ùúä) MATHEMATICAL ITALIC SMALL OMICRON	[2034 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70A, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_254)
{
    // 1D744 003F;	
    // (ùùÑ) MATHEMATICAL BOLD ITALIC SMALL OMICRON	[2034 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D744, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_255)
{
    // 1D77E 003F;	
    // (ùùæ) MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON	[2034 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77E, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_256)
{
    // 1D7B8 003F;	
    // (ùû∏) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON	[2034 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B8, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_257)
{
    // 039F 003F;	
    // (Œü) GREEK CAPITAL LETTER OMICRON	[2034 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039F, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_258)
{
    // 1D6B6 003F;	
    // (ùö∂) MATHEMATICAL BOLD CAPITAL OMICRON	[2034 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B6, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_259)
{
    // 1D6F0 003F;	
    // (ùõ∞) MATHEMATICAL ITALIC CAPITAL OMICRON	[2034 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F0, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_260)
{
    // 1D72A 003F;	
    // (ùú™) MATHEMATICAL BOLD ITALIC CAPITAL OMICRON	[2034 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72A, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_261)
{
    // 1D764 003F;	
    // (ùù§) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON	[2034 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D764, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_262)
{
    // 1D79E 003F;	
    // (ùûû) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON	[2034 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79E, 0x003F };
    uint32_t const ces[9] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_263)
{
    // 1F40 003F;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 0267 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F40, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_264)
{
    // 1F48 003F;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON WITH PSILI	[2034 0267 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F48, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_265)
{
    // 1F44 003F;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA	[2034 0267 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F44, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_266)
{
    // 1F4C 003F;	
    // (·Ωå) GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA	[2034 0267 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_267)
{
    // 1F42 003F;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA	[2034 0267 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F42, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_268)
{
    // 1F4A 003F;	
    // (·Ωä) GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA	[2034 0267 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_269)
{
    // 1F41 003F;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 0267 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F41, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_270)
{
    // 1F49 003F;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 0267 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F49, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_271)
{
    // 1F45 003F;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA	[2034 0267 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F45, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_272)
{
    // 1F4D 003F;	
    // (·Ωç) GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA	[2034 0267 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_273)
{
    // 1F43 003F;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA	[2034 0267 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F43, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_274)
{
    // 1F4B 003F;	
    // (·Ωã) GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA	[2034 0267 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B, 0x003F };
    uint32_t const ces[13] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_275)
{
    // 03CC 003F;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CC, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_276)
{
    // 1F79 003F;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F79, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_277)
{
    // 038C 003F;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038C, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_278)
{
    // 1FF9 003F;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF9, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_279)
{
    // 1F78 003F;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON WITH VARIA	[2034 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F78, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_280)
{
    // 1FF8 003F;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON WITH VARIA	[2034 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF8, 0x003F };
    uint32_t const ces[11] = { 0x2034, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_281)
{
    // 03BF 0061;	
    // (Œø) GREEK SMALL LETTER OMICRON	[2034 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BF, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_282)
{
    // 03BF 0041;	
    // (Œø) GREEK SMALL LETTER OMICRON	[2034 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BF, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_283)
{
    // 1D6D0 0061;	
    // (ùõê) MATHEMATICAL BOLD SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D0, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_284)
{
    // 1D70A 0061;	
    // (ùúä) MATHEMATICAL ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70A, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_285)
{
    // 1D744 0061;	
    // (ùùÑ) MATHEMATICAL BOLD ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D744, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_286)
{
    // 1D77E 0061;	
    // (ùùæ) MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77E, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_287)
{
    // 1D7B8 0061;	
    // (ùû∏) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B8, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_288)
{
    // 1D6D0 0041;	
    // (ùõê) MATHEMATICAL BOLD SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D0, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_289)
{
    // 1D70A 0041;	
    // (ùúä) MATHEMATICAL ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70A, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_290)
{
    // 1D744 0041;	
    // (ùùÑ) MATHEMATICAL BOLD ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D744, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_291)
{
    // 1D77E 0041;	
    // (ùùæ) MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77E, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_292)
{
    // 1D7B8 0041;	
    // (ùû∏) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON	[2034 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B8, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_293)
{
    // 039F 0061;	
    // (Œü) GREEK CAPITAL LETTER OMICRON	[2034 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039F, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_294)
{
    // 039F 0041;	
    // (Œü) GREEK CAPITAL LETTER OMICRON	[2034 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039F, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_295)
{
    // 1D6B6 0061;	
    // (ùö∂) MATHEMATICAL BOLD CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B6, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_296)
{
    // 1D6F0 0061;	
    // (ùõ∞) MATHEMATICAL ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F0, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_297)
{
    // 1D72A 0061;	
    // (ùú™) MATHEMATICAL BOLD ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72A, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_298)
{
    // 1D764 0061;	
    // (ùù§) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D764, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_299)
{
    // 1D79E 0061;	
    // (ùûû) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79E, 0x0061 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_300)
{
    // 1D6B6 0041;	
    // (ùö∂) MATHEMATICAL BOLD CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B6, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_301)
{
    // 1D6F0 0041;	
    // (ùõ∞) MATHEMATICAL ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F0, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_302)
{
    // 1D72A 0041;	
    // (ùú™) MATHEMATICAL BOLD ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D72A, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_303)
{
    // 1D764 0041;	
    // (ùù§) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D764, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_304)
{
    // 1D79E 0041;	
    // (ùûû) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON	[2034 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79E, 0x0041 };
    uint32_t const ces[9] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_305)
{
    // 1F40 0061;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 1CAD | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F40, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_306)
{
    // 1F40 0041;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 1CAD | 0020 0022 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F40, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_307)
{
    // 1F48 0061;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON WITH PSILI	[2034 1CAD | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F48, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_308)
{
    // 1F48 0041;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON WITH PSILI	[2034 1CAD | 0020 0022 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F48, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_309)
{
    // 1F44 0061;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F44, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_310)
{
    // 1F44 0041;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F44, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_311)
{
    // 1F4C 0061;	
    // (·Ωå) GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_312)
{
    // 1F4C 0041;	
    // (·Ωå) GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F4C, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_313)
{
    // 1F42 0061;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F42, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_314)
{
    // 1F42 0041;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F42, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_315)
{
    // 1F4A 0061;	
    // (·Ωä) GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_316)
{
    // 1F4A 0041;	
    // (·Ωä) GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F4A, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_317)
{
    // 1F41 0061;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 1CAD | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F41, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_318)
{
    // 1F41 0041;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 1CAD | 0020 0023 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F41, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_319)
{
    // 1F49 0061;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 1CAD | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F49, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_320)
{
    // 1F49 0041;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 1CAD | 0020 0023 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F49, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_321)
{
    // 1F45 0061;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F45, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_322)
{
    // 1F45 0041;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F45, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_323)
{
    // 1F4D 0061;	
    // (·Ωç) GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_324)
{
    // 1F4D 0041;	
    // (·Ωç) GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F4D, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_325)
{
    // 1F43 0061;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F43, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_326)
{
    // 1F43 0041;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F43, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_327)
{
    // 1F4B 0061;	
    // (·Ωã) GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B, 0x0061 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_328)
{
    // 1F4B 0041;	
    // (·Ωã) GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F4B, 0x0041 };
    uint32_t const ces[13] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_329)
{
    // 03CC 0061;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CC, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_330)
{
    // 1F79 0061;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F79, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_331)
{
    // 03CC 0041;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03CC, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_332)
{
    // 1F79 0041;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F79, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_333)
{
    // 038C 0061;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038C, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_334)
{
    // 1FF9 0061;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF9, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_335)
{
    // 038C 0041;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x038C, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_336)
{
    // 1FF9 0041;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FF9, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_337)
{
    // 1F78 0061;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON WITH VARIA	[2034 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F78, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_338)
{
    // 1F78 0041;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON WITH VARIA	[2034 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F78, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_339)
{
    // 1FF8 0061;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON WITH VARIA	[2034 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF8, 0x0061 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_340)
{
    // 1FF8 0041;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON WITH VARIA	[2034 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FF8, 0x0041 };
    uint32_t const ces[11] = { 0x2034, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_341)
{
    // 03BF 0062;	
    // (Œø) GREEK SMALL LETTER OMICRON	[2034 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BF, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_342)
{
    // 1D6D0 0062;	
    // (ùõê) MATHEMATICAL BOLD SMALL OMICRON	[2034 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D0, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_343)
{
    // 1D70A 0062;	
    // (ùúä) MATHEMATICAL ITALIC SMALL OMICRON	[2034 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70A, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_344)
{
    // 1D744 0062;	
    // (ùùÑ) MATHEMATICAL BOLD ITALIC SMALL OMICRON	[2034 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D744, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_345)
{
    // 1D77E 0062;	
    // (ùùæ) MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON	[2034 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77E, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_346)
{
    // 1D7B8 0062;	
    // (ùû∏) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON	[2034 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B8, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_347)
{
    // 039F 0062;	
    // (Œü) GREEK CAPITAL LETTER OMICRON	[2034 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039F, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_348)
{
    // 1D6B6 0062;	
    // (ùö∂) MATHEMATICAL BOLD CAPITAL OMICRON	[2034 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B6, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_349)
{
    // 1D6F0 0062;	
    // (ùõ∞) MATHEMATICAL ITALIC CAPITAL OMICRON	[2034 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F0, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_350)
{
    // 1D72A 0062;	
    // (ùú™) MATHEMATICAL BOLD ITALIC CAPITAL OMICRON	[2034 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72A, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_351)
{
    // 1D764 0062;	
    // (ùù§) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON	[2034 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D764, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_352)
{
    // 1D79E 0062;	
    // (ùûû) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON	[2034 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79E, 0x0062 };
    uint32_t const ces[9] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_353)
{
    // 1F40 0062;	
    // (·ΩÄ) GREEK SMALL LETTER OMICRON WITH PSILI	[2034 1CC6 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F40, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_354)
{
    // 1F48 0062;	
    // (·Ωà) GREEK CAPITAL LETTER OMICRON WITH PSILI	[2034 1CC6 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F48, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_355)
{
    // 1F44 0062;	
    // (·ΩÑ) GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CC6 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F44, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_356)
{
    // 1F4C 0062;	
    // (·Ωå) GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA	[2034 1CC6 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4C, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_357)
{
    // 1F42 0062;	
    // (·ΩÇ) GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CC6 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F42, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_358)
{
    // 1F4A 0062;	
    // (·Ωä) GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA	[2034 1CC6 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4A, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_359)
{
    // 1F41 0062;	
    // (·ΩÅ) GREEK SMALL LETTER OMICRON WITH DASIA	[2034 1CC6 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F41, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_360)
{
    // 1F49 0062;	
    // (·Ωâ) GREEK CAPITAL LETTER OMICRON WITH DASIA	[2034 1CC6 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F49, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_361)
{
    // 1F45 0062;	
    // (·ΩÖ) GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CC6 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F45, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_362)
{
    // 1F4D 0062;	
    // (·Ωç) GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA	[2034 1CC6 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4D, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_363)
{
    // 1F43 0062;	
    // (·ΩÉ) GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CC6 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F43, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_364)
{
    // 1F4B 0062;	
    // (·Ωã) GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA	[2034 1CC6 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F4B, 0x0062 };
    uint32_t const ces[13] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_365)
{
    // 03CC 0062;	
    // (œå) GREEK SMALL LETTER OMICRON WITH TONOS	[2034 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CC, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_366)
{
    // 1F79 0062;	
    // (œå) GREEK SMALL LETTER OMICRON WITH OXIA	[2034 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F79, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_367)
{
    // 038C 0062;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH TONOS	[2034 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038C, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_368)
{
    // 1FF9 0062;	
    // (Œå) GREEK CAPITAL LETTER OMICRON WITH OXIA	[2034 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF9, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_369)
{
    // 1F78 0062;	
    // (·Ω∏) GREEK SMALL LETTER OMICRON WITH VARIA	[2034 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F78, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_370)
{
    // 1FF8 0062;	
    // (·ø∏) GREEK CAPITAL LETTER OMICRON WITH VARIA	[2034 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FF8, 0x0062 };
    uint32_t const ces[11] = { 0x2034, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_371)
{
    // 03C0 0021;	
    // (œÄ) GREEK SMALL LETTER PI	[2035 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C0, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_372)
{
    // 03D6 0021;	
    // (œñ) GREEK PI SYMBOL	[2035 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D6, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_373)
{
    // 213C 0021;	
    // (‚Ñº) DOUBLE-STRUCK SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x213C, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_374)
{
    // 1D6D1 0021;	
    // (ùõë) MATHEMATICAL BOLD SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D1, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_375)
{
    // 1D6E1 0021;	
    // (ùõ°) MATHEMATICAL BOLD PI SYMBOL	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E1, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_376)
{
    // 1D70B 0021;	
    // (ùúã) MATHEMATICAL ITALIC SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70B, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_377)
{
    // 1D71B 0021;	
    // (ùúõ) MATHEMATICAL ITALIC PI SYMBOL	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71B, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_378)
{
    // 1D745 0021;	
    // (ùùÖ) MATHEMATICAL BOLD ITALIC SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D745, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_379)
{
    // 1D755 0021;	
    // (ùùï) MATHEMATICAL BOLD ITALIC PI SYMBOL	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D755, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_380)
{
    // 1D77F 0021;	
    // (ùùø) MATHEMATICAL SANS-SERIF BOLD SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77F, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_381)
{
    // 1D78F 0021;	
    // (ùûè) MATHEMATICAL SANS-SERIF BOLD PI SYMBOL	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78F, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_382)
{
    // 1D7B9 0021;	
    // (ùûπ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B9, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_383)
{
    // 1D7C9 0021;	
    // (ùüâ) MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL	[2035 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C9, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_384)
{
    // 03A0 0021;	
    // (Œ†) GREEK CAPITAL LETTER PI	[2035 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A0, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_385)
{
    // 213F 0021;	
    // (‚Ñø) DOUBLE-STRUCK CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x213F, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_386)
{
    // 1D6B7 0021;	
    // (ùö∑) MATHEMATICAL BOLD CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B7, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_387)
{
    // 1D6F1 0021;	
    // (ùõ±) MATHEMATICAL ITALIC CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F1, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_388)
{
    // 1D72B 0021;	
    // (ùú´) MATHEMATICAL BOLD ITALIC CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72B, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_389)
{
    // 1D765 0021;	
    // (ùù•) MATHEMATICAL SANS-SERIF BOLD CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D765, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_390)
{
    // 1D79F 0021;	
    // (ùûü) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI	[2035 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79F, 0x0021 };
    uint32_t const ces[9] = { 0x2035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_391)
{
    // 03C0 003F;	
    // (œÄ) GREEK SMALL LETTER PI	[2035 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C0, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_392)
{
    // 03D6 003F;	
    // (œñ) GREEK PI SYMBOL	[2035 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D6, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_393)
{
    // 213C 003F;	
    // (‚Ñº) DOUBLE-STRUCK SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x213C, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_394)
{
    // 1D6D1 003F;	
    // (ùõë) MATHEMATICAL BOLD SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D1, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_395)
{
    // 1D6E1 003F;	
    // (ùõ°) MATHEMATICAL BOLD PI SYMBOL	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E1, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_396)
{
    // 1D70B 003F;	
    // (ùúã) MATHEMATICAL ITALIC SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70B, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_397)
{
    // 1D71B 003F;	
    // (ùúõ) MATHEMATICAL ITALIC PI SYMBOL	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71B, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_398)
{
    // 1D745 003F;	
    // (ùùÖ) MATHEMATICAL BOLD ITALIC SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D745, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_399)
{
    // 1D755 003F;	
    // (ùùï) MATHEMATICAL BOLD ITALIC PI SYMBOL	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D755, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_400)
{
    // 1D77F 003F;	
    // (ùùø) MATHEMATICAL SANS-SERIF BOLD SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77F, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_401)
{
    // 1D78F 003F;	
    // (ùûè) MATHEMATICAL SANS-SERIF BOLD PI SYMBOL	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78F, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_402)
{
    // 1D7B9 003F;	
    // (ùûπ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B9, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_403)
{
    // 1D7C9 003F;	
    // (ùüâ) MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL	[2035 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C9, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_404)
{
    // 03A0 003F;	
    // (Œ†) GREEK CAPITAL LETTER PI	[2035 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A0, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_405)
{
    // 213F 003F;	
    // (‚Ñø) DOUBLE-STRUCK CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x213F, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_406)
{
    // 1D6B7 003F;	
    // (ùö∑) MATHEMATICAL BOLD CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B7, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_407)
{
    // 1D6F1 003F;	
    // (ùõ±) MATHEMATICAL ITALIC CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F1, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_408)
{
    // 1D72B 003F;	
    // (ùú´) MATHEMATICAL BOLD ITALIC CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72B, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_409)
{
    // 1D765 003F;	
    // (ùù•) MATHEMATICAL SANS-SERIF BOLD CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D765, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_410)
{
    // 1D79F 003F;	
    // (ùûü) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI	[2035 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79F, 0x003F };
    uint32_t const ces[9] = { 0x2035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_411)
{
    // 03C0 0061;	
    // (œÄ) GREEK SMALL LETTER PI	[2035 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C0, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_412)
{
    // 03C0 0041;	
    // (œÄ) GREEK SMALL LETTER PI	[2035 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C0, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_413)
{
    // 03D6 0061;	
    // (œñ) GREEK PI SYMBOL	[2035 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D6, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_414)
{
    // 03D6 0041;	
    // (œñ) GREEK PI SYMBOL	[2035 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x03D6, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_415)
{
    // 213C 0061;	
    // (‚Ñº) DOUBLE-STRUCK SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x213C, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_416)
{
    // 1D6D1 0061;	
    // (ùõë) MATHEMATICAL BOLD SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D1, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_417)
{
    // 1D6E1 0061;	
    // (ùõ°) MATHEMATICAL BOLD PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E1, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_418)
{
    // 1D70B 0061;	
    // (ùúã) MATHEMATICAL ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70B, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_419)
{
    // 1D71B 0061;	
    // (ùúõ) MATHEMATICAL ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71B, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_420)
{
    // 1D745 0061;	
    // (ùùÖ) MATHEMATICAL BOLD ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D745, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_421)
{
    // 1D755 0061;	
    // (ùùï) MATHEMATICAL BOLD ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D755, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_422)
{
    // 1D77F 0061;	
    // (ùùø) MATHEMATICAL SANS-SERIF BOLD SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77F, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_423)
{
    // 1D78F 0061;	
    // (ùûè) MATHEMATICAL SANS-SERIF BOLD PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78F, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_424)
{
    // 1D7B9 0061;	
    // (ùûπ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B9, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_425)
{
    // 1D7C9 0061;	
    // (ùüâ) MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C9, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_426)
{
    // 213C 0041;	
    // (‚Ñº) DOUBLE-STRUCK SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x213C, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_427)
{
    // 1D6D1 0041;	
    // (ùõë) MATHEMATICAL BOLD SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D1, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_428)
{
    // 1D6E1 0041;	
    // (ùõ°) MATHEMATICAL BOLD PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6E1, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_429)
{
    // 1D70B 0041;	
    // (ùúã) MATHEMATICAL ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70B, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_430)
{
    // 1D71B 0041;	
    // (ùúõ) MATHEMATICAL ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D71B, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_431)
{
    // 1D745 0041;	
    // (ùùÖ) MATHEMATICAL BOLD ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D745, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_432)
{
    // 1D755 0041;	
    // (ùùï) MATHEMATICAL BOLD ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D755, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_433)
{
    // 1D77F 0041;	
    // (ùùø) MATHEMATICAL SANS-SERIF BOLD SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77F, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_434)
{
    // 1D78F 0041;	
    // (ùûè) MATHEMATICAL SANS-SERIF BOLD PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D78F, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_435)
{
    // 1D7B9 0041;	
    // (ùûπ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B9, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_436)
{
    // 1D7C9 0041;	
    // (ùüâ) MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL	[2035 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C9, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_437)
{
    // 03A0 0061;	
    // (Œ†) GREEK CAPITAL LETTER PI	[2035 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A0, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_438)
{
    // 03A0 0041;	
    // (Œ†) GREEK CAPITAL LETTER PI	[2035 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A0, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_439)
{
    // 213F 0061;	
    // (‚Ñø) DOUBLE-STRUCK CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x213F, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_440)
{
    // 1D6B7 0061;	
    // (ùö∑) MATHEMATICAL BOLD CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B7, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_441)
{
    // 1D6F1 0061;	
    // (ùõ±) MATHEMATICAL ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F1, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_442)
{
    // 1D72B 0061;	
    // (ùú´) MATHEMATICAL BOLD ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72B, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_443)
{
    // 1D765 0061;	
    // (ùù•) MATHEMATICAL SANS-SERIF BOLD CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D765, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_444)
{
    // 1D79F 0061;	
    // (ùûü) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79F, 0x0061 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_445)
{
    // 213F 0041;	
    // (‚Ñø) DOUBLE-STRUCK CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x213F, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_446)
{
    // 1D6B7 0041;	
    // (ùö∑) MATHEMATICAL BOLD CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B7, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_447)
{
    // 1D6F1 0041;	
    // (ùõ±) MATHEMATICAL ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F1, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_448)
{
    // 1D72B 0041;	
    // (ùú´) MATHEMATICAL BOLD ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D72B, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_449)
{
    // 1D765 0041;	
    // (ùù•) MATHEMATICAL SANS-SERIF BOLD CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D765, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_450)
{
    // 1D79F 0041;	
    // (ùûü) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI	[2035 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79F, 0x0041 };
    uint32_t const ces[9] = { 0x2035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_451)
{
    // 03C0 0062;	
    // (œÄ) GREEK SMALL LETTER PI	[2035 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C0, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_452)
{
    // 03D6 0062;	
    // (œñ) GREEK PI SYMBOL	[2035 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D6, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_453)
{
    // 213C 0062;	
    // (‚Ñº) DOUBLE-STRUCK SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x213C, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_454)
{
    // 1D6D1 0062;	
    // (ùõë) MATHEMATICAL BOLD SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D1, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_455)
{
    // 1D6E1 0062;	
    // (ùõ°) MATHEMATICAL BOLD PI SYMBOL	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E1, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_456)
{
    // 1D70B 0062;	
    // (ùúã) MATHEMATICAL ITALIC SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70B, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_457)
{
    // 1D71B 0062;	
    // (ùúõ) MATHEMATICAL ITALIC PI SYMBOL	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71B, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_458)
{
    // 1D745 0062;	
    // (ùùÖ) MATHEMATICAL BOLD ITALIC SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D745, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_459)
{
    // 1D755 0062;	
    // (ùùï) MATHEMATICAL BOLD ITALIC PI SYMBOL	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D755, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_460)
{
    // 1D77F 0062;	
    // (ùùø) MATHEMATICAL SANS-SERIF BOLD SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77F, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_461)
{
    // 1D78F 0062;	
    // (ùûè) MATHEMATICAL SANS-SERIF BOLD PI SYMBOL	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78F, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_462)
{
    // 1D7B9 0062;	
    // (ùûπ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B9, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_463)
{
    // 1D7C9 0062;	
    // (ùüâ) MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL	[2035 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C9, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_464)
{
    // 03A0 0062;	
    // (Œ†) GREEK CAPITAL LETTER PI	[2035 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A0, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_465)
{
    // 213F 0062;	
    // (‚Ñø) DOUBLE-STRUCK CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x213F, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_466)
{
    // 1D6B7 0062;	
    // (ùö∑) MATHEMATICAL BOLD CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B7, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_467)
{
    // 1D6F1 0062;	
    // (ùõ±) MATHEMATICAL ITALIC CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F1, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_468)
{
    // 1D72B 0062;	
    // (ùú´) MATHEMATICAL BOLD ITALIC CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72B, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_469)
{
    // 1D765 0062;	
    // (ùù•) MATHEMATICAL SANS-SERIF BOLD CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D765, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_470)
{
    // 1D79F 0062;	
    // (ùûü) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI	[2035 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79F, 0x0062 };
    uint32_t const ces[9] = { 0x2035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_471)
{
    // 1D28 0021;	
    // (·¥®) GREEK LETTER SMALL CAPITAL PI	[2036 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D28, 0x0021 };
    uint32_t const ces[9] = { 0x2036, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_472)
{
    // 1D28 003F;	
    // (·¥®) GREEK LETTER SMALL CAPITAL PI	[2036 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D28, 0x003F };
    uint32_t const ces[9] = { 0x2036, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_473)
{
    // 1D28 0061;	
    // (·¥®) GREEK LETTER SMALL CAPITAL PI	[2036 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D28, 0x0061 };
    uint32_t const ces[9] = { 0x2036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_474)
{
    // 1D28 0041;	
    // (·¥®) GREEK LETTER SMALL CAPITAL PI	[2036 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D28, 0x0041 };
    uint32_t const ces[9] = { 0x2036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_475)
{
    // 1D28 0062;	
    // (·¥®) GREEK LETTER SMALL CAPITAL PI	[2036 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D28, 0x0062 };
    uint32_t const ces[9] = { 0x2036, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_476)
{
    // 03FB 0021;	
    // (œª) GREEK SMALL LETTER SAN	[2037 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FB, 0x0021 };
    uint32_t const ces[9] = { 0x2037, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_477)
{
    // 03FA 0021;	
    // (œ∫) GREEK CAPITAL LETTER SAN	[2037 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FA, 0x0021 };
    uint32_t const ces[9] = { 0x2037, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_478)
{
    // 03FB 003F;	
    // (œª) GREEK SMALL LETTER SAN	[2037 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FB, 0x003F };
    uint32_t const ces[9] = { 0x2037, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_479)
{
    // 03FA 003F;	
    // (œ∫) GREEK CAPITAL LETTER SAN	[2037 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FA, 0x003F };
    uint32_t const ces[9] = { 0x2037, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_480)
{
    // 03FB 0061;	
    // (œª) GREEK SMALL LETTER SAN	[2037 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FB, 0x0061 };
    uint32_t const ces[9] = { 0x2037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_481)
{
    // 03FB 0041;	
    // (œª) GREEK SMALL LETTER SAN	[2037 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03FB, 0x0041 };
    uint32_t const ces[9] = { 0x2037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_482)
{
    // 03FA 0061;	
    // (œ∫) GREEK CAPITAL LETTER SAN	[2037 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FA, 0x0061 };
    uint32_t const ces[9] = { 0x2037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_483)
{
    // 03FA 0041;	
    // (œ∫) GREEK CAPITAL LETTER SAN	[2037 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03FA, 0x0041 };
    uint32_t const ces[9] = { 0x2037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_484)
{
    // 03FB 0062;	
    // (œª) GREEK SMALL LETTER SAN	[2037 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FB, 0x0062 };
    uint32_t const ces[9] = { 0x2037, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_485)
{
    // 03FA 0062;	
    // (œ∫) GREEK CAPITAL LETTER SAN	[2037 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FA, 0x0062 };
    uint32_t const ces[9] = { 0x2037, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_486)
{
    // 03DF 0021;	
    // (œü) GREEK SMALL LETTER KOPPA	[2038 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03DF, 0x0021 };
    uint32_t const ces[9] = { 0x2038, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_487)
{
    // 03DE 0021;	
    // (œû) GREEK LETTER KOPPA	[2038 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03DE, 0x0021 };
    uint32_t const ces[9] = { 0x2038, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_488)
{
    // 03DF 003F;	
    // (œü) GREEK SMALL LETTER KOPPA	[2038 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03DF, 0x003F };
    uint32_t const ces[9] = { 0x2038, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_489)
{
    // 03DE 003F;	
    // (œû) GREEK LETTER KOPPA	[2038 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03DE, 0x003F };
    uint32_t const ces[9] = { 0x2038, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_490)
{
    // 03DF 0061;	
    // (œü) GREEK SMALL LETTER KOPPA	[2038 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03DF, 0x0061 };
    uint32_t const ces[9] = { 0x2038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_491)
{
    // 03DF 0041;	
    // (œü) GREEK SMALL LETTER KOPPA	[2038 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03DF, 0x0041 };
    uint32_t const ces[9] = { 0x2038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_492)
{
    // 03DE 0061;	
    // (œû) GREEK LETTER KOPPA	[2038 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03DE, 0x0061 };
    uint32_t const ces[9] = { 0x2038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_493)
{
    // 03DE 0041;	
    // (œû) GREEK LETTER KOPPA	[2038 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03DE, 0x0041 };
    uint32_t const ces[9] = { 0x2038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_494)
{
    // 03DF 0062;	
    // (œü) GREEK SMALL LETTER KOPPA	[2038 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03DF, 0x0062 };
    uint32_t const ces[9] = { 0x2038, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_495)
{
    // 03DE 0062;	
    // (œû) GREEK LETTER KOPPA	[2038 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03DE, 0x0062 };
    uint32_t const ces[9] = { 0x2038, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_496)
{
    // 03D9 0021;	
    // (œô) GREEK SMALL LETTER ARCHAIC KOPPA	[2039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03D9, 0x0021 };
    uint32_t const ces[9] = { 0x2039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_497)
{
    // 03D8 0021;	
    // (œò) GREEK LETTER ARCHAIC KOPPA	[2039 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03D8, 0x0021 };
    uint32_t const ces[9] = { 0x2039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_498)
{
    // 03D9 003F;	
    // (œô) GREEK SMALL LETTER ARCHAIC KOPPA	[2039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03D9, 0x003F };
    uint32_t const ces[9] = { 0x2039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_132_499)
{
    // 03D8 003F;	
    // (œò) GREEK LETTER ARCHAIC KOPPA	[2039 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03D8, 0x003F };
    uint32_t const ces[9] = { 0x2039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

