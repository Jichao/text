// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_188_000)
{
    // 0E40 0591 0E06 0061;	
    // (เ֑ฆ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO RAKHANG	[2E5A 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_001)
{
    // 0E40 1D165 0E06 0061;	
    // (เ𝅥ฆ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO RAKHANG	[2E5A 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_002)
{
    // 0E40 0001 0E07 0061;	
    // (เ'\u0001'ง) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER NGO NGU	[2E5A 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_003)
{
    // 0E40 0591 0E07 0061;	
    // (เ֑ง) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER NGO NGU	[2E5A 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_004)
{
    // 0E40 1D165 0E07 0061;	
    // (เ𝅥ง) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NGO NGU	[2E5A 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_005)
{
    // 0E40 0001 0E08 0061;	
    // (เ'\u0001'จ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER CHO CHAN	[2E5A 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_006)
{
    // 0E40 0591 0E08 0061;	
    // (เ֑จ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHAN	[2E5A 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_007)
{
    // 0E40 1D165 0E08 0061;	
    // (เ𝅥จ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHAN	[2E5A 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_008)
{
    // 0E40 0001 0E09 0061;	
    // (เ'\u0001'ฉ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER CHO CHING	[2E5A 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_009)
{
    // 0E40 0591 0E09 0061;	
    // (เ֑ฉ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHING	[2E5A 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_010)
{
    // 0E40 1D165 0E09 0061;	
    // (เ𝅥ฉ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHING	[2E5A 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_011)
{
    // 0E40 0001 0E0A 0061;	
    // (เ'\u0001'ช) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER CHO CHANG	[2E5A 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_012)
{
    // 0E40 0591 0E0A 0061;	
    // (เ֑ช) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHANG	[2E5A 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_013)
{
    // 0E40 1D165 0E0A 0061;	
    // (เ𝅥ช) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHANG	[2E5A 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_014)
{
    // 0E40 0001 0E0B 0061;	
    // (เ'\u0001'ซ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER SO SO	[2E5A 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_015)
{
    // 0E40 0591 0E0B 0061;	
    // (เ֑ซ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SO	[2E5A 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_016)
{
    // 0E40 1D165 0E0B 0061;	
    // (เ𝅥ซ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SO	[2E5A 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_017)
{
    // 0E40 0001 0E0C 0061;	
    // (เ'\u0001'ฌ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER CHO CHOE	[2E5A 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_018)
{
    // 0E40 0591 0E0C 0061;	
    // (เ֑ฌ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHOE	[2E5A 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_019)
{
    // 0E40 1D165 0E0C 0061;	
    // (เ𝅥ฌ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHOE	[2E5A 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_020)
{
    // 0E40 0001 0E0D 0061;	
    // (เ'\u0001'ญ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER YO YING	[2E5A 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_021)
{
    // 0E40 0591 0E0D 0061;	
    // (เ֑ญ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YING	[2E5A 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_022)
{
    // 0E40 1D165 0E0D 0061;	
    // (เ𝅥ญ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YING	[2E5A 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_023)
{
    // 0E40 0001 0E0E 0061;	
    // (เ'\u0001'ฎ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER DO CHADA	[2E5A 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_024)
{
    // 0E40 0591 0E0E 0061;	
    // (เ֑ฎ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO CHADA	[2E5A 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_025)
{
    // 0E40 1D165 0E0E 0061;	
    // (เ𝅥ฎ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO CHADA	[2E5A 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_026)
{
    // 0E40 0001 0E0F 0061;	
    // (เ'\u0001'ฏ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER TO PATAK	[2E5A 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_027)
{
    // 0E40 0591 0E0F 0061;	
    // (เ֑ฏ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO PATAK	[2E5A 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_028)
{
    // 0E40 1D165 0E0F 0061;	
    // (เ𝅥ฏ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO PATAK	[2E5A 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_029)
{
    // 0E40 0001 0E10 0061;	
    // (เ'\u0001'ฐ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO THAN	[2E5A 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_030)
{
    // 0E40 0591 0E10 0061;	
    // (เ֑ฐ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAN	[2E5A 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_031)
{
    // 0E40 1D165 0E10 0061;	
    // (เ𝅥ฐ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAN	[2E5A 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_032)
{
    // 0E40 0001 0E11 0061;	
    // (เ'\u0001'ฑ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO NANGMONTHO	[2E5A 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_033)
{
    // 0E40 0591 0E11 0061;	
    // (เ֑ฑ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO NANGMONTHO	[2E5A 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_034)
{
    // 0E40 1D165 0E11 0061;	
    // (เ𝅥ฑ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO NANGMONTHO	[2E5A 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_035)
{
    // 0E40 0001 0E12 0061;	
    // (เ'\u0001'ฒ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO PHUTHAO	[2E5A 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_036)
{
    // 0E40 0591 0E12 0061;	
    // (เ֑ฒ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO PHUTHAO	[2E5A 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_037)
{
    // 0E40 1D165 0E12 0061;	
    // (เ𝅥ฒ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO PHUTHAO	[2E5A 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_038)
{
    // 0E40 0001 0E13 0061;	
    // (เ'\u0001'ณ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER NO NEN	[2E5A 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_039)
{
    // 0E40 0591 0E13 0061;	
    // (เ֑ณ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NEN	[2E5A 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_040)
{
    // 0E40 1D165 0E13 0061;	
    // (เ𝅥ณ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NEN	[2E5A 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_041)
{
    // 0E40 0001 0E14 0061;	
    // (เ'\u0001'ด) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER DO DEK	[2E5A 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_042)
{
    // 0E40 0591 0E14 0061;	
    // (เ֑ด) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO DEK	[2E5A 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_043)
{
    // 0E40 1D165 0E14 0061;	
    // (เ𝅥ด) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO DEK	[2E5A 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_044)
{
    // 0E40 0001 0E15 0061;	
    // (เ'\u0001'ต) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER TO TAO	[2E5A 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_045)
{
    // 0E40 0591 0E15 0061;	
    // (เ֑ต) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO TAO	[2E5A 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_046)
{
    // 0E40 1D165 0E15 0061;	
    // (เ𝅥ต) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO TAO	[2E5A 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_047)
{
    // 0E40 0001 0E16 0061;	
    // (เ'\u0001'ถ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO THUNG	[2E5A 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_048)
{
    // 0E40 0591 0E16 0061;	
    // (เ֑ถ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THUNG	[2E5A 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_049)
{
    // 0E40 1D165 0E16 0061;	
    // (เ𝅥ถ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THUNG	[2E5A 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_050)
{
    // 0E40 0001 0E17 0061;	
    // (เ'\u0001'ท) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO THAHAN	[2E5A 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_051)
{
    // 0E40 0591 0E17 0061;	
    // (เ֑ท) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAHAN	[2E5A 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_052)
{
    // 0E40 1D165 0E17 0061;	
    // (เ𝅥ท) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAHAN	[2E5A 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_053)
{
    // 0E40 0001 0E18 0061;	
    // (เ'\u0001'ธ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER THO THONG	[2E5A 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_054)
{
    // 0E40 0591 0E18 0061;	
    // (เ֑ธ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THONG	[2E5A 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_055)
{
    // 0E40 1D165 0E18 0061;	
    // (เ𝅥ธ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THONG	[2E5A 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_056)
{
    // 0E40 0001 0E19 0061;	
    // (เ'\u0001'น) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER NO NU	[2E5A 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_057)
{
    // 0E40 0591 0E19 0061;	
    // (เ֑น) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NU	[2E5A 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_058)
{
    // 0E40 1D165 0E19 0061;	
    // (เ𝅥น) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NU	[2E5A 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_059)
{
    // 0E40 0001 0E1A 0061;	
    // (เ'\u0001'บ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER BO BAIMAI	[2E5A 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_060)
{
    // 0E40 0591 0E1A 0061;	
    // (เ֑บ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER BO BAIMAI	[2E5A 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_061)
{
    // 0E40 1D165 0E1A 0061;	
    // (เ𝅥บ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER BO BAIMAI	[2E5A 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_062)
{
    // 0E40 0001 0E1B 0061;	
    // (เ'\u0001'ป) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER PO PLA	[2E5A 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_063)
{
    // 0E40 0591 0E1B 0061;	
    // (เ֑ป) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER PO PLA	[2E5A 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_064)
{
    // 0E40 1D165 0E1B 0061;	
    // (เ𝅥ป) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PO PLA	[2E5A 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_065)
{
    // 0E40 0001 0E1C 0061;	
    // (เ'\u0001'ผ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER PHO PHUNG	[2E5A 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_066)
{
    // 0E40 0591 0E1C 0061;	
    // (เ֑ผ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHUNG	[2E5A 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_067)
{
    // 0E40 1D165 0E1C 0061;	
    // (เ𝅥ผ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHUNG	[2E5A 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_068)
{
    // 0E40 0001 0E1D 0061;	
    // (เ'\u0001'ฝ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER FO FA	[2E5A 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_069)
{
    // 0E40 0591 0E1D 0061;	
    // (เ֑ฝ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FA	[2E5A 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_070)
{
    // 0E40 1D165 0E1D 0061;	
    // (เ𝅥ฝ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FA	[2E5A 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_071)
{
    // 0E40 0001 0E1E 0061;	
    // (เ'\u0001'พ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER PHO PHAN	[2E5A 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_072)
{
    // 0E40 0591 0E1E 0061;	
    // (เ֑พ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHAN	[2E5A 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_073)
{
    // 0E40 1D165 0E1E 0061;	
    // (เ𝅥พ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHAN	[2E5A 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_074)
{
    // 0E40 0001 0E1F 0061;	
    // (เ'\u0001'ฟ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER FO FAN	[2E5A 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_075)
{
    // 0E40 0591 0E1F 0061;	
    // (เ֑ฟ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FAN	[2E5A 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_076)
{
    // 0E40 1D165 0E1F 0061;	
    // (เ𝅥ฟ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FAN	[2E5A 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_077)
{
    // 0E40 0001 0E20 0061;	
    // (เ'\u0001'ภ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER PHO SAMPHAO	[2E5A 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_078)
{
    // 0E40 0591 0E20 0061;	
    // (เ֑ภ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO SAMPHAO	[2E5A 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_079)
{
    // 0E40 1D165 0E20 0061;	
    // (เ𝅥ภ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO SAMPHAO	[2E5A 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_080)
{
    // 0E40 0001 0E21 0061;	
    // (เ'\u0001'ม) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER MO MA	[2E5A 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_081)
{
    // 0E40 0591 0E21 0061;	
    // (เ֑ม) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER MO MA	[2E5A 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_082)
{
    // 0E40 1D165 0E21 0061;	
    // (เ𝅥ม) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER MO MA	[2E5A 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_083)
{
    // 0E40 0001 0E22 0061;	
    // (เ'\u0001'ย) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER YO YAK	[2E5A 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_084)
{
    // 0E40 0591 0E22 0061;	
    // (เ֑ย) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YAK	[2E5A 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_085)
{
    // 0E40 1D165 0E22 0061;	
    // (เ𝅥ย) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YAK	[2E5A 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_086)
{
    // 0E40 0001 0E23 0061;	
    // (เ'\u0001'ร) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER RO RUA	[2E5A 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_087)
{
    // 0E40 0591 0E23 0061;	
    // (เ֑ร) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER RO RUA	[2E5A 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_088)
{
    // 0E40 1D165 0E23 0061;	
    // (เ𝅥ร) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RO RUA	[2E5A 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_089)
{
    // 0E40 0001 0E24 0061;	
    // (เ'\u0001'ฤ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER RU	[2E5A 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_090)
{
    // 0E40 0591 0E24 0061;	
    // (เ֑ฤ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER RU	[2E5A 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_091)
{
    // 0E40 1D165 0E24 0061;	
    // (เ𝅥ฤ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RU	[2E5A 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_092)
{
    // 0E40 0001 0E25 0061;	
    // (เ'\u0001'ล) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER LO LING	[2E5A 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_093)
{
    // 0E40 0591 0E25 0061;	
    // (เ֑ล) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO LING	[2E5A 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_094)
{
    // 0E40 1D165 0E25 0061;	
    // (เ𝅥ล) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO LING	[2E5A 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_095)
{
    // 0E40 0001 0E26 0061;	
    // (เ'\u0001'ฦ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER LU	[2E5A 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_096)
{
    // 0E40 0591 0E26 0061;	
    // (เ֑ฦ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER LU	[2E5A 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_097)
{
    // 0E40 1D165 0E26 0061;	
    // (เ𝅥ฦ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LU	[2E5A 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_098)
{
    // 0E40 0001 0E27 0061;	
    // (เ'\u0001'ว) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER WO WAEN	[2E5A 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_099)
{
    // 0E40 0591 0E27 0061;	
    // (เ֑ว) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER WO WAEN	[2E5A 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_100)
{
    // 0E40 1D165 0E27 0061;	
    // (เ𝅥ว) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER WO WAEN	[2E5A 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_101)
{
    // 0E40 0001 0E28 0061;	
    // (เ'\u0001'ศ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER SO SALA	[2E5A 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_102)
{
    // 0E40 0591 0E28 0061;	
    // (เ֑ศ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SALA	[2E5A 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_103)
{
    // 0E40 1D165 0E28 0061;	
    // (เ𝅥ศ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SALA	[2E5A 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_104)
{
    // 0E40 0001 0E29 0061;	
    // (เ'\u0001'ษ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER SO RUSI	[2E5A 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_105)
{
    // 0E40 0591 0E29 0061;	
    // (เ֑ษ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO RUSI	[2E5A 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_106)
{
    // 0E40 1D165 0E29 0061;	
    // (เ𝅥ษ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO RUSI	[2E5A 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_107)
{
    // 0E40 0001 0E2A 0061;	
    // (เ'\u0001'ส) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER SO SUA	[2E5A 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_108)
{
    // 0E40 0591 0E2A 0061;	
    // (เ֑ส) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SUA	[2E5A 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_109)
{
    // 0E40 1D165 0E2A 0061;	
    // (เ𝅥ส) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SUA	[2E5A 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_110)
{
    // 0E40 0001 0E2B 0061;	
    // (เ'\u0001'ห) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER HO HIP	[2E5A 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_111)
{
    // 0E40 0591 0E2B 0061;	
    // (เ֑ห) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO HIP	[2E5A 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_112)
{
    // 0E40 1D165 0E2B 0061;	
    // (เ𝅥ห) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO HIP	[2E5A 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_113)
{
    // 0E40 0001 0E2C 0061;	
    // (เ'\u0001'ฬ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER LO CHULA	[2E5A 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_114)
{
    // 0E40 0591 0E2C 0061;	
    // (เ֑ฬ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO CHULA	[2E5A 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_115)
{
    // 0E40 1D165 0E2C 0061;	
    // (เ𝅥ฬ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO CHULA	[2E5A 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_116)
{
    // 0E40 0001 0E2D 0061;	
    // (เ'\u0001'อ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER O ANG	[2E5A 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_117)
{
    // 0E40 0591 0E2D 0061;	
    // (เ֑อ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER O ANG	[2E5A 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_118)
{
    // 0E40 1D165 0E2D 0061;	
    // (เ𝅥อ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER O ANG	[2E5A 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_119)
{
    // 0E40 0001 0E2E 0061;	
    // (เ'\u0001'ฮ) THAI CHARACTER SARA E, <START OF HEADING>, THAI CHARACTER HO NOKHUK	[2E5A 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0001, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_120)
{
    // 0E40 0591 0E2E 0061;	
    // (เ֑ฮ) THAI CHARACTER SARA E, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO NOKHUK	[2E5A 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x0591, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_121)
{
    // 0E40 1D165 0E2E 0061;	
    // (เ𝅥ฮ) THAI CHARACTER SARA E, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO NOKHUK	[2E5A 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E40, 0x1D165, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5A, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_122)
{
    // 0E41 0021;	
    // (แ) THAI CHARACTER SARA AE	[2E5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E41, 0x0021 };
    uint32_t const ces[9] = { 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_123)
{
    // 0E41 003F;	
    // (แ) THAI CHARACTER SARA AE	[2E5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E41, 0x003F };
    uint32_t const ces[9] = { 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_124)
{
    // 0E41 0061;	
    // (แ) THAI CHARACTER SARA AE	[2E5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E41, 0x0061 };
    uint32_t const ces[9] = { 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_125)
{
    // 0E41 0041;	
    // (แ) THAI CHARACTER SARA AE	[2E5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E41, 0x0041 };
    uint32_t const ces[9] = { 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_126)
{
    // 0E41 0062;	
    // (แ) THAI CHARACTER SARA AE	[2E5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E41, 0x0062 };
    uint32_t const ces[9] = { 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_127)
{
    // 0E41 0001 0E01 0061;	
    // (แ'\u0001'ก) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KO KAI	[2E5B 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_128)
{
    // 0E41 0591 0E01 0061;	
    // (แ֑ก) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KO KAI	[2E5B 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_129)
{
    // 0E41 1D165 0E01 0061;	
    // (แ𝅥ก) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KO KAI	[2E5B 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_130)
{
    // 0E41 0001 0E02 0061;	
    // (แ'\u0001'ข) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KHO KHAI	[2E5B 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_131)
{
    // 0E41 0591 0E02 0061;	
    // (แ֑ข) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHAI	[2E5B 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_132)
{
    // 0E41 1D165 0E02 0061;	
    // (แ𝅥ข) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHAI	[2E5B 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_133)
{
    // 0E41 0001 0E03 0061;	
    // (แ'\u0001'ฃ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KHO KHUAT	[2E5B 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_134)
{
    // 0E41 0591 0E03 0061;	
    // (แ֑ฃ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHUAT	[2E5B 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_135)
{
    // 0E41 1D165 0E03 0061;	
    // (แ𝅥ฃ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHUAT	[2E5B 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_136)
{
    // 0E41 0001 0E04 0061;	
    // (แ'\u0001'ค) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KHO KHWAI	[2E5B 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_137)
{
    // 0E41 0591 0E04 0061;	
    // (แ֑ค) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHWAI	[2E5B 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_138)
{
    // 0E41 1D165 0E04 0061;	
    // (แ𝅥ค) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHWAI	[2E5B 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_139)
{
    // 0E41 0001 0E05 0061;	
    // (แ'\u0001'ฅ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KHO KHON	[2E5B 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_140)
{
    // 0E41 0591 0E05 0061;	
    // (แ֑ฅ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHON	[2E5B 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_141)
{
    // 0E41 1D165 0E05 0061;	
    // (แ𝅥ฅ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHON	[2E5B 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_142)
{
    // 0E41 0001 0E06 0061;	
    // (แ'\u0001'ฆ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER KHO RAKHANG	[2E5B 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_143)
{
    // 0E41 0591 0E06 0061;	
    // (แ֑ฆ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO RAKHANG	[2E5B 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_144)
{
    // 0E41 1D165 0E06 0061;	
    // (แ𝅥ฆ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO RAKHANG	[2E5B 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_145)
{
    // 0E41 0001 0E07 0061;	
    // (แ'\u0001'ง) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER NGO NGU	[2E5B 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_146)
{
    // 0E41 0591 0E07 0061;	
    // (แ֑ง) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER NGO NGU	[2E5B 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_147)
{
    // 0E41 1D165 0E07 0061;	
    // (แ𝅥ง) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NGO NGU	[2E5B 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_148)
{
    // 0E41 0001 0E08 0061;	
    // (แ'\u0001'จ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER CHO CHAN	[2E5B 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_149)
{
    // 0E41 0591 0E08 0061;	
    // (แ֑จ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHAN	[2E5B 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_150)
{
    // 0E41 1D165 0E08 0061;	
    // (แ𝅥จ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHAN	[2E5B 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_151)
{
    // 0E41 0001 0E09 0061;	
    // (แ'\u0001'ฉ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER CHO CHING	[2E5B 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_152)
{
    // 0E41 0591 0E09 0061;	
    // (แ֑ฉ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHING	[2E5B 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_153)
{
    // 0E41 1D165 0E09 0061;	
    // (แ𝅥ฉ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHING	[2E5B 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_154)
{
    // 0E41 0001 0E0A 0061;	
    // (แ'\u0001'ช) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER CHO CHANG	[2E5B 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_155)
{
    // 0E41 0591 0E0A 0061;	
    // (แ֑ช) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHANG	[2E5B 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_156)
{
    // 0E41 1D165 0E0A 0061;	
    // (แ𝅥ช) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHANG	[2E5B 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_157)
{
    // 0E41 0001 0E0B 0061;	
    // (แ'\u0001'ซ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER SO SO	[2E5B 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_158)
{
    // 0E41 0591 0E0B 0061;	
    // (แ֑ซ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SO	[2E5B 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_159)
{
    // 0E41 1D165 0E0B 0061;	
    // (แ𝅥ซ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SO	[2E5B 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_160)
{
    // 0E41 0001 0E0C 0061;	
    // (แ'\u0001'ฌ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER CHO CHOE	[2E5B 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_161)
{
    // 0E41 0591 0E0C 0061;	
    // (แ֑ฌ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHOE	[2E5B 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_162)
{
    // 0E41 1D165 0E0C 0061;	
    // (แ𝅥ฌ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHOE	[2E5B 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_163)
{
    // 0E41 0001 0E0D 0061;	
    // (แ'\u0001'ญ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER YO YING	[2E5B 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_164)
{
    // 0E41 0591 0E0D 0061;	
    // (แ֑ญ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YING	[2E5B 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_165)
{
    // 0E41 1D165 0E0D 0061;	
    // (แ𝅥ญ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YING	[2E5B 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_166)
{
    // 0E41 0001 0E0E 0061;	
    // (แ'\u0001'ฎ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER DO CHADA	[2E5B 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_167)
{
    // 0E41 0591 0E0E 0061;	
    // (แ֑ฎ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO CHADA	[2E5B 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_168)
{
    // 0E41 1D165 0E0E 0061;	
    // (แ𝅥ฎ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO CHADA	[2E5B 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_169)
{
    // 0E41 0001 0E0F 0061;	
    // (แ'\u0001'ฏ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER TO PATAK	[2E5B 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_170)
{
    // 0E41 0591 0E0F 0061;	
    // (แ֑ฏ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO PATAK	[2E5B 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_171)
{
    // 0E41 1D165 0E0F 0061;	
    // (แ𝅥ฏ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO PATAK	[2E5B 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_172)
{
    // 0E41 0001 0E10 0061;	
    // (แ'\u0001'ฐ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO THAN	[2E5B 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_173)
{
    // 0E41 0591 0E10 0061;	
    // (แ֑ฐ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAN	[2E5B 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_174)
{
    // 0E41 1D165 0E10 0061;	
    // (แ𝅥ฐ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAN	[2E5B 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_175)
{
    // 0E41 0001 0E11 0061;	
    // (แ'\u0001'ฑ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO NANGMONTHO	[2E5B 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_176)
{
    // 0E41 0591 0E11 0061;	
    // (แ֑ฑ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO NANGMONTHO	[2E5B 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_177)
{
    // 0E41 1D165 0E11 0061;	
    // (แ𝅥ฑ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO NANGMONTHO	[2E5B 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_178)
{
    // 0E41 0001 0E12 0061;	
    // (แ'\u0001'ฒ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO PHUTHAO	[2E5B 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_179)
{
    // 0E41 0591 0E12 0061;	
    // (แ֑ฒ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO PHUTHAO	[2E5B 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_180)
{
    // 0E41 1D165 0E12 0061;	
    // (แ𝅥ฒ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO PHUTHAO	[2E5B 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_181)
{
    // 0E41 0001 0E13 0061;	
    // (แ'\u0001'ณ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER NO NEN	[2E5B 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_182)
{
    // 0E41 0591 0E13 0061;	
    // (แ֑ณ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NEN	[2E5B 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_183)
{
    // 0E41 1D165 0E13 0061;	
    // (แ𝅥ณ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NEN	[2E5B 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_184)
{
    // 0E41 0001 0E14 0061;	
    // (แ'\u0001'ด) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER DO DEK	[2E5B 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_185)
{
    // 0E41 0591 0E14 0061;	
    // (แ֑ด) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO DEK	[2E5B 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_186)
{
    // 0E41 1D165 0E14 0061;	
    // (แ𝅥ด) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO DEK	[2E5B 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_187)
{
    // 0E41 0001 0E15 0061;	
    // (แ'\u0001'ต) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER TO TAO	[2E5B 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_188)
{
    // 0E41 0591 0E15 0061;	
    // (แ֑ต) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO TAO	[2E5B 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_189)
{
    // 0E41 1D165 0E15 0061;	
    // (แ𝅥ต) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO TAO	[2E5B 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_190)
{
    // 0E41 0001 0E16 0061;	
    // (แ'\u0001'ถ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO THUNG	[2E5B 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_191)
{
    // 0E41 0591 0E16 0061;	
    // (แ֑ถ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THUNG	[2E5B 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_192)
{
    // 0E41 1D165 0E16 0061;	
    // (แ𝅥ถ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THUNG	[2E5B 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_193)
{
    // 0E41 0001 0E17 0061;	
    // (แ'\u0001'ท) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO THAHAN	[2E5B 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_194)
{
    // 0E41 0591 0E17 0061;	
    // (แ֑ท) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAHAN	[2E5B 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_195)
{
    // 0E41 1D165 0E17 0061;	
    // (แ𝅥ท) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAHAN	[2E5B 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_196)
{
    // 0E41 0001 0E18 0061;	
    // (แ'\u0001'ธ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER THO THONG	[2E5B 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_197)
{
    // 0E41 0591 0E18 0061;	
    // (แ֑ธ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THONG	[2E5B 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_198)
{
    // 0E41 1D165 0E18 0061;	
    // (แ𝅥ธ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THONG	[2E5B 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_199)
{
    // 0E41 0001 0E19 0061;	
    // (แ'\u0001'น) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER NO NU	[2E5B 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_200)
{
    // 0E41 0591 0E19 0061;	
    // (แ֑น) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NU	[2E5B 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_201)
{
    // 0E41 1D165 0E19 0061;	
    // (แ𝅥น) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NU	[2E5B 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_202)
{
    // 0E41 0001 0E1A 0061;	
    // (แ'\u0001'บ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER BO BAIMAI	[2E5B 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_203)
{
    // 0E41 0591 0E1A 0061;	
    // (แ֑บ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER BO BAIMAI	[2E5B 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_204)
{
    // 0E41 1D165 0E1A 0061;	
    // (แ𝅥บ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER BO BAIMAI	[2E5B 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_205)
{
    // 0E41 0001 0E1B 0061;	
    // (แ'\u0001'ป) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER PO PLA	[2E5B 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_206)
{
    // 0E41 0591 0E1B 0061;	
    // (แ֑ป) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER PO PLA	[2E5B 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_207)
{
    // 0E41 1D165 0E1B 0061;	
    // (แ𝅥ป) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PO PLA	[2E5B 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_208)
{
    // 0E41 0001 0E1C 0061;	
    // (แ'\u0001'ผ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER PHO PHUNG	[2E5B 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_209)
{
    // 0E41 0591 0E1C 0061;	
    // (แ֑ผ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHUNG	[2E5B 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_210)
{
    // 0E41 1D165 0E1C 0061;	
    // (แ𝅥ผ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHUNG	[2E5B 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_211)
{
    // 0E41 0001 0E1D 0061;	
    // (แ'\u0001'ฝ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER FO FA	[2E5B 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_212)
{
    // 0E41 0591 0E1D 0061;	
    // (แ֑ฝ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FA	[2E5B 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_213)
{
    // 0E41 1D165 0E1D 0061;	
    // (แ𝅥ฝ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FA	[2E5B 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_214)
{
    // 0E41 0001 0E1E 0061;	
    // (แ'\u0001'พ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER PHO PHAN	[2E5B 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_215)
{
    // 0E41 0591 0E1E 0061;	
    // (แ֑พ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHAN	[2E5B 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_216)
{
    // 0E41 1D165 0E1E 0061;	
    // (แ𝅥พ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHAN	[2E5B 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_217)
{
    // 0E41 0001 0E1F 0061;	
    // (แ'\u0001'ฟ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER FO FAN	[2E5B 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_218)
{
    // 0E41 0591 0E1F 0061;	
    // (แ֑ฟ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FAN	[2E5B 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_219)
{
    // 0E41 1D165 0E1F 0061;	
    // (แ𝅥ฟ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FAN	[2E5B 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_220)
{
    // 0E41 0001 0E20 0061;	
    // (แ'\u0001'ภ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER PHO SAMPHAO	[2E5B 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_221)
{
    // 0E41 0591 0E20 0061;	
    // (แ֑ภ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO SAMPHAO	[2E5B 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_222)
{
    // 0E41 1D165 0E20 0061;	
    // (แ𝅥ภ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO SAMPHAO	[2E5B 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_223)
{
    // 0E41 0001 0E21 0061;	
    // (แ'\u0001'ม) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER MO MA	[2E5B 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_224)
{
    // 0E41 0591 0E21 0061;	
    // (แ֑ม) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER MO MA	[2E5B 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_225)
{
    // 0E41 1D165 0E21 0061;	
    // (แ𝅥ม) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER MO MA	[2E5B 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_226)
{
    // 0E41 0001 0E22 0061;	
    // (แ'\u0001'ย) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER YO YAK	[2E5B 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_227)
{
    // 0E41 0591 0E22 0061;	
    // (แ֑ย) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YAK	[2E5B 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_228)
{
    // 0E41 1D165 0E22 0061;	
    // (แ𝅥ย) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YAK	[2E5B 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_229)
{
    // 0E41 0001 0E23 0061;	
    // (แ'\u0001'ร) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER RO RUA	[2E5B 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_230)
{
    // 0E41 0591 0E23 0061;	
    // (แ֑ร) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER RO RUA	[2E5B 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_231)
{
    // 0E41 1D165 0E23 0061;	
    // (แ𝅥ร) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RO RUA	[2E5B 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_232)
{
    // 0E41 0001 0E24 0061;	
    // (แ'\u0001'ฤ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER RU	[2E5B 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_233)
{
    // 0E41 0591 0E24 0061;	
    // (แ֑ฤ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER RU	[2E5B 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_234)
{
    // 0E41 1D165 0E24 0061;	
    // (แ𝅥ฤ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RU	[2E5B 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_235)
{
    // 0E41 0001 0E25 0061;	
    // (แ'\u0001'ล) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER LO LING	[2E5B 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_236)
{
    // 0E41 0591 0E25 0061;	
    // (แ֑ล) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO LING	[2E5B 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_237)
{
    // 0E41 1D165 0E25 0061;	
    // (แ𝅥ล) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO LING	[2E5B 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_238)
{
    // 0E41 0001 0E26 0061;	
    // (แ'\u0001'ฦ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER LU	[2E5B 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_239)
{
    // 0E41 0591 0E26 0061;	
    // (แ֑ฦ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER LU	[2E5B 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_240)
{
    // 0E41 1D165 0E26 0061;	
    // (แ𝅥ฦ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LU	[2E5B 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_241)
{
    // 0E41 0001 0E27 0061;	
    // (แ'\u0001'ว) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER WO WAEN	[2E5B 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_242)
{
    // 0E41 0591 0E27 0061;	
    // (แ֑ว) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER WO WAEN	[2E5B 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_243)
{
    // 0E41 1D165 0E27 0061;	
    // (แ𝅥ว) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER WO WAEN	[2E5B 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_244)
{
    // 0E41 0001 0E28 0061;	
    // (แ'\u0001'ศ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER SO SALA	[2E5B 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_245)
{
    // 0E41 0591 0E28 0061;	
    // (แ֑ศ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SALA	[2E5B 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_246)
{
    // 0E41 1D165 0E28 0061;	
    // (แ𝅥ศ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SALA	[2E5B 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_247)
{
    // 0E41 0001 0E29 0061;	
    // (แ'\u0001'ษ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER SO RUSI	[2E5B 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_248)
{
    // 0E41 0591 0E29 0061;	
    // (แ֑ษ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO RUSI	[2E5B 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_249)
{
    // 0E41 1D165 0E29 0061;	
    // (แ𝅥ษ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO RUSI	[2E5B 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_250)
{
    // 0E41 0001 0E2A 0061;	
    // (แ'\u0001'ส) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER SO SUA	[2E5B 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_251)
{
    // 0E41 0591 0E2A 0061;	
    // (แ֑ส) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SUA	[2E5B 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_252)
{
    // 0E41 1D165 0E2A 0061;	
    // (แ𝅥ส) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SUA	[2E5B 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_253)
{
    // 0E41 0001 0E2B 0061;	
    // (แ'\u0001'ห) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER HO HIP	[2E5B 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_254)
{
    // 0E41 0591 0E2B 0061;	
    // (แ֑ห) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO HIP	[2E5B 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_255)
{
    // 0E41 1D165 0E2B 0061;	
    // (แ𝅥ห) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO HIP	[2E5B 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_256)
{
    // 0E41 0001 0E2C 0061;	
    // (แ'\u0001'ฬ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER LO CHULA	[2E5B 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_257)
{
    // 0E41 0591 0E2C 0061;	
    // (แ֑ฬ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO CHULA	[2E5B 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_258)
{
    // 0E41 1D165 0E2C 0061;	
    // (แ𝅥ฬ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO CHULA	[2E5B 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_259)
{
    // 0E41 0001 0E2D 0061;	
    // (แ'\u0001'อ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER O ANG	[2E5B 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_260)
{
    // 0E41 0591 0E2D 0061;	
    // (แ֑อ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER O ANG	[2E5B 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_261)
{
    // 0E41 1D165 0E2D 0061;	
    // (แ𝅥อ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER O ANG	[2E5B 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_262)
{
    // 0E41 0001 0E2E 0061;	
    // (แ'\u0001'ฮ) THAI CHARACTER SARA AE, <START OF HEADING>, THAI CHARACTER HO NOKHUK	[2E5B 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0001, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_263)
{
    // 0E41 0591 0E2E 0061;	
    // (แ֑ฮ) THAI CHARACTER SARA AE, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO NOKHUK	[2E5B 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x0591, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_264)
{
    // 0E41 1D165 0E2E 0061;	
    // (แ𝅥ฮ) THAI CHARACTER SARA AE, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO NOKHUK	[2E5B 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E41, 0x1D165, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5B, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_265)
{
    // 0E42 0021;	
    // (โ) THAI CHARACTER SARA O	[2E5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E42, 0x0021 };
    uint32_t const ces[9] = { 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_266)
{
    // 0E42 003F;	
    // (โ) THAI CHARACTER SARA O	[2E5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E42, 0x003F };
    uint32_t const ces[9] = { 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_267)
{
    // 0E42 0061;	
    // (โ) THAI CHARACTER SARA O	[2E5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E42, 0x0061 };
    uint32_t const ces[9] = { 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_268)
{
    // 0E42 0041;	
    // (โ) THAI CHARACTER SARA O	[2E5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E42, 0x0041 };
    uint32_t const ces[9] = { 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_269)
{
    // 0E42 0062;	
    // (โ) THAI CHARACTER SARA O	[2E5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E42, 0x0062 };
    uint32_t const ces[9] = { 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_270)
{
    // 0E42 0001 0E01 0061;	
    // (โ'\u0001'ก) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KO KAI	[2E5C 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_271)
{
    // 0E42 0591 0E01 0061;	
    // (โ֑ก) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KO KAI	[2E5C 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_272)
{
    // 0E42 1D165 0E01 0061;	
    // (โ𝅥ก) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KO KAI	[2E5C 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_273)
{
    // 0E42 0001 0E02 0061;	
    // (โ'\u0001'ข) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KHO KHAI	[2E5C 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_274)
{
    // 0E42 0591 0E02 0061;	
    // (โ֑ข) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHAI	[2E5C 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_275)
{
    // 0E42 1D165 0E02 0061;	
    // (โ𝅥ข) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHAI	[2E5C 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_276)
{
    // 0E42 0001 0E03 0061;	
    // (โ'\u0001'ฃ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KHO KHUAT	[2E5C 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_277)
{
    // 0E42 0591 0E03 0061;	
    // (โ֑ฃ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHUAT	[2E5C 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_278)
{
    // 0E42 1D165 0E03 0061;	
    // (โ𝅥ฃ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHUAT	[2E5C 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_279)
{
    // 0E42 0001 0E04 0061;	
    // (โ'\u0001'ค) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KHO KHWAI	[2E5C 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_280)
{
    // 0E42 0591 0E04 0061;	
    // (โ֑ค) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHWAI	[2E5C 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_281)
{
    // 0E42 1D165 0E04 0061;	
    // (โ𝅥ค) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHWAI	[2E5C 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_282)
{
    // 0E42 0001 0E05 0061;	
    // (โ'\u0001'ฅ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KHO KHON	[2E5C 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_283)
{
    // 0E42 0591 0E05 0061;	
    // (โ֑ฅ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHON	[2E5C 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_284)
{
    // 0E42 1D165 0E05 0061;	
    // (โ𝅥ฅ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHON	[2E5C 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_285)
{
    // 0E42 0001 0E06 0061;	
    // (โ'\u0001'ฆ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER KHO RAKHANG	[2E5C 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_286)
{
    // 0E42 0591 0E06 0061;	
    // (โ֑ฆ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO RAKHANG	[2E5C 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_287)
{
    // 0E42 1D165 0E06 0061;	
    // (โ𝅥ฆ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO RAKHANG	[2E5C 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_288)
{
    // 0E42 0001 0E07 0061;	
    // (โ'\u0001'ง) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER NGO NGU	[2E5C 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_289)
{
    // 0E42 0591 0E07 0061;	
    // (โ֑ง) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER NGO NGU	[2E5C 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_290)
{
    // 0E42 1D165 0E07 0061;	
    // (โ𝅥ง) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NGO NGU	[2E5C 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_291)
{
    // 0E42 0001 0E08 0061;	
    // (โ'\u0001'จ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER CHO CHAN	[2E5C 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_292)
{
    // 0E42 0591 0E08 0061;	
    // (โ֑จ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHAN	[2E5C 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_293)
{
    // 0E42 1D165 0E08 0061;	
    // (โ𝅥จ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHAN	[2E5C 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_294)
{
    // 0E42 0001 0E09 0061;	
    // (โ'\u0001'ฉ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER CHO CHING	[2E5C 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_295)
{
    // 0E42 0591 0E09 0061;	
    // (โ֑ฉ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHING	[2E5C 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_296)
{
    // 0E42 1D165 0E09 0061;	
    // (โ𝅥ฉ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHING	[2E5C 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_297)
{
    // 0E42 0001 0E0A 0061;	
    // (โ'\u0001'ช) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER CHO CHANG	[2E5C 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_298)
{
    // 0E42 0591 0E0A 0061;	
    // (โ֑ช) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHANG	[2E5C 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_299)
{
    // 0E42 1D165 0E0A 0061;	
    // (โ𝅥ช) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHANG	[2E5C 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_300)
{
    // 0E42 0001 0E0B 0061;	
    // (โ'\u0001'ซ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER SO SO	[2E5C 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_301)
{
    // 0E42 0591 0E0B 0061;	
    // (โ֑ซ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SO	[2E5C 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_302)
{
    // 0E42 1D165 0E0B 0061;	
    // (โ𝅥ซ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SO	[2E5C 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_303)
{
    // 0E42 0001 0E0C 0061;	
    // (โ'\u0001'ฌ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER CHO CHOE	[2E5C 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_304)
{
    // 0E42 0591 0E0C 0061;	
    // (โ֑ฌ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHOE	[2E5C 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_305)
{
    // 0E42 1D165 0E0C 0061;	
    // (โ𝅥ฌ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHOE	[2E5C 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_306)
{
    // 0E42 0001 0E0D 0061;	
    // (โ'\u0001'ญ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER YO YING	[2E5C 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_307)
{
    // 0E42 0591 0E0D 0061;	
    // (โ֑ญ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YING	[2E5C 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_308)
{
    // 0E42 1D165 0E0D 0061;	
    // (โ𝅥ญ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YING	[2E5C 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_309)
{
    // 0E42 0001 0E0E 0061;	
    // (โ'\u0001'ฎ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER DO CHADA	[2E5C 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_310)
{
    // 0E42 0591 0E0E 0061;	
    // (โ֑ฎ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO CHADA	[2E5C 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_311)
{
    // 0E42 1D165 0E0E 0061;	
    // (โ𝅥ฎ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO CHADA	[2E5C 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_312)
{
    // 0E42 0001 0E0F 0061;	
    // (โ'\u0001'ฏ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER TO PATAK	[2E5C 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_313)
{
    // 0E42 0591 0E0F 0061;	
    // (โ֑ฏ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO PATAK	[2E5C 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_314)
{
    // 0E42 1D165 0E0F 0061;	
    // (โ𝅥ฏ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO PATAK	[2E5C 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_315)
{
    // 0E42 0001 0E10 0061;	
    // (โ'\u0001'ฐ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO THAN	[2E5C 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_316)
{
    // 0E42 0591 0E10 0061;	
    // (โ֑ฐ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAN	[2E5C 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_317)
{
    // 0E42 1D165 0E10 0061;	
    // (โ𝅥ฐ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAN	[2E5C 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_318)
{
    // 0E42 0001 0E11 0061;	
    // (โ'\u0001'ฑ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO NANGMONTHO	[2E5C 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_319)
{
    // 0E42 0591 0E11 0061;	
    // (โ֑ฑ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO NANGMONTHO	[2E5C 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_320)
{
    // 0E42 1D165 0E11 0061;	
    // (โ𝅥ฑ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO NANGMONTHO	[2E5C 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_321)
{
    // 0E42 0001 0E12 0061;	
    // (โ'\u0001'ฒ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO PHUTHAO	[2E5C 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_322)
{
    // 0E42 0591 0E12 0061;	
    // (โ֑ฒ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO PHUTHAO	[2E5C 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_323)
{
    // 0E42 1D165 0E12 0061;	
    // (โ𝅥ฒ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO PHUTHAO	[2E5C 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_324)
{
    // 0E42 0001 0E13 0061;	
    // (โ'\u0001'ณ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER NO NEN	[2E5C 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_325)
{
    // 0E42 0591 0E13 0061;	
    // (โ֑ณ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NEN	[2E5C 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_326)
{
    // 0E42 1D165 0E13 0061;	
    // (โ𝅥ณ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NEN	[2E5C 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_327)
{
    // 0E42 0001 0E14 0061;	
    // (โ'\u0001'ด) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER DO DEK	[2E5C 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_328)
{
    // 0E42 0591 0E14 0061;	
    // (โ֑ด) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO DEK	[2E5C 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_329)
{
    // 0E42 1D165 0E14 0061;	
    // (โ𝅥ด) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO DEK	[2E5C 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_330)
{
    // 0E42 0001 0E15 0061;	
    // (โ'\u0001'ต) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER TO TAO	[2E5C 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_331)
{
    // 0E42 0591 0E15 0061;	
    // (โ֑ต) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO TAO	[2E5C 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_332)
{
    // 0E42 1D165 0E15 0061;	
    // (โ𝅥ต) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO TAO	[2E5C 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_333)
{
    // 0E42 0001 0E16 0061;	
    // (โ'\u0001'ถ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO THUNG	[2E5C 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_334)
{
    // 0E42 0591 0E16 0061;	
    // (โ֑ถ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THUNG	[2E5C 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_335)
{
    // 0E42 1D165 0E16 0061;	
    // (โ𝅥ถ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THUNG	[2E5C 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_336)
{
    // 0E42 0001 0E17 0061;	
    // (โ'\u0001'ท) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO THAHAN	[2E5C 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_337)
{
    // 0E42 0591 0E17 0061;	
    // (โ֑ท) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAHAN	[2E5C 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_338)
{
    // 0E42 1D165 0E17 0061;	
    // (โ𝅥ท) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAHAN	[2E5C 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_339)
{
    // 0E42 0001 0E18 0061;	
    // (โ'\u0001'ธ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER THO THONG	[2E5C 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_340)
{
    // 0E42 0591 0E18 0061;	
    // (โ֑ธ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THONG	[2E5C 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_341)
{
    // 0E42 1D165 0E18 0061;	
    // (โ𝅥ธ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THONG	[2E5C 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_342)
{
    // 0E42 0001 0E19 0061;	
    // (โ'\u0001'น) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER NO NU	[2E5C 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_343)
{
    // 0E42 0591 0E19 0061;	
    // (โ֑น) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NU	[2E5C 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_344)
{
    // 0E42 1D165 0E19 0061;	
    // (โ𝅥น) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NU	[2E5C 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_345)
{
    // 0E42 0001 0E1A 0061;	
    // (โ'\u0001'บ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER BO BAIMAI	[2E5C 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_346)
{
    // 0E42 0591 0E1A 0061;	
    // (โ֑บ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER BO BAIMAI	[2E5C 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_347)
{
    // 0E42 1D165 0E1A 0061;	
    // (โ𝅥บ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER BO BAIMAI	[2E5C 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_348)
{
    // 0E42 0001 0E1B 0061;	
    // (โ'\u0001'ป) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER PO PLA	[2E5C 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_349)
{
    // 0E42 0591 0E1B 0061;	
    // (โ֑ป) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER PO PLA	[2E5C 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_350)
{
    // 0E42 1D165 0E1B 0061;	
    // (โ𝅥ป) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PO PLA	[2E5C 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_351)
{
    // 0E42 0001 0E1C 0061;	
    // (โ'\u0001'ผ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER PHO PHUNG	[2E5C 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_352)
{
    // 0E42 0591 0E1C 0061;	
    // (โ֑ผ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHUNG	[2E5C 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_353)
{
    // 0E42 1D165 0E1C 0061;	
    // (โ𝅥ผ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHUNG	[2E5C 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_354)
{
    // 0E42 0001 0E1D 0061;	
    // (โ'\u0001'ฝ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER FO FA	[2E5C 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_355)
{
    // 0E42 0591 0E1D 0061;	
    // (โ֑ฝ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FA	[2E5C 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_356)
{
    // 0E42 1D165 0E1D 0061;	
    // (โ𝅥ฝ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FA	[2E5C 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_357)
{
    // 0E42 0001 0E1E 0061;	
    // (โ'\u0001'พ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER PHO PHAN	[2E5C 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_358)
{
    // 0E42 0591 0E1E 0061;	
    // (โ֑พ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHAN	[2E5C 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_359)
{
    // 0E42 1D165 0E1E 0061;	
    // (โ𝅥พ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHAN	[2E5C 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_360)
{
    // 0E42 0001 0E1F 0061;	
    // (โ'\u0001'ฟ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER FO FAN	[2E5C 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_361)
{
    // 0E42 0591 0E1F 0061;	
    // (โ֑ฟ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FAN	[2E5C 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_362)
{
    // 0E42 1D165 0E1F 0061;	
    // (โ𝅥ฟ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FAN	[2E5C 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_363)
{
    // 0E42 0001 0E20 0061;	
    // (โ'\u0001'ภ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER PHO SAMPHAO	[2E5C 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_364)
{
    // 0E42 0591 0E20 0061;	
    // (โ֑ภ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO SAMPHAO	[2E5C 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_365)
{
    // 0E42 1D165 0E20 0061;	
    // (โ𝅥ภ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO SAMPHAO	[2E5C 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_366)
{
    // 0E42 0001 0E21 0061;	
    // (โ'\u0001'ม) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER MO MA	[2E5C 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_367)
{
    // 0E42 0591 0E21 0061;	
    // (โ֑ม) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER MO MA	[2E5C 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_368)
{
    // 0E42 1D165 0E21 0061;	
    // (โ𝅥ม) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER MO MA	[2E5C 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_369)
{
    // 0E42 0001 0E22 0061;	
    // (โ'\u0001'ย) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER YO YAK	[2E5C 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_370)
{
    // 0E42 0591 0E22 0061;	
    // (โ֑ย) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YAK	[2E5C 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_371)
{
    // 0E42 1D165 0E22 0061;	
    // (โ𝅥ย) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YAK	[2E5C 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_372)
{
    // 0E42 0001 0E23 0061;	
    // (โ'\u0001'ร) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER RO RUA	[2E5C 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_373)
{
    // 0E42 0591 0E23 0061;	
    // (โ֑ร) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER RO RUA	[2E5C 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_374)
{
    // 0E42 1D165 0E23 0061;	
    // (โ𝅥ร) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RO RUA	[2E5C 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_375)
{
    // 0E42 0001 0E24 0061;	
    // (โ'\u0001'ฤ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER RU	[2E5C 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_376)
{
    // 0E42 0591 0E24 0061;	
    // (โ֑ฤ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER RU	[2E5C 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_377)
{
    // 0E42 1D165 0E24 0061;	
    // (โ𝅥ฤ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RU	[2E5C 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_378)
{
    // 0E42 0001 0E25 0061;	
    // (โ'\u0001'ล) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER LO LING	[2E5C 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_379)
{
    // 0E42 0591 0E25 0061;	
    // (โ֑ล) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO LING	[2E5C 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_380)
{
    // 0E42 1D165 0E25 0061;	
    // (โ𝅥ล) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO LING	[2E5C 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_381)
{
    // 0E42 0001 0E26 0061;	
    // (โ'\u0001'ฦ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER LU	[2E5C 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_382)
{
    // 0E42 0591 0E26 0061;	
    // (โ֑ฦ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER LU	[2E5C 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_383)
{
    // 0E42 1D165 0E26 0061;	
    // (โ𝅥ฦ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LU	[2E5C 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_384)
{
    // 0E42 0001 0E27 0061;	
    // (โ'\u0001'ว) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER WO WAEN	[2E5C 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_385)
{
    // 0E42 0591 0E27 0061;	
    // (โ֑ว) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER WO WAEN	[2E5C 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_386)
{
    // 0E42 1D165 0E27 0061;	
    // (โ𝅥ว) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER WO WAEN	[2E5C 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_387)
{
    // 0E42 0001 0E28 0061;	
    // (โ'\u0001'ศ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER SO SALA	[2E5C 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_388)
{
    // 0E42 0591 0E28 0061;	
    // (โ֑ศ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SALA	[2E5C 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_389)
{
    // 0E42 1D165 0E28 0061;	
    // (โ𝅥ศ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SALA	[2E5C 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_390)
{
    // 0E42 0001 0E29 0061;	
    // (โ'\u0001'ษ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER SO RUSI	[2E5C 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_391)
{
    // 0E42 0591 0E29 0061;	
    // (โ֑ษ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO RUSI	[2E5C 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_392)
{
    // 0E42 1D165 0E29 0061;	
    // (โ𝅥ษ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO RUSI	[2E5C 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_393)
{
    // 0E42 0001 0E2A 0061;	
    // (โ'\u0001'ส) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER SO SUA	[2E5C 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_394)
{
    // 0E42 0591 0E2A 0061;	
    // (โ֑ส) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SUA	[2E5C 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_395)
{
    // 0E42 1D165 0E2A 0061;	
    // (โ𝅥ส) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SUA	[2E5C 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_396)
{
    // 0E42 0001 0E2B 0061;	
    // (โ'\u0001'ห) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER HO HIP	[2E5C 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_397)
{
    // 0E42 0591 0E2B 0061;	
    // (โ֑ห) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO HIP	[2E5C 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_398)
{
    // 0E42 1D165 0E2B 0061;	
    // (โ𝅥ห) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO HIP	[2E5C 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_399)
{
    // 0E42 0001 0E2C 0061;	
    // (โ'\u0001'ฬ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER LO CHULA	[2E5C 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_400)
{
    // 0E42 0591 0E2C 0061;	
    // (โ֑ฬ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO CHULA	[2E5C 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_401)
{
    // 0E42 1D165 0E2C 0061;	
    // (โ𝅥ฬ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO CHULA	[2E5C 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_402)
{
    // 0E42 0001 0E2D 0061;	
    // (โ'\u0001'อ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER O ANG	[2E5C 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_403)
{
    // 0E42 0591 0E2D 0061;	
    // (โ֑อ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER O ANG	[2E5C 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_404)
{
    // 0E42 1D165 0E2D 0061;	
    // (โ𝅥อ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER O ANG	[2E5C 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_405)
{
    // 0E42 0001 0E2E 0061;	
    // (โ'\u0001'ฮ) THAI CHARACTER SARA O, <START OF HEADING>, THAI CHARACTER HO NOKHUK	[2E5C 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0001, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_406)
{
    // 0E42 0591 0E2E 0061;	
    // (โ֑ฮ) THAI CHARACTER SARA O, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO NOKHUK	[2E5C 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x0591, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_407)
{
    // 0E42 1D165 0E2E 0061;	
    // (โ𝅥ฮ) THAI CHARACTER SARA O, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO NOKHUK	[2E5C 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E42, 0x1D165, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5C, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_408)
{
    // 0E43 0021;	
    // (ใ) THAI CHARACTER SARA AI MAIMUAN	[2E5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E43, 0x0021 };
    uint32_t const ces[9] = { 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_409)
{
    // 0E43 003F;	
    // (ใ) THAI CHARACTER SARA AI MAIMUAN	[2E5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E43, 0x003F };
    uint32_t const ces[9] = { 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_410)
{
    // 0E43 0061;	
    // (ใ) THAI CHARACTER SARA AI MAIMUAN	[2E5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E43, 0x0061 };
    uint32_t const ces[9] = { 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_411)
{
    // 0E43 0041;	
    // (ใ) THAI CHARACTER SARA AI MAIMUAN	[2E5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E43, 0x0041 };
    uint32_t const ces[9] = { 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_412)
{
    // 0E43 0062;	
    // (ใ) THAI CHARACTER SARA AI MAIMUAN	[2E5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E43, 0x0062 };
    uint32_t const ces[9] = { 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_413)
{
    // 0E43 0001 0E01 0061;	
    // (ใ'\u0001'ก) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KO KAI	[2E5D 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_414)
{
    // 0E43 0591 0E01 0061;	
    // (ใ֑ก) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KO KAI	[2E5D 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_415)
{
    // 0E43 1D165 0E01 0061;	
    // (ใ𝅥ก) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KO KAI	[2E5D 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_416)
{
    // 0E43 0001 0E02 0061;	
    // (ใ'\u0001'ข) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KHO KHAI	[2E5D 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_417)
{
    // 0E43 0591 0E02 0061;	
    // (ใ֑ข) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHAI	[2E5D 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_418)
{
    // 0E43 1D165 0E02 0061;	
    // (ใ𝅥ข) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHAI	[2E5D 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_419)
{
    // 0E43 0001 0E03 0061;	
    // (ใ'\u0001'ฃ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KHO KHUAT	[2E5D 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_420)
{
    // 0E43 0591 0E03 0061;	
    // (ใ֑ฃ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHUAT	[2E5D 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_421)
{
    // 0E43 1D165 0E03 0061;	
    // (ใ𝅥ฃ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHUAT	[2E5D 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_422)
{
    // 0E43 0001 0E04 0061;	
    // (ใ'\u0001'ค) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KHO KHWAI	[2E5D 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_423)
{
    // 0E43 0591 0E04 0061;	
    // (ใ֑ค) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHWAI	[2E5D 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_424)
{
    // 0E43 1D165 0E04 0061;	
    // (ใ𝅥ค) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHWAI	[2E5D 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_425)
{
    // 0E43 0001 0E05 0061;	
    // (ใ'\u0001'ฅ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KHO KHON	[2E5D 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_426)
{
    // 0E43 0591 0E05 0061;	
    // (ใ֑ฅ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHON	[2E5D 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_427)
{
    // 0E43 1D165 0E05 0061;	
    // (ใ𝅥ฅ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHON	[2E5D 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_428)
{
    // 0E43 0001 0E06 0061;	
    // (ใ'\u0001'ฆ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER KHO RAKHANG	[2E5D 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_429)
{
    // 0E43 0591 0E06 0061;	
    // (ใ֑ฆ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO RAKHANG	[2E5D 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_430)
{
    // 0E43 1D165 0E06 0061;	
    // (ใ𝅥ฆ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO RAKHANG	[2E5D 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_431)
{
    // 0E43 0001 0E07 0061;	
    // (ใ'\u0001'ง) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER NGO NGU	[2E5D 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_432)
{
    // 0E43 0591 0E07 0061;	
    // (ใ֑ง) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER NGO NGU	[2E5D 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_433)
{
    // 0E43 1D165 0E07 0061;	
    // (ใ𝅥ง) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NGO NGU	[2E5D 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_434)
{
    // 0E43 0001 0E08 0061;	
    // (ใ'\u0001'จ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER CHO CHAN	[2E5D 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_435)
{
    // 0E43 0591 0E08 0061;	
    // (ใ֑จ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHAN	[2E5D 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_436)
{
    // 0E43 1D165 0E08 0061;	
    // (ใ𝅥จ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHAN	[2E5D 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_437)
{
    // 0E43 0001 0E09 0061;	
    // (ใ'\u0001'ฉ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER CHO CHING	[2E5D 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_438)
{
    // 0E43 0591 0E09 0061;	
    // (ใ֑ฉ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHING	[2E5D 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_439)
{
    // 0E43 1D165 0E09 0061;	
    // (ใ𝅥ฉ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHING	[2E5D 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_440)
{
    // 0E43 0001 0E0A 0061;	
    // (ใ'\u0001'ช) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER CHO CHANG	[2E5D 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_441)
{
    // 0E43 0591 0E0A 0061;	
    // (ใ֑ช) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHANG	[2E5D 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_442)
{
    // 0E43 1D165 0E0A 0061;	
    // (ใ𝅥ช) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHANG	[2E5D 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_443)
{
    // 0E43 0001 0E0B 0061;	
    // (ใ'\u0001'ซ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER SO SO	[2E5D 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_444)
{
    // 0E43 0591 0E0B 0061;	
    // (ใ֑ซ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SO	[2E5D 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_445)
{
    // 0E43 1D165 0E0B 0061;	
    // (ใ𝅥ซ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SO	[2E5D 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_446)
{
    // 0E43 0001 0E0C 0061;	
    // (ใ'\u0001'ฌ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER CHO CHOE	[2E5D 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_447)
{
    // 0E43 0591 0E0C 0061;	
    // (ใ֑ฌ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHOE	[2E5D 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_448)
{
    // 0E43 1D165 0E0C 0061;	
    // (ใ𝅥ฌ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHOE	[2E5D 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_449)
{
    // 0E43 0001 0E0D 0061;	
    // (ใ'\u0001'ญ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER YO YING	[2E5D 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_450)
{
    // 0E43 0591 0E0D 0061;	
    // (ใ֑ญ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YING	[2E5D 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_451)
{
    // 0E43 1D165 0E0D 0061;	
    // (ใ𝅥ญ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YING	[2E5D 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_452)
{
    // 0E43 0001 0E0E 0061;	
    // (ใ'\u0001'ฎ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER DO CHADA	[2E5D 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_453)
{
    // 0E43 0591 0E0E 0061;	
    // (ใ֑ฎ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO CHADA	[2E5D 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_454)
{
    // 0E43 1D165 0E0E 0061;	
    // (ใ𝅥ฎ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO CHADA	[2E5D 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_455)
{
    // 0E43 0001 0E0F 0061;	
    // (ใ'\u0001'ฏ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER TO PATAK	[2E5D 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_456)
{
    // 0E43 0591 0E0F 0061;	
    // (ใ֑ฏ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO PATAK	[2E5D 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_457)
{
    // 0E43 1D165 0E0F 0061;	
    // (ใ𝅥ฏ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO PATAK	[2E5D 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_458)
{
    // 0E43 0001 0E10 0061;	
    // (ใ'\u0001'ฐ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO THAN	[2E5D 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_459)
{
    // 0E43 0591 0E10 0061;	
    // (ใ֑ฐ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAN	[2E5D 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_460)
{
    // 0E43 1D165 0E10 0061;	
    // (ใ𝅥ฐ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAN	[2E5D 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_461)
{
    // 0E43 0001 0E11 0061;	
    // (ใ'\u0001'ฑ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO NANGMONTHO	[2E5D 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_462)
{
    // 0E43 0591 0E11 0061;	
    // (ใ֑ฑ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO NANGMONTHO	[2E5D 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_463)
{
    // 0E43 1D165 0E11 0061;	
    // (ใ𝅥ฑ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO NANGMONTHO	[2E5D 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_464)
{
    // 0E43 0001 0E12 0061;	
    // (ใ'\u0001'ฒ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO PHUTHAO	[2E5D 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_465)
{
    // 0E43 0591 0E12 0061;	
    // (ใ֑ฒ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO PHUTHAO	[2E5D 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_466)
{
    // 0E43 1D165 0E12 0061;	
    // (ใ𝅥ฒ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO PHUTHAO	[2E5D 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_467)
{
    // 0E43 0001 0E13 0061;	
    // (ใ'\u0001'ณ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER NO NEN	[2E5D 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_468)
{
    // 0E43 0591 0E13 0061;	
    // (ใ֑ณ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NEN	[2E5D 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_469)
{
    // 0E43 1D165 0E13 0061;	
    // (ใ𝅥ณ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NEN	[2E5D 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_470)
{
    // 0E43 0001 0E14 0061;	
    // (ใ'\u0001'ด) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER DO DEK	[2E5D 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_471)
{
    // 0E43 0591 0E14 0061;	
    // (ใ֑ด) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO DEK	[2E5D 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_472)
{
    // 0E43 1D165 0E14 0061;	
    // (ใ𝅥ด) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO DEK	[2E5D 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_473)
{
    // 0E43 0001 0E15 0061;	
    // (ใ'\u0001'ต) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER TO TAO	[2E5D 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_474)
{
    // 0E43 0591 0E15 0061;	
    // (ใ֑ต) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO TAO	[2E5D 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_475)
{
    // 0E43 1D165 0E15 0061;	
    // (ใ𝅥ต) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO TAO	[2E5D 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_476)
{
    // 0E43 0001 0E16 0061;	
    // (ใ'\u0001'ถ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO THUNG	[2E5D 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_477)
{
    // 0E43 0591 0E16 0061;	
    // (ใ֑ถ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THUNG	[2E5D 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_478)
{
    // 0E43 1D165 0E16 0061;	
    // (ใ𝅥ถ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THUNG	[2E5D 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_479)
{
    // 0E43 0001 0E17 0061;	
    // (ใ'\u0001'ท) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO THAHAN	[2E5D 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_480)
{
    // 0E43 0591 0E17 0061;	
    // (ใ֑ท) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAHAN	[2E5D 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_481)
{
    // 0E43 1D165 0E17 0061;	
    // (ใ𝅥ท) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAHAN	[2E5D 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_482)
{
    // 0E43 0001 0E18 0061;	
    // (ใ'\u0001'ธ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER THO THONG	[2E5D 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_483)
{
    // 0E43 0591 0E18 0061;	
    // (ใ֑ธ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THONG	[2E5D 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_484)
{
    // 0E43 1D165 0E18 0061;	
    // (ใ𝅥ธ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THONG	[2E5D 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_485)
{
    // 0E43 0001 0E19 0061;	
    // (ใ'\u0001'น) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER NO NU	[2E5D 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_486)
{
    // 0E43 0591 0E19 0061;	
    // (ใ֑น) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NU	[2E5D 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_487)
{
    // 0E43 1D165 0E19 0061;	
    // (ใ𝅥น) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NU	[2E5D 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_488)
{
    // 0E43 0001 0E1A 0061;	
    // (ใ'\u0001'บ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER BO BAIMAI	[2E5D 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_489)
{
    // 0E43 0591 0E1A 0061;	
    // (ใ֑บ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER BO BAIMAI	[2E5D 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_490)
{
    // 0E43 1D165 0E1A 0061;	
    // (ใ𝅥บ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER BO BAIMAI	[2E5D 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_491)
{
    // 0E43 0001 0E1B 0061;	
    // (ใ'\u0001'ป) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER PO PLA	[2E5D 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_492)
{
    // 0E43 0591 0E1B 0061;	
    // (ใ֑ป) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER PO PLA	[2E5D 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_493)
{
    // 0E43 1D165 0E1B 0061;	
    // (ใ𝅥ป) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PO PLA	[2E5D 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_494)
{
    // 0E43 0001 0E1C 0061;	
    // (ใ'\u0001'ผ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER PHO PHUNG	[2E5D 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_495)
{
    // 0E43 0591 0E1C 0061;	
    // (ใ֑ผ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHUNG	[2E5D 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_496)
{
    // 0E43 1D165 0E1C 0061;	
    // (ใ𝅥ผ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHUNG	[2E5D 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_497)
{
    // 0E43 0001 0E1D 0061;	
    // (ใ'\u0001'ฝ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER FO FA	[2E5D 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_498)
{
    // 0E43 0591 0E1D 0061;	
    // (ใ֑ฝ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FA	[2E5D 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_188_499)
{
    // 0E43 1D165 0E1D 0061;	
    // (ใ𝅥ฝ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FA	[2E5D 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

