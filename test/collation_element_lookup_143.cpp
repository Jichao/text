// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_143_000)
{
    // 12026 ; [.4C12.0020.0002] 
    // CUNEIFORM SIGN AL TIMES KI

    uint32_t const cps[1] = { 0x12026 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c12), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_001)
{
    // 12027 ; [.4C13.0020.0002] 
    // CUNEIFORM SIGN AL TIMES SHE

    uint32_t const cps[1] = { 0x12027 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c13), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_002)
{
    // 12028 ; [.4C14.0020.0002] 
    // CUNEIFORM SIGN AL TIMES USH

    uint32_t const cps[1] = { 0x12028 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c14), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_003)
{
    // 12029 ; [.4C15.0020.0002] 
    // CUNEIFORM SIGN ALAN

    uint32_t const cps[1] = { 0x12029 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c15), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_004)
{
    // 1202A ; [.4C16.0020.0002] 
    // CUNEIFORM SIGN ALEPH

    uint32_t const cps[1] = { 0x1202a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c16), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_005)
{
    // 1202B ; [.4C17.0020.0002] 
    // CUNEIFORM SIGN AMAR

    uint32_t const cps[1] = { 0x1202b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c17), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_006)
{
    // 1202C ; [.4C18.0020.0002] 
    // CUNEIFORM SIGN AMAR TIMES SHE

    uint32_t const cps[1] = { 0x1202c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c18), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_007)
{
    // 1202D ; [.4C19.0020.0002] 
    // CUNEIFORM SIGN AN

    uint32_t const cps[1] = { 0x1202d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c19), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_008)
{
    // 1202E ; [.4C1A.0020.0002] 
    // CUNEIFORM SIGN AN OVER AN

    uint32_t const cps[1] = { 0x1202e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_009)
{
    // 1202F ; [.4C1B.0020.0002] 
    // CUNEIFORM SIGN AN THREE TIMES

    uint32_t const cps[1] = { 0x1202f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_010)
{
    // 12030 ; [.4C1C.0020.0002] 
    // CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA

    uint32_t const cps[1] = { 0x12030 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_011)
{
    // 12031 ; [.4C1D.0020.0002] 
    // CUNEIFORM SIGN AN PLUS NAGA SQUARED

    uint32_t const cps[1] = { 0x12031 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_012)
{
    // 12032 ; [.4C1E.0020.0002] 
    // CUNEIFORM SIGN ANSHE

    uint32_t const cps[1] = { 0x12032 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_013)
{
    // 12033 ; [.4C1F.0020.0002] 
    // CUNEIFORM SIGN APIN

    uint32_t const cps[1] = { 0x12033 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_014)
{
    // 12034 ; [.4C20.0020.0002] 
    // CUNEIFORM SIGN ARAD

    uint32_t const cps[1] = { 0x12034 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c20), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_015)
{
    // 12035 ; [.4C21.0020.0002] 
    // CUNEIFORM SIGN ARAD TIMES KUR

    uint32_t const cps[1] = { 0x12035 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c21), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_016)
{
    // 12036 ; [.4C22.0020.0002] 
    // CUNEIFORM SIGN ARKAB

    uint32_t const cps[1] = { 0x12036 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c22), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_017)
{
    // 12037 ; [.4C23.0020.0002] 
    // CUNEIFORM SIGN ASAL2

    uint32_t const cps[1] = { 0x12037 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c23), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_018)
{
    // 12038 ; [.4C24.0020.0002] 
    // CUNEIFORM SIGN ASH

    uint32_t const cps[1] = { 0x12038 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c24), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_019)
{
    // 12039 ; [.4C25.0020.0002] 
    // CUNEIFORM SIGN ASH ZIDA TENU

    uint32_t const cps[1] = { 0x12039 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c25), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_020)
{
    // 1203A ; [.4C26.0020.0002] 
    // CUNEIFORM SIGN ASH KABA TENU

    uint32_t const cps[1] = { 0x1203a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c26), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_021)
{
    // 1203B ; [.4C27.0020.0002] 
    // CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP

    uint32_t const cps[1] = { 0x1203b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c27), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_022)
{
    // 1203C ; [.4C28.0020.0002] 
    // CUNEIFORM SIGN ASH OVER ASH OVER ASH

    uint32_t const cps[1] = { 0x1203c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c28), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_023)
{
    // 1203D ; [.4C29.0020.0002] 
    // CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH

    uint32_t const cps[1] = { 0x1203d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c29), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_024)
{
    // 1203E ; [.4C2A.0020.0002] 
    // CUNEIFORM SIGN ASH2

    uint32_t const cps[1] = { 0x1203e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_025)
{
    // 1203F ; [.4C2B.0020.0002] 
    // CUNEIFORM SIGN ASHGAB

    uint32_t const cps[1] = { 0x1203f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_026)
{
    // 12040 ; [.4C2C.0020.0002] 
    // CUNEIFORM SIGN BA

    uint32_t const cps[1] = { 0x12040 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_027)
{
    // 12041 ; [.4C2D.0020.0002] 
    // CUNEIFORM SIGN BAD

    uint32_t const cps[1] = { 0x12041 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_028)
{
    // 12042 ; [.4C2E.0020.0002] 
    // CUNEIFORM SIGN BAG3

    uint32_t const cps[1] = { 0x12042 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_029)
{
    // 12043 ; [.4C2F.0020.0002] 
    // CUNEIFORM SIGN BAHAR2

    uint32_t const cps[1] = { 0x12043 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_030)
{
    // 12044 ; [.4C30.0020.0002] 
    // CUNEIFORM SIGN BAL

    uint32_t const cps[1] = { 0x12044 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c30), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_031)
{
    // 12045 ; [.4C31.0020.0002] 
    // CUNEIFORM SIGN BAL OVER BAL

    uint32_t const cps[1] = { 0x12045 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c31), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_032)
{
    // 12046 ; [.4C32.0020.0002] 
    // CUNEIFORM SIGN BALAG

    uint32_t const cps[1] = { 0x12046 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c32), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_033)
{
    // 12047 ; [.4C33.0020.0002] 
    // CUNEIFORM SIGN BAR

    uint32_t const cps[1] = { 0x12047 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c33), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_034)
{
    // 12048 ; [.4C34.0020.0002] 
    // CUNEIFORM SIGN BARA2

    uint32_t const cps[1] = { 0x12048 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c34), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_035)
{
    // 12049 ; [.4C35.0020.0002] 
    // CUNEIFORM SIGN BI

    uint32_t const cps[1] = { 0x12049 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c35), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_036)
{
    // 1204A ; [.4C36.0020.0002] 
    // CUNEIFORM SIGN BI TIMES A

    uint32_t const cps[1] = { 0x1204a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c36), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_037)
{
    // 1204B ; [.4C37.0020.0002] 
    // CUNEIFORM SIGN BI TIMES GAR

    uint32_t const cps[1] = { 0x1204b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c37), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_038)
{
    // 1204C ; [.4C38.0020.0002] 
    // CUNEIFORM SIGN BI TIMES IGI GUNU

    uint32_t const cps[1] = { 0x1204c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c38), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_039)
{
    // 1204D ; [.4C39.0020.0002] 
    // CUNEIFORM SIGN BU

    uint32_t const cps[1] = { 0x1204d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c39), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_040)
{
    // 1204E ; [.4C3A.0020.0002] 
    // CUNEIFORM SIGN BU OVER BU AB

    uint32_t const cps[1] = { 0x1204e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_041)
{
    // 1204F ; [.4C3B.0020.0002] 
    // CUNEIFORM SIGN BU OVER BU UN

    uint32_t const cps[1] = { 0x1204f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_042)
{
    // 12050 ; [.4C3C.0020.0002] 
    // CUNEIFORM SIGN BU CROSSING BU

    uint32_t const cps[1] = { 0x12050 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_043)
{
    // 12051 ; [.4C3D.0020.0002] 
    // CUNEIFORM SIGN BULUG

    uint32_t const cps[1] = { 0x12051 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_044)
{
    // 12052 ; [.4C3E.0020.0002] 
    // CUNEIFORM SIGN BULUG OVER BULUG

    uint32_t const cps[1] = { 0x12052 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_045)
{
    // 12053 ; [.4C3F.0020.0002] 
    // CUNEIFORM SIGN BUR

    uint32_t const cps[1] = { 0x12053 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_046)
{
    // 12054 ; [.4C40.0020.0002] 
    // CUNEIFORM SIGN BUR2

    uint32_t const cps[1] = { 0x12054 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c40), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_047)
{
    // 12055 ; [.4C41.0020.0002] 
    // CUNEIFORM SIGN DA

    uint32_t const cps[1] = { 0x12055 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c41), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_048)
{
    // 12056 ; [.4C42.0020.0002] 
    // CUNEIFORM SIGN DAG

    uint32_t const cps[1] = { 0x12056 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c42), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_049)
{
    // 12057 ; [.4C43.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES A PLUS MASH

    uint32_t const cps[1] = { 0x12057 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c43), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_050)
{
    // 12058 ; [.4C44.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES AMAR

    uint32_t const cps[1] = { 0x12058 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c44), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_051)
{
    // 12059 ; [.4C45.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES BALAG

    uint32_t const cps[1] = { 0x12059 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c45), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_052)
{
    // 1205A ; [.4C46.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES BI

    uint32_t const cps[1] = { 0x1205a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c46), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_053)
{
    // 1205B ; [.4C47.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES GA

    uint32_t const cps[1] = { 0x1205b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c47), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_054)
{
    // 1205C ; [.4C48.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES GA PLUS MASH

    uint32_t const cps[1] = { 0x1205c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c48), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_055)
{
    // 1205D ; [.4C49.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES GI

    uint32_t const cps[1] = { 0x1205d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c49), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_056)
{
    // 1205E ; [.4C4A.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES GIR2

    uint32_t const cps[1] = { 0x1205e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_057)
{
    // 1205F ; [.4C4B.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES GUD

    uint32_t const cps[1] = { 0x1205f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_058)
{
    // 12060 ; [.4C4C.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES HA

    uint32_t const cps[1] = { 0x12060 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_059)
{
    // 12061 ; [.4C4D.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES IR

    uint32_t const cps[1] = { 0x12061 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_060)
{
    // 12062 ; [.4C4E.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES IR PLUS LU

    uint32_t const cps[1] = { 0x12062 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_061)
{
    // 12063 ; [.4C4F.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES KAK

    uint32_t const cps[1] = { 0x12063 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_062)
{
    // 12064 ; [.4C50.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES LA

    uint32_t const cps[1] = { 0x12064 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c50), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_063)
{
    // 12065 ; [.4C51.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES LU

    uint32_t const cps[1] = { 0x12065 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c51), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_064)
{
    // 12066 ; [.4C52.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES LU PLUS MASH2

    uint32_t const cps[1] = { 0x12066 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c52), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_065)
{
    // 12067 ; [.4C53.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES LUM

    uint32_t const cps[1] = { 0x12067 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c53), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_066)
{
    // 12068 ; [.4C54.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES NE

    uint32_t const cps[1] = { 0x12068 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c54), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_067)
{
    // 12069 ; [.4C55.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES PAP PLUS PAP

    uint32_t const cps[1] = { 0x12069 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c55), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_068)
{
    // 1206A ; [.4C56.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES SI

    uint32_t const cps[1] = { 0x1206a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c56), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_069)
{
    // 1206B ; [.4C57.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES TAK4

    uint32_t const cps[1] = { 0x1206b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c57), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_070)
{
    // 1206C ; [.4C58.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS GIR2

    uint32_t const cps[1] = { 0x1206c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c58), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_071)
{
    // 1206D ; [.4C59.0020.0002] 
    // CUNEIFORM SIGN DAG KISIM5 TIMES USH

    uint32_t const cps[1] = { 0x1206d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c59), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_072)
{
    // 1206E ; [.4C5A.0020.0002] 
    // CUNEIFORM SIGN DAM

    uint32_t const cps[1] = { 0x1206e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_073)
{
    // 1206F ; [.4C5B.0020.0002] 
    // CUNEIFORM SIGN DAR

    uint32_t const cps[1] = { 0x1206f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_074)
{
    // 12070 ; [.4C5C.0020.0002] 
    // CUNEIFORM SIGN DARA3

    uint32_t const cps[1] = { 0x12070 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_075)
{
    // 12071 ; [.4C5D.0020.0002] 
    // CUNEIFORM SIGN DARA4

    uint32_t const cps[1] = { 0x12071 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_076)
{
    // 12072 ; [.4C5E.0020.0002] 
    // CUNEIFORM SIGN DI

    uint32_t const cps[1] = { 0x12072 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_077)
{
    // 12073 ; [.4C5F.0020.0002] 
    // CUNEIFORM SIGN DIB

    uint32_t const cps[1] = { 0x12073 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_078)
{
    // 12074 ; [.4C60.0020.0002] 
    // CUNEIFORM SIGN DIM

    uint32_t const cps[1] = { 0x12074 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c60), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_079)
{
    // 12075 ; [.4C61.0020.0002] 
    // CUNEIFORM SIGN DIM TIMES SHE

    uint32_t const cps[1] = { 0x12075 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c61), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_080)
{
    // 12076 ; [.4C62.0020.0002] 
    // CUNEIFORM SIGN DIM2

    uint32_t const cps[1] = { 0x12076 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_081)
{
    // 12077 ; [.4C63.0020.0002] 
    // CUNEIFORM SIGN DIN

    uint32_t const cps[1] = { 0x12077 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c63), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_082)
{
    // 12078 ; [.4C64.0020.0002] 
    // CUNEIFORM SIGN DIN KASKAL U GUNU DISH

    uint32_t const cps[1] = { 0x12078 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c64), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_083)
{
    // 12079 ; [.4C65.0020.0002] 
    // CUNEIFORM SIGN DISH

    uint32_t const cps[1] = { 0x12079 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c65), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_084)
{
    // 1207A ; [.4C66.0020.0002] 
    // CUNEIFORM SIGN DU

    uint32_t const cps[1] = { 0x1207a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c66), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_085)
{
    // 1207B ; [.4C67.0020.0002] 
    // CUNEIFORM SIGN DU OVER DU

    uint32_t const cps[1] = { 0x1207b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c67), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_086)
{
    // 1207C ; [.4C68.0020.0002] 
    // CUNEIFORM SIGN DU GUNU

    uint32_t const cps[1] = { 0x1207c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c68), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_087)
{
    // 1207D ; [.4C69.0020.0002] 
    // CUNEIFORM SIGN DU SHESHIG

    uint32_t const cps[1] = { 0x1207d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c69), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_088)
{
    // 1207E ; [.4C6A.0020.0002] 
    // CUNEIFORM SIGN DUB

    uint32_t const cps[1] = { 0x1207e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_089)
{
    // 1207F ; [.4C6B.0020.0002] 
    // CUNEIFORM SIGN DUB TIMES ESH2

    uint32_t const cps[1] = { 0x1207f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_090)
{
    // 12080 ; [.4C6C.0020.0002] 
    // CUNEIFORM SIGN DUB2

    uint32_t const cps[1] = { 0x12080 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_091)
{
    // 12081 ; [.4C6D.0020.0002] 
    // CUNEIFORM SIGN DUG

    uint32_t const cps[1] = { 0x12081 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_092)
{
    // 12082 ; [.4C6E.0020.0002] 
    // CUNEIFORM SIGN DUGUD

    uint32_t const cps[1] = { 0x12082 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_093)
{
    // 12083 ; [.4C6F.0020.0002] 
    // CUNEIFORM SIGN DUH

    uint32_t const cps[1] = { 0x12083 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_094)
{
    // 12084 ; [.4C70.0020.0002] 
    // CUNEIFORM SIGN DUN

    uint32_t const cps[1] = { 0x12084 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c70), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_095)
{
    // 12085 ; [.4C71.0020.0002] 
    // CUNEIFORM SIGN DUN3

    uint32_t const cps[1] = { 0x12085 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c71), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_096)
{
    // 12086 ; [.4C72.0020.0002] 
    // CUNEIFORM SIGN DUN3 GUNU

    uint32_t const cps[1] = { 0x12086 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c72), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_097)
{
    // 12087 ; [.4C73.0020.0002] 
    // CUNEIFORM SIGN DUN3 GUNU GUNU

    uint32_t const cps[1] = { 0x12087 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c73), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_098)
{
    // 12088 ; [.4C74.0020.0002] 
    // CUNEIFORM SIGN DUN4

    uint32_t const cps[1] = { 0x12088 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c74), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_099)
{
    // 12089 ; [.4C75.0020.0002] 
    // CUNEIFORM SIGN DUR2

    uint32_t const cps[1] = { 0x12089 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c75), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_100)
{
    // 1208A ; [.4C76.0020.0002] 
    // CUNEIFORM SIGN E

    uint32_t const cps[1] = { 0x1208a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c76), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_101)
{
    // 1208B ; [.4C77.0020.0002] 
    // CUNEIFORM SIGN E TIMES PAP

    uint32_t const cps[1] = { 0x1208b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c77), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_102)
{
    // 1208C ; [.4C78.0020.0002] 
    // CUNEIFORM SIGN E OVER E NUN OVER NUN

    uint32_t const cps[1] = { 0x1208c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c78), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_103)
{
    // 1208D ; [.4C79.0020.0002] 
    // CUNEIFORM SIGN E2

    uint32_t const cps[1] = { 0x1208d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c79), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_104)
{
    // 1208E ; [.4C7A.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES A PLUS HA PLUS DA

    uint32_t const cps[1] = { 0x1208e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_105)
{
    // 1208F ; [.4C7B.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES GAR

    uint32_t const cps[1] = { 0x1208f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_106)
{
    // 12090 ; [.4C7C.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES MI

    uint32_t const cps[1] = { 0x12090 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_107)
{
    // 12091 ; [.4C7D.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES SAL

    uint32_t const cps[1] = { 0x12091 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_108)
{
    // 12092 ; [.4C7E.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES SHE

    uint32_t const cps[1] = { 0x12092 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_109)
{
    // 12093 ; [.4C7F.0020.0002] 
    // CUNEIFORM SIGN E2 TIMES U

    uint32_t const cps[1] = { 0x12093 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_110)
{
    // 12094 ; [.4C80.0020.0002] 
    // CUNEIFORM SIGN EDIN

    uint32_t const cps[1] = { 0x12094 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c80), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_111)
{
    // 12095 ; [.4C81.0020.0002] 
    // CUNEIFORM SIGN EGIR

    uint32_t const cps[1] = { 0x12095 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c81), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_112)
{
    // 12096 ; [.4C82.0020.0002] 
    // CUNEIFORM SIGN EL

    uint32_t const cps[1] = { 0x12096 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c82), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_113)
{
    // 12097 ; [.4C83.0020.0002] 
    // CUNEIFORM SIGN EN

    uint32_t const cps[1] = { 0x12097 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c83), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_114)
{
    // 12098 ; [.4C84.0020.0002] 
    // CUNEIFORM SIGN EN TIMES GAN2

    uint32_t const cps[1] = { 0x12098 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c84), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_115)
{
    // 12099 ; [.4C85.0020.0002] 
    // CUNEIFORM SIGN EN TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x12099 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c85), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_116)
{
    // 1209A ; [.4C86.0020.0002] 
    // CUNEIFORM SIGN EN TIMES ME

    uint32_t const cps[1] = { 0x1209a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c86), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_117)
{
    // 1209B ; [.4C87.0020.0002] 
    // CUNEIFORM SIGN EN CROSSING EN

    uint32_t const cps[1] = { 0x1209b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c87), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_118)
{
    // 1209C ; [.4C88.0020.0002] 
    // CUNEIFORM SIGN EN OPPOSING EN

    uint32_t const cps[1] = { 0x1209c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c88), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_119)
{
    // 1209D ; [.4C89.0020.0002] 
    // CUNEIFORM SIGN EN SQUARED

    uint32_t const cps[1] = { 0x1209d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c89), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_120)
{
    // 1209E ; [.4C8A.0020.0002] 
    // CUNEIFORM SIGN EREN

    uint32_t const cps[1] = { 0x1209e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_121)
{
    // 1209F ; [.4C8B.0020.0002] 
    // CUNEIFORM SIGN ERIN2

    uint32_t const cps[1] = { 0x1209f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_122)
{
    // 120A0 ; [.4C8C.0020.0002] 
    // CUNEIFORM SIGN ESH2

    uint32_t const cps[1] = { 0x120a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_123)
{
    // 120A1 ; [.4C8D.0020.0002] 
    // CUNEIFORM SIGN EZEN

    uint32_t const cps[1] = { 0x120a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_124)
{
    // 120A2 ; [.4C8E.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES A

    uint32_t const cps[1] = { 0x120a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_125)
{
    // 120A3 ; [.4C8F.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES A PLUS LAL

    uint32_t const cps[1] = { 0x120a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_126)
{
    // 120A4 ; [.4C90.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL

    uint32_t const cps[1] = { 0x120a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c90), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_127)
{
    // 120A5 ; [.4C91.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES AN

    uint32_t const cps[1] = { 0x120a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c91), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_128)
{
    // 120A6 ; [.4C92.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES BAD

    uint32_t const cps[1] = { 0x120a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c92), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_129)
{
    // 120A7 ; [.4C93.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES DUN3 GUNU

    uint32_t const cps[1] = { 0x120a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c93), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_130)
{
    // 120A8 ; [.4C94.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU

    uint32_t const cps[1] = { 0x120a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c94), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_131)
{
    // 120A9 ; [.4C95.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES HA

    uint32_t const cps[1] = { 0x120a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c95), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_132)
{
    // 120AA ; [.4C96.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES HA GUNU

    uint32_t const cps[1] = { 0x120aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c96), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_133)
{
    // 120AB ; [.4C97.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES IGI GUNU

    uint32_t const cps[1] = { 0x120ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c97), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_134)
{
    // 120AC ; [.4C98.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES KASKAL

    uint32_t const cps[1] = { 0x120ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c98), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_135)
{
    // 120AD ; [.4C99.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED

    uint32_t const cps[1] = { 0x120ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c99), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_136)
{
    // 120AE ; [.4C9A.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES KU3

    uint32_t const cps[1] = { 0x120ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_137)
{
    // 120AF ; [.4C9B.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES LA

    uint32_t const cps[1] = { 0x120af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_138)
{
    // 120B0 ; [.4C9C.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL

    uint32_t const cps[1] = { 0x120b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_139)
{
    // 120B1 ; [.4C9D.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES LI

    uint32_t const cps[1] = { 0x120b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_140)
{
    // 120B2 ; [.4C9E.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES LU

    uint32_t const cps[1] = { 0x120b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_141)
{
    // 120B3 ; [.4C9F.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES U2

    uint32_t const cps[1] = { 0x120b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4c9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_142)
{
    // 120B4 ; [.4CA0.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES UD

    uint32_t const cps[1] = { 0x120b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_143)
{
    // 120B5 ; [.4CA1.0020.0002] 
    // CUNEIFORM SIGN GA

    uint32_t const cps[1] = { 0x120b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_144)
{
    // 120B6 ; [.4CA2.0020.0002] 
    // CUNEIFORM SIGN GA GUNU

    uint32_t const cps[1] = { 0x120b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_145)
{
    // 120B7 ; [.4CA3.0020.0002] 
    // CUNEIFORM SIGN GA2

    uint32_t const cps[1] = { 0x120b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_146)
{
    // 120B8 ; [.4CA4.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA

    uint32_t const cps[1] = { 0x120b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_147)
{
    // 120B9 ; [.4CA5.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES A PLUS HA

    uint32_t const cps[1] = { 0x120b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_148)
{
    // 120BA ; [.4CA6.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES A PLUS IGI

    uint32_t const cps[1] = { 0x120ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_143_149)
{
    // 120BB ; [.4CA7.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB

    uint32_t const cps[1] = { 0x120bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

