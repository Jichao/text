// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_258_000)
{
    // A1A0 003F;	
    // (ꆠ) YI SYLLABLE HLA	[4193 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A0, 0x003F };
    uint32_t const ces[9] = { 0x4193, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_001)
{
    // A1A0 0061;	
    // (ꆠ) YI SYLLABLE HLA	[4193 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A0, 0x0061 };
    uint32_t const ces[9] = { 0x4193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_002)
{
    // A1A0 0041;	
    // (ꆠ) YI SYLLABLE HLA	[4193 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A0, 0x0041 };
    uint32_t const ces[9] = { 0x4193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_003)
{
    // A1A0 0062;	
    // (ꆠ) YI SYLLABLE HLA	[4193 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A0, 0x0062 };
    uint32_t const ces[9] = { 0x4193, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_004)
{
    // A1A1 0021;	
    // (ꆡ) YI SYLLABLE HLAP	[4194 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A1, 0x0021 };
    uint32_t const ces[9] = { 0x4194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_005)
{
    // A1A1 003F;	
    // (ꆡ) YI SYLLABLE HLAP	[4194 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A1, 0x003F };
    uint32_t const ces[9] = { 0x4194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_006)
{
    // A1A1 0061;	
    // (ꆡ) YI SYLLABLE HLAP	[4194 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A1, 0x0061 };
    uint32_t const ces[9] = { 0x4194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_007)
{
    // A1A1 0041;	
    // (ꆡ) YI SYLLABLE HLAP	[4194 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A1, 0x0041 };
    uint32_t const ces[9] = { 0x4194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_008)
{
    // A1A1 0062;	
    // (ꆡ) YI SYLLABLE HLAP	[4194 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A1, 0x0062 };
    uint32_t const ces[9] = { 0x4194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_009)
{
    // A1A2 0021;	
    // (ꆢ) YI SYLLABLE HLUOX	[4195 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A2, 0x0021 };
    uint32_t const ces[9] = { 0x4195, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_010)
{
    // A1A2 003F;	
    // (ꆢ) YI SYLLABLE HLUOX	[4195 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A2, 0x003F };
    uint32_t const ces[9] = { 0x4195, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_011)
{
    // A1A2 0061;	
    // (ꆢ) YI SYLLABLE HLUOX	[4195 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A2, 0x0061 };
    uint32_t const ces[9] = { 0x4195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_012)
{
    // A1A2 0041;	
    // (ꆢ) YI SYLLABLE HLUOX	[4195 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A2, 0x0041 };
    uint32_t const ces[9] = { 0x4195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_013)
{
    // A1A2 0062;	
    // (ꆢ) YI SYLLABLE HLUOX	[4195 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A2, 0x0062 };
    uint32_t const ces[9] = { 0x4195, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_014)
{
    // A1A3 0021;	
    // (ꆣ) YI SYLLABLE HLUO	[4196 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A3, 0x0021 };
    uint32_t const ces[9] = { 0x4196, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_015)
{
    // A1A3 003F;	
    // (ꆣ) YI SYLLABLE HLUO	[4196 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A3, 0x003F };
    uint32_t const ces[9] = { 0x4196, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_016)
{
    // A1A3 0061;	
    // (ꆣ) YI SYLLABLE HLUO	[4196 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A3, 0x0061 };
    uint32_t const ces[9] = { 0x4196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_017)
{
    // A1A3 0041;	
    // (ꆣ) YI SYLLABLE HLUO	[4196 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A3, 0x0041 };
    uint32_t const ces[9] = { 0x4196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_018)
{
    // A1A3 0062;	
    // (ꆣ) YI SYLLABLE HLUO	[4196 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A3, 0x0062 };
    uint32_t const ces[9] = { 0x4196, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_019)
{
    // A1A4 0021;	
    // (ꆤ) YI SYLLABLE HLUOP	[4197 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A4, 0x0021 };
    uint32_t const ces[9] = { 0x4197, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_020)
{
    // A1A4 003F;	
    // (ꆤ) YI SYLLABLE HLUOP	[4197 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A4, 0x003F };
    uint32_t const ces[9] = { 0x4197, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_021)
{
    // A1A4 0061;	
    // (ꆤ) YI SYLLABLE HLUOP	[4197 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A4, 0x0061 };
    uint32_t const ces[9] = { 0x4197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_022)
{
    // A1A4 0041;	
    // (ꆤ) YI SYLLABLE HLUOP	[4197 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A4, 0x0041 };
    uint32_t const ces[9] = { 0x4197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_023)
{
    // A1A4 0062;	
    // (ꆤ) YI SYLLABLE HLUOP	[4197 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A4, 0x0062 };
    uint32_t const ces[9] = { 0x4197, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_024)
{
    // A1A5 0021;	
    // (ꆥ) YI SYLLABLE HLOX	[4198 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A5, 0x0021 };
    uint32_t const ces[9] = { 0x4198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_025)
{
    // A1A5 003F;	
    // (ꆥ) YI SYLLABLE HLOX	[4198 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A5, 0x003F };
    uint32_t const ces[9] = { 0x4198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_026)
{
    // A1A5 0061;	
    // (ꆥ) YI SYLLABLE HLOX	[4198 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A5, 0x0061 };
    uint32_t const ces[9] = { 0x4198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_027)
{
    // A1A5 0041;	
    // (ꆥ) YI SYLLABLE HLOX	[4198 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A5, 0x0041 };
    uint32_t const ces[9] = { 0x4198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_028)
{
    // A1A5 0062;	
    // (ꆥ) YI SYLLABLE HLOX	[4198 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A5, 0x0062 };
    uint32_t const ces[9] = { 0x4198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_029)
{
    // A1A6 0021;	
    // (ꆦ) YI SYLLABLE HLO	[4199 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A6, 0x0021 };
    uint32_t const ces[9] = { 0x4199, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_030)
{
    // A1A6 003F;	
    // (ꆦ) YI SYLLABLE HLO	[4199 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A6, 0x003F };
    uint32_t const ces[9] = { 0x4199, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_031)
{
    // A1A6 0061;	
    // (ꆦ) YI SYLLABLE HLO	[4199 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A6, 0x0061 };
    uint32_t const ces[9] = { 0x4199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_032)
{
    // A1A6 0041;	
    // (ꆦ) YI SYLLABLE HLO	[4199 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A6, 0x0041 };
    uint32_t const ces[9] = { 0x4199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_033)
{
    // A1A6 0062;	
    // (ꆦ) YI SYLLABLE HLO	[4199 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A6, 0x0062 };
    uint32_t const ces[9] = { 0x4199, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_034)
{
    // A1A7 0021;	
    // (ꆧ) YI SYLLABLE HLOP	[419A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A7, 0x0021 };
    uint32_t const ces[9] = { 0x419A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_035)
{
    // A1A7 003F;	
    // (ꆧ) YI SYLLABLE HLOP	[419A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A7, 0x003F };
    uint32_t const ces[9] = { 0x419A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_036)
{
    // A1A7 0061;	
    // (ꆧ) YI SYLLABLE HLOP	[419A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A7, 0x0061 };
    uint32_t const ces[9] = { 0x419A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_037)
{
    // A1A7 0041;	
    // (ꆧ) YI SYLLABLE HLOP	[419A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A7, 0x0041 };
    uint32_t const ces[9] = { 0x419A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_038)
{
    // A1A7 0062;	
    // (ꆧ) YI SYLLABLE HLOP	[419A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A7, 0x0062 };
    uint32_t const ces[9] = { 0x419A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_039)
{
    // A1A8 0021;	
    // (ꆨ) YI SYLLABLE HLEX	[419B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A8, 0x0021 };
    uint32_t const ces[9] = { 0x419B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_040)
{
    // A1A8 003F;	
    // (ꆨ) YI SYLLABLE HLEX	[419B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A8, 0x003F };
    uint32_t const ces[9] = { 0x419B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_041)
{
    // A1A8 0061;	
    // (ꆨ) YI SYLLABLE HLEX	[419B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A8, 0x0061 };
    uint32_t const ces[9] = { 0x419B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_042)
{
    // A1A8 0041;	
    // (ꆨ) YI SYLLABLE HLEX	[419B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A8, 0x0041 };
    uint32_t const ces[9] = { 0x419B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_043)
{
    // A1A8 0062;	
    // (ꆨ) YI SYLLABLE HLEX	[419B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A8, 0x0062 };
    uint32_t const ces[9] = { 0x419B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_044)
{
    // A1A9 0021;	
    // (ꆩ) YI SYLLABLE HLE	[419C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A9, 0x0021 };
    uint32_t const ces[9] = { 0x419C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_045)
{
    // A1A9 003F;	
    // (ꆩ) YI SYLLABLE HLE	[419C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A9, 0x003F };
    uint32_t const ces[9] = { 0x419C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_046)
{
    // A1A9 0061;	
    // (ꆩ) YI SYLLABLE HLE	[419C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A9, 0x0061 };
    uint32_t const ces[9] = { 0x419C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_047)
{
    // A1A9 0041;	
    // (ꆩ) YI SYLLABLE HLE	[419C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1A9, 0x0041 };
    uint32_t const ces[9] = { 0x419C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_048)
{
    // A1A9 0062;	
    // (ꆩ) YI SYLLABLE HLE	[419C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A9, 0x0062 };
    uint32_t const ces[9] = { 0x419C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_049)
{
    // A1AA 0021;	
    // (ꆪ) YI SYLLABLE HLEP	[419D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AA, 0x0021 };
    uint32_t const ces[9] = { 0x419D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_050)
{
    // A1AA 003F;	
    // (ꆪ) YI SYLLABLE HLEP	[419D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AA, 0x003F };
    uint32_t const ces[9] = { 0x419D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_051)
{
    // A1AA 0061;	
    // (ꆪ) YI SYLLABLE HLEP	[419D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AA, 0x0061 };
    uint32_t const ces[9] = { 0x419D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_052)
{
    // A1AA 0041;	
    // (ꆪ) YI SYLLABLE HLEP	[419D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AA, 0x0041 };
    uint32_t const ces[9] = { 0x419D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_053)
{
    // A1AA 0062;	
    // (ꆪ) YI SYLLABLE HLEP	[419D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AA, 0x0062 };
    uint32_t const ces[9] = { 0x419D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_054)
{
    // A1AB 0021;	
    // (ꆫ) YI SYLLABLE HLUT	[419E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AB, 0x0021 };
    uint32_t const ces[9] = { 0x419E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_055)
{
    // A1AB 003F;	
    // (ꆫ) YI SYLLABLE HLUT	[419E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AB, 0x003F };
    uint32_t const ces[9] = { 0x419E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_056)
{
    // A1AB 0061;	
    // (ꆫ) YI SYLLABLE HLUT	[419E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AB, 0x0061 };
    uint32_t const ces[9] = { 0x419E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_057)
{
    // A1AB 0041;	
    // (ꆫ) YI SYLLABLE HLUT	[419E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AB, 0x0041 };
    uint32_t const ces[9] = { 0x419E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_058)
{
    // A1AB 0062;	
    // (ꆫ) YI SYLLABLE HLUT	[419E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AB, 0x0062 };
    uint32_t const ces[9] = { 0x419E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_059)
{
    // A1AC 0021;	
    // (ꆬ) YI SYLLABLE HLUX	[419F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AC, 0x0021 };
    uint32_t const ces[9] = { 0x419F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_060)
{
    // A1AC 003F;	
    // (ꆬ) YI SYLLABLE HLUX	[419F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AC, 0x003F };
    uint32_t const ces[9] = { 0x419F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_061)
{
    // A1AC 0061;	
    // (ꆬ) YI SYLLABLE HLUX	[419F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AC, 0x0061 };
    uint32_t const ces[9] = { 0x419F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_062)
{
    // A1AC 0041;	
    // (ꆬ) YI SYLLABLE HLUX	[419F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AC, 0x0041 };
    uint32_t const ces[9] = { 0x419F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_063)
{
    // A1AC 0062;	
    // (ꆬ) YI SYLLABLE HLUX	[419F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AC, 0x0062 };
    uint32_t const ces[9] = { 0x419F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_064)
{
    // A1AD 0021;	
    // (ꆭ) YI SYLLABLE HLU	[41A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AD, 0x0021 };
    uint32_t const ces[9] = { 0x41A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_065)
{
    // A1AD 003F;	
    // (ꆭ) YI SYLLABLE HLU	[41A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AD, 0x003F };
    uint32_t const ces[9] = { 0x41A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_066)
{
    // A1AD 0061;	
    // (ꆭ) YI SYLLABLE HLU	[41A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AD, 0x0061 };
    uint32_t const ces[9] = { 0x41A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_067)
{
    // A1AD 0041;	
    // (ꆭ) YI SYLLABLE HLU	[41A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AD, 0x0041 };
    uint32_t const ces[9] = { 0x41A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_068)
{
    // A1AD 0062;	
    // (ꆭ) YI SYLLABLE HLU	[41A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AD, 0x0062 };
    uint32_t const ces[9] = { 0x41A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_069)
{
    // A1AE 0021;	
    // (ꆮ) YI SYLLABLE HLUP	[41A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AE, 0x0021 };
    uint32_t const ces[9] = { 0x41A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_070)
{
    // A1AE 003F;	
    // (ꆮ) YI SYLLABLE HLUP	[41A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AE, 0x003F };
    uint32_t const ces[9] = { 0x41A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_071)
{
    // A1AE 0061;	
    // (ꆮ) YI SYLLABLE HLUP	[41A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AE, 0x0061 };
    uint32_t const ces[9] = { 0x41A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_072)
{
    // A1AE 0041;	
    // (ꆮ) YI SYLLABLE HLUP	[41A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AE, 0x0041 };
    uint32_t const ces[9] = { 0x41A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_073)
{
    // A1AE 0062;	
    // (ꆮ) YI SYLLABLE HLUP	[41A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AE, 0x0062 };
    uint32_t const ces[9] = { 0x41A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_074)
{
    // A1AF 0021;	
    // (ꆯ) YI SYLLABLE HLURX	[41A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AF, 0x0021 };
    uint32_t const ces[9] = { 0x41A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_075)
{
    // A1AF 003F;	
    // (ꆯ) YI SYLLABLE HLURX	[41A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AF, 0x003F };
    uint32_t const ces[9] = { 0x41A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_076)
{
    // A1AF 0061;	
    // (ꆯ) YI SYLLABLE HLURX	[41A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AF, 0x0061 };
    uint32_t const ces[9] = { 0x41A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_077)
{
    // A1AF 0041;	
    // (ꆯ) YI SYLLABLE HLURX	[41A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1AF, 0x0041 };
    uint32_t const ces[9] = { 0x41A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_078)
{
    // A1AF 0062;	
    // (ꆯ) YI SYLLABLE HLURX	[41A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1AF, 0x0062 };
    uint32_t const ces[9] = { 0x41A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_079)
{
    // A1B0 0021;	
    // (ꆰ) YI SYLLABLE HLUR	[41A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B0, 0x0021 };
    uint32_t const ces[9] = { 0x41A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_080)
{
    // A1B0 003F;	
    // (ꆰ) YI SYLLABLE HLUR	[41A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B0, 0x003F };
    uint32_t const ces[9] = { 0x41A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_081)
{
    // A1B0 0061;	
    // (ꆰ) YI SYLLABLE HLUR	[41A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B0, 0x0061 };
    uint32_t const ces[9] = { 0x41A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_082)
{
    // A1B0 0041;	
    // (ꆰ) YI SYLLABLE HLUR	[41A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B0, 0x0041 };
    uint32_t const ces[9] = { 0x41A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_083)
{
    // A1B0 0062;	
    // (ꆰ) YI SYLLABLE HLUR	[41A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B0, 0x0062 };
    uint32_t const ces[9] = { 0x41A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_084)
{
    // A1B1 0021;	
    // (ꆱ) YI SYLLABLE HLYT	[41A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B1, 0x0021 };
    uint32_t const ces[9] = { 0x41A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_085)
{
    // A1B1 003F;	
    // (ꆱ) YI SYLLABLE HLYT	[41A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B1, 0x003F };
    uint32_t const ces[9] = { 0x41A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_086)
{
    // A1B1 0061;	
    // (ꆱ) YI SYLLABLE HLYT	[41A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B1, 0x0061 };
    uint32_t const ces[9] = { 0x41A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_087)
{
    // A1B1 0041;	
    // (ꆱ) YI SYLLABLE HLYT	[41A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B1, 0x0041 };
    uint32_t const ces[9] = { 0x41A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_088)
{
    // A1B1 0062;	
    // (ꆱ) YI SYLLABLE HLYT	[41A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B1, 0x0062 };
    uint32_t const ces[9] = { 0x41A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_089)
{
    // A1B2 0021;	
    // (ꆲ) YI SYLLABLE HLYX	[41A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B2, 0x0021 };
    uint32_t const ces[9] = { 0x41A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_090)
{
    // A1B2 003F;	
    // (ꆲ) YI SYLLABLE HLYX	[41A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B2, 0x003F };
    uint32_t const ces[9] = { 0x41A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_091)
{
    // A1B2 0061;	
    // (ꆲ) YI SYLLABLE HLYX	[41A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B2, 0x0061 };
    uint32_t const ces[9] = { 0x41A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_092)
{
    // A1B2 0041;	
    // (ꆲ) YI SYLLABLE HLYX	[41A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B2, 0x0041 };
    uint32_t const ces[9] = { 0x41A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_093)
{
    // A1B2 0062;	
    // (ꆲ) YI SYLLABLE HLYX	[41A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B2, 0x0062 };
    uint32_t const ces[9] = { 0x41A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_094)
{
    // A1B3 0021;	
    // (ꆳ) YI SYLLABLE HLY	[41A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B3, 0x0021 };
    uint32_t const ces[9] = { 0x41A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_095)
{
    // A1B3 003F;	
    // (ꆳ) YI SYLLABLE HLY	[41A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B3, 0x003F };
    uint32_t const ces[9] = { 0x41A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_096)
{
    // A1B3 0061;	
    // (ꆳ) YI SYLLABLE HLY	[41A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B3, 0x0061 };
    uint32_t const ces[9] = { 0x41A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_097)
{
    // A1B3 0041;	
    // (ꆳ) YI SYLLABLE HLY	[41A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B3, 0x0041 };
    uint32_t const ces[9] = { 0x41A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_098)
{
    // A1B3 0062;	
    // (ꆳ) YI SYLLABLE HLY	[41A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B3, 0x0062 };
    uint32_t const ces[9] = { 0x41A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_099)
{
    // A1B4 0021;	
    // (ꆴ) YI SYLLABLE HLYP	[41A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B4, 0x0021 };
    uint32_t const ces[9] = { 0x41A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_100)
{
    // A1B4 003F;	
    // (ꆴ) YI SYLLABLE HLYP	[41A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B4, 0x003F };
    uint32_t const ces[9] = { 0x41A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_101)
{
    // A1B4 0061;	
    // (ꆴ) YI SYLLABLE HLYP	[41A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B4, 0x0061 };
    uint32_t const ces[9] = { 0x41A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_102)
{
    // A1B4 0041;	
    // (ꆴ) YI SYLLABLE HLYP	[41A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B4, 0x0041 };
    uint32_t const ces[9] = { 0x41A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_103)
{
    // A1B4 0062;	
    // (ꆴ) YI SYLLABLE HLYP	[41A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B4, 0x0062 };
    uint32_t const ces[9] = { 0x41A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_104)
{
    // A1B5 0021;	
    // (ꆵ) YI SYLLABLE HLYRX	[41A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B5, 0x0021 };
    uint32_t const ces[9] = { 0x41A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_105)
{
    // A1B5 003F;	
    // (ꆵ) YI SYLLABLE HLYRX	[41A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B5, 0x003F };
    uint32_t const ces[9] = { 0x41A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_106)
{
    // A1B5 0061;	
    // (ꆵ) YI SYLLABLE HLYRX	[41A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B5, 0x0061 };
    uint32_t const ces[9] = { 0x41A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_107)
{
    // A1B5 0041;	
    // (ꆵ) YI SYLLABLE HLYRX	[41A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B5, 0x0041 };
    uint32_t const ces[9] = { 0x41A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_108)
{
    // A1B5 0062;	
    // (ꆵ) YI SYLLABLE HLYRX	[41A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B5, 0x0062 };
    uint32_t const ces[9] = { 0x41A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_109)
{
    // A1B6 0021;	
    // (ꆶ) YI SYLLABLE HLYR	[41A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B6, 0x0021 };
    uint32_t const ces[9] = { 0x41A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_110)
{
    // A1B6 003F;	
    // (ꆶ) YI SYLLABLE HLYR	[41A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B6, 0x003F };
    uint32_t const ces[9] = { 0x41A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_111)
{
    // A1B6 0061;	
    // (ꆶ) YI SYLLABLE HLYR	[41A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B6, 0x0061 };
    uint32_t const ces[9] = { 0x41A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_112)
{
    // A1B6 0041;	
    // (ꆶ) YI SYLLABLE HLYR	[41A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B6, 0x0041 };
    uint32_t const ces[9] = { 0x41A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_113)
{
    // A1B6 0062;	
    // (ꆶ) YI SYLLABLE HLYR	[41A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B6, 0x0062 };
    uint32_t const ces[9] = { 0x41A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_114)
{
    // A1B7 0021;	
    // (ꆷ) YI SYLLABLE LIT	[41AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B7, 0x0021 };
    uint32_t const ces[9] = { 0x41AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_115)
{
    // A1B7 003F;	
    // (ꆷ) YI SYLLABLE LIT	[41AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B7, 0x003F };
    uint32_t const ces[9] = { 0x41AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_116)
{
    // A1B7 0061;	
    // (ꆷ) YI SYLLABLE LIT	[41AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B7, 0x0061 };
    uint32_t const ces[9] = { 0x41AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_117)
{
    // A1B7 0041;	
    // (ꆷ) YI SYLLABLE LIT	[41AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B7, 0x0041 };
    uint32_t const ces[9] = { 0x41AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_118)
{
    // A1B7 0062;	
    // (ꆷ) YI SYLLABLE LIT	[41AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B7, 0x0062 };
    uint32_t const ces[9] = { 0x41AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_119)
{
    // A1B8 0021;	
    // (ꆸ) YI SYLLABLE LIX	[41AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B8, 0x0021 };
    uint32_t const ces[9] = { 0x41AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_120)
{
    // A1B8 003F;	
    // (ꆸ) YI SYLLABLE LIX	[41AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B8, 0x003F };
    uint32_t const ces[9] = { 0x41AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_121)
{
    // A1B8 0061;	
    // (ꆸ) YI SYLLABLE LIX	[41AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B8, 0x0061 };
    uint32_t const ces[9] = { 0x41AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_122)
{
    // A1B8 0041;	
    // (ꆸ) YI SYLLABLE LIX	[41AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B8, 0x0041 };
    uint32_t const ces[9] = { 0x41AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_123)
{
    // A1B8 0062;	
    // (ꆸ) YI SYLLABLE LIX	[41AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B8, 0x0062 };
    uint32_t const ces[9] = { 0x41AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_124)
{
    // A1B9 0021;	
    // (ꆹ) YI SYLLABLE LI	[41AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B9, 0x0021 };
    uint32_t const ces[9] = { 0x41AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_125)
{
    // A1B9 003F;	
    // (ꆹ) YI SYLLABLE LI	[41AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B9, 0x003F };
    uint32_t const ces[9] = { 0x41AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_126)
{
    // A1B9 0061;	
    // (ꆹ) YI SYLLABLE LI	[41AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B9, 0x0061 };
    uint32_t const ces[9] = { 0x41AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_127)
{
    // A1B9 0041;	
    // (ꆹ) YI SYLLABLE LI	[41AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1B9, 0x0041 };
    uint32_t const ces[9] = { 0x41AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_128)
{
    // A1B9 0062;	
    // (ꆹ) YI SYLLABLE LI	[41AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1B9, 0x0062 };
    uint32_t const ces[9] = { 0x41AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_129)
{
    // A1BA 0021;	
    // (ꆺ) YI SYLLABLE LIP	[41AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BA, 0x0021 };
    uint32_t const ces[9] = { 0x41AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_130)
{
    // A1BA 003F;	
    // (ꆺ) YI SYLLABLE LIP	[41AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BA, 0x003F };
    uint32_t const ces[9] = { 0x41AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_131)
{
    // A1BA 0061;	
    // (ꆺ) YI SYLLABLE LIP	[41AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BA, 0x0061 };
    uint32_t const ces[9] = { 0x41AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_132)
{
    // A1BA 0041;	
    // (ꆺ) YI SYLLABLE LIP	[41AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BA, 0x0041 };
    uint32_t const ces[9] = { 0x41AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_133)
{
    // A1BA 0062;	
    // (ꆺ) YI SYLLABLE LIP	[41AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BA, 0x0062 };
    uint32_t const ces[9] = { 0x41AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_134)
{
    // A1BB 0021;	
    // (ꆻ) YI SYLLABLE LIET	[41AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BB, 0x0021 };
    uint32_t const ces[9] = { 0x41AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_135)
{
    // A1BB 003F;	
    // (ꆻ) YI SYLLABLE LIET	[41AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BB, 0x003F };
    uint32_t const ces[9] = { 0x41AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_136)
{
    // A1BB 0061;	
    // (ꆻ) YI SYLLABLE LIET	[41AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BB, 0x0061 };
    uint32_t const ces[9] = { 0x41AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_137)
{
    // A1BB 0041;	
    // (ꆻ) YI SYLLABLE LIET	[41AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BB, 0x0041 };
    uint32_t const ces[9] = { 0x41AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_138)
{
    // A1BB 0062;	
    // (ꆻ) YI SYLLABLE LIET	[41AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BB, 0x0062 };
    uint32_t const ces[9] = { 0x41AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_139)
{
    // A1BC 0021;	
    // (ꆼ) YI SYLLABLE LIEX	[41AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BC, 0x0021 };
    uint32_t const ces[9] = { 0x41AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_140)
{
    // A1BC 003F;	
    // (ꆼ) YI SYLLABLE LIEX	[41AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BC, 0x003F };
    uint32_t const ces[9] = { 0x41AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_141)
{
    // A1BC 0061;	
    // (ꆼ) YI SYLLABLE LIEX	[41AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BC, 0x0061 };
    uint32_t const ces[9] = { 0x41AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_142)
{
    // A1BC 0041;	
    // (ꆼ) YI SYLLABLE LIEX	[41AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BC, 0x0041 };
    uint32_t const ces[9] = { 0x41AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_143)
{
    // A1BC 0062;	
    // (ꆼ) YI SYLLABLE LIEX	[41AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BC, 0x0062 };
    uint32_t const ces[9] = { 0x41AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_144)
{
    // A1BD 0021;	
    // (ꆽ) YI SYLLABLE LIE	[41B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BD, 0x0021 };
    uint32_t const ces[9] = { 0x41B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_145)
{
    // A1BD 003F;	
    // (ꆽ) YI SYLLABLE LIE	[41B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BD, 0x003F };
    uint32_t const ces[9] = { 0x41B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_146)
{
    // A1BD 0061;	
    // (ꆽ) YI SYLLABLE LIE	[41B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BD, 0x0061 };
    uint32_t const ces[9] = { 0x41B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_147)
{
    // A1BD 0041;	
    // (ꆽ) YI SYLLABLE LIE	[41B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BD, 0x0041 };
    uint32_t const ces[9] = { 0x41B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_148)
{
    // A1BD 0062;	
    // (ꆽ) YI SYLLABLE LIE	[41B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BD, 0x0062 };
    uint32_t const ces[9] = { 0x41B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_149)
{
    // A1BE 0021;	
    // (ꆾ) YI SYLLABLE LIEP	[41B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BE, 0x0021 };
    uint32_t const ces[9] = { 0x41B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_150)
{
    // A1BE 003F;	
    // (ꆾ) YI SYLLABLE LIEP	[41B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BE, 0x003F };
    uint32_t const ces[9] = { 0x41B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_151)
{
    // A1BE 0061;	
    // (ꆾ) YI SYLLABLE LIEP	[41B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BE, 0x0061 };
    uint32_t const ces[9] = { 0x41B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_152)
{
    // A1BE 0041;	
    // (ꆾ) YI SYLLABLE LIEP	[41B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BE, 0x0041 };
    uint32_t const ces[9] = { 0x41B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_153)
{
    // A1BE 0062;	
    // (ꆾ) YI SYLLABLE LIEP	[41B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BE, 0x0062 };
    uint32_t const ces[9] = { 0x41B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_154)
{
    // A1BF 0021;	
    // (ꆿ) YI SYLLABLE LAT	[41B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BF, 0x0021 };
    uint32_t const ces[9] = { 0x41B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_155)
{
    // A1BF 003F;	
    // (ꆿ) YI SYLLABLE LAT	[41B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BF, 0x003F };
    uint32_t const ces[9] = { 0x41B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_156)
{
    // A1BF 0061;	
    // (ꆿ) YI SYLLABLE LAT	[41B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BF, 0x0061 };
    uint32_t const ces[9] = { 0x41B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_157)
{
    // A1BF 0041;	
    // (ꆿ) YI SYLLABLE LAT	[41B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1BF, 0x0041 };
    uint32_t const ces[9] = { 0x41B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_158)
{
    // A1BF 0062;	
    // (ꆿ) YI SYLLABLE LAT	[41B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1BF, 0x0062 };
    uint32_t const ces[9] = { 0x41B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_159)
{
    // A1C0 0021;	
    // (ꇀ) YI SYLLABLE LAX	[41B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C0, 0x0021 };
    uint32_t const ces[9] = { 0x41B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_160)
{
    // A1C0 003F;	
    // (ꇀ) YI SYLLABLE LAX	[41B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C0, 0x003F };
    uint32_t const ces[9] = { 0x41B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_161)
{
    // A1C0 0061;	
    // (ꇀ) YI SYLLABLE LAX	[41B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C0, 0x0061 };
    uint32_t const ces[9] = { 0x41B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_162)
{
    // A1C0 0041;	
    // (ꇀ) YI SYLLABLE LAX	[41B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C0, 0x0041 };
    uint32_t const ces[9] = { 0x41B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_163)
{
    // A1C0 0062;	
    // (ꇀ) YI SYLLABLE LAX	[41B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C0, 0x0062 };
    uint32_t const ces[9] = { 0x41B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_164)
{
    // A1C1 0021;	
    // (ꇁ) YI SYLLABLE LA	[41B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C1, 0x0021 };
    uint32_t const ces[9] = { 0x41B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_165)
{
    // A1C1 003F;	
    // (ꇁ) YI SYLLABLE LA	[41B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C1, 0x003F };
    uint32_t const ces[9] = { 0x41B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_166)
{
    // A1C1 0061;	
    // (ꇁ) YI SYLLABLE LA	[41B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C1, 0x0061 };
    uint32_t const ces[9] = { 0x41B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_167)
{
    // A1C1 0041;	
    // (ꇁ) YI SYLLABLE LA	[41B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C1, 0x0041 };
    uint32_t const ces[9] = { 0x41B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_168)
{
    // A1C1 0062;	
    // (ꇁ) YI SYLLABLE LA	[41B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C1, 0x0062 };
    uint32_t const ces[9] = { 0x41B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_169)
{
    // A1C2 0021;	
    // (ꇂ) YI SYLLABLE LAP	[41B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C2, 0x0021 };
    uint32_t const ces[9] = { 0x41B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_170)
{
    // A1C2 003F;	
    // (ꇂ) YI SYLLABLE LAP	[41B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C2, 0x003F };
    uint32_t const ces[9] = { 0x41B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_171)
{
    // A1C2 0061;	
    // (ꇂ) YI SYLLABLE LAP	[41B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C2, 0x0061 };
    uint32_t const ces[9] = { 0x41B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_172)
{
    // A1C2 0041;	
    // (ꇂ) YI SYLLABLE LAP	[41B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C2, 0x0041 };
    uint32_t const ces[9] = { 0x41B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_173)
{
    // A1C2 0062;	
    // (ꇂ) YI SYLLABLE LAP	[41B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C2, 0x0062 };
    uint32_t const ces[9] = { 0x41B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_174)
{
    // A1C3 0021;	
    // (ꇃ) YI SYLLABLE LUOT	[41B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C3, 0x0021 };
    uint32_t const ces[9] = { 0x41B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_175)
{
    // A1C3 003F;	
    // (ꇃ) YI SYLLABLE LUOT	[41B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C3, 0x003F };
    uint32_t const ces[9] = { 0x41B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_176)
{
    // A1C3 0061;	
    // (ꇃ) YI SYLLABLE LUOT	[41B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C3, 0x0061 };
    uint32_t const ces[9] = { 0x41B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_177)
{
    // A1C3 0041;	
    // (ꇃ) YI SYLLABLE LUOT	[41B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C3, 0x0041 };
    uint32_t const ces[9] = { 0x41B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_178)
{
    // A1C3 0062;	
    // (ꇃ) YI SYLLABLE LUOT	[41B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C3, 0x0062 };
    uint32_t const ces[9] = { 0x41B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_179)
{
    // A1C4 0021;	
    // (ꇄ) YI SYLLABLE LUOX	[41B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C4, 0x0021 };
    uint32_t const ces[9] = { 0x41B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_180)
{
    // A1C4 003F;	
    // (ꇄ) YI SYLLABLE LUOX	[41B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C4, 0x003F };
    uint32_t const ces[9] = { 0x41B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_181)
{
    // A1C4 0061;	
    // (ꇄ) YI SYLLABLE LUOX	[41B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C4, 0x0061 };
    uint32_t const ces[9] = { 0x41B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_182)
{
    // A1C4 0041;	
    // (ꇄ) YI SYLLABLE LUOX	[41B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C4, 0x0041 };
    uint32_t const ces[9] = { 0x41B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_183)
{
    // A1C4 0062;	
    // (ꇄ) YI SYLLABLE LUOX	[41B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C4, 0x0062 };
    uint32_t const ces[9] = { 0x41B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_184)
{
    // A1C5 0021;	
    // (ꇅ) YI SYLLABLE LUO	[41B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C5, 0x0021 };
    uint32_t const ces[9] = { 0x41B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_185)
{
    // A1C5 003F;	
    // (ꇅ) YI SYLLABLE LUO	[41B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C5, 0x003F };
    uint32_t const ces[9] = { 0x41B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_186)
{
    // A1C5 0061;	
    // (ꇅ) YI SYLLABLE LUO	[41B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C5, 0x0061 };
    uint32_t const ces[9] = { 0x41B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_187)
{
    // A1C5 0041;	
    // (ꇅ) YI SYLLABLE LUO	[41B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C5, 0x0041 };
    uint32_t const ces[9] = { 0x41B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_188)
{
    // A1C5 0062;	
    // (ꇅ) YI SYLLABLE LUO	[41B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C5, 0x0062 };
    uint32_t const ces[9] = { 0x41B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_189)
{
    // A1C6 0021;	
    // (ꇆ) YI SYLLABLE LUOP	[41B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C6, 0x0021 };
    uint32_t const ces[9] = { 0x41B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_190)
{
    // A1C6 003F;	
    // (ꇆ) YI SYLLABLE LUOP	[41B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C6, 0x003F };
    uint32_t const ces[9] = { 0x41B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_191)
{
    // A1C6 0061;	
    // (ꇆ) YI SYLLABLE LUOP	[41B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C6, 0x0061 };
    uint32_t const ces[9] = { 0x41B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_192)
{
    // A1C6 0041;	
    // (ꇆ) YI SYLLABLE LUOP	[41B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C6, 0x0041 };
    uint32_t const ces[9] = { 0x41B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_193)
{
    // A1C6 0062;	
    // (ꇆ) YI SYLLABLE LUOP	[41B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C6, 0x0062 };
    uint32_t const ces[9] = { 0x41B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_194)
{
    // A1C7 0021;	
    // (ꇇ) YI SYLLABLE LOT	[41BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C7, 0x0021 };
    uint32_t const ces[9] = { 0x41BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_195)
{
    // A1C7 003F;	
    // (ꇇ) YI SYLLABLE LOT	[41BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C7, 0x003F };
    uint32_t const ces[9] = { 0x41BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_196)
{
    // A1C7 0061;	
    // (ꇇ) YI SYLLABLE LOT	[41BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C7, 0x0061 };
    uint32_t const ces[9] = { 0x41BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_197)
{
    // A1C7 0041;	
    // (ꇇ) YI SYLLABLE LOT	[41BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C7, 0x0041 };
    uint32_t const ces[9] = { 0x41BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_198)
{
    // A1C7 0062;	
    // (ꇇ) YI SYLLABLE LOT	[41BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C7, 0x0062 };
    uint32_t const ces[9] = { 0x41BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_199)
{
    // A1C8 0021;	
    // (ꇈ) YI SYLLABLE LOX	[41BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C8, 0x0021 };
    uint32_t const ces[9] = { 0x41BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_200)
{
    // A1C8 003F;	
    // (ꇈ) YI SYLLABLE LOX	[41BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C8, 0x003F };
    uint32_t const ces[9] = { 0x41BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_201)
{
    // A1C8 0061;	
    // (ꇈ) YI SYLLABLE LOX	[41BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C8, 0x0061 };
    uint32_t const ces[9] = { 0x41BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_202)
{
    // A1C8 0041;	
    // (ꇈ) YI SYLLABLE LOX	[41BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C8, 0x0041 };
    uint32_t const ces[9] = { 0x41BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_203)
{
    // A1C8 0062;	
    // (ꇈ) YI SYLLABLE LOX	[41BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C8, 0x0062 };
    uint32_t const ces[9] = { 0x41BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_204)
{
    // A1C9 0021;	
    // (ꇉ) YI SYLLABLE LO	[41BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C9, 0x0021 };
    uint32_t const ces[9] = { 0x41BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_205)
{
    // A1C9 003F;	
    // (ꇉ) YI SYLLABLE LO	[41BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C9, 0x003F };
    uint32_t const ces[9] = { 0x41BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_206)
{
    // A1C9 0061;	
    // (ꇉ) YI SYLLABLE LO	[41BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C9, 0x0061 };
    uint32_t const ces[9] = { 0x41BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_207)
{
    // A1C9 0041;	
    // (ꇉ) YI SYLLABLE LO	[41BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1C9, 0x0041 };
    uint32_t const ces[9] = { 0x41BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_208)
{
    // A1C9 0062;	
    // (ꇉ) YI SYLLABLE LO	[41BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1C9, 0x0062 };
    uint32_t const ces[9] = { 0x41BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_209)
{
    // A1CA 0021;	
    // (ꇊ) YI SYLLABLE LOP	[41BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CA, 0x0021 };
    uint32_t const ces[9] = { 0x41BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_210)
{
    // A1CA 003F;	
    // (ꇊ) YI SYLLABLE LOP	[41BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CA, 0x003F };
    uint32_t const ces[9] = { 0x41BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_211)
{
    // A1CA 0061;	
    // (ꇊ) YI SYLLABLE LOP	[41BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CA, 0x0061 };
    uint32_t const ces[9] = { 0x41BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_212)
{
    // A1CA 0041;	
    // (ꇊ) YI SYLLABLE LOP	[41BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CA, 0x0041 };
    uint32_t const ces[9] = { 0x41BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_213)
{
    // A1CA 0062;	
    // (ꇊ) YI SYLLABLE LOP	[41BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CA, 0x0062 };
    uint32_t const ces[9] = { 0x41BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_214)
{
    // A1CB 0021;	
    // (ꇋ) YI SYLLABLE LEX	[41BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CB, 0x0021 };
    uint32_t const ces[9] = { 0x41BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_215)
{
    // A1CB 003F;	
    // (ꇋ) YI SYLLABLE LEX	[41BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CB, 0x003F };
    uint32_t const ces[9] = { 0x41BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_216)
{
    // A1CB 0061;	
    // (ꇋ) YI SYLLABLE LEX	[41BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CB, 0x0061 };
    uint32_t const ces[9] = { 0x41BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_217)
{
    // A1CB 0041;	
    // (ꇋ) YI SYLLABLE LEX	[41BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CB, 0x0041 };
    uint32_t const ces[9] = { 0x41BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_218)
{
    // A1CB 0062;	
    // (ꇋ) YI SYLLABLE LEX	[41BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CB, 0x0062 };
    uint32_t const ces[9] = { 0x41BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_219)
{
    // A1CC 0021;	
    // (ꇌ) YI SYLLABLE LE	[41BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CC, 0x0021 };
    uint32_t const ces[9] = { 0x41BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_220)
{
    // A1CC 003F;	
    // (ꇌ) YI SYLLABLE LE	[41BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CC, 0x003F };
    uint32_t const ces[9] = { 0x41BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_221)
{
    // A1CC 0061;	
    // (ꇌ) YI SYLLABLE LE	[41BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CC, 0x0061 };
    uint32_t const ces[9] = { 0x41BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_222)
{
    // A1CC 0041;	
    // (ꇌ) YI SYLLABLE LE	[41BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CC, 0x0041 };
    uint32_t const ces[9] = { 0x41BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_223)
{
    // A1CC 0062;	
    // (ꇌ) YI SYLLABLE LE	[41BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CC, 0x0062 };
    uint32_t const ces[9] = { 0x41BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_224)
{
    // A1CD 0021;	
    // (ꇍ) YI SYLLABLE LEP	[41C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CD, 0x0021 };
    uint32_t const ces[9] = { 0x41C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_225)
{
    // A1CD 003F;	
    // (ꇍ) YI SYLLABLE LEP	[41C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CD, 0x003F };
    uint32_t const ces[9] = { 0x41C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_226)
{
    // A1CD 0061;	
    // (ꇍ) YI SYLLABLE LEP	[41C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CD, 0x0061 };
    uint32_t const ces[9] = { 0x41C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_227)
{
    // A1CD 0041;	
    // (ꇍ) YI SYLLABLE LEP	[41C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CD, 0x0041 };
    uint32_t const ces[9] = { 0x41C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_228)
{
    // A1CD 0062;	
    // (ꇍ) YI SYLLABLE LEP	[41C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CD, 0x0062 };
    uint32_t const ces[9] = { 0x41C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_229)
{
    // A1CE 0021;	
    // (ꇎ) YI SYLLABLE LUT	[41C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CE, 0x0021 };
    uint32_t const ces[9] = { 0x41C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_230)
{
    // A1CE 003F;	
    // (ꇎ) YI SYLLABLE LUT	[41C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CE, 0x003F };
    uint32_t const ces[9] = { 0x41C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_231)
{
    // A1CE 0061;	
    // (ꇎ) YI SYLLABLE LUT	[41C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CE, 0x0061 };
    uint32_t const ces[9] = { 0x41C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_232)
{
    // A1CE 0041;	
    // (ꇎ) YI SYLLABLE LUT	[41C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CE, 0x0041 };
    uint32_t const ces[9] = { 0x41C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_233)
{
    // A1CE 0062;	
    // (ꇎ) YI SYLLABLE LUT	[41C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CE, 0x0062 };
    uint32_t const ces[9] = { 0x41C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_234)
{
    // A1CF 0021;	
    // (ꇏ) YI SYLLABLE LUX	[41C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CF, 0x0021 };
    uint32_t const ces[9] = { 0x41C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_235)
{
    // A1CF 003F;	
    // (ꇏ) YI SYLLABLE LUX	[41C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CF, 0x003F };
    uint32_t const ces[9] = { 0x41C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_236)
{
    // A1CF 0061;	
    // (ꇏ) YI SYLLABLE LUX	[41C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CF, 0x0061 };
    uint32_t const ces[9] = { 0x41C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_237)
{
    // A1CF 0041;	
    // (ꇏ) YI SYLLABLE LUX	[41C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1CF, 0x0041 };
    uint32_t const ces[9] = { 0x41C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_238)
{
    // A1CF 0062;	
    // (ꇏ) YI SYLLABLE LUX	[41C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1CF, 0x0062 };
    uint32_t const ces[9] = { 0x41C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_239)
{
    // A1D0 0021;	
    // (ꇐ) YI SYLLABLE LU	[41C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D0, 0x0021 };
    uint32_t const ces[9] = { 0x41C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_240)
{
    // A1D0 003F;	
    // (ꇐ) YI SYLLABLE LU	[41C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D0, 0x003F };
    uint32_t const ces[9] = { 0x41C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_241)
{
    // A1D0 0061;	
    // (ꇐ) YI SYLLABLE LU	[41C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D0, 0x0061 };
    uint32_t const ces[9] = { 0x41C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_242)
{
    // A1D0 0041;	
    // (ꇐ) YI SYLLABLE LU	[41C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D0, 0x0041 };
    uint32_t const ces[9] = { 0x41C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_243)
{
    // A1D0 0062;	
    // (ꇐ) YI SYLLABLE LU	[41C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D0, 0x0062 };
    uint32_t const ces[9] = { 0x41C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_244)
{
    // A1D1 0021;	
    // (ꇑ) YI SYLLABLE LUP	[41C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D1, 0x0021 };
    uint32_t const ces[9] = { 0x41C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_245)
{
    // A1D1 003F;	
    // (ꇑ) YI SYLLABLE LUP	[41C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D1, 0x003F };
    uint32_t const ces[9] = { 0x41C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_246)
{
    // A1D1 0061;	
    // (ꇑ) YI SYLLABLE LUP	[41C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D1, 0x0061 };
    uint32_t const ces[9] = { 0x41C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_247)
{
    // A1D1 0041;	
    // (ꇑ) YI SYLLABLE LUP	[41C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D1, 0x0041 };
    uint32_t const ces[9] = { 0x41C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_248)
{
    // A1D1 0062;	
    // (ꇑ) YI SYLLABLE LUP	[41C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D1, 0x0062 };
    uint32_t const ces[9] = { 0x41C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_249)
{
    // A1D2 0021;	
    // (ꇒ) YI SYLLABLE LURX	[41C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D2, 0x0021 };
    uint32_t const ces[9] = { 0x41C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_250)
{
    // A1D2 003F;	
    // (ꇒ) YI SYLLABLE LURX	[41C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D2, 0x003F };
    uint32_t const ces[9] = { 0x41C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_251)
{
    // A1D2 0061;	
    // (ꇒ) YI SYLLABLE LURX	[41C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D2, 0x0061 };
    uint32_t const ces[9] = { 0x41C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_252)
{
    // A1D2 0041;	
    // (ꇒ) YI SYLLABLE LURX	[41C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D2, 0x0041 };
    uint32_t const ces[9] = { 0x41C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_253)
{
    // A1D2 0062;	
    // (ꇒ) YI SYLLABLE LURX	[41C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D2, 0x0062 };
    uint32_t const ces[9] = { 0x41C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_254)
{
    // A1D3 0021;	
    // (ꇓ) YI SYLLABLE LUR	[41C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D3, 0x0021 };
    uint32_t const ces[9] = { 0x41C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_255)
{
    // A1D3 003F;	
    // (ꇓ) YI SYLLABLE LUR	[41C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D3, 0x003F };
    uint32_t const ces[9] = { 0x41C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_256)
{
    // A1D3 0061;	
    // (ꇓ) YI SYLLABLE LUR	[41C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D3, 0x0061 };
    uint32_t const ces[9] = { 0x41C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_257)
{
    // A1D3 0041;	
    // (ꇓ) YI SYLLABLE LUR	[41C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D3, 0x0041 };
    uint32_t const ces[9] = { 0x41C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_258)
{
    // A1D3 0062;	
    // (ꇓ) YI SYLLABLE LUR	[41C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D3, 0x0062 };
    uint32_t const ces[9] = { 0x41C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_259)
{
    // A1D4 0021;	
    // (ꇔ) YI SYLLABLE LYT	[41C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D4, 0x0021 };
    uint32_t const ces[9] = { 0x41C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_260)
{
    // A1D4 003F;	
    // (ꇔ) YI SYLLABLE LYT	[41C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D4, 0x003F };
    uint32_t const ces[9] = { 0x41C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_261)
{
    // A1D4 0061;	
    // (ꇔ) YI SYLLABLE LYT	[41C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D4, 0x0061 };
    uint32_t const ces[9] = { 0x41C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_262)
{
    // A1D4 0041;	
    // (ꇔ) YI SYLLABLE LYT	[41C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D4, 0x0041 };
    uint32_t const ces[9] = { 0x41C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_263)
{
    // A1D4 0062;	
    // (ꇔ) YI SYLLABLE LYT	[41C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D4, 0x0062 };
    uint32_t const ces[9] = { 0x41C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_264)
{
    // A1D5 0021;	
    // (ꇕ) YI SYLLABLE LYX	[41C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D5, 0x0021 };
    uint32_t const ces[9] = { 0x41C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_265)
{
    // A1D5 003F;	
    // (ꇕ) YI SYLLABLE LYX	[41C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D5, 0x003F };
    uint32_t const ces[9] = { 0x41C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_266)
{
    // A1D5 0061;	
    // (ꇕ) YI SYLLABLE LYX	[41C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D5, 0x0061 };
    uint32_t const ces[9] = { 0x41C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_267)
{
    // A1D5 0041;	
    // (ꇕ) YI SYLLABLE LYX	[41C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D5, 0x0041 };
    uint32_t const ces[9] = { 0x41C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_268)
{
    // A1D5 0062;	
    // (ꇕ) YI SYLLABLE LYX	[41C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D5, 0x0062 };
    uint32_t const ces[9] = { 0x41C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_269)
{
    // A1D6 0021;	
    // (ꇖ) YI SYLLABLE LY	[41C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D6, 0x0021 };
    uint32_t const ces[9] = { 0x41C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_270)
{
    // A1D6 003F;	
    // (ꇖ) YI SYLLABLE LY	[41C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D6, 0x003F };
    uint32_t const ces[9] = { 0x41C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_271)
{
    // A1D6 0061;	
    // (ꇖ) YI SYLLABLE LY	[41C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D6, 0x0061 };
    uint32_t const ces[9] = { 0x41C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_272)
{
    // A1D6 0041;	
    // (ꇖ) YI SYLLABLE LY	[41C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D6, 0x0041 };
    uint32_t const ces[9] = { 0x41C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_273)
{
    // A1D6 0062;	
    // (ꇖ) YI SYLLABLE LY	[41C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D6, 0x0062 };
    uint32_t const ces[9] = { 0x41C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_274)
{
    // A1D7 0021;	
    // (ꇗ) YI SYLLABLE LYP	[41CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D7, 0x0021 };
    uint32_t const ces[9] = { 0x41CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_275)
{
    // A1D7 003F;	
    // (ꇗ) YI SYLLABLE LYP	[41CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D7, 0x003F };
    uint32_t const ces[9] = { 0x41CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_276)
{
    // A1D7 0061;	
    // (ꇗ) YI SYLLABLE LYP	[41CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D7, 0x0061 };
    uint32_t const ces[9] = { 0x41CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_277)
{
    // A1D7 0041;	
    // (ꇗ) YI SYLLABLE LYP	[41CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D7, 0x0041 };
    uint32_t const ces[9] = { 0x41CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_278)
{
    // A1D7 0062;	
    // (ꇗ) YI SYLLABLE LYP	[41CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D7, 0x0062 };
    uint32_t const ces[9] = { 0x41CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_279)
{
    // A1D8 0021;	
    // (ꇘ) YI SYLLABLE LYRX	[41CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D8, 0x0021 };
    uint32_t const ces[9] = { 0x41CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_280)
{
    // A1D8 003F;	
    // (ꇘ) YI SYLLABLE LYRX	[41CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D8, 0x003F };
    uint32_t const ces[9] = { 0x41CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_281)
{
    // A1D8 0061;	
    // (ꇘ) YI SYLLABLE LYRX	[41CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D8, 0x0061 };
    uint32_t const ces[9] = { 0x41CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_282)
{
    // A1D8 0041;	
    // (ꇘ) YI SYLLABLE LYRX	[41CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D8, 0x0041 };
    uint32_t const ces[9] = { 0x41CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_283)
{
    // A1D8 0062;	
    // (ꇘ) YI SYLLABLE LYRX	[41CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D8, 0x0062 };
    uint32_t const ces[9] = { 0x41CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_284)
{
    // A1D9 0021;	
    // (ꇙ) YI SYLLABLE LYR	[41CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D9, 0x0021 };
    uint32_t const ces[9] = { 0x41CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_285)
{
    // A1D9 003F;	
    // (ꇙ) YI SYLLABLE LYR	[41CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D9, 0x003F };
    uint32_t const ces[9] = { 0x41CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_286)
{
    // A1D9 0061;	
    // (ꇙ) YI SYLLABLE LYR	[41CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D9, 0x0061 };
    uint32_t const ces[9] = { 0x41CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_287)
{
    // A1D9 0041;	
    // (ꇙ) YI SYLLABLE LYR	[41CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1D9, 0x0041 };
    uint32_t const ces[9] = { 0x41CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_288)
{
    // A1D9 0062;	
    // (ꇙ) YI SYLLABLE LYR	[41CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1D9, 0x0062 };
    uint32_t const ces[9] = { 0x41CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_289)
{
    // A1DA 0021;	
    // (ꇚ) YI SYLLABLE GIT	[41CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DA, 0x0021 };
    uint32_t const ces[9] = { 0x41CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_290)
{
    // A1DA 003F;	
    // (ꇚ) YI SYLLABLE GIT	[41CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DA, 0x003F };
    uint32_t const ces[9] = { 0x41CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_291)
{
    // A1DA 0061;	
    // (ꇚ) YI SYLLABLE GIT	[41CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DA, 0x0061 };
    uint32_t const ces[9] = { 0x41CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_292)
{
    // A1DA 0041;	
    // (ꇚ) YI SYLLABLE GIT	[41CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DA, 0x0041 };
    uint32_t const ces[9] = { 0x41CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_293)
{
    // A1DA 0062;	
    // (ꇚ) YI SYLLABLE GIT	[41CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DA, 0x0062 };
    uint32_t const ces[9] = { 0x41CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_294)
{
    // A1DB 0021;	
    // (ꇛ) YI SYLLABLE GIX	[41CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DB, 0x0021 };
    uint32_t const ces[9] = { 0x41CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_295)
{
    // A1DB 003F;	
    // (ꇛ) YI SYLLABLE GIX	[41CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DB, 0x003F };
    uint32_t const ces[9] = { 0x41CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_296)
{
    // A1DB 0061;	
    // (ꇛ) YI SYLLABLE GIX	[41CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DB, 0x0061 };
    uint32_t const ces[9] = { 0x41CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_297)
{
    // A1DB 0041;	
    // (ꇛ) YI SYLLABLE GIX	[41CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DB, 0x0041 };
    uint32_t const ces[9] = { 0x41CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_298)
{
    // A1DB 0062;	
    // (ꇛ) YI SYLLABLE GIX	[41CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DB, 0x0062 };
    uint32_t const ces[9] = { 0x41CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_299)
{
    // A1DC 0021;	
    // (ꇜ) YI SYLLABLE GI	[41CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DC, 0x0021 };
    uint32_t const ces[9] = { 0x41CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_300)
{
    // A1DC 003F;	
    // (ꇜ) YI SYLLABLE GI	[41CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DC, 0x003F };
    uint32_t const ces[9] = { 0x41CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_301)
{
    // A1DC 0061;	
    // (ꇜ) YI SYLLABLE GI	[41CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DC, 0x0061 };
    uint32_t const ces[9] = { 0x41CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_302)
{
    // A1DC 0041;	
    // (ꇜ) YI SYLLABLE GI	[41CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DC, 0x0041 };
    uint32_t const ces[9] = { 0x41CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_303)
{
    // A1DC 0062;	
    // (ꇜ) YI SYLLABLE GI	[41CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DC, 0x0062 };
    uint32_t const ces[9] = { 0x41CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_304)
{
    // A1DD 0021;	
    // (ꇝ) YI SYLLABLE GIP	[41D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DD, 0x0021 };
    uint32_t const ces[9] = { 0x41D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_305)
{
    // A1DD 003F;	
    // (ꇝ) YI SYLLABLE GIP	[41D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DD, 0x003F };
    uint32_t const ces[9] = { 0x41D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_306)
{
    // A1DD 0061;	
    // (ꇝ) YI SYLLABLE GIP	[41D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DD, 0x0061 };
    uint32_t const ces[9] = { 0x41D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_307)
{
    // A1DD 0041;	
    // (ꇝ) YI SYLLABLE GIP	[41D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DD, 0x0041 };
    uint32_t const ces[9] = { 0x41D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_308)
{
    // A1DD 0062;	
    // (ꇝ) YI SYLLABLE GIP	[41D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DD, 0x0062 };
    uint32_t const ces[9] = { 0x41D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_309)
{
    // A1DE 0021;	
    // (ꇞ) YI SYLLABLE GIET	[41D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DE, 0x0021 };
    uint32_t const ces[9] = { 0x41D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_310)
{
    // A1DE 003F;	
    // (ꇞ) YI SYLLABLE GIET	[41D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DE, 0x003F };
    uint32_t const ces[9] = { 0x41D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_311)
{
    // A1DE 0061;	
    // (ꇞ) YI SYLLABLE GIET	[41D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DE, 0x0061 };
    uint32_t const ces[9] = { 0x41D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_312)
{
    // A1DE 0041;	
    // (ꇞ) YI SYLLABLE GIET	[41D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DE, 0x0041 };
    uint32_t const ces[9] = { 0x41D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_313)
{
    // A1DE 0062;	
    // (ꇞ) YI SYLLABLE GIET	[41D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DE, 0x0062 };
    uint32_t const ces[9] = { 0x41D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_314)
{
    // A1DF 0021;	
    // (ꇟ) YI SYLLABLE GIEX	[41D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DF, 0x0021 };
    uint32_t const ces[9] = { 0x41D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_315)
{
    // A1DF 003F;	
    // (ꇟ) YI SYLLABLE GIEX	[41D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DF, 0x003F };
    uint32_t const ces[9] = { 0x41D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_316)
{
    // A1DF 0061;	
    // (ꇟ) YI SYLLABLE GIEX	[41D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DF, 0x0061 };
    uint32_t const ces[9] = { 0x41D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_317)
{
    // A1DF 0041;	
    // (ꇟ) YI SYLLABLE GIEX	[41D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1DF, 0x0041 };
    uint32_t const ces[9] = { 0x41D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_318)
{
    // A1DF 0062;	
    // (ꇟ) YI SYLLABLE GIEX	[41D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1DF, 0x0062 };
    uint32_t const ces[9] = { 0x41D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_319)
{
    // A1E0 0021;	
    // (ꇠ) YI SYLLABLE GIE	[41D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E0, 0x0021 };
    uint32_t const ces[9] = { 0x41D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_320)
{
    // A1E0 003F;	
    // (ꇠ) YI SYLLABLE GIE	[41D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E0, 0x003F };
    uint32_t const ces[9] = { 0x41D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_321)
{
    // A1E0 0061;	
    // (ꇠ) YI SYLLABLE GIE	[41D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E0, 0x0061 };
    uint32_t const ces[9] = { 0x41D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_322)
{
    // A1E0 0041;	
    // (ꇠ) YI SYLLABLE GIE	[41D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E0, 0x0041 };
    uint32_t const ces[9] = { 0x41D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_323)
{
    // A1E0 0062;	
    // (ꇠ) YI SYLLABLE GIE	[41D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E0, 0x0062 };
    uint32_t const ces[9] = { 0x41D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_324)
{
    // A1E1 0021;	
    // (ꇡ) YI SYLLABLE GIEP	[41D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E1, 0x0021 };
    uint32_t const ces[9] = { 0x41D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_325)
{
    // A1E1 003F;	
    // (ꇡ) YI SYLLABLE GIEP	[41D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E1, 0x003F };
    uint32_t const ces[9] = { 0x41D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_326)
{
    // A1E1 0061;	
    // (ꇡ) YI SYLLABLE GIEP	[41D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E1, 0x0061 };
    uint32_t const ces[9] = { 0x41D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_327)
{
    // A1E1 0041;	
    // (ꇡ) YI SYLLABLE GIEP	[41D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E1, 0x0041 };
    uint32_t const ces[9] = { 0x41D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_328)
{
    // A1E1 0062;	
    // (ꇡ) YI SYLLABLE GIEP	[41D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E1, 0x0062 };
    uint32_t const ces[9] = { 0x41D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_329)
{
    // A1E2 0021;	
    // (ꇢ) YI SYLLABLE GAT	[41D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E2, 0x0021 };
    uint32_t const ces[9] = { 0x41D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_330)
{
    // A1E2 003F;	
    // (ꇢ) YI SYLLABLE GAT	[41D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E2, 0x003F };
    uint32_t const ces[9] = { 0x41D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_331)
{
    // A1E2 0061;	
    // (ꇢ) YI SYLLABLE GAT	[41D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E2, 0x0061 };
    uint32_t const ces[9] = { 0x41D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_332)
{
    // A1E2 0041;	
    // (ꇢ) YI SYLLABLE GAT	[41D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E2, 0x0041 };
    uint32_t const ces[9] = { 0x41D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_333)
{
    // A1E2 0062;	
    // (ꇢ) YI SYLLABLE GAT	[41D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E2, 0x0062 };
    uint32_t const ces[9] = { 0x41D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_334)
{
    // A1E3 0021;	
    // (ꇣ) YI SYLLABLE GAX	[41D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E3, 0x0021 };
    uint32_t const ces[9] = { 0x41D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_335)
{
    // A1E3 003F;	
    // (ꇣ) YI SYLLABLE GAX	[41D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E3, 0x003F };
    uint32_t const ces[9] = { 0x41D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_336)
{
    // A1E3 0061;	
    // (ꇣ) YI SYLLABLE GAX	[41D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E3, 0x0061 };
    uint32_t const ces[9] = { 0x41D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_337)
{
    // A1E3 0041;	
    // (ꇣ) YI SYLLABLE GAX	[41D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E3, 0x0041 };
    uint32_t const ces[9] = { 0x41D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_338)
{
    // A1E3 0062;	
    // (ꇣ) YI SYLLABLE GAX	[41D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E3, 0x0062 };
    uint32_t const ces[9] = { 0x41D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_339)
{
    // A1E4 0021;	
    // (ꇤ) YI SYLLABLE GA	[41D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E4, 0x0021 };
    uint32_t const ces[9] = { 0x41D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_340)
{
    // A1E4 003F;	
    // (ꇤ) YI SYLLABLE GA	[41D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E4, 0x003F };
    uint32_t const ces[9] = { 0x41D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_341)
{
    // A1E4 0061;	
    // (ꇤ) YI SYLLABLE GA	[41D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E4, 0x0061 };
    uint32_t const ces[9] = { 0x41D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_342)
{
    // A1E4 0041;	
    // (ꇤ) YI SYLLABLE GA	[41D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E4, 0x0041 };
    uint32_t const ces[9] = { 0x41D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_343)
{
    // A1E4 0062;	
    // (ꇤ) YI SYLLABLE GA	[41D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E4, 0x0062 };
    uint32_t const ces[9] = { 0x41D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_344)
{
    // A1E5 0021;	
    // (ꇥ) YI SYLLABLE GAP	[41D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E5, 0x0021 };
    uint32_t const ces[9] = { 0x41D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_345)
{
    // A1E5 003F;	
    // (ꇥ) YI SYLLABLE GAP	[41D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E5, 0x003F };
    uint32_t const ces[9] = { 0x41D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_346)
{
    // A1E5 0061;	
    // (ꇥ) YI SYLLABLE GAP	[41D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E5, 0x0061 };
    uint32_t const ces[9] = { 0x41D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_347)
{
    // A1E5 0041;	
    // (ꇥ) YI SYLLABLE GAP	[41D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E5, 0x0041 };
    uint32_t const ces[9] = { 0x41D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_348)
{
    // A1E5 0062;	
    // (ꇥ) YI SYLLABLE GAP	[41D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E5, 0x0062 };
    uint32_t const ces[9] = { 0x41D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_349)
{
    // A1E6 0021;	
    // (ꇦ) YI SYLLABLE GUOT	[41D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E6, 0x0021 };
    uint32_t const ces[9] = { 0x41D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_350)
{
    // A1E6 003F;	
    // (ꇦ) YI SYLLABLE GUOT	[41D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E6, 0x003F };
    uint32_t const ces[9] = { 0x41D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_351)
{
    // A1E6 0061;	
    // (ꇦ) YI SYLLABLE GUOT	[41D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E6, 0x0061 };
    uint32_t const ces[9] = { 0x41D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_352)
{
    // A1E6 0041;	
    // (ꇦ) YI SYLLABLE GUOT	[41D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E6, 0x0041 };
    uint32_t const ces[9] = { 0x41D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_353)
{
    // A1E6 0062;	
    // (ꇦ) YI SYLLABLE GUOT	[41D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E6, 0x0062 };
    uint32_t const ces[9] = { 0x41D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_354)
{
    // A1E7 0021;	
    // (ꇧ) YI SYLLABLE GUOX	[41DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E7, 0x0021 };
    uint32_t const ces[9] = { 0x41DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_355)
{
    // A1E7 003F;	
    // (ꇧ) YI SYLLABLE GUOX	[41DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E7, 0x003F };
    uint32_t const ces[9] = { 0x41DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_356)
{
    // A1E7 0061;	
    // (ꇧ) YI SYLLABLE GUOX	[41DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E7, 0x0061 };
    uint32_t const ces[9] = { 0x41DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_357)
{
    // A1E7 0041;	
    // (ꇧ) YI SYLLABLE GUOX	[41DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E7, 0x0041 };
    uint32_t const ces[9] = { 0x41DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_358)
{
    // A1E7 0062;	
    // (ꇧ) YI SYLLABLE GUOX	[41DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E7, 0x0062 };
    uint32_t const ces[9] = { 0x41DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_359)
{
    // A1E8 0021;	
    // (ꇨ) YI SYLLABLE GUO	[41DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E8, 0x0021 };
    uint32_t const ces[9] = { 0x41DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_360)
{
    // A1E8 003F;	
    // (ꇨ) YI SYLLABLE GUO	[41DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E8, 0x003F };
    uint32_t const ces[9] = { 0x41DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_361)
{
    // A1E8 0061;	
    // (ꇨ) YI SYLLABLE GUO	[41DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E8, 0x0061 };
    uint32_t const ces[9] = { 0x41DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_362)
{
    // A1E8 0041;	
    // (ꇨ) YI SYLLABLE GUO	[41DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E8, 0x0041 };
    uint32_t const ces[9] = { 0x41DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_363)
{
    // A1E8 0062;	
    // (ꇨ) YI SYLLABLE GUO	[41DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E8, 0x0062 };
    uint32_t const ces[9] = { 0x41DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_364)
{
    // A1E9 0021;	
    // (ꇩ) YI SYLLABLE GUOP	[41DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E9, 0x0021 };
    uint32_t const ces[9] = { 0x41DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_365)
{
    // A1E9 003F;	
    // (ꇩ) YI SYLLABLE GUOP	[41DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E9, 0x003F };
    uint32_t const ces[9] = { 0x41DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_366)
{
    // A1E9 0061;	
    // (ꇩ) YI SYLLABLE GUOP	[41DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E9, 0x0061 };
    uint32_t const ces[9] = { 0x41DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_367)
{
    // A1E9 0041;	
    // (ꇩ) YI SYLLABLE GUOP	[41DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1E9, 0x0041 };
    uint32_t const ces[9] = { 0x41DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_368)
{
    // A1E9 0062;	
    // (ꇩ) YI SYLLABLE GUOP	[41DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1E9, 0x0062 };
    uint32_t const ces[9] = { 0x41DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_369)
{
    // A1EA 0021;	
    // (ꇪ) YI SYLLABLE GOT	[41DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EA, 0x0021 };
    uint32_t const ces[9] = { 0x41DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_370)
{
    // A1EA 003F;	
    // (ꇪ) YI SYLLABLE GOT	[41DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EA, 0x003F };
    uint32_t const ces[9] = { 0x41DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_371)
{
    // A1EA 0061;	
    // (ꇪ) YI SYLLABLE GOT	[41DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EA, 0x0061 };
    uint32_t const ces[9] = { 0x41DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_372)
{
    // A1EA 0041;	
    // (ꇪ) YI SYLLABLE GOT	[41DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1EA, 0x0041 };
    uint32_t const ces[9] = { 0x41DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_373)
{
    // A1EA 0062;	
    // (ꇪ) YI SYLLABLE GOT	[41DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EA, 0x0062 };
    uint32_t const ces[9] = { 0x41DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_374)
{
    // A1EB 0021;	
    // (ꇫ) YI SYLLABLE GOX	[41DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EB, 0x0021 };
    uint32_t const ces[9] = { 0x41DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_375)
{
    // A1EB 003F;	
    // (ꇫ) YI SYLLABLE GOX	[41DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EB, 0x003F };
    uint32_t const ces[9] = { 0x41DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_376)
{
    // A1EB 0061;	
    // (ꇫ) YI SYLLABLE GOX	[41DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EB, 0x0061 };
    uint32_t const ces[9] = { 0x41DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_377)
{
    // A1EB 0041;	
    // (ꇫ) YI SYLLABLE GOX	[41DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1EB, 0x0041 };
    uint32_t const ces[9] = { 0x41DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_378)
{
    // A1EB 0062;	
    // (ꇫ) YI SYLLABLE GOX	[41DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EB, 0x0062 };
    uint32_t const ces[9] = { 0x41DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_379)
{
    // A1EC 0021;	
    // (ꇬ) YI SYLLABLE GO	[41DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EC, 0x0021 };
    uint32_t const ces[9] = { 0x41DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_380)
{
    // A1EC 003F;	
    // (ꇬ) YI SYLLABLE GO	[41DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EC, 0x003F };
    uint32_t const ces[9] = { 0x41DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_381)
{
    // A1EC 0061;	
    // (ꇬ) YI SYLLABLE GO	[41DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EC, 0x0061 };
    uint32_t const ces[9] = { 0x41DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_382)
{
    // A1EC 0041;	
    // (ꇬ) YI SYLLABLE GO	[41DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1EC, 0x0041 };
    uint32_t const ces[9] = { 0x41DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_383)
{
    // A1EC 0062;	
    // (ꇬ) YI SYLLABLE GO	[41DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EC, 0x0062 };
    uint32_t const ces[9] = { 0x41DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_384)
{
    // A1ED 0021;	
    // (ꇭ) YI SYLLABLE GOP	[41E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1ED, 0x0021 };
    uint32_t const ces[9] = { 0x41E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_385)
{
    // A1ED 003F;	
    // (ꇭ) YI SYLLABLE GOP	[41E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1ED, 0x003F };
    uint32_t const ces[9] = { 0x41E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_386)
{
    // A1ED 0061;	
    // (ꇭ) YI SYLLABLE GOP	[41E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1ED, 0x0061 };
    uint32_t const ces[9] = { 0x41E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_387)
{
    // A1ED 0041;	
    // (ꇭ) YI SYLLABLE GOP	[41E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1ED, 0x0041 };
    uint32_t const ces[9] = { 0x41E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_388)
{
    // A1ED 0062;	
    // (ꇭ) YI SYLLABLE GOP	[41E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1ED, 0x0062 };
    uint32_t const ces[9] = { 0x41E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_389)
{
    // A1EE 0021;	
    // (ꇮ) YI SYLLABLE GET	[41E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EE, 0x0021 };
    uint32_t const ces[9] = { 0x41E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_390)
{
    // A1EE 003F;	
    // (ꇮ) YI SYLLABLE GET	[41E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EE, 0x003F };
    uint32_t const ces[9] = { 0x41E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_391)
{
    // A1EE 0061;	
    // (ꇮ) YI SYLLABLE GET	[41E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EE, 0x0061 };
    uint32_t const ces[9] = { 0x41E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_392)
{
    // A1EE 0041;	
    // (ꇮ) YI SYLLABLE GET	[41E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1EE, 0x0041 };
    uint32_t const ces[9] = { 0x41E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_393)
{
    // A1EE 0062;	
    // (ꇮ) YI SYLLABLE GET	[41E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EE, 0x0062 };
    uint32_t const ces[9] = { 0x41E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_394)
{
    // A1EF 0021;	
    // (ꇯ) YI SYLLABLE GEX	[41E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EF, 0x0021 };
    uint32_t const ces[9] = { 0x41E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_395)
{
    // A1EF 003F;	
    // (ꇯ) YI SYLLABLE GEX	[41E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EF, 0x003F };
    uint32_t const ces[9] = { 0x41E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_396)
{
    // A1EF 0061;	
    // (ꇯ) YI SYLLABLE GEX	[41E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EF, 0x0061 };
    uint32_t const ces[9] = { 0x41E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_397)
{
    // A1EF 0041;	
    // (ꇯ) YI SYLLABLE GEX	[41E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1EF, 0x0041 };
    uint32_t const ces[9] = { 0x41E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_398)
{
    // A1EF 0062;	
    // (ꇯ) YI SYLLABLE GEX	[41E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1EF, 0x0062 };
    uint32_t const ces[9] = { 0x41E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_399)
{
    // A1F0 0021;	
    // (ꇰ) YI SYLLABLE GE	[41E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F0, 0x0021 };
    uint32_t const ces[9] = { 0x41E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_400)
{
    // A1F0 003F;	
    // (ꇰ) YI SYLLABLE GE	[41E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F0, 0x003F };
    uint32_t const ces[9] = { 0x41E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_401)
{
    // A1F0 0061;	
    // (ꇰ) YI SYLLABLE GE	[41E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F0, 0x0061 };
    uint32_t const ces[9] = { 0x41E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_402)
{
    // A1F0 0041;	
    // (ꇰ) YI SYLLABLE GE	[41E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F0, 0x0041 };
    uint32_t const ces[9] = { 0x41E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_403)
{
    // A1F0 0062;	
    // (ꇰ) YI SYLLABLE GE	[41E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F0, 0x0062 };
    uint32_t const ces[9] = { 0x41E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_404)
{
    // A1F1 0021;	
    // (ꇱ) YI SYLLABLE GEP	[41E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F1, 0x0021 };
    uint32_t const ces[9] = { 0x41E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_405)
{
    // A1F1 003F;	
    // (ꇱ) YI SYLLABLE GEP	[41E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F1, 0x003F };
    uint32_t const ces[9] = { 0x41E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_406)
{
    // A1F1 0061;	
    // (ꇱ) YI SYLLABLE GEP	[41E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F1, 0x0061 };
    uint32_t const ces[9] = { 0x41E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_407)
{
    // A1F1 0041;	
    // (ꇱ) YI SYLLABLE GEP	[41E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F1, 0x0041 };
    uint32_t const ces[9] = { 0x41E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_408)
{
    // A1F1 0062;	
    // (ꇱ) YI SYLLABLE GEP	[41E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F1, 0x0062 };
    uint32_t const ces[9] = { 0x41E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_409)
{
    // A1F2 0021;	
    // (ꇲ) YI SYLLABLE GUT	[41E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F2, 0x0021 };
    uint32_t const ces[9] = { 0x41E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_410)
{
    // A1F2 003F;	
    // (ꇲ) YI SYLLABLE GUT	[41E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F2, 0x003F };
    uint32_t const ces[9] = { 0x41E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_411)
{
    // A1F2 0061;	
    // (ꇲ) YI SYLLABLE GUT	[41E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F2, 0x0061 };
    uint32_t const ces[9] = { 0x41E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_412)
{
    // A1F2 0041;	
    // (ꇲ) YI SYLLABLE GUT	[41E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F2, 0x0041 };
    uint32_t const ces[9] = { 0x41E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_413)
{
    // A1F2 0062;	
    // (ꇲ) YI SYLLABLE GUT	[41E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F2, 0x0062 };
    uint32_t const ces[9] = { 0x41E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_414)
{
    // A1F3 0021;	
    // (ꇳ) YI SYLLABLE GUX	[41E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F3, 0x0021 };
    uint32_t const ces[9] = { 0x41E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_415)
{
    // A1F3 003F;	
    // (ꇳ) YI SYLLABLE GUX	[41E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F3, 0x003F };
    uint32_t const ces[9] = { 0x41E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_416)
{
    // A1F3 0061;	
    // (ꇳ) YI SYLLABLE GUX	[41E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F3, 0x0061 };
    uint32_t const ces[9] = { 0x41E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_417)
{
    // A1F3 0041;	
    // (ꇳ) YI SYLLABLE GUX	[41E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F3, 0x0041 };
    uint32_t const ces[9] = { 0x41E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_418)
{
    // A1F3 0062;	
    // (ꇳ) YI SYLLABLE GUX	[41E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F3, 0x0062 };
    uint32_t const ces[9] = { 0x41E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_419)
{
    // A1F4 0021;	
    // (ꇴ) YI SYLLABLE GU	[41E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F4, 0x0021 };
    uint32_t const ces[9] = { 0x41E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_420)
{
    // A1F4 003F;	
    // (ꇴ) YI SYLLABLE GU	[41E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F4, 0x003F };
    uint32_t const ces[9] = { 0x41E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_421)
{
    // A1F4 0061;	
    // (ꇴ) YI SYLLABLE GU	[41E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F4, 0x0061 };
    uint32_t const ces[9] = { 0x41E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_422)
{
    // A1F4 0041;	
    // (ꇴ) YI SYLLABLE GU	[41E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F4, 0x0041 };
    uint32_t const ces[9] = { 0x41E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_423)
{
    // A1F4 0062;	
    // (ꇴ) YI SYLLABLE GU	[41E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F4, 0x0062 };
    uint32_t const ces[9] = { 0x41E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_424)
{
    // A1F5 0021;	
    // (ꇵ) YI SYLLABLE GUP	[41E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F5, 0x0021 };
    uint32_t const ces[9] = { 0x41E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_425)
{
    // A1F5 003F;	
    // (ꇵ) YI SYLLABLE GUP	[41E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F5, 0x003F };
    uint32_t const ces[9] = { 0x41E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_426)
{
    // A1F5 0061;	
    // (ꇵ) YI SYLLABLE GUP	[41E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F5, 0x0061 };
    uint32_t const ces[9] = { 0x41E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_427)
{
    // A1F5 0041;	
    // (ꇵ) YI SYLLABLE GUP	[41E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F5, 0x0041 };
    uint32_t const ces[9] = { 0x41E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_428)
{
    // A1F5 0062;	
    // (ꇵ) YI SYLLABLE GUP	[41E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F5, 0x0062 };
    uint32_t const ces[9] = { 0x41E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_429)
{
    // A1F6 0021;	
    // (ꇶ) YI SYLLABLE GURX	[41E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F6, 0x0021 };
    uint32_t const ces[9] = { 0x41E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_430)
{
    // A1F6 003F;	
    // (ꇶ) YI SYLLABLE GURX	[41E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F6, 0x003F };
    uint32_t const ces[9] = { 0x41E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_431)
{
    // A1F6 0061;	
    // (ꇶ) YI SYLLABLE GURX	[41E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F6, 0x0061 };
    uint32_t const ces[9] = { 0x41E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_432)
{
    // A1F6 0041;	
    // (ꇶ) YI SYLLABLE GURX	[41E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F6, 0x0041 };
    uint32_t const ces[9] = { 0x41E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_433)
{
    // A1F6 0062;	
    // (ꇶ) YI SYLLABLE GURX	[41E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F6, 0x0062 };
    uint32_t const ces[9] = { 0x41E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_434)
{
    // A1F7 0021;	
    // (ꇷ) YI SYLLABLE GUR	[41EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F7, 0x0021 };
    uint32_t const ces[9] = { 0x41EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_435)
{
    // A1F7 003F;	
    // (ꇷ) YI SYLLABLE GUR	[41EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F7, 0x003F };
    uint32_t const ces[9] = { 0x41EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_436)
{
    // A1F7 0061;	
    // (ꇷ) YI SYLLABLE GUR	[41EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F7, 0x0061 };
    uint32_t const ces[9] = { 0x41EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_437)
{
    // A1F7 0041;	
    // (ꇷ) YI SYLLABLE GUR	[41EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F7, 0x0041 };
    uint32_t const ces[9] = { 0x41EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_438)
{
    // A1F7 0062;	
    // (ꇷ) YI SYLLABLE GUR	[41EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F7, 0x0062 };
    uint32_t const ces[9] = { 0x41EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_439)
{
    // A1F8 0021;	
    // (ꇸ) YI SYLLABLE KIT	[41EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F8, 0x0021 };
    uint32_t const ces[9] = { 0x41EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_440)
{
    // A1F8 003F;	
    // (ꇸ) YI SYLLABLE KIT	[41EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F8, 0x003F };
    uint32_t const ces[9] = { 0x41EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_441)
{
    // A1F8 0061;	
    // (ꇸ) YI SYLLABLE KIT	[41EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F8, 0x0061 };
    uint32_t const ces[9] = { 0x41EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_442)
{
    // A1F8 0041;	
    // (ꇸ) YI SYLLABLE KIT	[41EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F8, 0x0041 };
    uint32_t const ces[9] = { 0x41EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_443)
{
    // A1F8 0062;	
    // (ꇸ) YI SYLLABLE KIT	[41EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F8, 0x0062 };
    uint32_t const ces[9] = { 0x41EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_444)
{
    // A1F9 0021;	
    // (ꇹ) YI SYLLABLE KIX	[41EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F9, 0x0021 };
    uint32_t const ces[9] = { 0x41EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_445)
{
    // A1F9 003F;	
    // (ꇹ) YI SYLLABLE KIX	[41EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F9, 0x003F };
    uint32_t const ces[9] = { 0x41EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_446)
{
    // A1F9 0061;	
    // (ꇹ) YI SYLLABLE KIX	[41EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F9, 0x0061 };
    uint32_t const ces[9] = { 0x41EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_447)
{
    // A1F9 0041;	
    // (ꇹ) YI SYLLABLE KIX	[41EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1F9, 0x0041 };
    uint32_t const ces[9] = { 0x41EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_448)
{
    // A1F9 0062;	
    // (ꇹ) YI SYLLABLE KIX	[41EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1F9, 0x0062 };
    uint32_t const ces[9] = { 0x41EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_449)
{
    // A1FA 0021;	
    // (ꇺ) YI SYLLABLE KI	[41ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FA, 0x0021 };
    uint32_t const ces[9] = { 0x41ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_450)
{
    // A1FA 003F;	
    // (ꇺ) YI SYLLABLE KI	[41ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FA, 0x003F };
    uint32_t const ces[9] = { 0x41ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_451)
{
    // A1FA 0061;	
    // (ꇺ) YI SYLLABLE KI	[41ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FA, 0x0061 };
    uint32_t const ces[9] = { 0x41ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_452)
{
    // A1FA 0041;	
    // (ꇺ) YI SYLLABLE KI	[41ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FA, 0x0041 };
    uint32_t const ces[9] = { 0x41ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_453)
{
    // A1FA 0062;	
    // (ꇺ) YI SYLLABLE KI	[41ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FA, 0x0062 };
    uint32_t const ces[9] = { 0x41ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_454)
{
    // A1FB 0021;	
    // (ꇻ) YI SYLLABLE KIP	[41EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FB, 0x0021 };
    uint32_t const ces[9] = { 0x41EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_455)
{
    // A1FB 003F;	
    // (ꇻ) YI SYLLABLE KIP	[41EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FB, 0x003F };
    uint32_t const ces[9] = { 0x41EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_456)
{
    // A1FB 0061;	
    // (ꇻ) YI SYLLABLE KIP	[41EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FB, 0x0061 };
    uint32_t const ces[9] = { 0x41EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_457)
{
    // A1FB 0041;	
    // (ꇻ) YI SYLLABLE KIP	[41EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FB, 0x0041 };
    uint32_t const ces[9] = { 0x41EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_458)
{
    // A1FB 0062;	
    // (ꇻ) YI SYLLABLE KIP	[41EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FB, 0x0062 };
    uint32_t const ces[9] = { 0x41EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_459)
{
    // A1FC 0021;	
    // (ꇼ) YI SYLLABLE KIEX	[41EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FC, 0x0021 };
    uint32_t const ces[9] = { 0x41EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_460)
{
    // A1FC 003F;	
    // (ꇼ) YI SYLLABLE KIEX	[41EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FC, 0x003F };
    uint32_t const ces[9] = { 0x41EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_461)
{
    // A1FC 0061;	
    // (ꇼ) YI SYLLABLE KIEX	[41EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FC, 0x0061 };
    uint32_t const ces[9] = { 0x41EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_462)
{
    // A1FC 0041;	
    // (ꇼ) YI SYLLABLE KIEX	[41EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FC, 0x0041 };
    uint32_t const ces[9] = { 0x41EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_463)
{
    // A1FC 0062;	
    // (ꇼ) YI SYLLABLE KIEX	[41EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FC, 0x0062 };
    uint32_t const ces[9] = { 0x41EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_464)
{
    // A1FD 0021;	
    // (ꇽ) YI SYLLABLE KIE	[41F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FD, 0x0021 };
    uint32_t const ces[9] = { 0x41F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_465)
{
    // A1FD 003F;	
    // (ꇽ) YI SYLLABLE KIE	[41F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FD, 0x003F };
    uint32_t const ces[9] = { 0x41F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_466)
{
    // A1FD 0061;	
    // (ꇽ) YI SYLLABLE KIE	[41F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FD, 0x0061 };
    uint32_t const ces[9] = { 0x41F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_467)
{
    // A1FD 0041;	
    // (ꇽ) YI SYLLABLE KIE	[41F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FD, 0x0041 };
    uint32_t const ces[9] = { 0x41F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_468)
{
    // A1FD 0062;	
    // (ꇽ) YI SYLLABLE KIE	[41F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FD, 0x0062 };
    uint32_t const ces[9] = { 0x41F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_469)
{
    // A1FE 0021;	
    // (ꇾ) YI SYLLABLE KIEP	[41F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FE, 0x0021 };
    uint32_t const ces[9] = { 0x41F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_470)
{
    // A1FE 003F;	
    // (ꇾ) YI SYLLABLE KIEP	[41F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FE, 0x003F };
    uint32_t const ces[9] = { 0x41F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_471)
{
    // A1FE 0061;	
    // (ꇾ) YI SYLLABLE KIEP	[41F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FE, 0x0061 };
    uint32_t const ces[9] = { 0x41F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_472)
{
    // A1FE 0041;	
    // (ꇾ) YI SYLLABLE KIEP	[41F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FE, 0x0041 };
    uint32_t const ces[9] = { 0x41F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_473)
{
    // A1FE 0062;	
    // (ꇾ) YI SYLLABLE KIEP	[41F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FE, 0x0062 };
    uint32_t const ces[9] = { 0x41F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_474)
{
    // A1FF 0021;	
    // (ꇿ) YI SYLLABLE KAT	[41F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FF, 0x0021 };
    uint32_t const ces[9] = { 0x41F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_475)
{
    // A1FF 003F;	
    // (ꇿ) YI SYLLABLE KAT	[41F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FF, 0x003F };
    uint32_t const ces[9] = { 0x41F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_476)
{
    // A1FF 0061;	
    // (ꇿ) YI SYLLABLE KAT	[41F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FF, 0x0061 };
    uint32_t const ces[9] = { 0x41F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_477)
{
    // A1FF 0041;	
    // (ꇿ) YI SYLLABLE KAT	[41F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA1FF, 0x0041 };
    uint32_t const ces[9] = { 0x41F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_478)
{
    // A1FF 0062;	
    // (ꇿ) YI SYLLABLE KAT	[41F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1FF, 0x0062 };
    uint32_t const ces[9] = { 0x41F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_479)
{
    // A200 0021;	
    // (ꈀ) YI SYLLABLE KAX	[41F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA200, 0x0021 };
    uint32_t const ces[9] = { 0x41F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_480)
{
    // A200 003F;	
    // (ꈀ) YI SYLLABLE KAX	[41F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA200, 0x003F };
    uint32_t const ces[9] = { 0x41F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_481)
{
    // A200 0061;	
    // (ꈀ) YI SYLLABLE KAX	[41F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA200, 0x0061 };
    uint32_t const ces[9] = { 0x41F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_482)
{
    // A200 0041;	
    // (ꈀ) YI SYLLABLE KAX	[41F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA200, 0x0041 };
    uint32_t const ces[9] = { 0x41F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_483)
{
    // A200 0062;	
    // (ꈀ) YI SYLLABLE KAX	[41F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA200, 0x0062 };
    uint32_t const ces[9] = { 0x41F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_484)
{
    // A201 0021;	
    // (ꈁ) YI SYLLABLE KA	[41F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA201, 0x0021 };
    uint32_t const ces[9] = { 0x41F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_485)
{
    // A201 003F;	
    // (ꈁ) YI SYLLABLE KA	[41F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA201, 0x003F };
    uint32_t const ces[9] = { 0x41F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_486)
{
    // A201 0061;	
    // (ꈁ) YI SYLLABLE KA	[41F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA201, 0x0061 };
    uint32_t const ces[9] = { 0x41F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_487)
{
    // A201 0041;	
    // (ꈁ) YI SYLLABLE KA	[41F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA201, 0x0041 };
    uint32_t const ces[9] = { 0x41F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_488)
{
    // A201 0062;	
    // (ꈁ) YI SYLLABLE KA	[41F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA201, 0x0062 };
    uint32_t const ces[9] = { 0x41F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_489)
{
    // A202 0021;	
    // (ꈂ) YI SYLLABLE KAP	[41F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA202, 0x0021 };
    uint32_t const ces[9] = { 0x41F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_490)
{
    // A202 003F;	
    // (ꈂ) YI SYLLABLE KAP	[41F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA202, 0x003F };
    uint32_t const ces[9] = { 0x41F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_491)
{
    // A202 0061;	
    // (ꈂ) YI SYLLABLE KAP	[41F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA202, 0x0061 };
    uint32_t const ces[9] = { 0x41F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_492)
{
    // A202 0041;	
    // (ꈂ) YI SYLLABLE KAP	[41F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA202, 0x0041 };
    uint32_t const ces[9] = { 0x41F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_493)
{
    // A202 0062;	
    // (ꈂ) YI SYLLABLE KAP	[41F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA202, 0x0062 };
    uint32_t const ces[9] = { 0x41F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_494)
{
    // A203 0021;	
    // (ꈃ) YI SYLLABLE KUOX	[41F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA203, 0x0021 };
    uint32_t const ces[9] = { 0x41F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_495)
{
    // A203 003F;	
    // (ꈃ) YI SYLLABLE KUOX	[41F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA203, 0x003F };
    uint32_t const ces[9] = { 0x41F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_496)
{
    // A203 0061;	
    // (ꈃ) YI SYLLABLE KUOX	[41F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA203, 0x0061 };
    uint32_t const ces[9] = { 0x41F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_497)
{
    // A203 0041;	
    // (ꈃ) YI SYLLABLE KUOX	[41F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA203, 0x0041 };
    uint32_t const ces[9] = { 0x41F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_498)
{
    // A203 0062;	
    // (ꈃ) YI SYLLABLE KUOX	[41F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA203, 0x0062 };
    uint32_t const ces[9] = { 0x41F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_258_499)
{
    // A204 0021;	
    // (ꈄ) YI SYLLABLE KUO	[41F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA204, 0x0021 };
    uint32_t const ces[9] = { 0x41F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

