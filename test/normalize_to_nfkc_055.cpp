// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkc_055_000)
{
    // CD88;CD88;110E 116D 11B7;CD88;110E 116D 11B7; 
    // (춈; 춈; 춈; 춈; 춈; ) HANGUL SYLLABLE CYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD88 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_001)
{
    // CD89;CD89;110E 116D 11B8;CD89;110E 116D 11B8; 
    // (춉; 춉; 춉; 춉; 춉; ) HANGUL SYLLABLE CYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD89 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_002)
{
    // CD8A;CD8A;110E 116D 11B9;CD8A;110E 116D 11B9; 
    // (춊; 춊; 춊; 춊; 춊; ) HANGUL SYLLABLE CYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_003)
{
    // CD8B;CD8B;110E 116D 11BA;CD8B;110E 116D 11BA; 
    // (춋; 춋; 춋; 춋; 춋; ) HANGUL SYLLABLE CYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_004)
{
    // CD8C;CD8C;110E 116D 11BB;CD8C;110E 116D 11BB; 
    // (춌; 춌; 춌; 춌; 춌; ) HANGUL SYLLABLE CYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_005)
{
    // CD8D;CD8D;110E 116D 11BC;CD8D;110E 116D 11BC; 
    // (춍; 춍; 춍; 춍; 춍; ) HANGUL SYLLABLE CYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_006)
{
    // CD8E;CD8E;110E 116D 11BD;CD8E;110E 116D 11BD; 
    // (춎; 춎; 춎; 춎; 춎; ) HANGUL SYLLABLE CYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_007)
{
    // CD8F;CD8F;110E 116D 11BE;CD8F;110E 116D 11BE; 
    // (춏; 춏; 춏; 춏; 춏; ) HANGUL SYLLABLE CYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD8F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_008)
{
    // CD90;CD90;110E 116D 11BF;CD90;110E 116D 11BF; 
    // (춐; 춐; 춐; 춐; 춐; ) HANGUL SYLLABLE CYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD90 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD90 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_009)
{
    // CD91;CD91;110E 116D 11C0;CD91;110E 116D 11C0; 
    // (춑; 춑; 춑; 춑; 춑; ) HANGUL SYLLABLE CYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD91 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD91 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_010)
{
    // CD92;CD92;110E 116D 11C1;CD92;110E 116D 11C1; 
    // (춒; 춒; 춒; 춒; 춒; ) HANGUL SYLLABLE CYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD92 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_011)
{
    // CD93;CD93;110E 116D 11C2;CD93;110E 116D 11C2; 
    // (춓; 춓; 춓; 춓; 춓; ) HANGUL SYLLABLE CYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD93 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_012)
{
    // CD94;CD94;110E 116E;CD94;110E 116E; 
    // (추; 추; 추; 추; 추; ) HANGUL SYLLABLE CU
    {
        std::array<uint32_t, 1> const source = {{ 0xCD94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD94 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_013)
{
    // CD95;CD95;110E 116E 11A8;CD95;110E 116E 11A8; 
    // (축; 축; 축; 축; 축; ) HANGUL SYLLABLE CUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD95 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_014)
{
    // CD96;CD96;110E 116E 11A9;CD96;110E 116E 11A9; 
    // (춖; 춖; 춖; 춖; 춖; ) HANGUL SYLLABLE CUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD96 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_015)
{
    // CD97;CD97;110E 116E 11AA;CD97;110E 116E 11AA; 
    // (춗; 춗; 춗; 춗; 춗; ) HANGUL SYLLABLE CUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD97 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD97 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_016)
{
    // CD98;CD98;110E 116E 11AB;CD98;110E 116E 11AB; 
    // (춘; 춘; 춘; 춘; 춘; ) HANGUL SYLLABLE CUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCD98 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD98 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_017)
{
    // CD99;CD99;110E 116E 11AC;CD99;110E 116E 11AC; 
    // (춙; 춙; 춙; 춙; 춙; ) HANGUL SYLLABLE CUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD99 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD99 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_018)
{
    // CD9A;CD9A;110E 116E 11AD;CD9A;110E 116E 11AD; 
    // (춚; 춚; 춚; 춚; 춚; ) HANGUL SYLLABLE CUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_019)
{
    // CD9B;CD9B;110E 116E 11AE;CD9B;110E 116E 11AE; 
    // (춛; 춛; 춛; 춛; 춛; ) HANGUL SYLLABLE CUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_020)
{
    // CD9C;CD9C;110E 116E 11AF;CD9C;110E 116E 11AF; 
    // (출; 출; 출; 출; 출; ) HANGUL SYLLABLE CUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_021)
{
    // CD9D;CD9D;110E 116E 11B0;CD9D;110E 116E 11B0; 
    // (춝; 춝; 춝; 춝; 춝; ) HANGUL SYLLABLE CULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_022)
{
    // CD9E;CD9E;110E 116E 11B1;CD9E;110E 116E 11B1; 
    // (춞; 춞; 춞; 춞; 춞; ) HANGUL SYLLABLE CULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_023)
{
    // CD9F;CD9F;110E 116E 11B2;CD9F;110E 116E 11B2; 
    // (춟; 춟; 춟; 춟; 춟; ) HANGUL SYLLABLE CULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD9F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCD9F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_024)
{
    // CDA0;CDA0;110E 116E 11B3;CDA0;110E 116E 11B3; 
    // (춠; 춠; 춠; 춠; 춠; ) HANGUL SYLLABLE CULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_025)
{
    // CDA1;CDA1;110E 116E 11B4;CDA1;110E 116E 11B4; 
    // (춡; 춡; 춡; 춡; 춡; ) HANGUL SYLLABLE CULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_026)
{
    // CDA2;CDA2;110E 116E 11B5;CDA2;110E 116E 11B5; 
    // (춢; 춢; 춢; 춢; 춢; ) HANGUL SYLLABLE CULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_027)
{
    // CDA3;CDA3;110E 116E 11B6;CDA3;110E 116E 11B6; 
    // (춣; 춣; 춣; 춣; 춣; ) HANGUL SYLLABLE CULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_028)
{
    // CDA4;CDA4;110E 116E 11B7;CDA4;110E 116E 11B7; 
    // (춤; 춤; 춤; 춤; 춤; ) HANGUL SYLLABLE CUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_029)
{
    // CDA5;CDA5;110E 116E 11B8;CDA5;110E 116E 11B8; 
    // (춥; 춥; 춥; 춥; 춥; ) HANGUL SYLLABLE CUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_030)
{
    // CDA6;CDA6;110E 116E 11B9;CDA6;110E 116E 11B9; 
    // (춦; 춦; 춦; 춦; 춦; ) HANGUL SYLLABLE CUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_031)
{
    // CDA7;CDA7;110E 116E 11BA;CDA7;110E 116E 11BA; 
    // (춧; 춧; 춧; 춧; 춧; ) HANGUL SYLLABLE CUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_032)
{
    // CDA8;CDA8;110E 116E 11BB;CDA8;110E 116E 11BB; 
    // (춨; 춨; 춨; 춨; 춨; ) HANGUL SYLLABLE CUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_033)
{
    // CDA9;CDA9;110E 116E 11BC;CDA9;110E 116E 11BC; 
    // (충; 충; 충; 충; 충; ) HANGUL SYLLABLE CUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDA9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDA9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_034)
{
    // CDAA;CDAA;110E 116E 11BD;CDAA;110E 116E 11BD; 
    // (춪; 춪; 춪; 춪; 춪; ) HANGUL SYLLABLE CUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_035)
{
    // CDAB;CDAB;110E 116E 11BE;CDAB;110E 116E 11BE; 
    // (춫; 춫; 춫; 춫; 춫; ) HANGUL SYLLABLE CUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_036)
{
    // CDAC;CDAC;110E 116E 11BF;CDAC;110E 116E 11BF; 
    // (춬; 춬; 춬; 춬; 춬; ) HANGUL SYLLABLE CUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_037)
{
    // CDAD;CDAD;110E 116E 11C0;CDAD;110E 116E 11C0; 
    // (춭; 춭; 춭; 춭; 춭; ) HANGUL SYLLABLE CUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_038)
{
    // CDAE;CDAE;110E 116E 11C1;CDAE;110E 116E 11C1; 
    // (춮; 춮; 춮; 춮; 춮; ) HANGUL SYLLABLE CUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_039)
{
    // CDAF;CDAF;110E 116E 11C2;CDAF;110E 116E 11C2; 
    // (춯; 춯; 춯; 춯; 춯; ) HANGUL SYLLABLE CUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDAF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDAF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_040)
{
    // CDB0;CDB0;110E 116F;CDB0;110E 116F; 
    // (춰; 춰; 춰; 춰; 춰; ) HANGUL SYLLABLE CWEO
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_041)
{
    // CDB1;CDB1;110E 116F 11A8;CDB1;110E 116F 11A8; 
    // (춱; 춱; 춱; 춱; 춱; ) HANGUL SYLLABLE CWEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_042)
{
    // CDB2;CDB2;110E 116F 11A9;CDB2;110E 116F 11A9; 
    // (춲; 춲; 춲; 춲; 춲; ) HANGUL SYLLABLE CWEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_043)
{
    // CDB3;CDB3;110E 116F 11AA;CDB3;110E 116F 11AA; 
    // (춳; 춳; 춳; 춳; 춳; ) HANGUL SYLLABLE CWEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_044)
{
    // CDB4;CDB4;110E 116F 11AB;CDB4;110E 116F 11AB; 
    // (춴; 춴; 춴; 춴; 춴; ) HANGUL SYLLABLE CWEON
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_045)
{
    // CDB5;CDB5;110E 116F 11AC;CDB5;110E 116F 11AC; 
    // (춵; 춵; 춵; 춵; 춵; ) HANGUL SYLLABLE CWEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_046)
{
    // CDB6;CDB6;110E 116F 11AD;CDB6;110E 116F 11AD; 
    // (춶; 춶; 춶; 춶; 춶; ) HANGUL SYLLABLE CWEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_047)
{
    // CDB7;CDB7;110E 116F 11AE;CDB7;110E 116F 11AE; 
    // (춷; 춷; 춷; 춷; 춷; ) HANGUL SYLLABLE CWEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_048)
{
    // CDB8;CDB8;110E 116F 11AF;CDB8;110E 116F 11AF; 
    // (춸; 춸; 춸; 춸; 춸; ) HANGUL SYLLABLE CWEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_049)
{
    // CDB9;CDB9;110E 116F 11B0;CDB9;110E 116F 11B0; 
    // (춹; 춹; 춹; 춹; 춹; ) HANGUL SYLLABLE CWEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDB9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDB9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_050)
{
    // CDBA;CDBA;110E 116F 11B1;CDBA;110E 116F 11B1; 
    // (춺; 춺; 춺; 춺; 춺; ) HANGUL SYLLABLE CWEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_051)
{
    // CDBB;CDBB;110E 116F 11B2;CDBB;110E 116F 11B2; 
    // (춻; 춻; 춻; 춻; 춻; ) HANGUL SYLLABLE CWEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_052)
{
    // CDBC;CDBC;110E 116F 11B3;CDBC;110E 116F 11B3; 
    // (춼; 춼; 춼; 춼; 춼; ) HANGUL SYLLABLE CWEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_053)
{
    // CDBD;CDBD;110E 116F 11B4;CDBD;110E 116F 11B4; 
    // (춽; 춽; 춽; 춽; 춽; ) HANGUL SYLLABLE CWEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_054)
{
    // CDBE;CDBE;110E 116F 11B5;CDBE;110E 116F 11B5; 
    // (춾; 춾; 춾; 춾; 춾; ) HANGUL SYLLABLE CWEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_055)
{
    // CDBF;CDBF;110E 116F 11B6;CDBF;110E 116F 11B6; 
    // (춿; 춿; 춿; 춿; 춿; ) HANGUL SYLLABLE CWEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDBF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDBF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_056)
{
    // CDC0;CDC0;110E 116F 11B7;CDC0;110E 116F 11B7; 
    // (췀; 췀; 췀; 췀; 췀; ) HANGUL SYLLABLE CWEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_057)
{
    // CDC1;CDC1;110E 116F 11B8;CDC1;110E 116F 11B8; 
    // (췁; 췁; 췁; 췁; 췁; ) HANGUL SYLLABLE CWEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_058)
{
    // CDC2;CDC2;110E 116F 11B9;CDC2;110E 116F 11B9; 
    // (췂; 췂; 췂; 췂; 췂; ) HANGUL SYLLABLE CWEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_059)
{
    // CDC3;CDC3;110E 116F 11BA;CDC3;110E 116F 11BA; 
    // (췃; 췃; 췃; 췃; 췃; ) HANGUL SYLLABLE CWEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_060)
{
    // CDC4;CDC4;110E 116F 11BB;CDC4;110E 116F 11BB; 
    // (췄; 췄; 췄; 췄; 췄; ) HANGUL SYLLABLE CWEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_061)
{
    // CDC5;CDC5;110E 116F 11BC;CDC5;110E 116F 11BC; 
    // (췅; 췅; 췅; 췅; 췅; ) HANGUL SYLLABLE CWEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_062)
{
    // CDC6;CDC6;110E 116F 11BD;CDC6;110E 116F 11BD; 
    // (췆; 췆; 췆; 췆; 췆; ) HANGUL SYLLABLE CWEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_063)
{
    // CDC7;CDC7;110E 116F 11BE;CDC7;110E 116F 11BE; 
    // (췇; 췇; 췇; 췇; 췇; ) HANGUL SYLLABLE CWEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_064)
{
    // CDC8;CDC8;110E 116F 11BF;CDC8;110E 116F 11BF; 
    // (췈; 췈; 췈; 췈; 췈; ) HANGUL SYLLABLE CWEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_065)
{
    // CDC9;CDC9;110E 116F 11C0;CDC9;110E 116F 11C0; 
    // (췉; 췉; 췉; 췉; 췉; ) HANGUL SYLLABLE CWEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDC9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDC9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_066)
{
    // CDCA;CDCA;110E 116F 11C1;CDCA;110E 116F 11C1; 
    // (췊; 췊; 췊; 췊; 췊; ) HANGUL SYLLABLE CWEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_067)
{
    // CDCB;CDCB;110E 116F 11C2;CDCB;110E 116F 11C2; 
    // (췋; 췋; 췋; 췋; 췋; ) HANGUL SYLLABLE CWEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_068)
{
    // CDCC;CDCC;110E 1170;CDCC;110E 1170; 
    // (췌; 췌; 췌; 췌; 췌; ) HANGUL SYLLABLE CWE
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_069)
{
    // CDCD;CDCD;110E 1170 11A8;CDCD;110E 1170 11A8; 
    // (췍; 췍; 췍; 췍; 췍; ) HANGUL SYLLABLE CWEG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_070)
{
    // CDCE;CDCE;110E 1170 11A9;CDCE;110E 1170 11A9; 
    // (췎; 췎; 췎; 췎; 췎; ) HANGUL SYLLABLE CWEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_071)
{
    // CDCF;CDCF;110E 1170 11AA;CDCF;110E 1170 11AA; 
    // (췏; 췏; 췏; 췏; 췏; ) HANGUL SYLLABLE CWEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDCF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDCF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_072)
{
    // CDD0;CDD0;110E 1170 11AB;CDD0;110E 1170 11AB; 
    // (췐; 췐; 췐; 췐; 췐; ) HANGUL SYLLABLE CWEN
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_073)
{
    // CDD1;CDD1;110E 1170 11AC;CDD1;110E 1170 11AC; 
    // (췑; 췑; 췑; 췑; 췑; ) HANGUL SYLLABLE CWENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_074)
{
    // CDD2;CDD2;110E 1170 11AD;CDD2;110E 1170 11AD; 
    // (췒; 췒; 췒; 췒; 췒; ) HANGUL SYLLABLE CWENH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_075)
{
    // CDD3;CDD3;110E 1170 11AE;CDD3;110E 1170 11AE; 
    // (췓; 췓; 췓; 췓; 췓; ) HANGUL SYLLABLE CWED
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_076)
{
    // CDD4;CDD4;110E 1170 11AF;CDD4;110E 1170 11AF; 
    // (췔; 췔; 췔; 췔; 췔; ) HANGUL SYLLABLE CWEL
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_077)
{
    // CDD5;CDD5;110E 1170 11B0;CDD5;110E 1170 11B0; 
    // (췕; 췕; 췕; 췕; 췕; ) HANGUL SYLLABLE CWELG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_078)
{
    // CDD6;CDD6;110E 1170 11B1;CDD6;110E 1170 11B1; 
    // (췖; 췖; 췖; 췖; 췖; ) HANGUL SYLLABLE CWELM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_079)
{
    // CDD7;CDD7;110E 1170 11B2;CDD7;110E 1170 11B2; 
    // (췗; 췗; 췗; 췗; 췗; ) HANGUL SYLLABLE CWELB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_080)
{
    // CDD8;CDD8;110E 1170 11B3;CDD8;110E 1170 11B3; 
    // (췘; 췘; 췘; 췘; 췘; ) HANGUL SYLLABLE CWELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_081)
{
    // CDD9;CDD9;110E 1170 11B4;CDD9;110E 1170 11B4; 
    // (췙; 췙; 췙; 췙; 췙; ) HANGUL SYLLABLE CWELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDD9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDD9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_082)
{
    // CDDA;CDDA;110E 1170 11B5;CDDA;110E 1170 11B5; 
    // (췚; 췚; 췚; 췚; 췚; ) HANGUL SYLLABLE CWELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_083)
{
    // CDDB;CDDB;110E 1170 11B6;CDDB;110E 1170 11B6; 
    // (췛; 췛; 췛; 췛; 췛; ) HANGUL SYLLABLE CWELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_084)
{
    // CDDC;CDDC;110E 1170 11B7;CDDC;110E 1170 11B7; 
    // (췜; 췜; 췜; 췜; 췜; ) HANGUL SYLLABLE CWEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_085)
{
    // CDDD;CDDD;110E 1170 11B8;CDDD;110E 1170 11B8; 
    // (췝; 췝; 췝; 췝; 췝; ) HANGUL SYLLABLE CWEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_086)
{
    // CDDE;CDDE;110E 1170 11B9;CDDE;110E 1170 11B9; 
    // (췞; 췞; 췞; 췞; 췞; ) HANGUL SYLLABLE CWEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_087)
{
    // CDDF;CDDF;110E 1170 11BA;CDDF;110E 1170 11BA; 
    // (췟; 췟; 췟; 췟; 췟; ) HANGUL SYLLABLE CWES
    {
        std::array<uint32_t, 1> const source = {{ 0xCDDF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDDF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_088)
{
    // CDE0;CDE0;110E 1170 11BB;CDE0;110E 1170 11BB; 
    // (췠; 췠; 췠; 췠; 췠; ) HANGUL SYLLABLE CWESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_089)
{
    // CDE1;CDE1;110E 1170 11BC;CDE1;110E 1170 11BC; 
    // (췡; 췡; 췡; 췡; 췡; ) HANGUL SYLLABLE CWENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_090)
{
    // CDE2;CDE2;110E 1170 11BD;CDE2;110E 1170 11BD; 
    // (췢; 췢; 췢; 췢; 췢; ) HANGUL SYLLABLE CWEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_091)
{
    // CDE3;CDE3;110E 1170 11BE;CDE3;110E 1170 11BE; 
    // (췣; 췣; 췣; 췣; 췣; ) HANGUL SYLLABLE CWEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_092)
{
    // CDE4;CDE4;110E 1170 11BF;CDE4;110E 1170 11BF; 
    // (췤; 췤; 췤; 췤; 췤; ) HANGUL SYLLABLE CWEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_093)
{
    // CDE5;CDE5;110E 1170 11C0;CDE5;110E 1170 11C0; 
    // (췥; 췥; 췥; 췥; 췥; ) HANGUL SYLLABLE CWET
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_094)
{
    // CDE6;CDE6;110E 1170 11C1;CDE6;110E 1170 11C1; 
    // (췦; 췦; 췦; 췦; 췦; ) HANGUL SYLLABLE CWEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_095)
{
    // CDE7;CDE7;110E 1170 11C2;CDE7;110E 1170 11C2; 
    // (췧; 췧; 췧; 췧; 췧; ) HANGUL SYLLABLE CWEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_096)
{
    // CDE8;CDE8;110E 1171;CDE8;110E 1171; 
    // (취; 취; 취; 취; 취; ) HANGUL SYLLABLE CWI
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_097)
{
    // CDE9;CDE9;110E 1171 11A8;CDE9;110E 1171 11A8; 
    // (췩; 췩; 췩; 췩; 췩; ) HANGUL SYLLABLE CWIG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDE9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDE9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_098)
{
    // CDEA;CDEA;110E 1171 11A9;CDEA;110E 1171 11A9; 
    // (췪; 췪; 췪; 췪; 췪; ) HANGUL SYLLABLE CWIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDEA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDEA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_099)
{
    // CDEB;CDEB;110E 1171 11AA;CDEB;110E 1171 11AA; 
    // (췫; 췫; 췫; 췫; 췫; ) HANGUL SYLLABLE CWIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDEB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDEB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_100)
{
    // CDEC;CDEC;110E 1171 11AB;CDEC;110E 1171 11AB; 
    // (췬; 췬; 췬; 췬; 췬; ) HANGUL SYLLABLE CWIN
    {
        std::array<uint32_t, 1> const source = {{ 0xCDEC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDEC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_101)
{
    // CDED;CDED;110E 1171 11AC;CDED;110E 1171 11AC; 
    // (췭; 췭; 췭; 췭; 췭; ) HANGUL SYLLABLE CWINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDED }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_102)
{
    // CDEE;CDEE;110E 1171 11AD;CDEE;110E 1171 11AD; 
    // (췮; 췮; 췮; 췮; 췮; ) HANGUL SYLLABLE CWINH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDEE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDEE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_103)
{
    // CDEF;CDEF;110E 1171 11AE;CDEF;110E 1171 11AE; 
    // (췯; 췯; 췯; 췯; 췯; ) HANGUL SYLLABLE CWID
    {
        std::array<uint32_t, 1> const source = {{ 0xCDEF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDEF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_104)
{
    // CDF0;CDF0;110E 1171 11AF;CDF0;110E 1171 11AF; 
    // (췰; 췰; 췰; 췰; 췰; ) HANGUL SYLLABLE CWIL
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_105)
{
    // CDF1;CDF1;110E 1171 11B0;CDF1;110E 1171 11B0; 
    // (췱; 췱; 췱; 췱; 췱; ) HANGUL SYLLABLE CWILG
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_106)
{
    // CDF2;CDF2;110E 1171 11B1;CDF2;110E 1171 11B1; 
    // (췲; 췲; 췲; 췲; 췲; ) HANGUL SYLLABLE CWILM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_107)
{
    // CDF3;CDF3;110E 1171 11B2;CDF3;110E 1171 11B2; 
    // (췳; 췳; 췳; 췳; 췳; ) HANGUL SYLLABLE CWILB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_108)
{
    // CDF4;CDF4;110E 1171 11B3;CDF4;110E 1171 11B3; 
    // (췴; 췴; 췴; 췴; 췴; ) HANGUL SYLLABLE CWILS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_109)
{
    // CDF5;CDF5;110E 1171 11B4;CDF5;110E 1171 11B4; 
    // (췵; 췵; 췵; 췵; 췵; ) HANGUL SYLLABLE CWILT
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_110)
{
    // CDF6;CDF6;110E 1171 11B5;CDF6;110E 1171 11B5; 
    // (췶; 췶; 췶; 췶; 췶; ) HANGUL SYLLABLE CWILP
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_111)
{
    // CDF7;CDF7;110E 1171 11B6;CDF7;110E 1171 11B6; 
    // (췷; 췷; 췷; 췷; 췷; ) HANGUL SYLLABLE CWILH
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_112)
{
    // CDF8;CDF8;110E 1171 11B7;CDF8;110E 1171 11B7; 
    // (췸; 췸; 췸; 췸; 췸; ) HANGUL SYLLABLE CWIM
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_113)
{
    // CDF9;CDF9;110E 1171 11B8;CDF9;110E 1171 11B8; 
    // (췹; 췹; 췹; 췹; 췹; ) HANGUL SYLLABLE CWIB
    {
        std::array<uint32_t, 1> const source = {{ 0xCDF9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDF9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_114)
{
    // CDFA;CDFA;110E 1171 11B9;CDFA;110E 1171 11B9; 
    // (췺; 췺; 췺; 췺; 췺; ) HANGUL SYLLABLE CWIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_115)
{
    // CDFB;CDFB;110E 1171 11BA;CDFB;110E 1171 11BA; 
    // (췻; 췻; 췻; 췻; 췻; ) HANGUL SYLLABLE CWIS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_116)
{
    // CDFC;CDFC;110E 1171 11BB;CDFC;110E 1171 11BB; 
    // (췼; 췼; 췼; 췼; 췼; ) HANGUL SYLLABLE CWISS
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_117)
{
    // CDFD;CDFD;110E 1171 11BC;CDFD;110E 1171 11BC; 
    // (췽; 췽; 췽; 췽; 췽; ) HANGUL SYLLABLE CWING
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_118)
{
    // CDFE;CDFE;110E 1171 11BD;CDFE;110E 1171 11BD; 
    // (췾; 췾; 췾; 췾; 췾; ) HANGUL SYLLABLE CWIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_119)
{
    // CDFF;CDFF;110E 1171 11BE;CDFF;110E 1171 11BE; 
    // (췿; 췿; 췿; 췿; 췿; ) HANGUL SYLLABLE CWIC
    {
        std::array<uint32_t, 1> const source = {{ 0xCDFF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCDFF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_120)
{
    // CE00;CE00;110E 1171 11BF;CE00;110E 1171 11BF; 
    // (츀; 츀; 츀; 츀; 츀; ) HANGUL SYLLABLE CWIK
    {
        std::array<uint32_t, 1> const source = {{ 0xCE00 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE00 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_121)
{
    // CE01;CE01;110E 1171 11C0;CE01;110E 1171 11C0; 
    // (츁; 츁; 츁; 츁; 츁; ) HANGUL SYLLABLE CWIT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE01 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE01 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_122)
{
    // CE02;CE02;110E 1171 11C1;CE02;110E 1171 11C1; 
    // (츂; 츂; 츂; 츂; 츂; ) HANGUL SYLLABLE CWIP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE02 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE02 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_123)
{
    // CE03;CE03;110E 1171 11C2;CE03;110E 1171 11C2; 
    // (츃; 츃; 츃; 츃; 츃; ) HANGUL SYLLABLE CWIH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE03 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE03 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_124)
{
    // CE04;CE04;110E 1172;CE04;110E 1172; 
    // (츄; 츄; 츄; 츄; 츄; ) HANGUL SYLLABLE CYU
    {
        std::array<uint32_t, 1> const source = {{ 0xCE04 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE04 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_125)
{
    // CE05;CE05;110E 1172 11A8;CE05;110E 1172 11A8; 
    // (츅; 츅; 츅; 츅; 츅; ) HANGUL SYLLABLE CYUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE05 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE05 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_126)
{
    // CE06;CE06;110E 1172 11A9;CE06;110E 1172 11A9; 
    // (츆; 츆; 츆; 츆; 츆; ) HANGUL SYLLABLE CYUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE06 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE06 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_127)
{
    // CE07;CE07;110E 1172 11AA;CE07;110E 1172 11AA; 
    // (츇; 츇; 츇; 츇; 츇; ) HANGUL SYLLABLE CYUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE07 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE07 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_128)
{
    // CE08;CE08;110E 1172 11AB;CE08;110E 1172 11AB; 
    // (츈; 츈; 츈; 츈; 츈; ) HANGUL SYLLABLE CYUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCE08 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE08 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_129)
{
    // CE09;CE09;110E 1172 11AC;CE09;110E 1172 11AC; 
    // (츉; 츉; 츉; 츉; 츉; ) HANGUL SYLLABLE CYUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCE09 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE09 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_130)
{
    // CE0A;CE0A;110E 1172 11AD;CE0A;110E 1172 11AD; 
    // (츊; 츊; 츊; 츊; 츊; ) HANGUL SYLLABLE CYUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_131)
{
    // CE0B;CE0B;110E 1172 11AE;CE0B;110E 1172 11AE; 
    // (츋; 츋; 츋; 츋; 츋; ) HANGUL SYLLABLE CYUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_132)
{
    // CE0C;CE0C;110E 1172 11AF;CE0C;110E 1172 11AF; 
    // (츌; 츌; 츌; 츌; 츌; ) HANGUL SYLLABLE CYUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_133)
{
    // CE0D;CE0D;110E 1172 11B0;CE0D;110E 1172 11B0; 
    // (츍; 츍; 츍; 츍; 츍; ) HANGUL SYLLABLE CYULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_134)
{
    // CE0E;CE0E;110E 1172 11B1;CE0E;110E 1172 11B1; 
    // (츎; 츎; 츎; 츎; 츎; ) HANGUL SYLLABLE CYULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_135)
{
    // CE0F;CE0F;110E 1172 11B2;CE0F;110E 1172 11B2; 
    // (츏; 츏; 츏; 츏; 츏; ) HANGUL SYLLABLE CYULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE0F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE0F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_136)
{
    // CE10;CE10;110E 1172 11B3;CE10;110E 1172 11B3; 
    // (츐; 츐; 츐; 츐; 츐; ) HANGUL SYLLABLE CYULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE10 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE10 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_137)
{
    // CE11;CE11;110E 1172 11B4;CE11;110E 1172 11B4; 
    // (츑; 츑; 츑; 츑; 츑; ) HANGUL SYLLABLE CYULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE11 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE11 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_138)
{
    // CE12;CE12;110E 1172 11B5;CE12;110E 1172 11B5; 
    // (츒; 츒; 츒; 츒; 츒; ) HANGUL SYLLABLE CYULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE12 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE12 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_139)
{
    // CE13;CE13;110E 1172 11B6;CE13;110E 1172 11B6; 
    // (츓; 츓; 츓; 츓; 츓; ) HANGUL SYLLABLE CYULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE13 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE13 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_140)
{
    // CE14;CE14;110E 1172 11B7;CE14;110E 1172 11B7; 
    // (츔; 츔; 츔; 츔; 츔; ) HANGUL SYLLABLE CYUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE14 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE14 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_141)
{
    // CE15;CE15;110E 1172 11B8;CE15;110E 1172 11B8; 
    // (츕; 츕; 츕; 츕; 츕; ) HANGUL SYLLABLE CYUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE15 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE15 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_142)
{
    // CE16;CE16;110E 1172 11B9;CE16;110E 1172 11B9; 
    // (츖; 츖; 츖; 츖; 츖; ) HANGUL SYLLABLE CYUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE16 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE16 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_143)
{
    // CE17;CE17;110E 1172 11BA;CE17;110E 1172 11BA; 
    // (츗; 츗; 츗; 츗; 츗; ) HANGUL SYLLABLE CYUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE17 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE17 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_144)
{
    // CE18;CE18;110E 1172 11BB;CE18;110E 1172 11BB; 
    // (츘; 츘; 츘; 츘; 츘; ) HANGUL SYLLABLE CYUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE18 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE18 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_145)
{
    // CE19;CE19;110E 1172 11BC;CE19;110E 1172 11BC; 
    // (츙; 츙; 츙; 츙; 츙; ) HANGUL SYLLABLE CYUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE19 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE19 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_146)
{
    // CE1A;CE1A;110E 1172 11BD;CE1A;110E 1172 11BD; 
    // (츚; 츚; 츚; 츚; 츚; ) HANGUL SYLLABLE CYUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_147)
{
    // CE1B;CE1B;110E 1172 11BE;CE1B;110E 1172 11BE; 
    // (츛; 츛; 츛; 츛; 츛; ) HANGUL SYLLABLE CYUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_148)
{
    // CE1C;CE1C;110E 1172 11BF;CE1C;110E 1172 11BF; 
    // (츜; 츜; 츜; 츜; 츜; ) HANGUL SYLLABLE CYUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_149)
{
    // CE1D;CE1D;110E 1172 11C0;CE1D;110E 1172 11C0; 
    // (츝; 츝; 츝; 츝; 츝; ) HANGUL SYLLABLE CYUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_150)
{
    // CE1E;CE1E;110E 1172 11C1;CE1E;110E 1172 11C1; 
    // (츞; 츞; 츞; 츞; 츞; ) HANGUL SYLLABLE CYUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_151)
{
    // CE1F;CE1F;110E 1172 11C2;CE1F;110E 1172 11C2; 
    // (츟; 츟; 츟; 츟; 츟; ) HANGUL SYLLABLE CYUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE1F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE1F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_152)
{
    // CE20;CE20;110E 1173;CE20;110E 1173; 
    // (츠; 츠; 츠; 츠; 츠; ) HANGUL SYLLABLE CEU
    {
        std::array<uint32_t, 1> const source = {{ 0xCE20 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE20 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_153)
{
    // CE21;CE21;110E 1173 11A8;CE21;110E 1173 11A8; 
    // (측; 측; 측; 측; 측; ) HANGUL SYLLABLE CEUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE21 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE21 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_154)
{
    // CE22;CE22;110E 1173 11A9;CE22;110E 1173 11A9; 
    // (츢; 츢; 츢; 츢; 츢; ) HANGUL SYLLABLE CEUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE22 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE22 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_155)
{
    // CE23;CE23;110E 1173 11AA;CE23;110E 1173 11AA; 
    // (츣; 츣; 츣; 츣; 츣; ) HANGUL SYLLABLE CEUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE23 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE23 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_156)
{
    // CE24;CE24;110E 1173 11AB;CE24;110E 1173 11AB; 
    // (츤; 츤; 츤; 츤; 츤; ) HANGUL SYLLABLE CEUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCE24 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE24 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_157)
{
    // CE25;CE25;110E 1173 11AC;CE25;110E 1173 11AC; 
    // (츥; 츥; 츥; 츥; 츥; ) HANGUL SYLLABLE CEUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCE25 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE25 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_158)
{
    // CE26;CE26;110E 1173 11AD;CE26;110E 1173 11AD; 
    // (츦; 츦; 츦; 츦; 츦; ) HANGUL SYLLABLE CEUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE26 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE26 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_159)
{
    // CE27;CE27;110E 1173 11AE;CE27;110E 1173 11AE; 
    // (츧; 츧; 츧; 츧; 츧; ) HANGUL SYLLABLE CEUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCE27 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE27 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_160)
{
    // CE28;CE28;110E 1173 11AF;CE28;110E 1173 11AF; 
    // (츨; 츨; 츨; 츨; 츨; ) HANGUL SYLLABLE CEUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCE28 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE28 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_161)
{
    // CE29;CE29;110E 1173 11B0;CE29;110E 1173 11B0; 
    // (츩; 츩; 츩; 츩; 츩; ) HANGUL SYLLABLE CEULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE29 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE29 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_162)
{
    // CE2A;CE2A;110E 1173 11B1;CE2A;110E 1173 11B1; 
    // (츪; 츪; 츪; 츪; 츪; ) HANGUL SYLLABLE CEULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_163)
{
    // CE2B;CE2B;110E 1173 11B2;CE2B;110E 1173 11B2; 
    // (츫; 츫; 츫; 츫; 츫; ) HANGUL SYLLABLE CEULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_164)
{
    // CE2C;CE2C;110E 1173 11B3;CE2C;110E 1173 11B3; 
    // (츬; 츬; 츬; 츬; 츬; ) HANGUL SYLLABLE CEULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_165)
{
    // CE2D;CE2D;110E 1173 11B4;CE2D;110E 1173 11B4; 
    // (츭; 츭; 츭; 츭; 츭; ) HANGUL SYLLABLE CEULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_166)
{
    // CE2E;CE2E;110E 1173 11B5;CE2E;110E 1173 11B5; 
    // (츮; 츮; 츮; 츮; 츮; ) HANGUL SYLLABLE CEULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_167)
{
    // CE2F;CE2F;110E 1173 11B6;CE2F;110E 1173 11B6; 
    // (츯; 츯; 츯; 츯; 츯; ) HANGUL SYLLABLE CEULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE2F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE2F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_168)
{
    // CE30;CE30;110E 1173 11B7;CE30;110E 1173 11B7; 
    // (츰; 츰; 츰; 츰; 츰; ) HANGUL SYLLABLE CEUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE30 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_169)
{
    // CE31;CE31;110E 1173 11B8;CE31;110E 1173 11B8; 
    // (츱; 츱; 츱; 츱; 츱; ) HANGUL SYLLABLE CEUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE31 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_170)
{
    // CE32;CE32;110E 1173 11B9;CE32;110E 1173 11B9; 
    // (츲; 츲; 츲; 츲; 츲; ) HANGUL SYLLABLE CEUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE32 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_171)
{
    // CE33;CE33;110E 1173 11BA;CE33;110E 1173 11BA; 
    // (츳; 츳; 츳; 츳; 츳; ) HANGUL SYLLABLE CEUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE33 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_172)
{
    // CE34;CE34;110E 1173 11BB;CE34;110E 1173 11BB; 
    // (츴; 츴; 츴; 츴; 츴; ) HANGUL SYLLABLE CEUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE34 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_173)
{
    // CE35;CE35;110E 1173 11BC;CE35;110E 1173 11BC; 
    // (층; 층; 층; 층; 층; ) HANGUL SYLLABLE CEUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE35 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_174)
{
    // CE36;CE36;110E 1173 11BD;CE36;110E 1173 11BD; 
    // (츶; 츶; 츶; 츶; 츶; ) HANGUL SYLLABLE CEUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCE36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE36 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_175)
{
    // CE37;CE37;110E 1173 11BE;CE37;110E 1173 11BE; 
    // (츷; 츷; 츷; 츷; 츷; ) HANGUL SYLLABLE CEUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCE37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE37 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_176)
{
    // CE38;CE38;110E 1173 11BF;CE38;110E 1173 11BF; 
    // (츸; 츸; 츸; 츸; 츸; ) HANGUL SYLLABLE CEUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCE38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE38 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_177)
{
    // CE39;CE39;110E 1173 11C0;CE39;110E 1173 11C0; 
    // (츹; 츹; 츹; 츹; 츹; ) HANGUL SYLLABLE CEUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE39 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_178)
{
    // CE3A;CE3A;110E 1173 11C1;CE3A;110E 1173 11C1; 
    // (츺; 츺; 츺; 츺; 츺; ) HANGUL SYLLABLE CEUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_179)
{
    // CE3B;CE3B;110E 1173 11C2;CE3B;110E 1173 11C2; 
    // (츻; 츻; 츻; 츻; 츻; ) HANGUL SYLLABLE CEUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_180)
{
    // CE3C;CE3C;110E 1174;CE3C;110E 1174; 
    // (츼; 츼; 츼; 츼; 츼; ) HANGUL SYLLABLE CYI
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_181)
{
    // CE3D;CE3D;110E 1174 11A8;CE3D;110E 1174 11A8; 
    // (츽; 츽; 츽; 츽; 츽; ) HANGUL SYLLABLE CYIG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_182)
{
    // CE3E;CE3E;110E 1174 11A9;CE3E;110E 1174 11A9; 
    // (츾; 츾; 츾; 츾; 츾; ) HANGUL SYLLABLE CYIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_183)
{
    // CE3F;CE3F;110E 1174 11AA;CE3F;110E 1174 11AA; 
    // (츿; 츿; 츿; 츿; 츿; ) HANGUL SYLLABLE CYIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE3F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_184)
{
    // CE40;CE40;110E 1174 11AB;CE40;110E 1174 11AB; 
    // (칀; 칀; 칀; 칀; 칀; ) HANGUL SYLLABLE CYIN
    {
        std::array<uint32_t, 1> const source = {{ 0xCE40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE40 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_185)
{
    // CE41;CE41;110E 1174 11AC;CE41;110E 1174 11AC; 
    // (칁; 칁; 칁; 칁; 칁; ) HANGUL SYLLABLE CYINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCE41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE41 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_186)
{
    // CE42;CE42;110E 1174 11AD;CE42;110E 1174 11AD; 
    // (칂; 칂; 칂; 칂; 칂; ) HANGUL SYLLABLE CYINH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE42 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_187)
{
    // CE43;CE43;110E 1174 11AE;CE43;110E 1174 11AE; 
    // (칃; 칃; 칃; 칃; 칃; ) HANGUL SYLLABLE CYID
    {
        std::array<uint32_t, 1> const source = {{ 0xCE43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE43 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_188)
{
    // CE44;CE44;110E 1174 11AF;CE44;110E 1174 11AF; 
    // (칄; 칄; 칄; 칄; 칄; ) HANGUL SYLLABLE CYIL
    {
        std::array<uint32_t, 1> const source = {{ 0xCE44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE44 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_189)
{
    // CE45;CE45;110E 1174 11B0;CE45;110E 1174 11B0; 
    // (칅; 칅; 칅; 칅; 칅; ) HANGUL SYLLABLE CYILG
    {
        std::array<uint32_t, 1> const source = {{ 0xCE45 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE45 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_190)
{
    // CE46;CE46;110E 1174 11B1;CE46;110E 1174 11B1; 
    // (칆; 칆; 칆; 칆; 칆; ) HANGUL SYLLABLE CYILM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE46 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE46 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_191)
{
    // CE47;CE47;110E 1174 11B2;CE47;110E 1174 11B2; 
    // (칇; 칇; 칇; 칇; 칇; ) HANGUL SYLLABLE CYILB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE47 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_192)
{
    // CE48;CE48;110E 1174 11B3;CE48;110E 1174 11B3; 
    // (칈; 칈; 칈; 칈; 칈; ) HANGUL SYLLABLE CYILS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE48 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_193)
{
    // CE49;CE49;110E 1174 11B4;CE49;110E 1174 11B4; 
    // (칉; 칉; 칉; 칉; 칉; ) HANGUL SYLLABLE CYILT
    {
        std::array<uint32_t, 1> const source = {{ 0xCE49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE49 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_194)
{
    // CE4A;CE4A;110E 1174 11B5;CE4A;110E 1174 11B5; 
    // (칊; 칊; 칊; 칊; 칊; ) HANGUL SYLLABLE CYILP
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_195)
{
    // CE4B;CE4B;110E 1174 11B6;CE4B;110E 1174 11B6; 
    // (칋; 칋; 칋; 칋; 칋; ) HANGUL SYLLABLE CYILH
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_196)
{
    // CE4C;CE4C;110E 1174 11B7;CE4C;110E 1174 11B7; 
    // (칌; 칌; 칌; 칌; 칌; ) HANGUL SYLLABLE CYIM
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_197)
{
    // CE4D;CE4D;110E 1174 11B8;CE4D;110E 1174 11B8; 
    // (칍; 칍; 칍; 칍; 칍; ) HANGUL SYLLABLE CYIB
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_198)
{
    // CE4E;CE4E;110E 1174 11B9;CE4E;110E 1174 11B9; 
    // (칎; 칎; 칎; 칎; 칎; ) HANGUL SYLLABLE CYIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_055_199)
{
    // CE4F;CE4F;110E 1174 11BA;CE4F;110E 1174 11BA; 
    // (칏; 칏; 칏; 칏; 칏; ) HANGUL SYLLABLE CYIS
    {
        std::array<uint32_t, 1> const source = {{ 0xCE4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCE4F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


