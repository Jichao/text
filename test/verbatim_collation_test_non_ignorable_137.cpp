// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_137_000)
{
    // 04D2 003F;	
    // (Ӓ) CYRILLIC CAPITAL LETTER A WITH DIAERESIS	[2088 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D2, 0x003F };
    uint32_t const ces[11] = { 0x2088, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_001)
{
    // 0430 0061;	
    // (а) CYRILLIC SMALL LETTER A	[2088 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0430, 0x0061 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_002)
{
    // 0430 0041;	
    // (а) CYRILLIC SMALL LETTER A	[2088 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0430, 0x0041 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_003)
{
    // 2DF6 0061;	
    // (ⷶ) COMBINING CYRILLIC LETTER A	[2088 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF6, 0x0061 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_004)
{
    // 2DF6 0041;	
    // (ⷶ) COMBINING CYRILLIC LETTER A	[2088 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF6, 0x0041 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_005)
{
    // 0410 0061;	
    // (А) CYRILLIC CAPITAL LETTER A	[2088 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0410, 0x0061 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_006)
{
    // 0410 0041;	
    // (А) CYRILLIC CAPITAL LETTER A	[2088 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0410, 0x0041 };
    uint32_t const ces[9] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_007)
{
    // 04D1 0061;	
    // (ӑ) CYRILLIC SMALL LETTER A WITH BREVE	[2088 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D1, 0x0061 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_008)
{
    // 04D1 0041;	
    // (ӑ) CYRILLIC SMALL LETTER A WITH BREVE	[2088 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04D1, 0x0041 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_009)
{
    // 04D0 0061;	
    // (Ӑ) CYRILLIC CAPITAL LETTER A WITH BREVE	[2088 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D0, 0x0061 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_010)
{
    // 04D0 0041;	
    // (Ӑ) CYRILLIC CAPITAL LETTER A WITH BREVE	[2088 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04D0, 0x0041 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_011)
{
    // 04D3 0061;	
    // (ӓ) CYRILLIC SMALL LETTER A WITH DIAERESIS	[2088 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D3, 0x0061 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_012)
{
    // 04D3 0041;	
    // (ӓ) CYRILLIC SMALL LETTER A WITH DIAERESIS	[2088 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04D3, 0x0041 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_013)
{
    // 04D2 0061;	
    // (Ӓ) CYRILLIC CAPITAL LETTER A WITH DIAERESIS	[2088 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D2, 0x0061 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_014)
{
    // 04D2 0041;	
    // (Ӓ) CYRILLIC CAPITAL LETTER A WITH DIAERESIS	[2088 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04D2, 0x0041 };
    uint32_t const ces[11] = { 0x2088, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_015)
{
    // 0430 0062;	
    // (а) CYRILLIC SMALL LETTER A	[2088 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0430, 0x0062 };
    uint32_t const ces[9] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_016)
{
    // 2DF6 0062;	
    // (ⷶ) COMBINING CYRILLIC LETTER A	[2088 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF6, 0x0062 };
    uint32_t const ces[9] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_017)
{
    // 0410 0062;	
    // (А) CYRILLIC CAPITAL LETTER A	[2088 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0410, 0x0062 };
    uint32_t const ces[9] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_018)
{
    // 04D1 0062;	
    // (ӑ) CYRILLIC SMALL LETTER A WITH BREVE	[2088 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D1, 0x0062 };
    uint32_t const ces[11] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_019)
{
    // 04D0 0062;	
    // (Ӑ) CYRILLIC CAPITAL LETTER A WITH BREVE	[2088 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D0, 0x0062 };
    uint32_t const ces[11] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_020)
{
    // 04D3 0062;	
    // (ӓ) CYRILLIC SMALL LETTER A WITH DIAERESIS	[2088 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D3, 0x0062 };
    uint32_t const ces[11] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_021)
{
    // 04D2 0062;	
    // (Ӓ) CYRILLIC CAPITAL LETTER A WITH DIAERESIS	[2088 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D2, 0x0062 };
    uint32_t const ces[11] = { 0x2088, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_022)
{
    // 04D9 0308 0334;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA, COMBINING DIAERESIS	[208C | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x04D9, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_023)
{
    // 04D9 0334 0308;	
    // (ә̴) CYRILLIC SMALL LETTER SCHWA, COMBINING TILDE OVERLAY	[208C | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x04D9, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_024)
{
    // 04DB 0334;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DB, 0x0334 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_025)
{
    // 04D8 0308 0334;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA, COMBINING DIAERESIS	[208C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x04D8, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_026)
{
    // 04D8 0334 0308;	
    // (Ә̴) CYRILLIC CAPITAL LETTER SCHWA, COMBINING TILDE OVERLAY	[208C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x04D8, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_027)
{
    // 04DA 0334;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DA, 0x0334 };
    uint32_t const ces[10] = { 0x208C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_028)
{
    // 04D9 0021;	
    // (ә) CYRILLIC SMALL LETTER SCHWA	[208C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D9, 0x0021 };
    uint32_t const ces[9] = { 0x208C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_029)
{
    // 04D8 0021;	
    // (Ә) CYRILLIC CAPITAL LETTER SCHWA	[208C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D8, 0x0021 };
    uint32_t const ces[9] = { 0x208C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_030)
{
    // 04DB 0021;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DB, 0x0021 };
    uint32_t const ces[11] = { 0x208C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_031)
{
    // 04DA 0021;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DA, 0x0021 };
    uint32_t const ces[11] = { 0x208C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_032)
{
    // 04D9 003F;	
    // (ә) CYRILLIC SMALL LETTER SCHWA	[208C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D9, 0x003F };
    uint32_t const ces[9] = { 0x208C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_033)
{
    // 04D8 003F;	
    // (Ә) CYRILLIC CAPITAL LETTER SCHWA	[208C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D8, 0x003F };
    uint32_t const ces[9] = { 0x208C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_034)
{
    // 04DB 003F;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DB, 0x003F };
    uint32_t const ces[11] = { 0x208C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_035)
{
    // 04DA 003F;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DA, 0x003F };
    uint32_t const ces[11] = { 0x208C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_036)
{
    // 04D9 0061;	
    // (ә) CYRILLIC SMALL LETTER SCHWA	[208C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D9, 0x0061 };
    uint32_t const ces[9] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_037)
{
    // 04D9 0041;	
    // (ә) CYRILLIC SMALL LETTER SCHWA	[208C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04D9, 0x0041 };
    uint32_t const ces[9] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_038)
{
    // 04D8 0061;	
    // (Ә) CYRILLIC CAPITAL LETTER SCHWA	[208C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D8, 0x0061 };
    uint32_t const ces[9] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_039)
{
    // 04D8 0041;	
    // (Ә) CYRILLIC CAPITAL LETTER SCHWA	[208C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04D8, 0x0041 };
    uint32_t const ces[9] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_040)
{
    // 04DB 0061;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DB, 0x0061 };
    uint32_t const ces[11] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_041)
{
    // 04DB 0041;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04DB, 0x0041 };
    uint32_t const ces[11] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_042)
{
    // 04DA 0061;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DA, 0x0061 };
    uint32_t const ces[11] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_043)
{
    // 04DA 0041;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04DA, 0x0041 };
    uint32_t const ces[11] = { 0x208C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_044)
{
    // 04D9 0062;	
    // (ә) CYRILLIC SMALL LETTER SCHWA	[208C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D9, 0x0062 };
    uint32_t const ces[9] = { 0x208C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_045)
{
    // 04D8 0062;	
    // (Ә) CYRILLIC CAPITAL LETTER SCHWA	[208C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D8, 0x0062 };
    uint32_t const ces[9] = { 0x208C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_046)
{
    // 04DB 0062;	
    // (ӛ) CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS	[208C 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DB, 0x0062 };
    uint32_t const ces[11] = { 0x208C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_047)
{
    // 04DA 0062;	
    // (Ӛ) CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS	[208C 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DA, 0x0062 };
    uint32_t const ces[11] = { 0x208C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_048)
{
    // 04D5 0021;	
    // (ӕ) CYRILLIC SMALL LIGATURE A IE	[2090 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D5, 0x0021 };
    uint32_t const ces[9] = { 0x2090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_049)
{
    // 04D4 0021;	
    // (Ӕ) CYRILLIC CAPITAL LIGATURE A IE	[2090 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D4, 0x0021 };
    uint32_t const ces[9] = { 0x2090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_050)
{
    // 04D5 003F;	
    // (ӕ) CYRILLIC SMALL LIGATURE A IE	[2090 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D5, 0x003F };
    uint32_t const ces[9] = { 0x2090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_051)
{
    // 04D4 003F;	
    // (Ӕ) CYRILLIC CAPITAL LIGATURE A IE	[2090 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D4, 0x003F };
    uint32_t const ces[9] = { 0x2090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_052)
{
    // 04D5 0061;	
    // (ӕ) CYRILLIC SMALL LIGATURE A IE	[2090 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D5, 0x0061 };
    uint32_t const ces[9] = { 0x2090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_053)
{
    // 04D5 0041;	
    // (ӕ) CYRILLIC SMALL LIGATURE A IE	[2090 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04D5, 0x0041 };
    uint32_t const ces[9] = { 0x2090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_054)
{
    // 04D4 0061;	
    // (Ӕ) CYRILLIC CAPITAL LIGATURE A IE	[2090 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D4, 0x0061 };
    uint32_t const ces[9] = { 0x2090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_055)
{
    // 04D4 0041;	
    // (Ӕ) CYRILLIC CAPITAL LIGATURE A IE	[2090 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04D4, 0x0041 };
    uint32_t const ces[9] = { 0x2090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_056)
{
    // 04D5 0062;	
    // (ӕ) CYRILLIC SMALL LIGATURE A IE	[2090 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04D5, 0x0062 };
    uint32_t const ces[9] = { 0x2090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_057)
{
    // 04D4 0062;	
    // (Ӕ) CYRILLIC CAPITAL LIGATURE A IE	[2090 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04D4, 0x0062 };
    uint32_t const ces[9] = { 0x2090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_058)
{
    // 0334 2DE0;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE0 };
    uint32_t const ces[8] = { 0x2094, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_059)
{
    // 2DE0 0334;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE0, 0x0334 };
    uint32_t const ces[8] = { 0x2094, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_060)
{
    // 0431 0021;	
    // (б) CYRILLIC SMALL LETTER BE	[2094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0431, 0x0021 };
    uint32_t const ces[9] = { 0x2094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_061)
{
    // 2DE0 0021;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE0, 0x0021 };
    uint32_t const ces[9] = { 0x2094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_062)
{
    // 0411 0021;	
    // (Б) CYRILLIC CAPITAL LETTER BE	[2094 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0411, 0x0021 };
    uint32_t const ces[9] = { 0x2094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_063)
{
    // 0431 003F;	
    // (б) CYRILLIC SMALL LETTER BE	[2094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0431, 0x003F };
    uint32_t const ces[9] = { 0x2094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_064)
{
    // 2DE0 003F;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE0, 0x003F };
    uint32_t const ces[9] = { 0x2094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_065)
{
    // 0411 003F;	
    // (Б) CYRILLIC CAPITAL LETTER BE	[2094 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0411, 0x003F };
    uint32_t const ces[9] = { 0x2094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_066)
{
    // 0431 0061;	
    // (б) CYRILLIC SMALL LETTER BE	[2094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0431, 0x0061 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_067)
{
    // 0431 0041;	
    // (б) CYRILLIC SMALL LETTER BE	[2094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0431, 0x0041 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_068)
{
    // 2DE0 0061;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE0, 0x0061 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_069)
{
    // 2DE0 0041;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE0, 0x0041 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_070)
{
    // 0411 0061;	
    // (Б) CYRILLIC CAPITAL LETTER BE	[2094 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0411, 0x0061 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_071)
{
    // 0411 0041;	
    // (Б) CYRILLIC CAPITAL LETTER BE	[2094 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0411, 0x0041 };
    uint32_t const ces[9] = { 0x2094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_072)
{
    // 0431 0062;	
    // (б) CYRILLIC SMALL LETTER BE	[2094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0431, 0x0062 };
    uint32_t const ces[9] = { 0x2094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_073)
{
    // 2DE0 0062;	
    // (ⷠ) COMBINING CYRILLIC LETTER BE	[2094 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE0, 0x0062 };
    uint32_t const ces[9] = { 0x2094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_074)
{
    // 0411 0062;	
    // (Б) CYRILLIC CAPITAL LETTER BE	[2094 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0411, 0x0062 };
    uint32_t const ces[9] = { 0x2094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_075)
{
    // 0334 2DE1;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE1 };
    uint32_t const ces[8] = { 0x2098, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_076)
{
    // 2DE1 0334;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE1, 0x0334 };
    uint32_t const ces[8] = { 0x2098, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_077)
{
    // 0432 0021;	
    // (в) CYRILLIC SMALL LETTER VE	[2098 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0432, 0x0021 };
    uint32_t const ces[9] = { 0x2098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_078)
{
    // 1C80 0021;	
    // (ᲀ) CYRILLIC SMALL LETTER ROUNDED VE	[2098 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C80, 0x0021 };
    uint32_t const ces[9] = { 0x2098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_079)
{
    // 2DE1 0021;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE1, 0x0021 };
    uint32_t const ces[9] = { 0x2098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_080)
{
    // 0412 0021;	
    // (В) CYRILLIC CAPITAL LETTER VE	[2098 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0412, 0x0021 };
    uint32_t const ces[9] = { 0x2098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_081)
{
    // 0432 003F;	
    // (в) CYRILLIC SMALL LETTER VE	[2098 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0432, 0x003F };
    uint32_t const ces[9] = { 0x2098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_082)
{
    // 1C80 003F;	
    // (ᲀ) CYRILLIC SMALL LETTER ROUNDED VE	[2098 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C80, 0x003F };
    uint32_t const ces[9] = { 0x2098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_083)
{
    // 2DE1 003F;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE1, 0x003F };
    uint32_t const ces[9] = { 0x2098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_084)
{
    // 0412 003F;	
    // (В) CYRILLIC CAPITAL LETTER VE	[2098 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0412, 0x003F };
    uint32_t const ces[9] = { 0x2098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_085)
{
    // 0432 0061;	
    // (в) CYRILLIC SMALL LETTER VE	[2098 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0432, 0x0061 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_086)
{
    // 0432 0041;	
    // (в) CYRILLIC SMALL LETTER VE	[2098 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0432, 0x0041 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_087)
{
    // 1C80 0061;	
    // (ᲀ) CYRILLIC SMALL LETTER ROUNDED VE	[2098 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C80, 0x0061 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_088)
{
    // 2DE1 0061;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE1, 0x0061 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_089)
{
    // 1C80 0041;	
    // (ᲀ) CYRILLIC SMALL LETTER ROUNDED VE	[2098 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1C80, 0x0041 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_090)
{
    // 2DE1 0041;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE1, 0x0041 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_091)
{
    // 0412 0061;	
    // (В) CYRILLIC CAPITAL LETTER VE	[2098 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0412, 0x0061 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_092)
{
    // 0412 0041;	
    // (В) CYRILLIC CAPITAL LETTER VE	[2098 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0412, 0x0041 };
    uint32_t const ces[9] = { 0x2098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_093)
{
    // 0432 0062;	
    // (в) CYRILLIC SMALL LETTER VE	[2098 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0432, 0x0062 };
    uint32_t const ces[9] = { 0x2098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_094)
{
    // 1C80 0062;	
    // (ᲀ) CYRILLIC SMALL LETTER ROUNDED VE	[2098 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C80, 0x0062 };
    uint32_t const ces[9] = { 0x2098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_095)
{
    // 2DE1 0062;	
    // (ⷡ) COMBINING CYRILLIC LETTER VE	[2098 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE1, 0x0062 };
    uint32_t const ces[9] = { 0x2098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_096)
{
    // 0412 0062;	
    // (В) CYRILLIC CAPITAL LETTER VE	[2098 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0412, 0x0062 };
    uint32_t const ces[9] = { 0x2098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_097)
{
    // 0433 0301 0334;	
    // (ѓ) CYRILLIC SMALL LETTER GHE, COMBINING ACUTE ACCENT	[209C | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0433, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_098)
{
    // 0433 0334 0301;	
    // (г̴) CYRILLIC SMALL LETTER GHE, COMBINING TILDE OVERLAY	[209C | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0433, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_099)
{
    // 0433 0334 0341;	
    // (г̴) CYRILLIC SMALL LETTER GHE, COMBINING TILDE OVERLAY	[209C | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0433, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_100)
{
    // 0453 0334;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0453, 0x0334 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_101)
{
    // 0403 0334;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0403, 0x0334 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_102)
{
    // 0413 0301 0334;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GHE, COMBINING ACUTE ACCENT	[209C | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0413, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_103)
{
    // 0413 0334 0301;	
    // (Г̴) CYRILLIC CAPITAL LETTER GHE, COMBINING TILDE OVERLAY	[209C | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0413, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_104)
{
    // 0413 0341 0334;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GHE, COMBINING ACUTE TONE MARK	[209C | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0413, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x209C, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_105)
{
    // 0334 2DE2;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE2 };
    uint32_t const ces[8] = { 0x209C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_106)
{
    // 2DE2 0334;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE2, 0x0334 };
    uint32_t const ces[8] = { 0x209C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_107)
{
    // 0433 0021;	
    // (г) CYRILLIC SMALL LETTER GHE	[209C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0433, 0x0021 };
    uint32_t const ces[9] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_108)
{
    // 2DE2 0021;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE2, 0x0021 };
    uint32_t const ces[9] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_109)
{
    // 0413 0021;	
    // (Г) CYRILLIC CAPITAL LETTER GHE	[209C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0413, 0x0021 };
    uint32_t const ces[9] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_110)
{
    // 0453 0021;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0453, 0x0021 };
    uint32_t const ces[11] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_111)
{
    // 0403 0021;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0403, 0x0021 };
    uint32_t const ces[11] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_112)
{
    // 0491 0021;	
    // (ґ) CYRILLIC SMALL LETTER GHE WITH UPTURN	[209C 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0491, 0x0021 };
    uint32_t const ces[11] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_113)
{
    // 0490 0021;	
    // (Ґ) CYRILLIC CAPITAL LETTER GHE WITH UPTURN	[209C 0261 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x0490, 0x0021 };
    uint32_t const ces[11] = { 0x209C, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_114)
{
    // 0433 003F;	
    // (г) CYRILLIC SMALL LETTER GHE	[209C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0433, 0x003F };
    uint32_t const ces[9] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_115)
{
    // 2DE2 003F;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE2, 0x003F };
    uint32_t const ces[9] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_116)
{
    // 0413 003F;	
    // (Г) CYRILLIC CAPITAL LETTER GHE	[209C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0413, 0x003F };
    uint32_t const ces[9] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_117)
{
    // 0453 003F;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0453, 0x003F };
    uint32_t const ces[11] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_118)
{
    // 0403 003F;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0403, 0x003F };
    uint32_t const ces[11] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_119)
{
    // 0491 003F;	
    // (ґ) CYRILLIC SMALL LETTER GHE WITH UPTURN	[209C 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0491, 0x003F };
    uint32_t const ces[11] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_120)
{
    // 0490 003F;	
    // (Ґ) CYRILLIC CAPITAL LETTER GHE WITH UPTURN	[209C 0267 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x0490, 0x003F };
    uint32_t const ces[11] = { 0x209C, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_121)
{
    // 0433 0061;	
    // (г) CYRILLIC SMALL LETTER GHE	[209C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0433, 0x0061 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_122)
{
    // 0433 0041;	
    // (г) CYRILLIC SMALL LETTER GHE	[209C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0433, 0x0041 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_123)
{
    // 2DE2 0061;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE2, 0x0061 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_124)
{
    // 2DE2 0041;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE2, 0x0041 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_125)
{
    // 0413 0061;	
    // (Г) CYRILLIC CAPITAL LETTER GHE	[209C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0413, 0x0061 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_126)
{
    // 0413 0041;	
    // (Г) CYRILLIC CAPITAL LETTER GHE	[209C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0413, 0x0041 };
    uint32_t const ces[9] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_127)
{
    // 0453 0061;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0453, 0x0061 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_128)
{
    // 0453 0041;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0453, 0x0041 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_129)
{
    // 0403 0061;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0403, 0x0061 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_130)
{
    // 0403 0041;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0403, 0x0041 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_131)
{
    // 0491 0061;	
    // (ґ) CYRILLIC SMALL LETTER GHE WITH UPTURN	[209C 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0491, 0x0061 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_132)
{
    // 0491 0041;	
    // (ґ) CYRILLIC SMALL LETTER GHE WITH UPTURN	[209C 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0491, 0x0041 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_133)
{
    // 0490 0061;	
    // (Ґ) CYRILLIC CAPITAL LETTER GHE WITH UPTURN	[209C 1CAD | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x0490, 0x0061 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_134)
{
    // 0490 0041;	
    // (Ґ) CYRILLIC CAPITAL LETTER GHE WITH UPTURN	[209C 1CAD | 0020 0112 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0x0490, 0x0041 };
    uint32_t const ces[11] = { 0x209C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_135)
{
    // 0433 0062;	
    // (г) CYRILLIC SMALL LETTER GHE	[209C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0433, 0x0062 };
    uint32_t const ces[9] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_136)
{
    // 2DE2 0062;	
    // (ⷢ) COMBINING CYRILLIC LETTER GHE	[209C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE2, 0x0062 };
    uint32_t const ces[9] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_137)
{
    // 0413 0062;	
    // (Г) CYRILLIC CAPITAL LETTER GHE	[209C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0413, 0x0062 };
    uint32_t const ces[9] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_138)
{
    // 0453 0062;	
    // (ѓ) CYRILLIC SMALL LETTER GJE	[209C 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0453, 0x0062 };
    uint32_t const ces[11] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_139)
{
    // 0403 0062;	
    // (Ѓ) CYRILLIC CAPITAL LETTER GJE	[209C 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0403, 0x0062 };
    uint32_t const ces[11] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_140)
{
    // 0491 0062;	
    // (ґ) CYRILLIC SMALL LETTER GHE WITH UPTURN	[209C 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0491, 0x0062 };
    uint32_t const ces[11] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_141)
{
    // 0490 0062;	
    // (Ґ) CYRILLIC CAPITAL LETTER GHE WITH UPTURN	[209C 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0x0490, 0x0062 };
    uint32_t const ces[11] = { 0x209C, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_142)
{
    // 0493 0021;	
    // (ғ) CYRILLIC SMALL LETTER GHE WITH STROKE	[20A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0493, 0x0021 };
    uint32_t const ces[9] = { 0x20A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_143)
{
    // 0492 0021;	
    // (Ғ) CYRILLIC CAPITAL LETTER GHE WITH STROKE	[20A0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0492, 0x0021 };
    uint32_t const ces[9] = { 0x20A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_144)
{
    // 0493 003F;	
    // (ғ) CYRILLIC SMALL LETTER GHE WITH STROKE	[20A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0493, 0x003F };
    uint32_t const ces[9] = { 0x20A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_145)
{
    // 0492 003F;	
    // (Ғ) CYRILLIC CAPITAL LETTER GHE WITH STROKE	[20A0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0492, 0x003F };
    uint32_t const ces[9] = { 0x20A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_146)
{
    // 0493 0061;	
    // (ғ) CYRILLIC SMALL LETTER GHE WITH STROKE	[20A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0493, 0x0061 };
    uint32_t const ces[9] = { 0x20A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_147)
{
    // 0493 0041;	
    // (ғ) CYRILLIC SMALL LETTER GHE WITH STROKE	[20A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0493, 0x0041 };
    uint32_t const ces[9] = { 0x20A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_148)
{
    // 0492 0061;	
    // (Ғ) CYRILLIC CAPITAL LETTER GHE WITH STROKE	[20A0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0492, 0x0061 };
    uint32_t const ces[9] = { 0x20A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_149)
{
    // 0492 0041;	
    // (Ғ) CYRILLIC CAPITAL LETTER GHE WITH STROKE	[20A0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0492, 0x0041 };
    uint32_t const ces[9] = { 0x20A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_150)
{
    // 0493 0062;	
    // (ғ) CYRILLIC SMALL LETTER GHE WITH STROKE	[20A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0493, 0x0062 };
    uint32_t const ces[9] = { 0x20A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_151)
{
    // 0492 0062;	
    // (Ғ) CYRILLIC CAPITAL LETTER GHE WITH STROKE	[20A0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0492, 0x0062 };
    uint32_t const ces[9] = { 0x20A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_152)
{
    // 04FB 0021;	
    // (ӻ) CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK	[20A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FB, 0x0021 };
    uint32_t const ces[9] = { 0x20A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_153)
{
    // 04FA 0021;	
    // (Ӻ) CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK	[20A4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FA, 0x0021 };
    uint32_t const ces[9] = { 0x20A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_154)
{
    // 04FB 003F;	
    // (ӻ) CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK	[20A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FB, 0x003F };
    uint32_t const ces[9] = { 0x20A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_155)
{
    // 04FA 003F;	
    // (Ӻ) CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK	[20A4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FA, 0x003F };
    uint32_t const ces[9] = { 0x20A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_156)
{
    // 04FB 0061;	
    // (ӻ) CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK	[20A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FB, 0x0061 };
    uint32_t const ces[9] = { 0x20A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_157)
{
    // 04FB 0041;	
    // (ӻ) CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK	[20A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04FB, 0x0041 };
    uint32_t const ces[9] = { 0x20A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_158)
{
    // 04FA 0061;	
    // (Ӻ) CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK	[20A4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FA, 0x0061 };
    uint32_t const ces[9] = { 0x20A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_159)
{
    // 04FA 0041;	
    // (Ӻ) CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK	[20A4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04FA, 0x0041 };
    uint32_t const ces[9] = { 0x20A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_160)
{
    // 04FB 0062;	
    // (ӻ) CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK	[20A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FB, 0x0062 };
    uint32_t const ces[9] = { 0x20A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_161)
{
    // 04FA 0062;	
    // (Ӻ) CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK	[20A4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FA, 0x0062 };
    uint32_t const ces[9] = { 0x20A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_162)
{
    // 0495 0021;	
    // (ҕ) CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK	[20A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0495, 0x0021 };
    uint32_t const ces[9] = { 0x20A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_163)
{
    // 0494 0021;	
    // (Ҕ) CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK	[20A8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0494, 0x0021 };
    uint32_t const ces[9] = { 0x20A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_164)
{
    // 0495 003F;	
    // (ҕ) CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK	[20A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0495, 0x003F };
    uint32_t const ces[9] = { 0x20A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_165)
{
    // 0494 003F;	
    // (Ҕ) CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK	[20A8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0494, 0x003F };
    uint32_t const ces[9] = { 0x20A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_166)
{
    // 0495 0061;	
    // (ҕ) CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK	[20A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0495, 0x0061 };
    uint32_t const ces[9] = { 0x20A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_167)
{
    // 0495 0041;	
    // (ҕ) CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK	[20A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0495, 0x0041 };
    uint32_t const ces[9] = { 0x20A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_168)
{
    // 0494 0061;	
    // (Ҕ) CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK	[20A8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0494, 0x0061 };
    uint32_t const ces[9] = { 0x20A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_169)
{
    // 0494 0041;	
    // (Ҕ) CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK	[20A8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0494, 0x0041 };
    uint32_t const ces[9] = { 0x20A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_170)
{
    // 0495 0062;	
    // (ҕ) CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK	[20A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0495, 0x0062 };
    uint32_t const ces[9] = { 0x20A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_171)
{
    // 0494 0062;	
    // (Ҕ) CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK	[20A8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0494, 0x0062 };
    uint32_t const ces[9] = { 0x20A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_172)
{
    // 04F7 0021;	
    // (ӷ) CYRILLIC SMALL LETTER GHE WITH DESCENDER	[20AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04F7, 0x0021 };
    uint32_t const ces[9] = { 0x20AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_173)
{
    // 04F6 0021;	
    // (Ӷ) CYRILLIC CAPITAL LETTER GHE WITH DESCENDER	[20AC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04F6, 0x0021 };
    uint32_t const ces[9] = { 0x20AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_174)
{
    // 04F7 003F;	
    // (ӷ) CYRILLIC SMALL LETTER GHE WITH DESCENDER	[20AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04F7, 0x003F };
    uint32_t const ces[9] = { 0x20AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_175)
{
    // 04F6 003F;	
    // (Ӷ) CYRILLIC CAPITAL LETTER GHE WITH DESCENDER	[20AC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04F6, 0x003F };
    uint32_t const ces[9] = { 0x20AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_176)
{
    // 04F7 0061;	
    // (ӷ) CYRILLIC SMALL LETTER GHE WITH DESCENDER	[20AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04F7, 0x0061 };
    uint32_t const ces[9] = { 0x20AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_177)
{
    // 04F7 0041;	
    // (ӷ) CYRILLIC SMALL LETTER GHE WITH DESCENDER	[20AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04F7, 0x0041 };
    uint32_t const ces[9] = { 0x20AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_178)
{
    // 04F6 0061;	
    // (Ӷ) CYRILLIC CAPITAL LETTER GHE WITH DESCENDER	[20AC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04F6, 0x0061 };
    uint32_t const ces[9] = { 0x20AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_179)
{
    // 04F6 0041;	
    // (Ӷ) CYRILLIC CAPITAL LETTER GHE WITH DESCENDER	[20AC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04F6, 0x0041 };
    uint32_t const ces[9] = { 0x20AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_180)
{
    // 04F7 0062;	
    // (ӷ) CYRILLIC SMALL LETTER GHE WITH DESCENDER	[20AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04F7, 0x0062 };
    uint32_t const ces[9] = { 0x20AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_181)
{
    // 04F6 0062;	
    // (Ӷ) CYRILLIC CAPITAL LETTER GHE WITH DESCENDER	[20AC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04F6, 0x0062 };
    uint32_t const ces[9] = { 0x20AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_182)
{
    // 0334 2DE3;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE3 };
    uint32_t const ces[8] = { 0x20B0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_183)
{
    // 2DE3 0334;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE3, 0x0334 };
    uint32_t const ces[8] = { 0x20B0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_184)
{
    // 0434 0021;	
    // (д) CYRILLIC SMALL LETTER DE	[20B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0434, 0x0021 };
    uint32_t const ces[9] = { 0x20B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_185)
{
    // 1C81 0021;	
    // (ᲁ) CYRILLIC SMALL LETTER LONG-LEGGED DE	[20B0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C81, 0x0021 };
    uint32_t const ces[9] = { 0x20B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_186)
{
    // 2DE3 0021;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE3, 0x0021 };
    uint32_t const ces[9] = { 0x20B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_187)
{
    // 0414 0021;	
    // (Д) CYRILLIC CAPITAL LETTER DE	[20B0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0414, 0x0021 };
    uint32_t const ces[9] = { 0x20B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_188)
{
    // 0434 003F;	
    // (д) CYRILLIC SMALL LETTER DE	[20B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0434, 0x003F };
    uint32_t const ces[9] = { 0x20B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_189)
{
    // 1C81 003F;	
    // (ᲁ) CYRILLIC SMALL LETTER LONG-LEGGED DE	[20B0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C81, 0x003F };
    uint32_t const ces[9] = { 0x20B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_190)
{
    // 2DE3 003F;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE3, 0x003F };
    uint32_t const ces[9] = { 0x20B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_191)
{
    // 0414 003F;	
    // (Д) CYRILLIC CAPITAL LETTER DE	[20B0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0414, 0x003F };
    uint32_t const ces[9] = { 0x20B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_192)
{
    // 0434 0061;	
    // (д) CYRILLIC SMALL LETTER DE	[20B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0434, 0x0061 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_193)
{
    // 0434 0041;	
    // (д) CYRILLIC SMALL LETTER DE	[20B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0434, 0x0041 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_194)
{
    // 1C81 0061;	
    // (ᲁ) CYRILLIC SMALL LETTER LONG-LEGGED DE	[20B0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C81, 0x0061 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_195)
{
    // 2DE3 0061;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE3, 0x0061 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_196)
{
    // 1C81 0041;	
    // (ᲁ) CYRILLIC SMALL LETTER LONG-LEGGED DE	[20B0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1C81, 0x0041 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_197)
{
    // 2DE3 0041;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE3, 0x0041 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_198)
{
    // 0414 0061;	
    // (Д) CYRILLIC CAPITAL LETTER DE	[20B0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0414, 0x0061 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_199)
{
    // 0414 0041;	
    // (Д) CYRILLIC CAPITAL LETTER DE	[20B0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0414, 0x0041 };
    uint32_t const ces[9] = { 0x20B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_200)
{
    // 0434 0062;	
    // (д) CYRILLIC SMALL LETTER DE	[20B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0434, 0x0062 };
    uint32_t const ces[9] = { 0x20B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_201)
{
    // 1C81 0062;	
    // (ᲁ) CYRILLIC SMALL LETTER LONG-LEGGED DE	[20B0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C81, 0x0062 };
    uint32_t const ces[9] = { 0x20B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_202)
{
    // 2DE3 0062;	
    // (ⷣ) COMBINING CYRILLIC LETTER DE	[20B0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE3, 0x0062 };
    uint32_t const ces[9] = { 0x20B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_203)
{
    // 0414 0062;	
    // (Д) CYRILLIC CAPITAL LETTER DE	[20B0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0414, 0x0062 };
    uint32_t const ces[9] = { 0x20B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_204)
{
    // 0501 0021;	
    // (ԁ) CYRILLIC SMALL LETTER KOMI DE	[20B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0501, 0x0021 };
    uint32_t const ces[9] = { 0x20B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_205)
{
    // 0500 0021;	
    // (Ԁ) CYRILLIC CAPITAL LETTER KOMI DE	[20B4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0500, 0x0021 };
    uint32_t const ces[9] = { 0x20B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_206)
{
    // 0501 003F;	
    // (ԁ) CYRILLIC SMALL LETTER KOMI DE	[20B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0501, 0x003F };
    uint32_t const ces[9] = { 0x20B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_207)
{
    // 0500 003F;	
    // (Ԁ) CYRILLIC CAPITAL LETTER KOMI DE	[20B4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0500, 0x003F };
    uint32_t const ces[9] = { 0x20B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_208)
{
    // 0501 0061;	
    // (ԁ) CYRILLIC SMALL LETTER KOMI DE	[20B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0501, 0x0061 };
    uint32_t const ces[9] = { 0x20B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_209)
{
    // 0501 0041;	
    // (ԁ) CYRILLIC SMALL LETTER KOMI DE	[20B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0501, 0x0041 };
    uint32_t const ces[9] = { 0x20B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_210)
{
    // 0500 0061;	
    // (Ԁ) CYRILLIC CAPITAL LETTER KOMI DE	[20B4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0500, 0x0061 };
    uint32_t const ces[9] = { 0x20B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_211)
{
    // 0500 0041;	
    // (Ԁ) CYRILLIC CAPITAL LETTER KOMI DE	[20B4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0500, 0x0041 };
    uint32_t const ces[9] = { 0x20B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_212)
{
    // 0501 0062;	
    // (ԁ) CYRILLIC SMALL LETTER KOMI DE	[20B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0501, 0x0062 };
    uint32_t const ces[9] = { 0x20B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_213)
{
    // 0500 0062;	
    // (Ԁ) CYRILLIC CAPITAL LETTER KOMI DE	[20B4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0500, 0x0062 };
    uint32_t const ces[9] = { 0x20B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_214)
{
    // A681 0021;	
    // (ꚁ) CYRILLIC SMALL LETTER DWE	[20B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA681, 0x0021 };
    uint32_t const ces[9] = { 0x20B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_215)
{
    // A680 0021;	
    // (Ꚁ) CYRILLIC CAPITAL LETTER DWE	[20B5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA680, 0x0021 };
    uint32_t const ces[9] = { 0x20B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_216)
{
    // A681 003F;	
    // (ꚁ) CYRILLIC SMALL LETTER DWE	[20B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA681, 0x003F };
    uint32_t const ces[9] = { 0x20B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_217)
{
    // A680 003F;	
    // (Ꚁ) CYRILLIC CAPITAL LETTER DWE	[20B5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA680, 0x003F };
    uint32_t const ces[9] = { 0x20B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_218)
{
    // A681 0061;	
    // (ꚁ) CYRILLIC SMALL LETTER DWE	[20B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA681, 0x0061 };
    uint32_t const ces[9] = { 0x20B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_219)
{
    // A681 0041;	
    // (ꚁ) CYRILLIC SMALL LETTER DWE	[20B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA681, 0x0041 };
    uint32_t const ces[9] = { 0x20B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_220)
{
    // A680 0061;	
    // (Ꚁ) CYRILLIC CAPITAL LETTER DWE	[20B5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA680, 0x0061 };
    uint32_t const ces[9] = { 0x20B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_221)
{
    // A680 0041;	
    // (Ꚁ) CYRILLIC CAPITAL LETTER DWE	[20B5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA680, 0x0041 };
    uint32_t const ces[9] = { 0x20B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_222)
{
    // A681 0062;	
    // (ꚁ) CYRILLIC SMALL LETTER DWE	[20B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA681, 0x0062 };
    uint32_t const ces[9] = { 0x20B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_223)
{
    // A680 0062;	
    // (Ꚁ) CYRILLIC CAPITAL LETTER DWE	[20B5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA680, 0x0062 };
    uint32_t const ces[9] = { 0x20B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_224)
{
    // 0452 0021;	
    // (ђ) CYRILLIC SMALL LETTER DJE	[20B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0452, 0x0021 };
    uint32_t const ces[9] = { 0x20B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_225)
{
    // 0402 0021;	
    // (Ђ) CYRILLIC CAPITAL LETTER DJE	[20B6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0402, 0x0021 };
    uint32_t const ces[9] = { 0x20B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_226)
{
    // 0452 003F;	
    // (ђ) CYRILLIC SMALL LETTER DJE	[20B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0452, 0x003F };
    uint32_t const ces[9] = { 0x20B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_227)
{
    // 0402 003F;	
    // (Ђ) CYRILLIC CAPITAL LETTER DJE	[20B6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0402, 0x003F };
    uint32_t const ces[9] = { 0x20B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_228)
{
    // 0452 0061;	
    // (ђ) CYRILLIC SMALL LETTER DJE	[20B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0452, 0x0061 };
    uint32_t const ces[9] = { 0x20B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_229)
{
    // 0452 0041;	
    // (ђ) CYRILLIC SMALL LETTER DJE	[20B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0452, 0x0041 };
    uint32_t const ces[9] = { 0x20B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_230)
{
    // 0402 0061;	
    // (Ђ) CYRILLIC CAPITAL LETTER DJE	[20B6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0402, 0x0061 };
    uint32_t const ces[9] = { 0x20B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_231)
{
    // 0402 0041;	
    // (Ђ) CYRILLIC CAPITAL LETTER DJE	[20B6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0402, 0x0041 };
    uint32_t const ces[9] = { 0x20B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_232)
{
    // 0452 0062;	
    // (ђ) CYRILLIC SMALL LETTER DJE	[20B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0452, 0x0062 };
    uint32_t const ces[9] = { 0x20B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_233)
{
    // 0402 0062;	
    // (Ђ) CYRILLIC CAPITAL LETTER DJE	[20B6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0402, 0x0062 };
    uint32_t const ces[9] = { 0x20B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_234)
{
    // A663 0021;	
    // (ꙣ) CYRILLIC SMALL LETTER SOFT DE	[20BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA663, 0x0021 };
    uint32_t const ces[9] = { 0x20BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_235)
{
    // A662 0021;	
    // (Ꙣ) CYRILLIC CAPITAL LETTER SOFT DE	[20BA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA662, 0x0021 };
    uint32_t const ces[9] = { 0x20BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_236)
{
    // A663 003F;	
    // (ꙣ) CYRILLIC SMALL LETTER SOFT DE	[20BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA663, 0x003F };
    uint32_t const ces[9] = { 0x20BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_237)
{
    // A662 003F;	
    // (Ꙣ) CYRILLIC CAPITAL LETTER SOFT DE	[20BA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA662, 0x003F };
    uint32_t const ces[9] = { 0x20BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_238)
{
    // A663 0061;	
    // (ꙣ) CYRILLIC SMALL LETTER SOFT DE	[20BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA663, 0x0061 };
    uint32_t const ces[9] = { 0x20BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_239)
{
    // A663 0041;	
    // (ꙣ) CYRILLIC SMALL LETTER SOFT DE	[20BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA663, 0x0041 };
    uint32_t const ces[9] = { 0x20BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_240)
{
    // A662 0061;	
    // (Ꙣ) CYRILLIC CAPITAL LETTER SOFT DE	[20BA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA662, 0x0061 };
    uint32_t const ces[9] = { 0x20BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_241)
{
    // A662 0041;	
    // (Ꙣ) CYRILLIC CAPITAL LETTER SOFT DE	[20BA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA662, 0x0041 };
    uint32_t const ces[9] = { 0x20BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_242)
{
    // A663 0062;	
    // (ꙣ) CYRILLIC SMALL LETTER SOFT DE	[20BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA663, 0x0062 };
    uint32_t const ces[9] = { 0x20BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_243)
{
    // A662 0062;	
    // (Ꙣ) CYRILLIC CAPITAL LETTER SOFT DE	[20BA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA662, 0x0062 };
    uint32_t const ces[9] = { 0x20BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_244)
{
    // 0503 0021;	
    // (ԃ) CYRILLIC SMALL LETTER KOMI DJE	[20BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0503, 0x0021 };
    uint32_t const ces[9] = { 0x20BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_245)
{
    // 0502 0021;	
    // (Ԃ) CYRILLIC CAPITAL LETTER KOMI DJE	[20BB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0502, 0x0021 };
    uint32_t const ces[9] = { 0x20BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_246)
{
    // 0503 003F;	
    // (ԃ) CYRILLIC SMALL LETTER KOMI DJE	[20BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0503, 0x003F };
    uint32_t const ces[9] = { 0x20BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_247)
{
    // 0502 003F;	
    // (Ԃ) CYRILLIC CAPITAL LETTER KOMI DJE	[20BB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0502, 0x003F };
    uint32_t const ces[9] = { 0x20BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_248)
{
    // 0503 0061;	
    // (ԃ) CYRILLIC SMALL LETTER KOMI DJE	[20BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0503, 0x0061 };
    uint32_t const ces[9] = { 0x20BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_249)
{
    // 0503 0041;	
    // (ԃ) CYRILLIC SMALL LETTER KOMI DJE	[20BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0503, 0x0041 };
    uint32_t const ces[9] = { 0x20BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_250)
{
    // 0502 0061;	
    // (Ԃ) CYRILLIC CAPITAL LETTER KOMI DJE	[20BB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0502, 0x0061 };
    uint32_t const ces[9] = { 0x20BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_251)
{
    // 0502 0041;	
    // (Ԃ) CYRILLIC CAPITAL LETTER KOMI DJE	[20BB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0502, 0x0041 };
    uint32_t const ces[9] = { 0x20BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_252)
{
    // 0503 0062;	
    // (ԃ) CYRILLIC SMALL LETTER KOMI DJE	[20BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0503, 0x0062 };
    uint32_t const ces[9] = { 0x20BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_253)
{
    // 0502 0062;	
    // (Ԃ) CYRILLIC CAPITAL LETTER KOMI DJE	[20BB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0502, 0x0062 };
    uint32_t const ces[9] = { 0x20BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_254)
{
    // 0499 0021;	
    // (ҙ) CYRILLIC SMALL LETTER ZE WITH DESCENDER	[20BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0499, 0x0021 };
    uint32_t const ces[9] = { 0x20BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_255)
{
    // 0498 0021;	
    // (Ҙ) CYRILLIC CAPITAL LETTER ZE WITH DESCENDER	[20BC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0498, 0x0021 };
    uint32_t const ces[9] = { 0x20BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_256)
{
    // 0499 003F;	
    // (ҙ) CYRILLIC SMALL LETTER ZE WITH DESCENDER	[20BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0499, 0x003F };
    uint32_t const ces[9] = { 0x20BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_257)
{
    // 0498 003F;	
    // (Ҙ) CYRILLIC CAPITAL LETTER ZE WITH DESCENDER	[20BC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0498, 0x003F };
    uint32_t const ces[9] = { 0x20BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_258)
{
    // 0499 0061;	
    // (ҙ) CYRILLIC SMALL LETTER ZE WITH DESCENDER	[20BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0499, 0x0061 };
    uint32_t const ces[9] = { 0x20BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_259)
{
    // 0499 0041;	
    // (ҙ) CYRILLIC SMALL LETTER ZE WITH DESCENDER	[20BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0499, 0x0041 };
    uint32_t const ces[9] = { 0x20BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_260)
{
    // 0498 0061;	
    // (Ҙ) CYRILLIC CAPITAL LETTER ZE WITH DESCENDER	[20BC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0498, 0x0061 };
    uint32_t const ces[9] = { 0x20BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_261)
{
    // 0498 0041;	
    // (Ҙ) CYRILLIC CAPITAL LETTER ZE WITH DESCENDER	[20BC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0498, 0x0041 };
    uint32_t const ces[9] = { 0x20BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_262)
{
    // 0499 0062;	
    // (ҙ) CYRILLIC SMALL LETTER ZE WITH DESCENDER	[20BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0499, 0x0062 };
    uint32_t const ces[9] = { 0x20BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_263)
{
    // 0498 0062;	
    // (Ҙ) CYRILLIC CAPITAL LETTER ZE WITH DESCENDER	[20BC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0498, 0x0062 };
    uint32_t const ces[9] = { 0x20BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_264)
{
    // 0435 0300 0334;	
    // (ѐ) CYRILLIC SMALL LETTER IE, COMBINING GRAVE ACCENT	[20C0 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_265)
{
    // 0435 0334 0300;	
    // (е̴) CYRILLIC SMALL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_266)
{
    // 0435 0334 0340;	
    // (е̴) CYRILLIC SMALL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_267)
{
    // 0450 0334;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0450, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_268)
{
    // 0400 0334;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0400, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_269)
{
    // 0415 0300 0334;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE, COMBINING GRAVE ACCENT	[20C0 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_270)
{
    // 0415 0334 0300;	
    // (Е̴) CYRILLIC CAPITAL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_271)
{
    // 0415 0340 0334;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE, COMBINING GRAVE TONE MARK	[20C0 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_272)
{
    // 0435 0306 0334;	
    // (ӗ) CYRILLIC SMALL LETTER IE, COMBINING BREVE	[20C0 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_273)
{
    // 0435 0334 0306;	
    // (е̴) CYRILLIC SMALL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_274)
{
    // 04D7 0334;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D7, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_275)
{
    // 0415 0306 0334;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE, COMBINING BREVE	[20C0 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_276)
{
    // 0415 0334 0306;	
    // (Е̴) CYRILLIC CAPITAL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_277)
{
    // 04D6 0334;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D6, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_278)
{
    // 0435 0308 0334;	
    // (ё) CYRILLIC SMALL LETTER IE, COMBINING DIAERESIS	[20C0 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_279)
{
    // 0435 0334 0308;	
    // (е̴) CYRILLIC SMALL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0435, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_280)
{
    // 0451 0334;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0451, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_281)
{
    // 0401 0334;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0401, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_282)
{
    // 0415 0308 0334;	
    // (Ё) CYRILLIC CAPITAL LETTER IE, COMBINING DIAERESIS	[20C0 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_283)
{
    // 0415 0334 0308;	
    // (Е̴) CYRILLIC CAPITAL LETTER IE, COMBINING TILDE OVERLAY	[20C0 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0415, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20C0, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_284)
{
    // 0334 2DF7;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF7 };
    uint32_t const ces[8] = { 0x20C0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_285)
{
    // 2DF7 0334;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF7, 0x0334 };
    uint32_t const ces[8] = { 0x20C0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_286)
{
    // 0435 0021;	
    // (е) CYRILLIC SMALL LETTER IE	[20C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0435, 0x0021 };
    uint32_t const ces[9] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_287)
{
    // 2DF7 0021;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF7, 0x0021 };
    uint32_t const ces[9] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_288)
{
    // 0415 0021;	
    // (Е) CYRILLIC CAPITAL LETTER IE	[20C0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0415, 0x0021 };
    uint32_t const ces[9] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_289)
{
    // 0450 0021;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0450, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_290)
{
    // 0400 0021;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0400, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_291)
{
    // 04D7 0021;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D7, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_292)
{
    // 04D6 0021;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D6, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_293)
{
    // 0451 0021;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0451, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_294)
{
    // 0401 0021;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0401, 0x0021 };
    uint32_t const ces[11] = { 0x20C0, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_295)
{
    // 0435 003F;	
    // (е) CYRILLIC SMALL LETTER IE	[20C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0435, 0x003F };
    uint32_t const ces[9] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_296)
{
    // 2DF7 003F;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF7, 0x003F };
    uint32_t const ces[9] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_297)
{
    // 0415 003F;	
    // (Е) CYRILLIC CAPITAL LETTER IE	[20C0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0415, 0x003F };
    uint32_t const ces[9] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_298)
{
    // 0450 003F;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0450, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_299)
{
    // 0400 003F;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0400, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_300)
{
    // 04D7 003F;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D7, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_301)
{
    // 04D6 003F;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D6, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_302)
{
    // 0451 003F;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0451, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_303)
{
    // 0401 003F;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0401, 0x003F };
    uint32_t const ces[11] = { 0x20C0, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_304)
{
    // 0435 0061;	
    // (е) CYRILLIC SMALL LETTER IE	[20C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0435, 0x0061 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_305)
{
    // 0435 0041;	
    // (е) CYRILLIC SMALL LETTER IE	[20C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0435, 0x0041 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_306)
{
    // 2DF7 0061;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF7, 0x0061 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_307)
{
    // 2DF7 0041;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF7, 0x0041 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_308)
{
    // 0415 0061;	
    // (Е) CYRILLIC CAPITAL LETTER IE	[20C0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0415, 0x0061 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_309)
{
    // 0415 0041;	
    // (Е) CYRILLIC CAPITAL LETTER IE	[20C0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0415, 0x0041 };
    uint32_t const ces[9] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_310)
{
    // 0450 0061;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0450, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_311)
{
    // 0450 0041;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0450, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_312)
{
    // 0400 0061;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0400, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_313)
{
    // 0400 0041;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0400, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_314)
{
    // 04D7 0061;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D7, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_315)
{
    // 04D7 0041;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04D7, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_316)
{
    // 04D6 0061;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D6, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_317)
{
    // 04D6 0041;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04D6, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_318)
{
    // 0451 0061;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0451, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_319)
{
    // 0451 0041;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0451, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_320)
{
    // 0401 0061;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0401, 0x0061 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_321)
{
    // 0401 0041;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0401, 0x0041 };
    uint32_t const ces[11] = { 0x20C0, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_322)
{
    // 0435 0062;	
    // (е) CYRILLIC SMALL LETTER IE	[20C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0435, 0x0062 };
    uint32_t const ces[9] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_323)
{
    // 2DF7 0062;	
    // (ⷷ) COMBINING CYRILLIC LETTER IE	[20C0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF7, 0x0062 };
    uint32_t const ces[9] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_324)
{
    // 0415 0062;	
    // (Е) CYRILLIC CAPITAL LETTER IE	[20C0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0415, 0x0062 };
    uint32_t const ces[9] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_325)
{
    // 0450 0062;	
    // (ѐ) CYRILLIC SMALL LETTER IE WITH GRAVE	[20C0 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0450, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_326)
{
    // 0400 0062;	
    // (Ѐ) CYRILLIC CAPITAL LETTER IE WITH GRAVE	[20C0 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0400, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_327)
{
    // 04D7 0062;	
    // (ӗ) CYRILLIC SMALL LETTER IE WITH BREVE	[20C0 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04D7, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_328)
{
    // 04D6 0062;	
    // (Ӗ) CYRILLIC CAPITAL LETTER IE WITH BREVE	[20C0 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04D6, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_329)
{
    // 0451 0062;	
    // (ё) CYRILLIC SMALL LETTER IO	[20C0 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0451, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_330)
{
    // 0401 0062;	
    // (Ё) CYRILLIC CAPITAL LETTER IO	[20C0 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0401, 0x0062 };
    uint32_t const ces[11] = { 0x20C0, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_331)
{
    // 0334 A674;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA674 };
    uint32_t const ces[8] = { 0x20C4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_332)
{
    // A674 0334;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA674, 0x0334 };
    uint32_t const ces[8] = { 0x20C4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_333)
{
    // 0454 0021;	
    // (є) CYRILLIC SMALL LETTER UKRAINIAN IE	[20C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0454, 0x0021 };
    uint32_t const ces[9] = { 0x20C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_334)
{
    // A674 0021;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA674, 0x0021 };
    uint32_t const ces[9] = { 0x20C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_335)
{
    // 0404 0021;	
    // (Є) CYRILLIC CAPITAL LETTER UKRAINIAN IE	[20C4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0404, 0x0021 };
    uint32_t const ces[9] = { 0x20C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_336)
{
    // 0454 003F;	
    // (є) CYRILLIC SMALL LETTER UKRAINIAN IE	[20C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0454, 0x003F };
    uint32_t const ces[9] = { 0x20C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_337)
{
    // A674 003F;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA674, 0x003F };
    uint32_t const ces[9] = { 0x20C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_338)
{
    // 0404 003F;	
    // (Є) CYRILLIC CAPITAL LETTER UKRAINIAN IE	[20C4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0404, 0x003F };
    uint32_t const ces[9] = { 0x20C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_339)
{
    // 0454 0061;	
    // (є) CYRILLIC SMALL LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0454, 0x0061 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_340)
{
    // 0454 0041;	
    // (є) CYRILLIC SMALL LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0454, 0x0041 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_341)
{
    // A674 0061;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA674, 0x0061 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_342)
{
    // A674 0041;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA674, 0x0041 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_343)
{
    // 0404 0061;	
    // (Є) CYRILLIC CAPITAL LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0404, 0x0061 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_344)
{
    // 0404 0041;	
    // (Є) CYRILLIC CAPITAL LETTER UKRAINIAN IE	[20C4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0404, 0x0041 };
    uint32_t const ces[9] = { 0x20C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_345)
{
    // 0454 0062;	
    // (є) CYRILLIC SMALL LETTER UKRAINIAN IE	[20C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0454, 0x0062 };
    uint32_t const ces[9] = { 0x20C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_346)
{
    // A674 0062;	
    // (ꙴ) COMBINING CYRILLIC LETTER UKRAINIAN IE	[20C4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA674, 0x0062 };
    uint32_t const ces[9] = { 0x20C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_347)
{
    // 0404 0062;	
    // (Є) CYRILLIC CAPITAL LETTER UKRAINIAN IE	[20C4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0404, 0x0062 };
    uint32_t const ces[9] = { 0x20C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_348)
{
    // 0436 0306 0334;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE, COMBINING BREVE	[20C8 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0436, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_349)
{
    // 0436 0334 0306;	
    // (ж̴) CYRILLIC SMALL LETTER ZHE, COMBINING TILDE OVERLAY	[20C8 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0436, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_350)
{
    // 04C2 0334;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04C2, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_351)
{
    // 0416 0306 0334;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE, COMBINING BREVE	[20C8 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0416, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_352)
{
    // 0416 0334 0306;	
    // (Ж̴) CYRILLIC CAPITAL LETTER ZHE, COMBINING TILDE OVERLAY	[20C8 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0416, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_353)
{
    // 04C1 0334;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04C1, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_354)
{
    // 0436 0308 0334;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE, COMBINING DIAERESIS	[20C8 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0436, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_355)
{
    // 0436 0334 0308;	
    // (ж̴) CYRILLIC SMALL LETTER ZHE, COMBINING TILDE OVERLAY	[20C8 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0436, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_356)
{
    // 04DD 0334;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DD, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_357)
{
    // 0416 0308 0334;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE, COMBINING DIAERESIS	[20C8 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0416, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_358)
{
    // 0416 0334 0308;	
    // (Ж̴) CYRILLIC CAPITAL LETTER ZHE, COMBINING TILDE OVERLAY	[20C8 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0416, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_359)
{
    // 04DC 0334;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DC, 0x0334 };
    uint32_t const ces[10] = { 0x20C8, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_360)
{
    // 0334 2DE4;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE4 };
    uint32_t const ces[8] = { 0x20C8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_361)
{
    // 2DE4 0334;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE4, 0x0334 };
    uint32_t const ces[8] = { 0x20C8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_362)
{
    // 0436 0021;	
    // (ж) CYRILLIC SMALL LETTER ZHE	[20C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0436, 0x0021 };
    uint32_t const ces[9] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_363)
{
    // 2DE4 0021;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE4, 0x0021 };
    uint32_t const ces[9] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_364)
{
    // 0416 0021;	
    // (Ж) CYRILLIC CAPITAL LETTER ZHE	[20C8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0416, 0x0021 };
    uint32_t const ces[9] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_365)
{
    // 04C2 0021;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04C2, 0x0021 };
    uint32_t const ces[11] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_366)
{
    // 04C1 0021;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04C1, 0x0021 };
    uint32_t const ces[11] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_367)
{
    // 04DD 0021;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DD, 0x0021 };
    uint32_t const ces[11] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_368)
{
    // 04DC 0021;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DC, 0x0021 };
    uint32_t const ces[11] = { 0x20C8, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_369)
{
    // 0436 003F;	
    // (ж) CYRILLIC SMALL LETTER ZHE	[20C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0436, 0x003F };
    uint32_t const ces[9] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_370)
{
    // 2DE4 003F;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE4, 0x003F };
    uint32_t const ces[9] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_371)
{
    // 0416 003F;	
    // (Ж) CYRILLIC CAPITAL LETTER ZHE	[20C8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0416, 0x003F };
    uint32_t const ces[9] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_372)
{
    // 04C2 003F;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04C2, 0x003F };
    uint32_t const ces[11] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_373)
{
    // 04C1 003F;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04C1, 0x003F };
    uint32_t const ces[11] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_374)
{
    // 04DD 003F;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DD, 0x003F };
    uint32_t const ces[11] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_375)
{
    // 04DC 003F;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DC, 0x003F };
    uint32_t const ces[11] = { 0x20C8, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_376)
{
    // 0436 0061;	
    // (ж) CYRILLIC SMALL LETTER ZHE	[20C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0436, 0x0061 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_377)
{
    // 0436 0041;	
    // (ж) CYRILLIC SMALL LETTER ZHE	[20C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0436, 0x0041 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_378)
{
    // 2DE4 0061;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE4, 0x0061 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_379)
{
    // 2DE4 0041;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE4, 0x0041 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_380)
{
    // 0416 0061;	
    // (Ж) CYRILLIC CAPITAL LETTER ZHE	[20C8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0416, 0x0061 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_381)
{
    // 0416 0041;	
    // (Ж) CYRILLIC CAPITAL LETTER ZHE	[20C8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0416, 0x0041 };
    uint32_t const ces[9] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_382)
{
    // 04C2 0061;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04C2, 0x0061 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_383)
{
    // 04C2 0041;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04C2, 0x0041 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_384)
{
    // 04C1 0061;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04C1, 0x0061 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_385)
{
    // 04C1 0041;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04C1, 0x0041 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_386)
{
    // 04DD 0061;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DD, 0x0061 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_387)
{
    // 04DD 0041;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04DD, 0x0041 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_388)
{
    // 04DC 0061;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DC, 0x0061 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_389)
{
    // 04DC 0041;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04DC, 0x0041 };
    uint32_t const ces[11] = { 0x20C8, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_390)
{
    // 0436 0062;	
    // (ж) CYRILLIC SMALL LETTER ZHE	[20C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0436, 0x0062 };
    uint32_t const ces[9] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_391)
{
    // 2DE4 0062;	
    // (ⷤ) COMBINING CYRILLIC LETTER ZHE	[20C8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE4, 0x0062 };
    uint32_t const ces[9] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_392)
{
    // 0416 0062;	
    // (Ж) CYRILLIC CAPITAL LETTER ZHE	[20C8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0416, 0x0062 };
    uint32_t const ces[9] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_393)
{
    // 04C2 0062;	
    // (ӂ) CYRILLIC SMALL LETTER ZHE WITH BREVE	[20C8 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04C2, 0x0062 };
    uint32_t const ces[11] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_394)
{
    // 04C1 0062;	
    // (Ӂ) CYRILLIC CAPITAL LETTER ZHE WITH BREVE	[20C8 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04C1, 0x0062 };
    uint32_t const ces[11] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_395)
{
    // 04DD 0062;	
    // (ӝ) CYRILLIC SMALL LETTER ZHE WITH DIAERESIS	[20C8 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DD, 0x0062 };
    uint32_t const ces[11] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_396)
{
    // 04DC 0062;	
    // (Ӝ) CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS	[20C8 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DC, 0x0062 };
    uint32_t const ces[11] = { 0x20C8, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_397)
{
    // 052B 0021;	
    // (ԫ) CYRILLIC SMALL LETTER DZZHE	[20CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052B, 0x0021 };
    uint32_t const ces[9] = { 0x20CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_398)
{
    // 052A 0021;	
    // (Ԫ) CYRILLIC CAPITAL LETTER DZZHE	[20CC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052A, 0x0021 };
    uint32_t const ces[9] = { 0x20CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_399)
{
    // 052B 003F;	
    // (ԫ) CYRILLIC SMALL LETTER DZZHE	[20CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052B, 0x003F };
    uint32_t const ces[9] = { 0x20CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_400)
{
    // 052A 003F;	
    // (Ԫ) CYRILLIC CAPITAL LETTER DZZHE	[20CC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052A, 0x003F };
    uint32_t const ces[9] = { 0x20CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_401)
{
    // 052B 0061;	
    // (ԫ) CYRILLIC SMALL LETTER DZZHE	[20CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052B, 0x0061 };
    uint32_t const ces[9] = { 0x20CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_402)
{
    // 052B 0041;	
    // (ԫ) CYRILLIC SMALL LETTER DZZHE	[20CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x052B, 0x0041 };
    uint32_t const ces[9] = { 0x20CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_403)
{
    // 052A 0061;	
    // (Ԫ) CYRILLIC CAPITAL LETTER DZZHE	[20CC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052A, 0x0061 };
    uint32_t const ces[9] = { 0x20CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_404)
{
    // 052A 0041;	
    // (Ԫ) CYRILLIC CAPITAL LETTER DZZHE	[20CC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x052A, 0x0041 };
    uint32_t const ces[9] = { 0x20CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_405)
{
    // 052B 0062;	
    // (ԫ) CYRILLIC SMALL LETTER DZZHE	[20CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052B, 0x0062 };
    uint32_t const ces[9] = { 0x20CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_406)
{
    // 052A 0062;	
    // (Ԫ) CYRILLIC CAPITAL LETTER DZZHE	[20CC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052A, 0x0062 };
    uint32_t const ces[9] = { 0x20CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_407)
{
    // A685 0021;	
    // (ꚅ) CYRILLIC SMALL LETTER ZHWE	[20CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA685, 0x0021 };
    uint32_t const ces[9] = { 0x20CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_408)
{
    // A684 0021;	
    // (Ꚅ) CYRILLIC CAPITAL LETTER ZHWE	[20CD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA684, 0x0021 };
    uint32_t const ces[9] = { 0x20CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_409)
{
    // A685 003F;	
    // (ꚅ) CYRILLIC SMALL LETTER ZHWE	[20CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA685, 0x003F };
    uint32_t const ces[9] = { 0x20CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_410)
{
    // A684 003F;	
    // (Ꚅ) CYRILLIC CAPITAL LETTER ZHWE	[20CD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA684, 0x003F };
    uint32_t const ces[9] = { 0x20CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_411)
{
    // A685 0061;	
    // (ꚅ) CYRILLIC SMALL LETTER ZHWE	[20CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA685, 0x0061 };
    uint32_t const ces[9] = { 0x20CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_412)
{
    // A685 0041;	
    // (ꚅ) CYRILLIC SMALL LETTER ZHWE	[20CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA685, 0x0041 };
    uint32_t const ces[9] = { 0x20CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_413)
{
    // A684 0061;	
    // (Ꚅ) CYRILLIC CAPITAL LETTER ZHWE	[20CD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA684, 0x0061 };
    uint32_t const ces[9] = { 0x20CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_414)
{
    // A684 0041;	
    // (Ꚅ) CYRILLIC CAPITAL LETTER ZHWE	[20CD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA684, 0x0041 };
    uint32_t const ces[9] = { 0x20CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_415)
{
    // A685 0062;	
    // (ꚅ) CYRILLIC SMALL LETTER ZHWE	[20CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA685, 0x0062 };
    uint32_t const ces[9] = { 0x20CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_416)
{
    // A684 0062;	
    // (Ꚅ) CYRILLIC CAPITAL LETTER ZHWE	[20CD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA684, 0x0062 };
    uint32_t const ces[9] = { 0x20CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_417)
{
    // 0497 0021;	
    // (җ) CYRILLIC SMALL LETTER ZHE WITH DESCENDER	[20CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0497, 0x0021 };
    uint32_t const ces[9] = { 0x20CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_418)
{
    // 0496 0021;	
    // (Җ) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER	[20CE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0496, 0x0021 };
    uint32_t const ces[9] = { 0x20CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_419)
{
    // 0497 003F;	
    // (җ) CYRILLIC SMALL LETTER ZHE WITH DESCENDER	[20CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0497, 0x003F };
    uint32_t const ces[9] = { 0x20CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_420)
{
    // 0496 003F;	
    // (Җ) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER	[20CE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0496, 0x003F };
    uint32_t const ces[9] = { 0x20CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_421)
{
    // 0497 0061;	
    // (җ) CYRILLIC SMALL LETTER ZHE WITH DESCENDER	[20CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0497, 0x0061 };
    uint32_t const ces[9] = { 0x20CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_422)
{
    // 0497 0041;	
    // (җ) CYRILLIC SMALL LETTER ZHE WITH DESCENDER	[20CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0497, 0x0041 };
    uint32_t const ces[9] = { 0x20CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_423)
{
    // 0496 0061;	
    // (Җ) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER	[20CE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0496, 0x0061 };
    uint32_t const ces[9] = { 0x20CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_424)
{
    // 0496 0041;	
    // (Җ) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER	[20CE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0496, 0x0041 };
    uint32_t const ces[9] = { 0x20CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_425)
{
    // 0497 0062;	
    // (җ) CYRILLIC SMALL LETTER ZHE WITH DESCENDER	[20CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0497, 0x0062 };
    uint32_t const ces[9] = { 0x20CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_426)
{
    // 0496 0062;	
    // (Җ) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER	[20CE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0496, 0x0062 };
    uint32_t const ces[9] = { 0x20CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_427)
{
    // 0437 0308 0334;	
    // (ӟ) CYRILLIC SMALL LETTER ZE, COMBINING DIAERESIS	[20D2 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0437, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_428)
{
    // 0437 0334 0308;	
    // (з̴) CYRILLIC SMALL LETTER ZE, COMBINING TILDE OVERLAY	[20D2 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0437, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_429)
{
    // 04DF 0334;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DF, 0x0334 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_430)
{
    // 0417 0308 0334;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE, COMBINING DIAERESIS	[20D2 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0417, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_431)
{
    // 0417 0334 0308;	
    // (З̴) CYRILLIC CAPITAL LETTER ZE, COMBINING TILDE OVERLAY	[20D2 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0417, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_432)
{
    // 04DE 0334;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DE, 0x0334 };
    uint32_t const ces[10] = { 0x20D2, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_433)
{
    // 0334 2DE5;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE5 };
    uint32_t const ces[8] = { 0x20D2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_434)
{
    // 2DE5 0334;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE5, 0x0334 };
    uint32_t const ces[8] = { 0x20D2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_435)
{
    // 0437 0021;	
    // (з) CYRILLIC SMALL LETTER ZE	[20D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0437, 0x0021 };
    uint32_t const ces[9] = { 0x20D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_436)
{
    // 2DE5 0021;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE5, 0x0021 };
    uint32_t const ces[9] = { 0x20D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_437)
{
    // 0417 0021;	
    // (З) CYRILLIC CAPITAL LETTER ZE	[20D2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0417, 0x0021 };
    uint32_t const ces[9] = { 0x20D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_438)
{
    // 04DF 0021;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DF, 0x0021 };
    uint32_t const ces[11] = { 0x20D2, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_439)
{
    // 04DE 0021;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DE, 0x0021 };
    uint32_t const ces[11] = { 0x20D2, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_440)
{
    // 0437 003F;	
    // (з) CYRILLIC SMALL LETTER ZE	[20D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0437, 0x003F };
    uint32_t const ces[9] = { 0x20D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_441)
{
    // 2DE5 003F;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE5, 0x003F };
    uint32_t const ces[9] = { 0x20D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_442)
{
    // 0417 003F;	
    // (З) CYRILLIC CAPITAL LETTER ZE	[20D2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0417, 0x003F };
    uint32_t const ces[9] = { 0x20D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_443)
{
    // 04DF 003F;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DF, 0x003F };
    uint32_t const ces[11] = { 0x20D2, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_444)
{
    // 04DE 003F;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DE, 0x003F };
    uint32_t const ces[11] = { 0x20D2, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_445)
{
    // 0437 0061;	
    // (з) CYRILLIC SMALL LETTER ZE	[20D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0437, 0x0061 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_446)
{
    // 0437 0041;	
    // (з) CYRILLIC SMALL LETTER ZE	[20D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0437, 0x0041 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_447)
{
    // 2DE5 0061;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE5, 0x0061 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_448)
{
    // 2DE5 0041;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE5, 0x0041 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_449)
{
    // 0417 0061;	
    // (З) CYRILLIC CAPITAL LETTER ZE	[20D2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0417, 0x0061 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_450)
{
    // 0417 0041;	
    // (З) CYRILLIC CAPITAL LETTER ZE	[20D2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0417, 0x0041 };
    uint32_t const ces[9] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_451)
{
    // 04DF 0061;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DF, 0x0061 };
    uint32_t const ces[11] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_452)
{
    // 04DF 0041;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04DF, 0x0041 };
    uint32_t const ces[11] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_453)
{
    // 04DE 0061;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DE, 0x0061 };
    uint32_t const ces[11] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_454)
{
    // 04DE 0041;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04DE, 0x0041 };
    uint32_t const ces[11] = { 0x20D2, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_455)
{
    // 0437 0062;	
    // (з) CYRILLIC SMALL LETTER ZE	[20D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0437, 0x0062 };
    uint32_t const ces[9] = { 0x20D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_456)
{
    // 2DE5 0062;	
    // (ⷥ) COMBINING CYRILLIC LETTER ZE	[20D2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE5, 0x0062 };
    uint32_t const ces[9] = { 0x20D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_457)
{
    // 0417 0062;	
    // (З) CYRILLIC CAPITAL LETTER ZE	[20D2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0417, 0x0062 };
    uint32_t const ces[9] = { 0x20D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_458)
{
    // 04DF 0062;	
    // (ӟ) CYRILLIC SMALL LETTER ZE WITH DIAERESIS	[20D2 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04DF, 0x0062 };
    uint32_t const ces[11] = { 0x20D2, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_459)
{
    // 04DE 0062;	
    // (Ӟ) CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS	[20D2 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04DE, 0x0062 };
    uint32_t const ces[11] = { 0x20D2, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_460)
{
    // A641 0021;	
    // (ꙁ) CYRILLIC SMALL LETTER ZEMLYA	[20D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA641, 0x0021 };
    uint32_t const ces[9] = { 0x20D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_461)
{
    // A640 0021;	
    // (Ꙁ) CYRILLIC CAPITAL LETTER ZEMLYA	[20D6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA640, 0x0021 };
    uint32_t const ces[9] = { 0x20D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_462)
{
    // A641 003F;	
    // (ꙁ) CYRILLIC SMALL LETTER ZEMLYA	[20D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA641, 0x003F };
    uint32_t const ces[9] = { 0x20D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_463)
{
    // A640 003F;	
    // (Ꙁ) CYRILLIC CAPITAL LETTER ZEMLYA	[20D6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA640, 0x003F };
    uint32_t const ces[9] = { 0x20D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_464)
{
    // A641 0061;	
    // (ꙁ) CYRILLIC SMALL LETTER ZEMLYA	[20D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA641, 0x0061 };
    uint32_t const ces[9] = { 0x20D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_465)
{
    // A641 0041;	
    // (ꙁ) CYRILLIC SMALL LETTER ZEMLYA	[20D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA641, 0x0041 };
    uint32_t const ces[9] = { 0x20D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_466)
{
    // A640 0061;	
    // (Ꙁ) CYRILLIC CAPITAL LETTER ZEMLYA	[20D6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA640, 0x0061 };
    uint32_t const ces[9] = { 0x20D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_467)
{
    // A640 0041;	
    // (Ꙁ) CYRILLIC CAPITAL LETTER ZEMLYA	[20D6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA640, 0x0041 };
    uint32_t const ces[9] = { 0x20D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_468)
{
    // A641 0062;	
    // (ꙁ) CYRILLIC SMALL LETTER ZEMLYA	[20D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA641, 0x0062 };
    uint32_t const ces[9] = { 0x20D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_469)
{
    // A640 0062;	
    // (Ꙁ) CYRILLIC CAPITAL LETTER ZEMLYA	[20D6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA640, 0x0062 };
    uint32_t const ces[9] = { 0x20D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_470)
{
    // 0505 0021;	
    // (ԅ) CYRILLIC SMALL LETTER KOMI ZJE	[20D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0505, 0x0021 };
    uint32_t const ces[9] = { 0x20D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_471)
{
    // 0504 0021;	
    // (Ԅ) CYRILLIC CAPITAL LETTER KOMI ZJE	[20D7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0504, 0x0021 };
    uint32_t const ces[9] = { 0x20D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_472)
{
    // 0505 003F;	
    // (ԅ) CYRILLIC SMALL LETTER KOMI ZJE	[20D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0505, 0x003F };
    uint32_t const ces[9] = { 0x20D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_473)
{
    // 0504 003F;	
    // (Ԅ) CYRILLIC CAPITAL LETTER KOMI ZJE	[20D7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0504, 0x003F };
    uint32_t const ces[9] = { 0x20D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_474)
{
    // 0505 0061;	
    // (ԅ) CYRILLIC SMALL LETTER KOMI ZJE	[20D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0505, 0x0061 };
    uint32_t const ces[9] = { 0x20D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_475)
{
    // 0505 0041;	
    // (ԅ) CYRILLIC SMALL LETTER KOMI ZJE	[20D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0505, 0x0041 };
    uint32_t const ces[9] = { 0x20D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_476)
{
    // 0504 0061;	
    // (Ԅ) CYRILLIC CAPITAL LETTER KOMI ZJE	[20D7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0504, 0x0061 };
    uint32_t const ces[9] = { 0x20D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_477)
{
    // 0504 0041;	
    // (Ԅ) CYRILLIC CAPITAL LETTER KOMI ZJE	[20D7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0504, 0x0041 };
    uint32_t const ces[9] = { 0x20D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_478)
{
    // 0505 0062;	
    // (ԅ) CYRILLIC SMALL LETTER KOMI ZJE	[20D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0505, 0x0062 };
    uint32_t const ces[9] = { 0x20D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_479)
{
    // 0504 0062;	
    // (Ԅ) CYRILLIC CAPITAL LETTER KOMI ZJE	[20D7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0504, 0x0062 };
    uint32_t const ces[9] = { 0x20D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_480)
{
    // 0511 0021;	
    // (ԑ) CYRILLIC SMALL LETTER REVERSED ZE	[20D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0511, 0x0021 };
    uint32_t const ces[9] = { 0x20D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_481)
{
    // 0510 0021;	
    // (Ԑ) CYRILLIC CAPITAL LETTER REVERSED ZE	[20D8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0510, 0x0021 };
    uint32_t const ces[9] = { 0x20D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_482)
{
    // 0511 003F;	
    // (ԑ) CYRILLIC SMALL LETTER REVERSED ZE	[20D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0511, 0x003F };
    uint32_t const ces[9] = { 0x20D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_483)
{
    // 0510 003F;	
    // (Ԑ) CYRILLIC CAPITAL LETTER REVERSED ZE	[20D8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0510, 0x003F };
    uint32_t const ces[9] = { 0x20D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_484)
{
    // 0511 0061;	
    // (ԑ) CYRILLIC SMALL LETTER REVERSED ZE	[20D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0511, 0x0061 };
    uint32_t const ces[9] = { 0x20D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_485)
{
    // 0511 0041;	
    // (ԑ) CYRILLIC SMALL LETTER REVERSED ZE	[20D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0511, 0x0041 };
    uint32_t const ces[9] = { 0x20D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_486)
{
    // 0510 0061;	
    // (Ԑ) CYRILLIC CAPITAL LETTER REVERSED ZE	[20D8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0510, 0x0061 };
    uint32_t const ces[9] = { 0x20D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_487)
{
    // 0510 0041;	
    // (Ԑ) CYRILLIC CAPITAL LETTER REVERSED ZE	[20D8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0510, 0x0041 };
    uint32_t const ces[9] = { 0x20D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_488)
{
    // 0511 0062;	
    // (ԑ) CYRILLIC SMALL LETTER REVERSED ZE	[20D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0511, 0x0062 };
    uint32_t const ces[9] = { 0x20D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_489)
{
    // 0510 0062;	
    // (Ԑ) CYRILLIC CAPITAL LETTER REVERSED ZE	[20D8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0510, 0x0062 };
    uint32_t const ces[9] = { 0x20D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_490)
{
    // A643 0021;	
    // (ꙃ) CYRILLIC SMALL LETTER DZELO	[20D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA643, 0x0021 };
    uint32_t const ces[9] = { 0x20D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_491)
{
    // A642 0021;	
    // (Ꙃ) CYRILLIC CAPITAL LETTER DZELO	[20D9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA642, 0x0021 };
    uint32_t const ces[9] = { 0x20D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_492)
{
    // A643 003F;	
    // (ꙃ) CYRILLIC SMALL LETTER DZELO	[20D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA643, 0x003F };
    uint32_t const ces[9] = { 0x20D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_493)
{
    // A642 003F;	
    // (Ꙃ) CYRILLIC CAPITAL LETTER DZELO	[20D9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA642, 0x003F };
    uint32_t const ces[9] = { 0x20D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_494)
{
    // A643 0061;	
    // (ꙃ) CYRILLIC SMALL LETTER DZELO	[20D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA643, 0x0061 };
    uint32_t const ces[9] = { 0x20D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_495)
{
    // A643 0041;	
    // (ꙃ) CYRILLIC SMALL LETTER DZELO	[20D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA643, 0x0041 };
    uint32_t const ces[9] = { 0x20D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_496)
{
    // A642 0061;	
    // (Ꙃ) CYRILLIC CAPITAL LETTER DZELO	[20D9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA642, 0x0061 };
    uint32_t const ces[9] = { 0x20D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_497)
{
    // A642 0041;	
    // (Ꙃ) CYRILLIC CAPITAL LETTER DZELO	[20D9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA642, 0x0041 };
    uint32_t const ces[9] = { 0x20D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_498)
{
    // A643 0062;	
    // (ꙃ) CYRILLIC SMALL LETTER DZELO	[20D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA643, 0x0062 };
    uint32_t const ces[9] = { 0x20D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_137_499)
{
    // A642 0062;	
    // (Ꙃ) CYRILLIC CAPITAL LETTER DZELO	[20D9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA642, 0x0062 };
    uint32_t const ces[9] = { 0x20D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

