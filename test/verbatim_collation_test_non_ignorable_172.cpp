// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_172_000)
{
    // 0D46 0D3E 0061;	
    // (ൊ) MALAYALAM VOWEL SIGN E, MALAYALAM VOWEL SIGN AA	[293D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D3E, 0x0061 };
    uint32_t const ces[9] = { 0x293D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_001)
{
    // 0D4A 0061;	
    // (ൊ) MALAYALAM VOWEL SIGN O	[293D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4A, 0x0061 };
    uint32_t const ces[9] = { 0x293D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_002)
{
    // 0D46 0D3E 0041;	
    // (ൊ) MALAYALAM VOWEL SIGN E, MALAYALAM VOWEL SIGN AA	[293D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0D46, 0x0D3E, 0x0041 };
    uint32_t const ces[9] = { 0x293D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_003)
{
    // 0D4A 0041;	
    // (ൊ) MALAYALAM VOWEL SIGN O	[293D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D4A, 0x0041 };
    uint32_t const ces[9] = { 0x293D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_004)
{
    // 0D46 0D3E 0062;	
    // (ൊ) MALAYALAM VOWEL SIGN E, MALAYALAM VOWEL SIGN AA	[293D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D3E, 0x0062 };
    uint32_t const ces[9] = { 0x293D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_005)
{
    // 0D4A 0062;	
    // (ൊ) MALAYALAM VOWEL SIGN O	[293D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4A, 0x0062 };
    uint32_t const ces[9] = { 0x293D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_006)
{
    // 0D47 0D3E 0021;	
    // (ോ) MALAYALAM VOWEL SIGN EE, MALAYALAM VOWEL SIGN AA	[293E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D47, 0x0D3E, 0x0021 };
    uint32_t const ces[9] = { 0x293E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_007)
{
    // 0D4B 0021;	
    // (ോ) MALAYALAM VOWEL SIGN OO	[293E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4B, 0x0021 };
    uint32_t const ces[9] = { 0x293E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_008)
{
    // 0D47 0D3E 003F;	
    // (ോ) MALAYALAM VOWEL SIGN EE, MALAYALAM VOWEL SIGN AA	[293E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D47, 0x0D3E, 0x003F };
    uint32_t const ces[9] = { 0x293E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_009)
{
    // 0D4B 003F;	
    // (ോ) MALAYALAM VOWEL SIGN OO	[293E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4B, 0x003F };
    uint32_t const ces[9] = { 0x293E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_010)
{
    // 0D47 0D3E 0061;	
    // (ോ) MALAYALAM VOWEL SIGN EE, MALAYALAM VOWEL SIGN AA	[293E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D47, 0x0D3E, 0x0061 };
    uint32_t const ces[9] = { 0x293E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_011)
{
    // 0D4B 0061;	
    // (ോ) MALAYALAM VOWEL SIGN OO	[293E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4B, 0x0061 };
    uint32_t const ces[9] = { 0x293E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_012)
{
    // 0D47 0D3E 0041;	
    // (ോ) MALAYALAM VOWEL SIGN EE, MALAYALAM VOWEL SIGN AA	[293E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0D47, 0x0D3E, 0x0041 };
    uint32_t const ces[9] = { 0x293E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_013)
{
    // 0D4B 0041;	
    // (ോ) MALAYALAM VOWEL SIGN OO	[293E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D4B, 0x0041 };
    uint32_t const ces[9] = { 0x293E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_014)
{
    // 0D47 0D3E 0062;	
    // (ോ) MALAYALAM VOWEL SIGN EE, MALAYALAM VOWEL SIGN AA	[293E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D47, 0x0D3E, 0x0062 };
    uint32_t const ces[9] = { 0x293E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_015)
{
    // 0D4B 0062;	
    // (ോ) MALAYALAM VOWEL SIGN OO	[293E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4B, 0x0062 };
    uint32_t const ces[9] = { 0x293E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_016)
{
    // 0D46 0D57 0021;	
    // (ൌ) MALAYALAM VOWEL SIGN E, MALAYALAM AU LENGTH MARK	[293F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D57, 0x0021 };
    uint32_t const ces[9] = { 0x293F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_017)
{
    // 0D4C 0021;	
    // (ൌ) MALAYALAM VOWEL SIGN AU	[293F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4C, 0x0021 };
    uint32_t const ces[9] = { 0x293F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_018)
{
    // 0D46 0D57 003F;	
    // (ൌ) MALAYALAM VOWEL SIGN E, MALAYALAM AU LENGTH MARK	[293F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D57, 0x003F };
    uint32_t const ces[9] = { 0x293F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_019)
{
    // 0D4C 003F;	
    // (ൌ) MALAYALAM VOWEL SIGN AU	[293F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4C, 0x003F };
    uint32_t const ces[9] = { 0x293F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_020)
{
    // 0D46 0D57 0061;	
    // (ൌ) MALAYALAM VOWEL SIGN E, MALAYALAM AU LENGTH MARK	[293F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D57, 0x0061 };
    uint32_t const ces[9] = { 0x293F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_021)
{
    // 0D4C 0061;	
    // (ൌ) MALAYALAM VOWEL SIGN AU	[293F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4C, 0x0061 };
    uint32_t const ces[9] = { 0x293F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_022)
{
    // 0D46 0D57 0041;	
    // (ൌ) MALAYALAM VOWEL SIGN E, MALAYALAM AU LENGTH MARK	[293F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0D46, 0x0D57, 0x0041 };
    uint32_t const ces[9] = { 0x293F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_023)
{
    // 0D4C 0041;	
    // (ൌ) MALAYALAM VOWEL SIGN AU	[293F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D4C, 0x0041 };
    uint32_t const ces[9] = { 0x293F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_024)
{
    // 0D46 0D57 0062;	
    // (ൌ) MALAYALAM VOWEL SIGN E, MALAYALAM AU LENGTH MARK	[293F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0D46, 0x0D57, 0x0062 };
    uint32_t const ces[9] = { 0x293F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_025)
{
    // 0D4C 0062;	
    // (ൌ) MALAYALAM VOWEL SIGN AU	[293F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4C, 0x0062 };
    uint32_t const ces[9] = { 0x293F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_026)
{
    // 0D57 0021;	
    // (ൗ) MALAYALAM AU LENGTH MARK	[2940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D57, 0x0021 };
    uint32_t const ces[9] = { 0x2940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_027)
{
    // 0D57 003F;	
    // (ൗ) MALAYALAM AU LENGTH MARK	[2940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D57, 0x003F };
    uint32_t const ces[9] = { 0x2940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_028)
{
    // 0D57 0061;	
    // (ൗ) MALAYALAM AU LENGTH MARK	[2940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D57, 0x0061 };
    uint32_t const ces[9] = { 0x2940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_029)
{
    // 0D57 0041;	
    // (ൗ) MALAYALAM AU LENGTH MARK	[2940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D57, 0x0041 };
    uint32_t const ces[9] = { 0x2940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_030)
{
    // 0D57 0062;	
    // (ൗ) MALAYALAM AU LENGTH MARK	[2940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D57, 0x0062 };
    uint32_t const ces[9] = { 0x2940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_031)
{
    // 0334 0D4D;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0D4D };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_032)
{
    // 0D4D 0334;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4D, 0x0334 };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_033)
{
    // 0334 0D3B;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0D3B };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_034)
{
    // 0D3B 0334;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0D3B, 0x0334 };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_035)
{
    // 0334 0D3C;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0D3C };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_036)
{
    // 0D3C 0334;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0D3C, 0x0334 };
    uint32_t const ces[8] = { 0x2941, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_037)
{
    // 0D4D 0021;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4D, 0x0021 };
    uint32_t const ces[9] = { 0x2941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_038)
{
    // 0D3B 0021;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3B, 0x0021 };
    uint32_t const ces[9] = { 0x2941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_039)
{
    // 0D3C 0021;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3C, 0x0021 };
    uint32_t const ces[9] = { 0x2941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_040)
{
    // 0D4D 003F;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4D, 0x003F };
    uint32_t const ces[9] = { 0x2941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_041)
{
    // 0D3B 003F;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3B, 0x003F };
    uint32_t const ces[9] = { 0x2941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_042)
{
    // 0D3C 003F;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3C, 0x003F };
    uint32_t const ces[9] = { 0x2941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_043)
{
    // 0D4D 0061;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4D, 0x0061 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_044)
{
    // 0D4D 0041;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D4D, 0x0041 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_045)
{
    // 0D3B 0061;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3B, 0x0061 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_046)
{
    // 0D3C 0061;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3C, 0x0061 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_047)
{
    // 0D3B 0041;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0D3B, 0x0041 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_048)
{
    // 0D3C 0041;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0D3C, 0x0041 };
    uint32_t const ces[9] = { 0x2941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_049)
{
    // 0D4D 0062;	
    // (്) MALAYALAM SIGN VIRAMA	[2941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4D, 0x0062 };
    uint32_t const ces[9] = { 0x2941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_050)
{
    // 0D3B 0062;	
    // (഻) MALAYALAM SIGN VERTICAL BAR VIRAMA	[2941 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3B, 0x0062 };
    uint32_t const ces[9] = { 0x2941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_051)
{
    // 0D3C 0062;	
    // (഼) MALAYALAM SIGN CIRCULAR VIRAMA	[2941 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0D3C, 0x0062 };
    uint32_t const ces[9] = { 0x2941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_052)
{
    // 0D85 0021;	
    // (අ) SINHALA LETTER AYANNA	[2942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D85, 0x0021 };
    uint32_t const ces[9] = { 0x2942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_053)
{
    // 0D85 003F;	
    // (අ) SINHALA LETTER AYANNA	[2942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D85, 0x003F };
    uint32_t const ces[9] = { 0x2942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_054)
{
    // 0D85 0061;	
    // (අ) SINHALA LETTER AYANNA	[2942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D85, 0x0061 };
    uint32_t const ces[9] = { 0x2942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_055)
{
    // 0D85 0041;	
    // (අ) SINHALA LETTER AYANNA	[2942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D85, 0x0041 };
    uint32_t const ces[9] = { 0x2942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_056)
{
    // 0D85 0062;	
    // (අ) SINHALA LETTER AYANNA	[2942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D85, 0x0062 };
    uint32_t const ces[9] = { 0x2942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_057)
{
    // 0D86 0021;	
    // (ආ) SINHALA LETTER AAYANNA	[2943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D86, 0x0021 };
    uint32_t const ces[9] = { 0x2943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_058)
{
    // 0D86 003F;	
    // (ආ) SINHALA LETTER AAYANNA	[2943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D86, 0x003F };
    uint32_t const ces[9] = { 0x2943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_059)
{
    // 0D86 0061;	
    // (ආ) SINHALA LETTER AAYANNA	[2943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D86, 0x0061 };
    uint32_t const ces[9] = { 0x2943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_060)
{
    // 0D86 0041;	
    // (ආ) SINHALA LETTER AAYANNA	[2943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D86, 0x0041 };
    uint32_t const ces[9] = { 0x2943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_061)
{
    // 0D86 0062;	
    // (ආ) SINHALA LETTER AAYANNA	[2943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D86, 0x0062 };
    uint32_t const ces[9] = { 0x2943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_062)
{
    // 0D87 0021;	
    // (ඇ) SINHALA LETTER AEYANNA	[2944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D87, 0x0021 };
    uint32_t const ces[9] = { 0x2944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_063)
{
    // 0D87 003F;	
    // (ඇ) SINHALA LETTER AEYANNA	[2944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D87, 0x003F };
    uint32_t const ces[9] = { 0x2944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_064)
{
    // 0D87 0061;	
    // (ඇ) SINHALA LETTER AEYANNA	[2944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D87, 0x0061 };
    uint32_t const ces[9] = { 0x2944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_065)
{
    // 0D87 0041;	
    // (ඇ) SINHALA LETTER AEYANNA	[2944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D87, 0x0041 };
    uint32_t const ces[9] = { 0x2944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_066)
{
    // 0D87 0062;	
    // (ඇ) SINHALA LETTER AEYANNA	[2944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D87, 0x0062 };
    uint32_t const ces[9] = { 0x2944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_067)
{
    // 0D88 0021;	
    // (ඈ) SINHALA LETTER AEEYANNA	[2945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D88, 0x0021 };
    uint32_t const ces[9] = { 0x2945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_068)
{
    // 0D88 003F;	
    // (ඈ) SINHALA LETTER AEEYANNA	[2945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D88, 0x003F };
    uint32_t const ces[9] = { 0x2945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_069)
{
    // 0D88 0061;	
    // (ඈ) SINHALA LETTER AEEYANNA	[2945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D88, 0x0061 };
    uint32_t const ces[9] = { 0x2945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_070)
{
    // 0D88 0041;	
    // (ඈ) SINHALA LETTER AEEYANNA	[2945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D88, 0x0041 };
    uint32_t const ces[9] = { 0x2945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_071)
{
    // 0D88 0062;	
    // (ඈ) SINHALA LETTER AEEYANNA	[2945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D88, 0x0062 };
    uint32_t const ces[9] = { 0x2945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_072)
{
    // 0D89 0021;	
    // (ඉ) SINHALA LETTER IYANNA	[2946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D89, 0x0021 };
    uint32_t const ces[9] = { 0x2946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_073)
{
    // 0D89 003F;	
    // (ඉ) SINHALA LETTER IYANNA	[2946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D89, 0x003F };
    uint32_t const ces[9] = { 0x2946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_074)
{
    // 0D89 0061;	
    // (ඉ) SINHALA LETTER IYANNA	[2946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D89, 0x0061 };
    uint32_t const ces[9] = { 0x2946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_075)
{
    // 0D89 0041;	
    // (ඉ) SINHALA LETTER IYANNA	[2946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D89, 0x0041 };
    uint32_t const ces[9] = { 0x2946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_076)
{
    // 0D89 0062;	
    // (ඉ) SINHALA LETTER IYANNA	[2946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D89, 0x0062 };
    uint32_t const ces[9] = { 0x2946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_077)
{
    // 0D8A 0021;	
    // (ඊ) SINHALA LETTER IIYANNA	[2947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8A, 0x0021 };
    uint32_t const ces[9] = { 0x2947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_078)
{
    // 0D8A 003F;	
    // (ඊ) SINHALA LETTER IIYANNA	[2947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8A, 0x003F };
    uint32_t const ces[9] = { 0x2947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_079)
{
    // 0D8A 0061;	
    // (ඊ) SINHALA LETTER IIYANNA	[2947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8A, 0x0061 };
    uint32_t const ces[9] = { 0x2947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_080)
{
    // 0D8A 0041;	
    // (ඊ) SINHALA LETTER IIYANNA	[2947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8A, 0x0041 };
    uint32_t const ces[9] = { 0x2947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_081)
{
    // 0D8A 0062;	
    // (ඊ) SINHALA LETTER IIYANNA	[2947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8A, 0x0062 };
    uint32_t const ces[9] = { 0x2947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_082)
{
    // 0D8B 0021;	
    // (උ) SINHALA LETTER UYANNA	[2948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8B, 0x0021 };
    uint32_t const ces[9] = { 0x2948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_083)
{
    // 0D8B 003F;	
    // (උ) SINHALA LETTER UYANNA	[2948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8B, 0x003F };
    uint32_t const ces[9] = { 0x2948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_084)
{
    // 0D8B 0061;	
    // (උ) SINHALA LETTER UYANNA	[2948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8B, 0x0061 };
    uint32_t const ces[9] = { 0x2948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_085)
{
    // 0D8B 0041;	
    // (උ) SINHALA LETTER UYANNA	[2948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8B, 0x0041 };
    uint32_t const ces[9] = { 0x2948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_086)
{
    // 0D8B 0062;	
    // (උ) SINHALA LETTER UYANNA	[2948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8B, 0x0062 };
    uint32_t const ces[9] = { 0x2948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_087)
{
    // 0D8C 0021;	
    // (ඌ) SINHALA LETTER UUYANNA	[2949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8C, 0x0021 };
    uint32_t const ces[9] = { 0x2949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_088)
{
    // 0D8C 003F;	
    // (ඌ) SINHALA LETTER UUYANNA	[2949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8C, 0x003F };
    uint32_t const ces[9] = { 0x2949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_089)
{
    // 0D8C 0061;	
    // (ඌ) SINHALA LETTER UUYANNA	[2949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8C, 0x0061 };
    uint32_t const ces[9] = { 0x2949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_090)
{
    // 0D8C 0041;	
    // (ඌ) SINHALA LETTER UUYANNA	[2949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8C, 0x0041 };
    uint32_t const ces[9] = { 0x2949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_091)
{
    // 0D8C 0062;	
    // (ඌ) SINHALA LETTER UUYANNA	[2949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8C, 0x0062 };
    uint32_t const ces[9] = { 0x2949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_092)
{
    // 0D8D 0021;	
    // (ඍ) SINHALA LETTER IRUYANNA	[294A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8D, 0x0021 };
    uint32_t const ces[9] = { 0x294A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_093)
{
    // 0D8D 003F;	
    // (ඍ) SINHALA LETTER IRUYANNA	[294A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8D, 0x003F };
    uint32_t const ces[9] = { 0x294A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_094)
{
    // 0D8D 0061;	
    // (ඍ) SINHALA LETTER IRUYANNA	[294A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8D, 0x0061 };
    uint32_t const ces[9] = { 0x294A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_095)
{
    // 0D8D 0041;	
    // (ඍ) SINHALA LETTER IRUYANNA	[294A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8D, 0x0041 };
    uint32_t const ces[9] = { 0x294A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_096)
{
    // 0D8D 0062;	
    // (ඍ) SINHALA LETTER IRUYANNA	[294A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8D, 0x0062 };
    uint32_t const ces[9] = { 0x294A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_097)
{
    // 0D8E 0021;	
    // (ඎ) SINHALA LETTER IRUUYANNA	[294B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8E, 0x0021 };
    uint32_t const ces[9] = { 0x294B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_098)
{
    // 0D8E 003F;	
    // (ඎ) SINHALA LETTER IRUUYANNA	[294B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8E, 0x003F };
    uint32_t const ces[9] = { 0x294B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_099)
{
    // 0D8E 0061;	
    // (ඎ) SINHALA LETTER IRUUYANNA	[294B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8E, 0x0061 };
    uint32_t const ces[9] = { 0x294B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_100)
{
    // 0D8E 0041;	
    // (ඎ) SINHALA LETTER IRUUYANNA	[294B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8E, 0x0041 };
    uint32_t const ces[9] = { 0x294B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_101)
{
    // 0D8E 0062;	
    // (ඎ) SINHALA LETTER IRUUYANNA	[294B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8E, 0x0062 };
    uint32_t const ces[9] = { 0x294B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_102)
{
    // 0D8F 0021;	
    // (ඏ) SINHALA LETTER ILUYANNA	[294C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8F, 0x0021 };
    uint32_t const ces[9] = { 0x294C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_103)
{
    // 0D8F 003F;	
    // (ඏ) SINHALA LETTER ILUYANNA	[294C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8F, 0x003F };
    uint32_t const ces[9] = { 0x294C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_104)
{
    // 0D8F 0061;	
    // (ඏ) SINHALA LETTER ILUYANNA	[294C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8F, 0x0061 };
    uint32_t const ces[9] = { 0x294C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_105)
{
    // 0D8F 0041;	
    // (ඏ) SINHALA LETTER ILUYANNA	[294C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D8F, 0x0041 };
    uint32_t const ces[9] = { 0x294C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_106)
{
    // 0D8F 0062;	
    // (ඏ) SINHALA LETTER ILUYANNA	[294C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D8F, 0x0062 };
    uint32_t const ces[9] = { 0x294C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_107)
{
    // 0D90 0021;	
    // (ඐ) SINHALA LETTER ILUUYANNA	[294D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D90, 0x0021 };
    uint32_t const ces[9] = { 0x294D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_108)
{
    // 0D90 003F;	
    // (ඐ) SINHALA LETTER ILUUYANNA	[294D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D90, 0x003F };
    uint32_t const ces[9] = { 0x294D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_109)
{
    // 0D90 0061;	
    // (ඐ) SINHALA LETTER ILUUYANNA	[294D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D90, 0x0061 };
    uint32_t const ces[9] = { 0x294D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_110)
{
    // 0D90 0041;	
    // (ඐ) SINHALA LETTER ILUUYANNA	[294D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D90, 0x0041 };
    uint32_t const ces[9] = { 0x294D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_111)
{
    // 0D90 0062;	
    // (ඐ) SINHALA LETTER ILUUYANNA	[294D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D90, 0x0062 };
    uint32_t const ces[9] = { 0x294D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_112)
{
    // 0D91 0021;	
    // (එ) SINHALA LETTER EYANNA	[294E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D91, 0x0021 };
    uint32_t const ces[9] = { 0x294E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_113)
{
    // 0D91 003F;	
    // (එ) SINHALA LETTER EYANNA	[294E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D91, 0x003F };
    uint32_t const ces[9] = { 0x294E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_114)
{
    // 0D91 0061;	
    // (එ) SINHALA LETTER EYANNA	[294E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D91, 0x0061 };
    uint32_t const ces[9] = { 0x294E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_115)
{
    // 0D91 0041;	
    // (එ) SINHALA LETTER EYANNA	[294E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D91, 0x0041 };
    uint32_t const ces[9] = { 0x294E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_116)
{
    // 0D91 0062;	
    // (එ) SINHALA LETTER EYANNA	[294E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D91, 0x0062 };
    uint32_t const ces[9] = { 0x294E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_117)
{
    // 0D92 0021;	
    // (ඒ) SINHALA LETTER EEYANNA	[294F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D92, 0x0021 };
    uint32_t const ces[9] = { 0x294F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_118)
{
    // 0D92 003F;	
    // (ඒ) SINHALA LETTER EEYANNA	[294F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D92, 0x003F };
    uint32_t const ces[9] = { 0x294F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_119)
{
    // 0D92 0061;	
    // (ඒ) SINHALA LETTER EEYANNA	[294F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D92, 0x0061 };
    uint32_t const ces[9] = { 0x294F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_120)
{
    // 0D92 0041;	
    // (ඒ) SINHALA LETTER EEYANNA	[294F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D92, 0x0041 };
    uint32_t const ces[9] = { 0x294F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_121)
{
    // 0D92 0062;	
    // (ඒ) SINHALA LETTER EEYANNA	[294F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D92, 0x0062 };
    uint32_t const ces[9] = { 0x294F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_122)
{
    // 0D93 0021;	
    // (ඓ) SINHALA LETTER AIYANNA	[2950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D93, 0x0021 };
    uint32_t const ces[9] = { 0x2950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_123)
{
    // 0D93 003F;	
    // (ඓ) SINHALA LETTER AIYANNA	[2950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D93, 0x003F };
    uint32_t const ces[9] = { 0x2950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_124)
{
    // 0D93 0061;	
    // (ඓ) SINHALA LETTER AIYANNA	[2950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D93, 0x0061 };
    uint32_t const ces[9] = { 0x2950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_125)
{
    // 0D93 0041;	
    // (ඓ) SINHALA LETTER AIYANNA	[2950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D93, 0x0041 };
    uint32_t const ces[9] = { 0x2950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_126)
{
    // 0D93 0062;	
    // (ඓ) SINHALA LETTER AIYANNA	[2950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D93, 0x0062 };
    uint32_t const ces[9] = { 0x2950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_127)
{
    // 0D94 0021;	
    // (ඔ) SINHALA LETTER OYANNA	[2951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D94, 0x0021 };
    uint32_t const ces[9] = { 0x2951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_128)
{
    // 0D94 003F;	
    // (ඔ) SINHALA LETTER OYANNA	[2951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D94, 0x003F };
    uint32_t const ces[9] = { 0x2951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_129)
{
    // 0D94 0061;	
    // (ඔ) SINHALA LETTER OYANNA	[2951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D94, 0x0061 };
    uint32_t const ces[9] = { 0x2951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_130)
{
    // 0D94 0041;	
    // (ඔ) SINHALA LETTER OYANNA	[2951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D94, 0x0041 };
    uint32_t const ces[9] = { 0x2951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_131)
{
    // 0D94 0062;	
    // (ඔ) SINHALA LETTER OYANNA	[2951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D94, 0x0062 };
    uint32_t const ces[9] = { 0x2951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_132)
{
    // 0D95 0021;	
    // (ඕ) SINHALA LETTER OOYANNA	[2952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D95, 0x0021 };
    uint32_t const ces[9] = { 0x2952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_133)
{
    // 0D95 003F;	
    // (ඕ) SINHALA LETTER OOYANNA	[2952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D95, 0x003F };
    uint32_t const ces[9] = { 0x2952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_134)
{
    // 0D95 0061;	
    // (ඕ) SINHALA LETTER OOYANNA	[2952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D95, 0x0061 };
    uint32_t const ces[9] = { 0x2952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_135)
{
    // 0D95 0041;	
    // (ඕ) SINHALA LETTER OOYANNA	[2952 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D95, 0x0041 };
    uint32_t const ces[9] = { 0x2952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_136)
{
    // 0D95 0062;	
    // (ඕ) SINHALA LETTER OOYANNA	[2952 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D95, 0x0062 };
    uint32_t const ces[9] = { 0x2952, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_137)
{
    // 0D96 0021;	
    // (ඖ) SINHALA LETTER AUYANNA	[2953 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D96, 0x0021 };
    uint32_t const ces[9] = { 0x2953, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_138)
{
    // 0D96 003F;	
    // (ඖ) SINHALA LETTER AUYANNA	[2953 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D96, 0x003F };
    uint32_t const ces[9] = { 0x2953, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_139)
{
    // 0D96 0061;	
    // (ඖ) SINHALA LETTER AUYANNA	[2953 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D96, 0x0061 };
    uint32_t const ces[9] = { 0x2953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_140)
{
    // 0D96 0041;	
    // (ඖ) SINHALA LETTER AUYANNA	[2953 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D96, 0x0041 };
    uint32_t const ces[9] = { 0x2953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_141)
{
    // 0D96 0062;	
    // (ඖ) SINHALA LETTER AUYANNA	[2953 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D96, 0x0062 };
    uint32_t const ces[9] = { 0x2953, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_142)
{
    // 0D9A 0021;	
    // (ක) SINHALA LETTER ALPAPRAANA KAYANNA	[2954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9A, 0x0021 };
    uint32_t const ces[9] = { 0x2954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_143)
{
    // 0D9A 003F;	
    // (ක) SINHALA LETTER ALPAPRAANA KAYANNA	[2954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9A, 0x003F };
    uint32_t const ces[9] = { 0x2954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_144)
{
    // 0D9A 0061;	
    // (ක) SINHALA LETTER ALPAPRAANA KAYANNA	[2954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9A, 0x0061 };
    uint32_t const ces[9] = { 0x2954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_145)
{
    // 0D9A 0041;	
    // (ක) SINHALA LETTER ALPAPRAANA KAYANNA	[2954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9A, 0x0041 };
    uint32_t const ces[9] = { 0x2954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_146)
{
    // 0D9A 0062;	
    // (ක) SINHALA LETTER ALPAPRAANA KAYANNA	[2954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9A, 0x0062 };
    uint32_t const ces[9] = { 0x2954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_147)
{
    // 0D9B 0021;	
    // (ඛ) SINHALA LETTER MAHAAPRAANA KAYANNA	[2955 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9B, 0x0021 };
    uint32_t const ces[9] = { 0x2955, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_148)
{
    // 0D9B 003F;	
    // (ඛ) SINHALA LETTER MAHAAPRAANA KAYANNA	[2955 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9B, 0x003F };
    uint32_t const ces[9] = { 0x2955, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_149)
{
    // 0D9B 0061;	
    // (ඛ) SINHALA LETTER MAHAAPRAANA KAYANNA	[2955 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9B, 0x0061 };
    uint32_t const ces[9] = { 0x2955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_150)
{
    // 0D9B 0041;	
    // (ඛ) SINHALA LETTER MAHAAPRAANA KAYANNA	[2955 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9B, 0x0041 };
    uint32_t const ces[9] = { 0x2955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_151)
{
    // 0D9B 0062;	
    // (ඛ) SINHALA LETTER MAHAAPRAANA KAYANNA	[2955 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9B, 0x0062 };
    uint32_t const ces[9] = { 0x2955, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_152)
{
    // 0D9C 0021;	
    // (ග) SINHALA LETTER ALPAPRAANA GAYANNA	[2956 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9C, 0x0021 };
    uint32_t const ces[9] = { 0x2956, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_153)
{
    // 0D9C 003F;	
    // (ග) SINHALA LETTER ALPAPRAANA GAYANNA	[2956 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9C, 0x003F };
    uint32_t const ces[9] = { 0x2956, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_154)
{
    // 0D9C 0061;	
    // (ග) SINHALA LETTER ALPAPRAANA GAYANNA	[2956 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9C, 0x0061 };
    uint32_t const ces[9] = { 0x2956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_155)
{
    // 0D9C 0041;	
    // (ග) SINHALA LETTER ALPAPRAANA GAYANNA	[2956 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9C, 0x0041 };
    uint32_t const ces[9] = { 0x2956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_156)
{
    // 0D9C 0062;	
    // (ග) SINHALA LETTER ALPAPRAANA GAYANNA	[2956 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9C, 0x0062 };
    uint32_t const ces[9] = { 0x2956, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_157)
{
    // 0D9D 0021;	
    // (ඝ) SINHALA LETTER MAHAAPRAANA GAYANNA	[2957 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9D, 0x0021 };
    uint32_t const ces[9] = { 0x2957, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_158)
{
    // 0D9D 003F;	
    // (ඝ) SINHALA LETTER MAHAAPRAANA GAYANNA	[2957 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9D, 0x003F };
    uint32_t const ces[9] = { 0x2957, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_159)
{
    // 0D9D 0061;	
    // (ඝ) SINHALA LETTER MAHAAPRAANA GAYANNA	[2957 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9D, 0x0061 };
    uint32_t const ces[9] = { 0x2957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_160)
{
    // 0D9D 0041;	
    // (ඝ) SINHALA LETTER MAHAAPRAANA GAYANNA	[2957 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9D, 0x0041 };
    uint32_t const ces[9] = { 0x2957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_161)
{
    // 0D9D 0062;	
    // (ඝ) SINHALA LETTER MAHAAPRAANA GAYANNA	[2957 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9D, 0x0062 };
    uint32_t const ces[9] = { 0x2957, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_162)
{
    // 0D9E 0021;	
    // (ඞ) SINHALA LETTER KANTAJA NAASIKYAYA	[2958 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9E, 0x0021 };
    uint32_t const ces[9] = { 0x2958, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_163)
{
    // 0D9E 003F;	
    // (ඞ) SINHALA LETTER KANTAJA NAASIKYAYA	[2958 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9E, 0x003F };
    uint32_t const ces[9] = { 0x2958, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_164)
{
    // 0D9E 0061;	
    // (ඞ) SINHALA LETTER KANTAJA NAASIKYAYA	[2958 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9E, 0x0061 };
    uint32_t const ces[9] = { 0x2958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_165)
{
    // 0D9E 0041;	
    // (ඞ) SINHALA LETTER KANTAJA NAASIKYAYA	[2958 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9E, 0x0041 };
    uint32_t const ces[9] = { 0x2958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_166)
{
    // 0D9E 0062;	
    // (ඞ) SINHALA LETTER KANTAJA NAASIKYAYA	[2958 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9E, 0x0062 };
    uint32_t const ces[9] = { 0x2958, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_167)
{
    // 0D9F 0021;	
    // (ඟ) SINHALA LETTER SANYAKA GAYANNA	[2959 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9F, 0x0021 };
    uint32_t const ces[9] = { 0x2959, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_168)
{
    // 0D9F 003F;	
    // (ඟ) SINHALA LETTER SANYAKA GAYANNA	[2959 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9F, 0x003F };
    uint32_t const ces[9] = { 0x2959, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_169)
{
    // 0D9F 0061;	
    // (ඟ) SINHALA LETTER SANYAKA GAYANNA	[2959 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9F, 0x0061 };
    uint32_t const ces[9] = { 0x2959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_170)
{
    // 0D9F 0041;	
    // (ඟ) SINHALA LETTER SANYAKA GAYANNA	[2959 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D9F, 0x0041 };
    uint32_t const ces[9] = { 0x2959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_171)
{
    // 0D9F 0062;	
    // (ඟ) SINHALA LETTER SANYAKA GAYANNA	[2959 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D9F, 0x0062 };
    uint32_t const ces[9] = { 0x2959, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_172)
{
    // 0DA0 0021;	
    // (ච) SINHALA LETTER ALPAPRAANA CAYANNA	[295A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA0, 0x0021 };
    uint32_t const ces[9] = { 0x295A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_173)
{
    // 0DA0 003F;	
    // (ච) SINHALA LETTER ALPAPRAANA CAYANNA	[295A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA0, 0x003F };
    uint32_t const ces[9] = { 0x295A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_174)
{
    // 0DA0 0061;	
    // (ච) SINHALA LETTER ALPAPRAANA CAYANNA	[295A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA0, 0x0061 };
    uint32_t const ces[9] = { 0x295A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_175)
{
    // 0DA0 0041;	
    // (ච) SINHALA LETTER ALPAPRAANA CAYANNA	[295A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA0, 0x0041 };
    uint32_t const ces[9] = { 0x295A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_176)
{
    // 0DA0 0062;	
    // (ච) SINHALA LETTER ALPAPRAANA CAYANNA	[295A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA0, 0x0062 };
    uint32_t const ces[9] = { 0x295A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_177)
{
    // 0DA1 0021;	
    // (ඡ) SINHALA LETTER MAHAAPRAANA CAYANNA	[295B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA1, 0x0021 };
    uint32_t const ces[9] = { 0x295B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_178)
{
    // 0DA1 003F;	
    // (ඡ) SINHALA LETTER MAHAAPRAANA CAYANNA	[295B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA1, 0x003F };
    uint32_t const ces[9] = { 0x295B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_179)
{
    // 0DA1 0061;	
    // (ඡ) SINHALA LETTER MAHAAPRAANA CAYANNA	[295B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA1, 0x0061 };
    uint32_t const ces[9] = { 0x295B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_180)
{
    // 0DA1 0041;	
    // (ඡ) SINHALA LETTER MAHAAPRAANA CAYANNA	[295B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA1, 0x0041 };
    uint32_t const ces[9] = { 0x295B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_181)
{
    // 0DA1 0062;	
    // (ඡ) SINHALA LETTER MAHAAPRAANA CAYANNA	[295B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA1, 0x0062 };
    uint32_t const ces[9] = { 0x295B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_182)
{
    // 0DA2 0021;	
    // (ජ) SINHALA LETTER ALPAPRAANA JAYANNA	[295C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA2, 0x0021 };
    uint32_t const ces[9] = { 0x295C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_183)
{
    // 0DA2 003F;	
    // (ජ) SINHALA LETTER ALPAPRAANA JAYANNA	[295C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA2, 0x003F };
    uint32_t const ces[9] = { 0x295C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_184)
{
    // 0DA2 0061;	
    // (ජ) SINHALA LETTER ALPAPRAANA JAYANNA	[295C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA2, 0x0061 };
    uint32_t const ces[9] = { 0x295C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_185)
{
    // 0DA2 0041;	
    // (ජ) SINHALA LETTER ALPAPRAANA JAYANNA	[295C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA2, 0x0041 };
    uint32_t const ces[9] = { 0x295C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_186)
{
    // 0DA2 0062;	
    // (ජ) SINHALA LETTER ALPAPRAANA JAYANNA	[295C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA2, 0x0062 };
    uint32_t const ces[9] = { 0x295C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_187)
{
    // 0DA3 0021;	
    // (ඣ) SINHALA LETTER MAHAAPRAANA JAYANNA	[295D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA3, 0x0021 };
    uint32_t const ces[9] = { 0x295D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_188)
{
    // 0DA3 003F;	
    // (ඣ) SINHALA LETTER MAHAAPRAANA JAYANNA	[295D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA3, 0x003F };
    uint32_t const ces[9] = { 0x295D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_189)
{
    // 0DA3 0061;	
    // (ඣ) SINHALA LETTER MAHAAPRAANA JAYANNA	[295D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA3, 0x0061 };
    uint32_t const ces[9] = { 0x295D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_190)
{
    // 0DA3 0041;	
    // (ඣ) SINHALA LETTER MAHAAPRAANA JAYANNA	[295D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA3, 0x0041 };
    uint32_t const ces[9] = { 0x295D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_191)
{
    // 0DA3 0062;	
    // (ඣ) SINHALA LETTER MAHAAPRAANA JAYANNA	[295D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA3, 0x0062 };
    uint32_t const ces[9] = { 0x295D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_192)
{
    // 0DA4 0021;	
    // (ඤ) SINHALA LETTER TAALUJA NAASIKYAYA	[295E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA4, 0x0021 };
    uint32_t const ces[9] = { 0x295E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_193)
{
    // 0DA4 003F;	
    // (ඤ) SINHALA LETTER TAALUJA NAASIKYAYA	[295E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA4, 0x003F };
    uint32_t const ces[9] = { 0x295E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_194)
{
    // 0DA4 0061;	
    // (ඤ) SINHALA LETTER TAALUJA NAASIKYAYA	[295E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA4, 0x0061 };
    uint32_t const ces[9] = { 0x295E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_195)
{
    // 0DA4 0041;	
    // (ඤ) SINHALA LETTER TAALUJA NAASIKYAYA	[295E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA4, 0x0041 };
    uint32_t const ces[9] = { 0x295E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_196)
{
    // 0DA4 0062;	
    // (ඤ) SINHALA LETTER TAALUJA NAASIKYAYA	[295E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA4, 0x0062 };
    uint32_t const ces[9] = { 0x295E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_197)
{
    // 0DA5 0021;	
    // (ඥ) SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA	[295F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA5, 0x0021 };
    uint32_t const ces[9] = { 0x295F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_198)
{
    // 0DA5 003F;	
    // (ඥ) SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA	[295F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA5, 0x003F };
    uint32_t const ces[9] = { 0x295F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_199)
{
    // 0DA5 0061;	
    // (ඥ) SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA	[295F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA5, 0x0061 };
    uint32_t const ces[9] = { 0x295F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_200)
{
    // 0DA5 0041;	
    // (ඥ) SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA	[295F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA5, 0x0041 };
    uint32_t const ces[9] = { 0x295F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_201)
{
    // 0DA5 0062;	
    // (ඥ) SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA	[295F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA5, 0x0062 };
    uint32_t const ces[9] = { 0x295F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_202)
{
    // 0DA6 0021;	
    // (ඦ) SINHALA LETTER SANYAKA JAYANNA	[2960 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA6, 0x0021 };
    uint32_t const ces[9] = { 0x2960, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_203)
{
    // 0DA6 003F;	
    // (ඦ) SINHALA LETTER SANYAKA JAYANNA	[2960 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA6, 0x003F };
    uint32_t const ces[9] = { 0x2960, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_204)
{
    // 0DA6 0061;	
    // (ඦ) SINHALA LETTER SANYAKA JAYANNA	[2960 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA6, 0x0061 };
    uint32_t const ces[9] = { 0x2960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_205)
{
    // 0DA6 0041;	
    // (ඦ) SINHALA LETTER SANYAKA JAYANNA	[2960 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA6, 0x0041 };
    uint32_t const ces[9] = { 0x2960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_206)
{
    // 0DA6 0062;	
    // (ඦ) SINHALA LETTER SANYAKA JAYANNA	[2960 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA6, 0x0062 };
    uint32_t const ces[9] = { 0x2960, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_207)
{
    // 0DA7 0021;	
    // (ට) SINHALA LETTER ALPAPRAANA TTAYANNA	[2961 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA7, 0x0021 };
    uint32_t const ces[9] = { 0x2961, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_208)
{
    // 0DA7 003F;	
    // (ට) SINHALA LETTER ALPAPRAANA TTAYANNA	[2961 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA7, 0x003F };
    uint32_t const ces[9] = { 0x2961, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_209)
{
    // 0DA7 0061;	
    // (ට) SINHALA LETTER ALPAPRAANA TTAYANNA	[2961 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA7, 0x0061 };
    uint32_t const ces[9] = { 0x2961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_210)
{
    // 0DA7 0041;	
    // (ට) SINHALA LETTER ALPAPRAANA TTAYANNA	[2961 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA7, 0x0041 };
    uint32_t const ces[9] = { 0x2961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_211)
{
    // 0DA7 0062;	
    // (ට) SINHALA LETTER ALPAPRAANA TTAYANNA	[2961 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA7, 0x0062 };
    uint32_t const ces[9] = { 0x2961, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_212)
{
    // 0DA8 0021;	
    // (ඨ) SINHALA LETTER MAHAAPRAANA TTAYANNA	[2962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA8, 0x0021 };
    uint32_t const ces[9] = { 0x2962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_213)
{
    // 0DA8 003F;	
    // (ඨ) SINHALA LETTER MAHAAPRAANA TTAYANNA	[2962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA8, 0x003F };
    uint32_t const ces[9] = { 0x2962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_214)
{
    // 0DA8 0061;	
    // (ඨ) SINHALA LETTER MAHAAPRAANA TTAYANNA	[2962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA8, 0x0061 };
    uint32_t const ces[9] = { 0x2962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_215)
{
    // 0DA8 0041;	
    // (ඨ) SINHALA LETTER MAHAAPRAANA TTAYANNA	[2962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA8, 0x0041 };
    uint32_t const ces[9] = { 0x2962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_216)
{
    // 0DA8 0062;	
    // (ඨ) SINHALA LETTER MAHAAPRAANA TTAYANNA	[2962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA8, 0x0062 };
    uint32_t const ces[9] = { 0x2962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_217)
{
    // 0DA9 0021;	
    // (ඩ) SINHALA LETTER ALPAPRAANA DDAYANNA	[2963 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA9, 0x0021 };
    uint32_t const ces[9] = { 0x2963, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_218)
{
    // 0DA9 003F;	
    // (ඩ) SINHALA LETTER ALPAPRAANA DDAYANNA	[2963 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA9, 0x003F };
    uint32_t const ces[9] = { 0x2963, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_219)
{
    // 0DA9 0061;	
    // (ඩ) SINHALA LETTER ALPAPRAANA DDAYANNA	[2963 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA9, 0x0061 };
    uint32_t const ces[9] = { 0x2963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_220)
{
    // 0DA9 0041;	
    // (ඩ) SINHALA LETTER ALPAPRAANA DDAYANNA	[2963 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DA9, 0x0041 };
    uint32_t const ces[9] = { 0x2963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_221)
{
    // 0DA9 0062;	
    // (ඩ) SINHALA LETTER ALPAPRAANA DDAYANNA	[2963 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DA9, 0x0062 };
    uint32_t const ces[9] = { 0x2963, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_222)
{
    // 0DAA 0021;	
    // (ඪ) SINHALA LETTER MAHAAPRAANA DDAYANNA	[2964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAA, 0x0021 };
    uint32_t const ces[9] = { 0x2964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_223)
{
    // 0DAA 003F;	
    // (ඪ) SINHALA LETTER MAHAAPRAANA DDAYANNA	[2964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAA, 0x003F };
    uint32_t const ces[9] = { 0x2964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_224)
{
    // 0DAA 0061;	
    // (ඪ) SINHALA LETTER MAHAAPRAANA DDAYANNA	[2964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAA, 0x0061 };
    uint32_t const ces[9] = { 0x2964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_225)
{
    // 0DAA 0041;	
    // (ඪ) SINHALA LETTER MAHAAPRAANA DDAYANNA	[2964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAA, 0x0041 };
    uint32_t const ces[9] = { 0x2964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_226)
{
    // 0DAA 0062;	
    // (ඪ) SINHALA LETTER MAHAAPRAANA DDAYANNA	[2964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAA, 0x0062 };
    uint32_t const ces[9] = { 0x2964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_227)
{
    // 0DAB 0021;	
    // (ණ) SINHALA LETTER MUURDHAJA NAYANNA	[2965 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAB, 0x0021 };
    uint32_t const ces[9] = { 0x2965, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_228)
{
    // 0DAB 003F;	
    // (ණ) SINHALA LETTER MUURDHAJA NAYANNA	[2965 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAB, 0x003F };
    uint32_t const ces[9] = { 0x2965, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_229)
{
    // 0DAB 0061;	
    // (ණ) SINHALA LETTER MUURDHAJA NAYANNA	[2965 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAB, 0x0061 };
    uint32_t const ces[9] = { 0x2965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_230)
{
    // 0DAB 0041;	
    // (ණ) SINHALA LETTER MUURDHAJA NAYANNA	[2965 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAB, 0x0041 };
    uint32_t const ces[9] = { 0x2965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_231)
{
    // 0DAB 0062;	
    // (ණ) SINHALA LETTER MUURDHAJA NAYANNA	[2965 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAB, 0x0062 };
    uint32_t const ces[9] = { 0x2965, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_232)
{
    // 0DAC 0021;	
    // (ඬ) SINHALA LETTER SANYAKA DDAYANNA	[2966 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAC, 0x0021 };
    uint32_t const ces[9] = { 0x2966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_233)
{
    // 0DAC 003F;	
    // (ඬ) SINHALA LETTER SANYAKA DDAYANNA	[2966 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAC, 0x003F };
    uint32_t const ces[9] = { 0x2966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_234)
{
    // 0DAC 0061;	
    // (ඬ) SINHALA LETTER SANYAKA DDAYANNA	[2966 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAC, 0x0061 };
    uint32_t const ces[9] = { 0x2966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_235)
{
    // 0DAC 0041;	
    // (ඬ) SINHALA LETTER SANYAKA DDAYANNA	[2966 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAC, 0x0041 };
    uint32_t const ces[9] = { 0x2966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_236)
{
    // 0DAC 0062;	
    // (ඬ) SINHALA LETTER SANYAKA DDAYANNA	[2966 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAC, 0x0062 };
    uint32_t const ces[9] = { 0x2966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_237)
{
    // 0DAD 0021;	
    // (ත) SINHALA LETTER ALPAPRAANA TAYANNA	[2967 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAD, 0x0021 };
    uint32_t const ces[9] = { 0x2967, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_238)
{
    // 0DAD 003F;	
    // (ත) SINHALA LETTER ALPAPRAANA TAYANNA	[2967 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAD, 0x003F };
    uint32_t const ces[9] = { 0x2967, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_239)
{
    // 0DAD 0061;	
    // (ත) SINHALA LETTER ALPAPRAANA TAYANNA	[2967 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAD, 0x0061 };
    uint32_t const ces[9] = { 0x2967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_240)
{
    // 0DAD 0041;	
    // (ත) SINHALA LETTER ALPAPRAANA TAYANNA	[2967 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAD, 0x0041 };
    uint32_t const ces[9] = { 0x2967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_241)
{
    // 0DAD 0062;	
    // (ත) SINHALA LETTER ALPAPRAANA TAYANNA	[2967 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAD, 0x0062 };
    uint32_t const ces[9] = { 0x2967, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_242)
{
    // 0DAE 0021;	
    // (ථ) SINHALA LETTER MAHAAPRAANA TAYANNA	[2968 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAE, 0x0021 };
    uint32_t const ces[9] = { 0x2968, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_243)
{
    // 0DAE 003F;	
    // (ථ) SINHALA LETTER MAHAAPRAANA TAYANNA	[2968 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAE, 0x003F };
    uint32_t const ces[9] = { 0x2968, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_244)
{
    // 0DAE 0061;	
    // (ථ) SINHALA LETTER MAHAAPRAANA TAYANNA	[2968 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAE, 0x0061 };
    uint32_t const ces[9] = { 0x2968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_245)
{
    // 0DAE 0041;	
    // (ථ) SINHALA LETTER MAHAAPRAANA TAYANNA	[2968 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAE, 0x0041 };
    uint32_t const ces[9] = { 0x2968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_246)
{
    // 0DAE 0062;	
    // (ථ) SINHALA LETTER MAHAAPRAANA TAYANNA	[2968 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAE, 0x0062 };
    uint32_t const ces[9] = { 0x2968, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_247)
{
    // 0DAF 0021;	
    // (ද) SINHALA LETTER ALPAPRAANA DAYANNA	[2969 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAF, 0x0021 };
    uint32_t const ces[9] = { 0x2969, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_248)
{
    // 0DAF 003F;	
    // (ද) SINHALA LETTER ALPAPRAANA DAYANNA	[2969 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAF, 0x003F };
    uint32_t const ces[9] = { 0x2969, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_249)
{
    // 0DAF 0061;	
    // (ද) SINHALA LETTER ALPAPRAANA DAYANNA	[2969 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAF, 0x0061 };
    uint32_t const ces[9] = { 0x2969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_250)
{
    // 0DAF 0041;	
    // (ද) SINHALA LETTER ALPAPRAANA DAYANNA	[2969 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DAF, 0x0041 };
    uint32_t const ces[9] = { 0x2969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_251)
{
    // 0DAF 0062;	
    // (ද) SINHALA LETTER ALPAPRAANA DAYANNA	[2969 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DAF, 0x0062 };
    uint32_t const ces[9] = { 0x2969, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_252)
{
    // 0DB0 0021;	
    // (ධ) SINHALA LETTER MAHAAPRAANA DAYANNA	[296A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB0, 0x0021 };
    uint32_t const ces[9] = { 0x296A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_253)
{
    // 0DB0 003F;	
    // (ධ) SINHALA LETTER MAHAAPRAANA DAYANNA	[296A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB0, 0x003F };
    uint32_t const ces[9] = { 0x296A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_254)
{
    // 0DB0 0061;	
    // (ධ) SINHALA LETTER MAHAAPRAANA DAYANNA	[296A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB0, 0x0061 };
    uint32_t const ces[9] = { 0x296A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_255)
{
    // 0DB0 0041;	
    // (ධ) SINHALA LETTER MAHAAPRAANA DAYANNA	[296A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB0, 0x0041 };
    uint32_t const ces[9] = { 0x296A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_256)
{
    // 0DB0 0062;	
    // (ධ) SINHALA LETTER MAHAAPRAANA DAYANNA	[296A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB0, 0x0062 };
    uint32_t const ces[9] = { 0x296A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_257)
{
    // 0DB1 0021;	
    // (න) SINHALA LETTER DANTAJA NAYANNA	[296B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB1, 0x0021 };
    uint32_t const ces[9] = { 0x296B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_258)
{
    // 0DB1 003F;	
    // (න) SINHALA LETTER DANTAJA NAYANNA	[296B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB1, 0x003F };
    uint32_t const ces[9] = { 0x296B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_259)
{
    // 0DB1 0061;	
    // (න) SINHALA LETTER DANTAJA NAYANNA	[296B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB1, 0x0061 };
    uint32_t const ces[9] = { 0x296B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_260)
{
    // 0DB1 0041;	
    // (න) SINHALA LETTER DANTAJA NAYANNA	[296B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB1, 0x0041 };
    uint32_t const ces[9] = { 0x296B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_261)
{
    // 0DB1 0062;	
    // (න) SINHALA LETTER DANTAJA NAYANNA	[296B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB1, 0x0062 };
    uint32_t const ces[9] = { 0x296B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_262)
{
    // 0DB3 0021;	
    // (ඳ) SINHALA LETTER SANYAKA DAYANNA	[296C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB3, 0x0021 };
    uint32_t const ces[9] = { 0x296C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_263)
{
    // 0DB3 003F;	
    // (ඳ) SINHALA LETTER SANYAKA DAYANNA	[296C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB3, 0x003F };
    uint32_t const ces[9] = { 0x296C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_264)
{
    // 0DB3 0061;	
    // (ඳ) SINHALA LETTER SANYAKA DAYANNA	[296C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB3, 0x0061 };
    uint32_t const ces[9] = { 0x296C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_265)
{
    // 0DB3 0041;	
    // (ඳ) SINHALA LETTER SANYAKA DAYANNA	[296C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB3, 0x0041 };
    uint32_t const ces[9] = { 0x296C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_266)
{
    // 0DB3 0062;	
    // (ඳ) SINHALA LETTER SANYAKA DAYANNA	[296C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB3, 0x0062 };
    uint32_t const ces[9] = { 0x296C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_267)
{
    // 0DB4 0021;	
    // (ප) SINHALA LETTER ALPAPRAANA PAYANNA	[296D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB4, 0x0021 };
    uint32_t const ces[9] = { 0x296D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_268)
{
    // 0DB4 003F;	
    // (ප) SINHALA LETTER ALPAPRAANA PAYANNA	[296D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB4, 0x003F };
    uint32_t const ces[9] = { 0x296D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_269)
{
    // 0DB4 0061;	
    // (ප) SINHALA LETTER ALPAPRAANA PAYANNA	[296D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB4, 0x0061 };
    uint32_t const ces[9] = { 0x296D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_270)
{
    // 0DB4 0041;	
    // (ප) SINHALA LETTER ALPAPRAANA PAYANNA	[296D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB4, 0x0041 };
    uint32_t const ces[9] = { 0x296D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_271)
{
    // 0DB4 0062;	
    // (ප) SINHALA LETTER ALPAPRAANA PAYANNA	[296D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB4, 0x0062 };
    uint32_t const ces[9] = { 0x296D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_272)
{
    // 0DB5 0021;	
    // (ඵ) SINHALA LETTER MAHAAPRAANA PAYANNA	[296E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB5, 0x0021 };
    uint32_t const ces[9] = { 0x296E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_273)
{
    // 0DB5 003F;	
    // (ඵ) SINHALA LETTER MAHAAPRAANA PAYANNA	[296E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB5, 0x003F };
    uint32_t const ces[9] = { 0x296E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_274)
{
    // 0DB5 0061;	
    // (ඵ) SINHALA LETTER MAHAAPRAANA PAYANNA	[296E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB5, 0x0061 };
    uint32_t const ces[9] = { 0x296E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_275)
{
    // 0DB5 0041;	
    // (ඵ) SINHALA LETTER MAHAAPRAANA PAYANNA	[296E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB5, 0x0041 };
    uint32_t const ces[9] = { 0x296E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_276)
{
    // 0DB5 0062;	
    // (ඵ) SINHALA LETTER MAHAAPRAANA PAYANNA	[296E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB5, 0x0062 };
    uint32_t const ces[9] = { 0x296E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_277)
{
    // 0DB6 0021;	
    // (බ) SINHALA LETTER ALPAPRAANA BAYANNA	[296F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB6, 0x0021 };
    uint32_t const ces[9] = { 0x296F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_278)
{
    // 0DB6 003F;	
    // (බ) SINHALA LETTER ALPAPRAANA BAYANNA	[296F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB6, 0x003F };
    uint32_t const ces[9] = { 0x296F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_279)
{
    // 0DB6 0061;	
    // (බ) SINHALA LETTER ALPAPRAANA BAYANNA	[296F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB6, 0x0061 };
    uint32_t const ces[9] = { 0x296F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_280)
{
    // 0DB6 0041;	
    // (බ) SINHALA LETTER ALPAPRAANA BAYANNA	[296F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB6, 0x0041 };
    uint32_t const ces[9] = { 0x296F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_281)
{
    // 0DB6 0062;	
    // (බ) SINHALA LETTER ALPAPRAANA BAYANNA	[296F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB6, 0x0062 };
    uint32_t const ces[9] = { 0x296F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_282)
{
    // 0DB7 0021;	
    // (භ) SINHALA LETTER MAHAAPRAANA BAYANNA	[2970 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB7, 0x0021 };
    uint32_t const ces[9] = { 0x2970, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_283)
{
    // 0DB7 003F;	
    // (භ) SINHALA LETTER MAHAAPRAANA BAYANNA	[2970 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB7, 0x003F };
    uint32_t const ces[9] = { 0x2970, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_284)
{
    // 0DB7 0061;	
    // (භ) SINHALA LETTER MAHAAPRAANA BAYANNA	[2970 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB7, 0x0061 };
    uint32_t const ces[9] = { 0x2970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_285)
{
    // 0DB7 0041;	
    // (භ) SINHALA LETTER MAHAAPRAANA BAYANNA	[2970 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB7, 0x0041 };
    uint32_t const ces[9] = { 0x2970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_286)
{
    // 0DB7 0062;	
    // (භ) SINHALA LETTER MAHAAPRAANA BAYANNA	[2970 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB7, 0x0062 };
    uint32_t const ces[9] = { 0x2970, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_287)
{
    // 0DB8 0021;	
    // (ම) SINHALA LETTER MAYANNA	[2971 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB8, 0x0021 };
    uint32_t const ces[9] = { 0x2971, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_288)
{
    // 0DB8 003F;	
    // (ම) SINHALA LETTER MAYANNA	[2971 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB8, 0x003F };
    uint32_t const ces[9] = { 0x2971, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_289)
{
    // 0DB8 0061;	
    // (ම) SINHALA LETTER MAYANNA	[2971 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB8, 0x0061 };
    uint32_t const ces[9] = { 0x2971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_290)
{
    // 0DB8 0041;	
    // (ම) SINHALA LETTER MAYANNA	[2971 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB8, 0x0041 };
    uint32_t const ces[9] = { 0x2971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_291)
{
    // 0DB8 0062;	
    // (ම) SINHALA LETTER MAYANNA	[2971 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB8, 0x0062 };
    uint32_t const ces[9] = { 0x2971, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_292)
{
    // 0DB9 0021;	
    // (ඹ) SINHALA LETTER AMBA BAYANNA	[2972 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB9, 0x0021 };
    uint32_t const ces[9] = { 0x2972, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_293)
{
    // 0DB9 003F;	
    // (ඹ) SINHALA LETTER AMBA BAYANNA	[2972 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB9, 0x003F };
    uint32_t const ces[9] = { 0x2972, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_294)
{
    // 0DB9 0061;	
    // (ඹ) SINHALA LETTER AMBA BAYANNA	[2972 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB9, 0x0061 };
    uint32_t const ces[9] = { 0x2972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_295)
{
    // 0DB9 0041;	
    // (ඹ) SINHALA LETTER AMBA BAYANNA	[2972 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DB9, 0x0041 };
    uint32_t const ces[9] = { 0x2972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_296)
{
    // 0DB9 0062;	
    // (ඹ) SINHALA LETTER AMBA BAYANNA	[2972 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DB9, 0x0062 };
    uint32_t const ces[9] = { 0x2972, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_297)
{
    // 0DBA 0021;	
    // (ය) SINHALA LETTER YAYANNA	[2973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBA, 0x0021 };
    uint32_t const ces[9] = { 0x2973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_298)
{
    // 0DBA 003F;	
    // (ය) SINHALA LETTER YAYANNA	[2973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBA, 0x003F };
    uint32_t const ces[9] = { 0x2973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_299)
{
    // 0DBA 0061;	
    // (ය) SINHALA LETTER YAYANNA	[2973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBA, 0x0061 };
    uint32_t const ces[9] = { 0x2973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_300)
{
    // 0DBA 0041;	
    // (ය) SINHALA LETTER YAYANNA	[2973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DBA, 0x0041 };
    uint32_t const ces[9] = { 0x2973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_301)
{
    // 0DBA 0062;	
    // (ය) SINHALA LETTER YAYANNA	[2973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBA, 0x0062 };
    uint32_t const ces[9] = { 0x2973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_302)
{
    // 0DBB 0021;	
    // (ර) SINHALA LETTER RAYANNA	[2974 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBB, 0x0021 };
    uint32_t const ces[9] = { 0x2974, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_303)
{
    // 0DBB 003F;	
    // (ර) SINHALA LETTER RAYANNA	[2974 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBB, 0x003F };
    uint32_t const ces[9] = { 0x2974, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_304)
{
    // 0DBB 0061;	
    // (ර) SINHALA LETTER RAYANNA	[2974 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBB, 0x0061 };
    uint32_t const ces[9] = { 0x2974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_305)
{
    // 0DBB 0041;	
    // (ර) SINHALA LETTER RAYANNA	[2974 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DBB, 0x0041 };
    uint32_t const ces[9] = { 0x2974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_306)
{
    // 0DBB 0062;	
    // (ර) SINHALA LETTER RAYANNA	[2974 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBB, 0x0062 };
    uint32_t const ces[9] = { 0x2974, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_307)
{
    // 0DBD 0021;	
    // (ල) SINHALA LETTER DANTAJA LAYANNA	[2975 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBD, 0x0021 };
    uint32_t const ces[9] = { 0x2975, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_308)
{
    // 0DBD 003F;	
    // (ල) SINHALA LETTER DANTAJA LAYANNA	[2975 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBD, 0x003F };
    uint32_t const ces[9] = { 0x2975, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_309)
{
    // 0DBD 0061;	
    // (ල) SINHALA LETTER DANTAJA LAYANNA	[2975 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBD, 0x0061 };
    uint32_t const ces[9] = { 0x2975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_310)
{
    // 0DBD 0041;	
    // (ල) SINHALA LETTER DANTAJA LAYANNA	[2975 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DBD, 0x0041 };
    uint32_t const ces[9] = { 0x2975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_311)
{
    // 0DBD 0062;	
    // (ල) SINHALA LETTER DANTAJA LAYANNA	[2975 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DBD, 0x0062 };
    uint32_t const ces[9] = { 0x2975, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_312)
{
    // 0DC0 0021;	
    // (ව) SINHALA LETTER VAYANNA	[2976 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC0, 0x0021 };
    uint32_t const ces[9] = { 0x2976, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_313)
{
    // 0DC0 003F;	
    // (ව) SINHALA LETTER VAYANNA	[2976 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC0, 0x003F };
    uint32_t const ces[9] = { 0x2976, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_314)
{
    // 0DC0 0061;	
    // (ව) SINHALA LETTER VAYANNA	[2976 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC0, 0x0061 };
    uint32_t const ces[9] = { 0x2976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_315)
{
    // 0DC0 0041;	
    // (ව) SINHALA LETTER VAYANNA	[2976 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC0, 0x0041 };
    uint32_t const ces[9] = { 0x2976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_316)
{
    // 0DC0 0062;	
    // (ව) SINHALA LETTER VAYANNA	[2976 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC0, 0x0062 };
    uint32_t const ces[9] = { 0x2976, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_317)
{
    // 0DC1 0021;	
    // (ශ) SINHALA LETTER TAALUJA SAYANNA	[2977 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC1, 0x0021 };
    uint32_t const ces[9] = { 0x2977, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_318)
{
    // 0DC1 003F;	
    // (ශ) SINHALA LETTER TAALUJA SAYANNA	[2977 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC1, 0x003F };
    uint32_t const ces[9] = { 0x2977, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_319)
{
    // 0DC1 0061;	
    // (ශ) SINHALA LETTER TAALUJA SAYANNA	[2977 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC1, 0x0061 };
    uint32_t const ces[9] = { 0x2977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_320)
{
    // 0DC1 0041;	
    // (ශ) SINHALA LETTER TAALUJA SAYANNA	[2977 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC1, 0x0041 };
    uint32_t const ces[9] = { 0x2977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_321)
{
    // 0DC1 0062;	
    // (ශ) SINHALA LETTER TAALUJA SAYANNA	[2977 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC1, 0x0062 };
    uint32_t const ces[9] = { 0x2977, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_322)
{
    // 0DC2 0021;	
    // (ෂ) SINHALA LETTER MUURDHAJA SAYANNA	[2978 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC2, 0x0021 };
    uint32_t const ces[9] = { 0x2978, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_323)
{
    // 0DC2 003F;	
    // (ෂ) SINHALA LETTER MUURDHAJA SAYANNA	[2978 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC2, 0x003F };
    uint32_t const ces[9] = { 0x2978, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_324)
{
    // 0DC2 0061;	
    // (ෂ) SINHALA LETTER MUURDHAJA SAYANNA	[2978 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC2, 0x0061 };
    uint32_t const ces[9] = { 0x2978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_325)
{
    // 0DC2 0041;	
    // (ෂ) SINHALA LETTER MUURDHAJA SAYANNA	[2978 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC2, 0x0041 };
    uint32_t const ces[9] = { 0x2978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_326)
{
    // 0DC2 0062;	
    // (ෂ) SINHALA LETTER MUURDHAJA SAYANNA	[2978 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC2, 0x0062 };
    uint32_t const ces[9] = { 0x2978, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_327)
{
    // 0DC3 0021;	
    // (ස) SINHALA LETTER DANTAJA SAYANNA	[2979 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC3, 0x0021 };
    uint32_t const ces[9] = { 0x2979, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_328)
{
    // 0DC3 003F;	
    // (ස) SINHALA LETTER DANTAJA SAYANNA	[2979 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC3, 0x003F };
    uint32_t const ces[9] = { 0x2979, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_329)
{
    // 0DC3 0061;	
    // (ස) SINHALA LETTER DANTAJA SAYANNA	[2979 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC3, 0x0061 };
    uint32_t const ces[9] = { 0x2979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_330)
{
    // 0DC3 0041;	
    // (ස) SINHALA LETTER DANTAJA SAYANNA	[2979 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC3, 0x0041 };
    uint32_t const ces[9] = { 0x2979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_331)
{
    // 0DC3 0062;	
    // (ස) SINHALA LETTER DANTAJA SAYANNA	[2979 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC3, 0x0062 };
    uint32_t const ces[9] = { 0x2979, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_332)
{
    // 0DC4 0021;	
    // (හ) SINHALA LETTER HAYANNA	[297A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC4, 0x0021 };
    uint32_t const ces[9] = { 0x297A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_333)
{
    // 0DC4 003F;	
    // (හ) SINHALA LETTER HAYANNA	[297A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC4, 0x003F };
    uint32_t const ces[9] = { 0x297A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_334)
{
    // 0DC4 0061;	
    // (හ) SINHALA LETTER HAYANNA	[297A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC4, 0x0061 };
    uint32_t const ces[9] = { 0x297A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_335)
{
    // 0DC4 0041;	
    // (හ) SINHALA LETTER HAYANNA	[297A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC4, 0x0041 };
    uint32_t const ces[9] = { 0x297A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_336)
{
    // 0DC4 0062;	
    // (හ) SINHALA LETTER HAYANNA	[297A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC4, 0x0062 };
    uint32_t const ces[9] = { 0x297A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_337)
{
    // 0DC5 0021;	
    // (ළ) SINHALA LETTER MUURDHAJA LAYANNA	[297B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC5, 0x0021 };
    uint32_t const ces[9] = { 0x297B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_338)
{
    // 0DC5 003F;	
    // (ළ) SINHALA LETTER MUURDHAJA LAYANNA	[297B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC5, 0x003F };
    uint32_t const ces[9] = { 0x297B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_339)
{
    // 0DC5 0061;	
    // (ළ) SINHALA LETTER MUURDHAJA LAYANNA	[297B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC5, 0x0061 };
    uint32_t const ces[9] = { 0x297B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_340)
{
    // 0DC5 0041;	
    // (ළ) SINHALA LETTER MUURDHAJA LAYANNA	[297B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC5, 0x0041 };
    uint32_t const ces[9] = { 0x297B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_341)
{
    // 0DC5 0062;	
    // (ළ) SINHALA LETTER MUURDHAJA LAYANNA	[297B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC5, 0x0062 };
    uint32_t const ces[9] = { 0x297B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_342)
{
    // 0DC6 0021;	
    // (ෆ) SINHALA LETTER FAYANNA	[297C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC6, 0x0021 };
    uint32_t const ces[9] = { 0x297C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_343)
{
    // 0DC6 003F;	
    // (ෆ) SINHALA LETTER FAYANNA	[297C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC6, 0x003F };
    uint32_t const ces[9] = { 0x297C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_344)
{
    // 0DC6 0061;	
    // (ෆ) SINHALA LETTER FAYANNA	[297C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC6, 0x0061 };
    uint32_t const ces[9] = { 0x297C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_345)
{
    // 0DC6 0041;	
    // (ෆ) SINHALA LETTER FAYANNA	[297C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DC6, 0x0041 };
    uint32_t const ces[9] = { 0x297C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_346)
{
    // 0DC6 0062;	
    // (ෆ) SINHALA LETTER FAYANNA	[297C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DC6, 0x0062 };
    uint32_t const ces[9] = { 0x297C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_347)
{
    // 0DCF 0021;	
    // (ා) SINHALA VOWEL SIGN AELA-PILLA	[297D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCF, 0x0021 };
    uint32_t const ces[9] = { 0x297D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_348)
{
    // 0DCF 003F;	
    // (ා) SINHALA VOWEL SIGN AELA-PILLA	[297D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCF, 0x003F };
    uint32_t const ces[9] = { 0x297D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_349)
{
    // 0DCF 0061;	
    // (ා) SINHALA VOWEL SIGN AELA-PILLA	[297D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCF, 0x0061 };
    uint32_t const ces[9] = { 0x297D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_350)
{
    // 0DCF 0041;	
    // (ා) SINHALA VOWEL SIGN AELA-PILLA	[297D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DCF, 0x0041 };
    uint32_t const ces[9] = { 0x297D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_351)
{
    // 0DCF 0062;	
    // (ා) SINHALA VOWEL SIGN AELA-PILLA	[297D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCF, 0x0062 };
    uint32_t const ces[9] = { 0x297D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_352)
{
    // 0DD0 0021;	
    // (ැ) SINHALA VOWEL SIGN KETTI AEDA-PILLA	[297E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD0, 0x0021 };
    uint32_t const ces[9] = { 0x297E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_353)
{
    // 0DD0 003F;	
    // (ැ) SINHALA VOWEL SIGN KETTI AEDA-PILLA	[297E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD0, 0x003F };
    uint32_t const ces[9] = { 0x297E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_354)
{
    // 0DD0 0061;	
    // (ැ) SINHALA VOWEL SIGN KETTI AEDA-PILLA	[297E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD0, 0x0061 };
    uint32_t const ces[9] = { 0x297E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_355)
{
    // 0DD0 0041;	
    // (ැ) SINHALA VOWEL SIGN KETTI AEDA-PILLA	[297E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD0, 0x0041 };
    uint32_t const ces[9] = { 0x297E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_356)
{
    // 0DD0 0062;	
    // (ැ) SINHALA VOWEL SIGN KETTI AEDA-PILLA	[297E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD0, 0x0062 };
    uint32_t const ces[9] = { 0x297E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_357)
{
    // 0DD1 0021;	
    // (ෑ) SINHALA VOWEL SIGN DIGA AEDA-PILLA	[297F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD1, 0x0021 };
    uint32_t const ces[9] = { 0x297F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_358)
{
    // 0DD1 003F;	
    // (ෑ) SINHALA VOWEL SIGN DIGA AEDA-PILLA	[297F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD1, 0x003F };
    uint32_t const ces[9] = { 0x297F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_359)
{
    // 0DD1 0061;	
    // (ෑ) SINHALA VOWEL SIGN DIGA AEDA-PILLA	[297F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD1, 0x0061 };
    uint32_t const ces[9] = { 0x297F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_360)
{
    // 0DD1 0041;	
    // (ෑ) SINHALA VOWEL SIGN DIGA AEDA-PILLA	[297F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD1, 0x0041 };
    uint32_t const ces[9] = { 0x297F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_361)
{
    // 0DD1 0062;	
    // (ෑ) SINHALA VOWEL SIGN DIGA AEDA-PILLA	[297F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD1, 0x0062 };
    uint32_t const ces[9] = { 0x297F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_362)
{
    // 0DD2 0021;	
    // (ි) SINHALA VOWEL SIGN KETTI IS-PILLA	[2980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD2, 0x0021 };
    uint32_t const ces[9] = { 0x2980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_363)
{
    // 0DD2 003F;	
    // (ි) SINHALA VOWEL SIGN KETTI IS-PILLA	[2980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD2, 0x003F };
    uint32_t const ces[9] = { 0x2980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_364)
{
    // 0DD2 0061;	
    // (ි) SINHALA VOWEL SIGN KETTI IS-PILLA	[2980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD2, 0x0061 };
    uint32_t const ces[9] = { 0x2980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_365)
{
    // 0DD2 0041;	
    // (ි) SINHALA VOWEL SIGN KETTI IS-PILLA	[2980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD2, 0x0041 };
    uint32_t const ces[9] = { 0x2980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_366)
{
    // 0DD2 0062;	
    // (ි) SINHALA VOWEL SIGN KETTI IS-PILLA	[2980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD2, 0x0062 };
    uint32_t const ces[9] = { 0x2980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_367)
{
    // 0DD3 0021;	
    // (ී) SINHALA VOWEL SIGN DIGA IS-PILLA	[2981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD3, 0x0021 };
    uint32_t const ces[9] = { 0x2981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_368)
{
    // 0DD3 003F;	
    // (ී) SINHALA VOWEL SIGN DIGA IS-PILLA	[2981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD3, 0x003F };
    uint32_t const ces[9] = { 0x2981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_369)
{
    // 0DD3 0061;	
    // (ී) SINHALA VOWEL SIGN DIGA IS-PILLA	[2981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD3, 0x0061 };
    uint32_t const ces[9] = { 0x2981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_370)
{
    // 0DD3 0041;	
    // (ී) SINHALA VOWEL SIGN DIGA IS-PILLA	[2981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD3, 0x0041 };
    uint32_t const ces[9] = { 0x2981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_371)
{
    // 0DD3 0062;	
    // (ී) SINHALA VOWEL SIGN DIGA IS-PILLA	[2981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD3, 0x0062 };
    uint32_t const ces[9] = { 0x2981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_372)
{
    // 0DD4 0021;	
    // (ු) SINHALA VOWEL SIGN KETTI PAA-PILLA	[2982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD4, 0x0021 };
    uint32_t const ces[9] = { 0x2982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_373)
{
    // 0DD4 003F;	
    // (ු) SINHALA VOWEL SIGN KETTI PAA-PILLA	[2982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD4, 0x003F };
    uint32_t const ces[9] = { 0x2982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_374)
{
    // 0DD4 0061;	
    // (ු) SINHALA VOWEL SIGN KETTI PAA-PILLA	[2982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD4, 0x0061 };
    uint32_t const ces[9] = { 0x2982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_375)
{
    // 0DD4 0041;	
    // (ු) SINHALA VOWEL SIGN KETTI PAA-PILLA	[2982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD4, 0x0041 };
    uint32_t const ces[9] = { 0x2982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_376)
{
    // 0DD4 0062;	
    // (ු) SINHALA VOWEL SIGN KETTI PAA-PILLA	[2982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD4, 0x0062 };
    uint32_t const ces[9] = { 0x2982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_377)
{
    // 0DD6 0021;	
    // (ූ) SINHALA VOWEL SIGN DIGA PAA-PILLA	[2983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD6, 0x0021 };
    uint32_t const ces[9] = { 0x2983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_378)
{
    // 0DD6 003F;	
    // (ූ) SINHALA VOWEL SIGN DIGA PAA-PILLA	[2983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD6, 0x003F };
    uint32_t const ces[9] = { 0x2983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_379)
{
    // 0DD6 0061;	
    // (ූ) SINHALA VOWEL SIGN DIGA PAA-PILLA	[2983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD6, 0x0061 };
    uint32_t const ces[9] = { 0x2983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_380)
{
    // 0DD6 0041;	
    // (ූ) SINHALA VOWEL SIGN DIGA PAA-PILLA	[2983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD6, 0x0041 };
    uint32_t const ces[9] = { 0x2983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_381)
{
    // 0DD6 0062;	
    // (ූ) SINHALA VOWEL SIGN DIGA PAA-PILLA	[2983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD6, 0x0062 };
    uint32_t const ces[9] = { 0x2983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_382)
{
    // 0DD8 0021;	
    // (ෘ) SINHALA VOWEL SIGN GAETTA-PILLA	[2984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD8, 0x0021 };
    uint32_t const ces[9] = { 0x2984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_383)
{
    // 0DD8 003F;	
    // (ෘ) SINHALA VOWEL SIGN GAETTA-PILLA	[2984 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD8, 0x003F };
    uint32_t const ces[9] = { 0x2984, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_384)
{
    // 0DD8 0061;	
    // (ෘ) SINHALA VOWEL SIGN GAETTA-PILLA	[2984 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD8, 0x0061 };
    uint32_t const ces[9] = { 0x2984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_385)
{
    // 0DD8 0041;	
    // (ෘ) SINHALA VOWEL SIGN GAETTA-PILLA	[2984 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD8, 0x0041 };
    uint32_t const ces[9] = { 0x2984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_386)
{
    // 0DD8 0062;	
    // (ෘ) SINHALA VOWEL SIGN GAETTA-PILLA	[2984 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD8, 0x0062 };
    uint32_t const ces[9] = { 0x2984, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_387)
{
    // 0DF2 0021;	
    // (ෲ) SINHALA VOWEL SIGN DIGA GAETTA-PILLA	[2985 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF2, 0x0021 };
    uint32_t const ces[9] = { 0x2985, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_388)
{
    // 0DF2 003F;	
    // (ෲ) SINHALA VOWEL SIGN DIGA GAETTA-PILLA	[2985 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF2, 0x003F };
    uint32_t const ces[9] = { 0x2985, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_389)
{
    // 0DF2 0061;	
    // (ෲ) SINHALA VOWEL SIGN DIGA GAETTA-PILLA	[2985 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF2, 0x0061 };
    uint32_t const ces[9] = { 0x2985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_390)
{
    // 0DF2 0041;	
    // (ෲ) SINHALA VOWEL SIGN DIGA GAETTA-PILLA	[2985 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DF2, 0x0041 };
    uint32_t const ces[9] = { 0x2985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_391)
{
    // 0DF2 0062;	
    // (ෲ) SINHALA VOWEL SIGN DIGA GAETTA-PILLA	[2985 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF2, 0x0062 };
    uint32_t const ces[9] = { 0x2985, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_392)
{
    // 0DDF 0021;	
    // (ෟ) SINHALA VOWEL SIGN GAYANUKITTA	[2986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDF, 0x0021 };
    uint32_t const ces[9] = { 0x2986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_393)
{
    // 0DDF 003F;	
    // (ෟ) SINHALA VOWEL SIGN GAYANUKITTA	[2986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDF, 0x003F };
    uint32_t const ces[9] = { 0x2986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_394)
{
    // 0DDF 0061;	
    // (ෟ) SINHALA VOWEL SIGN GAYANUKITTA	[2986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDF, 0x0061 };
    uint32_t const ces[9] = { 0x2986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_395)
{
    // 0DDF 0041;	
    // (ෟ) SINHALA VOWEL SIGN GAYANUKITTA	[2986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDF, 0x0041 };
    uint32_t const ces[9] = { 0x2986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_396)
{
    // 0DDF 0062;	
    // (ෟ) SINHALA VOWEL SIGN GAYANUKITTA	[2986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDF, 0x0062 };
    uint32_t const ces[9] = { 0x2986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_397)
{
    // 0DF3 0021;	
    // (ෳ) SINHALA VOWEL SIGN DIGA GAYANUKITTA	[2987 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF3, 0x0021 };
    uint32_t const ces[9] = { 0x2987, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_398)
{
    // 0DF3 003F;	
    // (ෳ) SINHALA VOWEL SIGN DIGA GAYANUKITTA	[2987 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF3, 0x003F };
    uint32_t const ces[9] = { 0x2987, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_399)
{
    // 0DF3 0061;	
    // (ෳ) SINHALA VOWEL SIGN DIGA GAYANUKITTA	[2987 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF3, 0x0061 };
    uint32_t const ces[9] = { 0x2987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_400)
{
    // 0DF3 0041;	
    // (ෳ) SINHALA VOWEL SIGN DIGA GAYANUKITTA	[2987 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DF3, 0x0041 };
    uint32_t const ces[9] = { 0x2987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_401)
{
    // 0DF3 0062;	
    // (ෳ) SINHALA VOWEL SIGN DIGA GAYANUKITTA	[2987 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF3, 0x0062 };
    uint32_t const ces[9] = { 0x2987, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_402)
{
    // 0DD9 0021;	
    // (ෙ) SINHALA VOWEL SIGN KOMBUVA	[2988 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD9, 0x0021 };
    uint32_t const ces[9] = { 0x2988, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_403)
{
    // 0DD9 003F;	
    // (ෙ) SINHALA VOWEL SIGN KOMBUVA	[2988 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD9, 0x003F };
    uint32_t const ces[9] = { 0x2988, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_404)
{
    // 0DD9 0061;	
    // (ෙ) SINHALA VOWEL SIGN KOMBUVA	[2988 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD9, 0x0061 };
    uint32_t const ces[9] = { 0x2988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_405)
{
    // 0DD9 0041;	
    // (ෙ) SINHALA VOWEL SIGN KOMBUVA	[2988 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DD9, 0x0041 };
    uint32_t const ces[9] = { 0x2988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_406)
{
    // 0DD9 0062;	
    // (ෙ) SINHALA VOWEL SIGN KOMBUVA	[2988 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DD9, 0x0062 };
    uint32_t const ces[9] = { 0x2988, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_407)
{
    // 0DD9 0001 0DCF 0061;	
    // (ෙ'\u0001'ා) SINHALA VOWEL SIGN KOMBUVA, <START OF HEADING>, SINHALA VOWEL SIGN AELA-PILLA	[2988 297D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0001, 0x0DCF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x297D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_408)
{
    // 0DD9 0591 0DCF 0061;	
    // (ෙ֑ා) SINHALA VOWEL SIGN KOMBUVA, HEBREW ACCENT ETNAHTA, SINHALA VOWEL SIGN AELA-PILLA	[2988 297D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0591, 0x0DCF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x297D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_409)
{
    // 0DD9 1D165 0DCF 0061;	
    // (ෙ𝅥ා) SINHALA VOWEL SIGN KOMBUVA, MUSICAL SYMBOL COMBINING STEM, SINHALA VOWEL SIGN AELA-PILLA	[2988 297D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x1D165, 0x0DCF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x297D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_410)
{
    // 0DD9 0001 0DCF 0DCA 0061;	
    // (ෙ'\u0001'ා්) SINHALA VOWEL SIGN KOMBUVA, <START OF HEADING>, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[2988 297D 298E 1CAD | 0020 0020 0020 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x0001, 0x0DCF, 0x0DCA, 0x0061 };
    uint32_t const ces[15] = { 0x2988, 0x297D, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_411)
{
    // 0DD9 0591 0DCF 0DCA 0061;	
    // (ෙ֑ා්) SINHALA VOWEL SIGN KOMBUVA, HEBREW ACCENT ETNAHTA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[2988 297D 298E 1CAD | 0020 0020 0020 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x0591, 0x0DCF, 0x0DCA, 0x0061 };
    uint32_t const ces[15] = { 0x2988, 0x297D, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_412)
{
    // 0DD9 1D165 0DCF 0DCA 0061;	
    // (ෙ𝅥ා්) SINHALA VOWEL SIGN KOMBUVA, MUSICAL SYMBOL COMBINING STEM, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[2988 297D 298E 1CAD | 0020 0020 0020 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x1D165, 0x0DCF, 0x0DCA, 0x0061 };
    uint32_t const ces[15] = { 0x2988, 0x297D, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_413)
{
    // 0DD9 0001 0DDF 0061;	
    // (ෙ'\u0001'ෟ) SINHALA VOWEL SIGN KOMBUVA, <START OF HEADING>, SINHALA VOWEL SIGN GAYANUKITTA	[2988 2986 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0001, 0x0DDF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x2986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_414)
{
    // 0DD9 0591 0DDF 0061;	
    // (ෙ֑ෟ) SINHALA VOWEL SIGN KOMBUVA, HEBREW ACCENT ETNAHTA, SINHALA VOWEL SIGN GAYANUKITTA	[2988 2986 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0591, 0x0DDF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x2986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_415)
{
    // 0DD9 1D165 0DDF 0061;	
    // (ෙ𝅥ෟ) SINHALA VOWEL SIGN KOMBUVA, MUSICAL SYMBOL COMBINING STEM, SINHALA VOWEL SIGN GAYANUKITTA	[2988 2986 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x1D165, 0x0DDF, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x2986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_416)
{
    // 0DD9 0001 0DCA 0061;	
    // (ෙ'\u0001'්) SINHALA VOWEL SIGN KOMBUVA, <START OF HEADING>, SINHALA SIGN AL-LAKUNA	[2988 298E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0001, 0x0DCA, 0x0061 };
    uint32_t const ces[12] = { 0x2988, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_417)
{
    // 0DD9 0334 0DCA;	
    // (ෙ̴) SINHALA VOWEL SIGN KOMBUVA, COMBINING TILDE OVERLAY	[2989 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0334, 0x0DCA };
    uint32_t const ces[8] = { 0x2989, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_418)
{
    // 0DD9 0DCA 0334;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x0334 };
    uint32_t const ces[8] = { 0x2989, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_419)
{
    // 0DDA 0334;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDA, 0x0334 };
    uint32_t const ces[8] = { 0x2989, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_420)
{
    // 0DD9 0DCA 0021;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x0021 };
    uint32_t const ces[9] = { 0x2989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_421)
{
    // 0DDA 0021;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDA, 0x0021 };
    uint32_t const ces[9] = { 0x2989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_422)
{
    // 0DD9 0DCA 003F;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x003F };
    uint32_t const ces[9] = { 0x2989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_423)
{
    // 0DDA 003F;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDA, 0x003F };
    uint32_t const ces[9] = { 0x2989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_424)
{
    // 0DD9 0DCA 0061;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_425)
{
    // 0DDA 0061;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDA, 0x0061 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_426)
{
    // 0DD9 0591 0DCA 0061;	
    // (ේ֑) SINHALA VOWEL SIGN KOMBUVA, HEBREW ACCENT ETNAHTA, SINHALA SIGN AL-LAKUNA	[2989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0591, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_427)
{
    // 0DD9 1D165 0DCA 0061;	
    // (ේ𝅥) SINHALA VOWEL SIGN KOMBUVA, MUSICAL SYMBOL COMBINING STEM, SINHALA SIGN AL-LAKUNA	[2989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x1D165, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_428)
{
    // 0DD9 0DCA 0041;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x0041 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_429)
{
    // 0DDA 0041;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDA, 0x0041 };
    uint32_t const ces[9] = { 0x2989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_430)
{
    // 0DD9 0DCA 0062;	
    // (ේ) SINHALA VOWEL SIGN KOMBUVA, SINHALA SIGN AL-LAKUNA	[2989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCA, 0x0062 };
    uint32_t const ces[9] = { 0x2989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_431)
{
    // 0DDA 0062;	
    // (ේ) SINHALA VOWEL SIGN DIGA KOMBUVA	[2989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDA, 0x0062 };
    uint32_t const ces[9] = { 0x2989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_432)
{
    // 0DDB 0021;	
    // (ෛ) SINHALA VOWEL SIGN KOMBU DEKA	[298A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDB, 0x0021 };
    uint32_t const ces[9] = { 0x298A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_433)
{
    // 0DDB 003F;	
    // (ෛ) SINHALA VOWEL SIGN KOMBU DEKA	[298A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDB, 0x003F };
    uint32_t const ces[9] = { 0x298A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_434)
{
    // 0DDB 0061;	
    // (ෛ) SINHALA VOWEL SIGN KOMBU DEKA	[298A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDB, 0x0061 };
    uint32_t const ces[9] = { 0x298A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_435)
{
    // 0DDB 0041;	
    // (ෛ) SINHALA VOWEL SIGN KOMBU DEKA	[298A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDB, 0x0041 };
    uint32_t const ces[9] = { 0x298A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_436)
{
    // 0DDB 0062;	
    // (ෛ) SINHALA VOWEL SIGN KOMBU DEKA	[298A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDB, 0x0062 };
    uint32_t const ces[9] = { 0x298A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_437)
{
    // 0DD9 0DCF 0021;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA	[298B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCF, 0x0021 };
    uint32_t const ces[9] = { 0x298B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_438)
{
    // 0DDC 0021;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA	[298B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDC, 0x0021 };
    uint32_t const ces[9] = { 0x298B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_439)
{
    // 0DD9 0DCF 003F;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA	[298B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCF, 0x003F };
    uint32_t const ces[9] = { 0x298B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_440)
{
    // 0DDC 003F;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA	[298B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDC, 0x003F };
    uint32_t const ces[9] = { 0x298B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_441)
{
    // 0DD9 0DCF 0061;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA	[298B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCF, 0x0061 };
    uint32_t const ces[9] = { 0x298B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_442)
{
    // 0DDC 0061;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA	[298B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDC, 0x0061 };
    uint32_t const ces[9] = { 0x298B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_443)
{
    // 0DD9 0DCF 0041;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA	[298B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCF, 0x0041 };
    uint32_t const ces[9] = { 0x298B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_444)
{
    // 0DDC 0041;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA	[298B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDC, 0x0041 };
    uint32_t const ces[9] = { 0x298B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_445)
{
    // 0DD9 0DCF 0062;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA	[298B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DCF, 0x0062 };
    uint32_t const ces[9] = { 0x298B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_446)
{
    // 0DDC 0062;	
    // (ො) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA	[298B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDC, 0x0062 };
    uint32_t const ces[9] = { 0x298B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_447)
{
    // 0DD9 0DCF 0001 0DCA 0061;	
    // (ො'\u0001'්) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, <START OF HEADING>, SINHALA SIGN AL-LAKUNA	[298B 298E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x0DCF, 0x0001, 0x0DCA, 0x0061 };
    uint32_t const ces[12] = { 0x298B, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_448)
{
    // 0DDC 0001 0DCA 0061;	
    // (ො'\u0001'්) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, <START OF HEADING>, SINHALA SIGN AL-LAKUNA	[298B 298E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0DDC, 0x0001, 0x0DCA, 0x0061 };
    uint32_t const ces[12] = { 0x298B, 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_449)
{
    // 0DD9 0DCF 0334 0DCA;	
    // (ො̴) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, COMBINING TILDE OVERLAY	[298C | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0334, 0x0DCA };
    uint32_t const ces[8] = { 0x298C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_450)
{
    // 0DD9 0DCF 0DCA 0334;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C | 0020 004A | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x0334 };
    uint32_t const ces[8] = { 0x298C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_451)
{
    // 0DDC 0334 0DCA;	
    // (ො̴) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, COMBINING TILDE OVERLAY	[298C | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0334, 0x0DCA };
    uint32_t const ces[8] = { 0x298C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_452)
{
    // 0DDC 0DCA 0334;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x0334 };
    uint32_t const ces[8] = { 0x298C, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_453)
{
    // 0DD9 0DCF 0DCA 0021;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x0021 };
    uint32_t const ces[9] = { 0x298C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_454)
{
    // 0DDC 0DCA 0021;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x0021 };
    uint32_t const ces[9] = { 0x298C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_455)
{
    // 0DDD 0021;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA	[298C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDD, 0x0021 };
    uint32_t const ces[9] = { 0x298C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_456)
{
    // 0DD9 0DCF 0DCA 003F;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x003F };
    uint32_t const ces[9] = { 0x298C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_457)
{
    // 0DDC 0DCA 003F;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x003F };
    uint32_t const ces[9] = { 0x298C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_458)
{
    // 0DDD 003F;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA	[298C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDD, 0x003F };
    uint32_t const ces[9] = { 0x298C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_459)
{
    // 0DD9 0DCF 0DCA 0061;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_460)
{
    // 0DDC 0DCA 0061;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_461)
{
    // 0DDD 0061;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDD, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_462)
{
    // 0DD9 0DCF 0591 0DCA 0061;	
    // (ෝ֑) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, HEBREW ACCENT ETNAHTA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x0DCF, 0x0591, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_463)
{
    // 0DDC 0591 0DCA 0061;	
    // (ෝ֑) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, HEBREW ACCENT ETNAHTA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DDC, 0x0591, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_464)
{
    // 0DD9 0DCF 1D165 0DCA 0061;	
    // (ෝ𝅥) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, MUSICAL SYMBOL COMBINING STEM, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[5] = { 0x0DD9, 0x0DCF, 0x1D165, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_465)
{
    // 0DDC 1D165 0DCA 0061;	
    // (ෝ𝅥) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, MUSICAL SYMBOL COMBINING STEM, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DDC, 0x1D165, 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_466)
{
    // 0DD9 0DCF 0DCA 0041;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x0041 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_467)
{
    // 0DDC 0DCA 0041;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x0041 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_468)
{
    // 0DDD 0041;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA	[298C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDD, 0x0041 };
    uint32_t const ces[9] = { 0x298C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_469)
{
    // 0DD9 0DCF 0DCA 0062;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0DD9, 0x0DCF, 0x0DCA, 0x0062 };
    uint32_t const ces[9] = { 0x298C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_470)
{
    // 0DDC 0DCA 0062;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA, SINHALA SIGN AL-LAKUNA	[298C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DDC, 0x0DCA, 0x0062 };
    uint32_t const ces[9] = { 0x298C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_471)
{
    // 0DDD 0062;	
    // (ෝ) SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA	[298C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDD, 0x0062 };
    uint32_t const ces[9] = { 0x298C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_472)
{
    // 0DD9 0DDF 0021;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN GAYANUKITTA	[298D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DDF, 0x0021 };
    uint32_t const ces[9] = { 0x298D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_473)
{
    // 0DDE 0021;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA	[298D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDE, 0x0021 };
    uint32_t const ces[9] = { 0x298D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_474)
{
    // 0DD9 0DDF 003F;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN GAYANUKITTA	[298D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DDF, 0x003F };
    uint32_t const ces[9] = { 0x298D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_475)
{
    // 0DDE 003F;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA	[298D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDE, 0x003F };
    uint32_t const ces[9] = { 0x298D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_476)
{
    // 0DD9 0DDF 0061;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN GAYANUKITTA	[298D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DDF, 0x0061 };
    uint32_t const ces[9] = { 0x298D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_477)
{
    // 0DDE 0061;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA	[298D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDE, 0x0061 };
    uint32_t const ces[9] = { 0x298D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_478)
{
    // 0DD9 0DDF 0041;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN GAYANUKITTA	[298D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DDF, 0x0041 };
    uint32_t const ces[9] = { 0x298D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_479)
{
    // 0DDE 0041;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA	[298D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DDE, 0x0041 };
    uint32_t const ces[9] = { 0x298D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_480)
{
    // 0DD9 0DDF 0062;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA, SINHALA VOWEL SIGN GAYANUKITTA	[298D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0DD9, 0x0DDF, 0x0062 };
    uint32_t const ces[9] = { 0x298D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_481)
{
    // 0DDE 0062;	
    // (ෞ) SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA	[298D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DDE, 0x0062 };
    uint32_t const ces[9] = { 0x298D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_482)
{
    // 0334 0DCA;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0DCA };
    uint32_t const ces[8] = { 0x298E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_483)
{
    // 0DCA 0334;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCA, 0x0334 };
    uint32_t const ces[8] = { 0x298E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_484)
{
    // 0DCA 0021;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCA, 0x0021 };
    uint32_t const ces[9] = { 0x298E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_485)
{
    // 0DCA 003F;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCA, 0x003F };
    uint32_t const ces[9] = { 0x298E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_486)
{
    // 0DCA 0061;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCA, 0x0061 };
    uint32_t const ces[9] = { 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_487)
{
    // 0DCA 0041;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DCA, 0x0041 };
    uint32_t const ces[9] = { 0x298E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_488)
{
    // 0DCA 0062;	
    // (්) SINHALA SIGN AL-LAKUNA	[298E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DCA, 0x0062 };
    uint32_t const ces[9] = { 0x298E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_489)
{
    // AAF2 0021;	
    // (ꫲ) MEETEI MAYEK ANJI	[298F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF2, 0x0021 };
    uint32_t const ces[9] = { 0x298F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_490)
{
    // AAF2 003F;	
    // (ꫲ) MEETEI MAYEK ANJI	[298F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF2, 0x003F };
    uint32_t const ces[9] = { 0x298F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_491)
{
    // AAF2 0061;	
    // (ꫲ) MEETEI MAYEK ANJI	[298F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF2, 0x0061 };
    uint32_t const ces[9] = { 0x298F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_492)
{
    // AAF2 0041;	
    // (ꫲ) MEETEI MAYEK ANJI	[298F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF2, 0x0041 };
    uint32_t const ces[9] = { 0x298F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_493)
{
    // AAF2 0062;	
    // (ꫲ) MEETEI MAYEK ANJI	[298F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF2, 0x0062 };
    uint32_t const ces[9] = { 0x298F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_494)
{
    // ABC0 0021;	
    // (ꯀ) MEETEI MAYEK LETTER KOK	[2990 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC0, 0x0021 };
    uint32_t const ces[9] = { 0x2990, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_495)
{
    // ABC0 003F;	
    // (ꯀ) MEETEI MAYEK LETTER KOK	[2990 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC0, 0x003F };
    uint32_t const ces[9] = { 0x2990, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_496)
{
    // ABC0 0061;	
    // (ꯀ) MEETEI MAYEK LETTER KOK	[2990 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC0, 0x0061 };
    uint32_t const ces[9] = { 0x2990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_497)
{
    // ABC0 0041;	
    // (ꯀ) MEETEI MAYEK LETTER KOK	[2990 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC0, 0x0041 };
    uint32_t const ces[9] = { 0x2990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_498)
{
    // ABC0 0062;	
    // (ꯀ) MEETEI MAYEK LETTER KOK	[2990 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC0, 0x0062 };
    uint32_t const ces[9] = { 0x2990, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_172_499)
{
    // ABC1 0021;	
    // (ꯁ) MEETEI MAYEK LETTER SAM	[2991 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC1, 0x0021 };
    uint32_t const ces[9] = { 0x2991, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

